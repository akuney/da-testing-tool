<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='SCAAdvertiserActivity' path='/workbooks' revision='1.0' />
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='audits' inline='true' name='mysql.41716.536882881941' version='8.2'>
      <connection class='mysql' dbname='intent_media_production' odbc-native-protocol='yes' port='3306' server='production-slave-db-server-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;a.entity_id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;entities.name,&#13;&#10;&#9;a.user_id as &quot;User ID&quot;,&#13;&#10;&#9;users.email,&#13;&#10;&#9;(case when users.email like &apos;%intentmedia.com%&apos; then &apos;Internal&apos; else &apos;External&apos; end) as &quot;User_Type&quot;,&#13;&#10;&#9;a.Date,&#13;&#10;&#9;a.auditable_type as &quot;Auditable Type&quot;,&#13;&#10;&#9;a.audited_changes as &quot;Audited Changes&quot;&#13;&#10;from&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;entity_id,&#13;&#10;&#9;&#9;user_id,&#13;&#10;&#9;&#9;date(convert_tz(audits.created_at,&apos;UTC&apos;,&apos;America/New_York&apos;)) as Date,&#13;&#10;&#9;&#9;auditable_type,&#13;&#10;&#9;&#9;audited_changes&#13;&#10;&#9;from audits&#13;&#10;&#9;where date(convert_tz(created_at,&apos;UTC&apos;,&apos;America/New_York&apos;)) &gt;&gt;= (date(convert_tz(CURRENT_DATE(),&apos;UTC&apos;,&apos;America/New_York&apos;)) - interval 30 day)) as a&#13;&#10;left join users on a.user_id = users.id&#13;&#10;left join entities on a.entity_id = entities.id</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='Count (Audit)' datatype='integer' default-format='n#,##0;-#,##0' name='[Calculation_8330401153211979]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='count([Date])' scope-isolation='false' />
      </column>
      <column caption='Most Recent (Audit)' datatype='date' name='[Calculation_8950401153357592]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='max([Date])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[User ID]' role='dimension' type='ordinal'>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\audits.tde' schema='Extract' tablename='Extract' update-time='10/3/2014 7:00:21 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='978574' timestamp-start='2014-10-03 19:00:21.748000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='bulksheets' inline='true' name='mysql.41716.681430439814' version='8.2'>
      <connection class='mysql' dbname='intent_media_production' odbc-native-protocol='yes' port='3306' server='production-slave-db-server-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select &#13;&#10;&#9;bulk_sheet.Advertiser_ID,&#13;&#10;&#9;bulk_sheet.Date_Count,&#13;&#10;&#9;bulk_sheet.Most_Recent,&#13;&#10;&#9;entities.Advertiser_Name&#13;&#10;from &#13;&#10;&#9;(select &#13;&#10;&#9;&#9;advertiser_id as Advertiser_ID,&#13;&#10;&#9;&#9;count(date(convert_tz(created_at,&apos;UTC&apos;,&apos;America/New_York&apos;))) as Date_Count,&#13;&#10;&#9;&#9;max(date(convert_tz(created_at,&apos;UTC&apos;,&apos;America/New_York&apos;))) as Most_Recent,&#13;&#10;&#9;&#9;case when locate(&apos;:updated_intent_targets: &apos;,result_summary) &gt;&gt; 0 &#13;&#10;&#9;&#9;&#9;then substring_index(substring_index(result_summary,&apos;:updated_intent_targets: &apos;,-1),&apos;\n&apos;,1) &#13;&#10;&#9;&#9;&#9;else &apos;&apos; end as updated_intent_targets&#13;&#10;&#9;from bulksheet_imports&#13;&#10;&#9;where processing_state_type = &apos;COMPLETED&apos;&#13;&#10;&#9;group by advertiser_id) as bulk_sheet&#13;&#10;left join&#13;&#10;&#9;(select &#13;&#10;&#9;&#9;id as Advertiser_ID, &#13;&#10;&#9;&#9;name as Advertiser_Name &#13;&#10;&#9; from entities&#13;&#10;&#9; group by id) as entities&#13;&#10;on bulk_sheet.Advertiser_ID = entities.Advertiser_ID&#13;&#10;order by entities.Advertiser_Name</relation>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Advertiser_ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='In Last 30 Days (Bulksheet)' datatype='string' name='[Calculation_2420401092539390]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;month&apos;, [Most_Recent], NOW()) &gt; 1 THEN &quot;FALSE&quot; ELSE &quot;TRUE&quot; END' scope-isolation='false' />
      </column>
      <column caption='Count (Bulksheet)' datatype='integer' default-format='n#,##0;-#,##0' name='[Date_Count]' role='measure' type='quantitative'>
      </column>
      <column caption='Most_Recent (Bulksheet)' datatype='date' name='[Most_Recent]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\bulksheets.tde' schema='Extract' tablename='Extract' update-time='10/3/2014 7:02:49 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='149' timestamp-start='2014-10-03 19:02:49.150000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='logins' inline='true' name='vertica.41716.521386944441' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;u.id as &quot;User ID&quot;,&#13;&#10;&#9;email as Email,&#13;&#10;&#9;first_name as &quot;First Name&quot;,&#13;&#10;&#9;last_name as &quot;Last Name&quot;,&#13;&#10;&#9;login_count as &quot;Total Login Count&quot;,&#13;&#10;&#9;last_request_at as &quot;Last Requested At&quot;,&#13;&#10;&#9;current_login_at as &quot;Current Login At&quot;,&#13;&#10;&#9;last_login_at as &quot;Last Login At&quot;,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;(case when u.email like &apos;%intentmedia.com%&apos; then &apos;Internal&apos; else &apos;External&apos; end) as &quot;User Type&quot;&#13;&#10;from intent_media_production.users u&#13;&#10;left join intent_media_production.memberships m on m.user_id = u.id&#13;&#10;left join intent_media_production.entities e on e.id = m.entity_id&#13;&#10;where e.entity_type = &apos;AftAdvertiser&apos;&#13;&#10;and e.active = 1&#13;&#10;and m.active = 1</relation>
      </connection>
      <aliases enabled='yes' />
      <column caption='Logins within 30 Days' datatype='integer' name='[Calculation_1720318123720903]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Last Login At], TODAY()-1) &gt;= -30 THEN 1 ELSE 0 END' scope-isolation='false' />
      </column>
      <column caption='Second Most Recent Login' datatype='datetime' name='[Calculation_8930401091743449]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='max([Last Login At])' scope-isolation='false' />
      </column>
      <column caption='Most Recent Login' datatype='datetime' name='[Calculation_9190401091634474]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='max([Last Requested At])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[User ID]' role='dimension' type='ordinal'>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\users.tde' schema='Extract' tablename='Extract' update-time='2/19/2015 8:21:07 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='743' timestamp-start='2015-02-19 20:21:06.145000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='performance' inline='true' name='vertica.41716.488056666669' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;    entities.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;campaigns.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;        performance.&quot;Filtered Ad for Budget Count&quot;,&#13;&#10;        performance.&quot;Filtered Ad for Bid Count&quot;,&#13;&#10;        performance.&quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join &#13;&#10;                (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;                        sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget Count&quot;,&#13;&#10;                        sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;                        sum(acisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;&#13;&#10;&#9;&#9;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;&#9;&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by &#13;&#10;    entities.name, &#13;&#10;    entities.id,&#13;&#10;    entities.advertiser_category_type, &#13;&#10;    ad_groups.name, &#13;&#10;    campaigns.name, &#13;&#10;    acapra.date_in_et, &#13;&#10;    performance.&quot;Eligible Ad Calls&quot;, &#13;&#10;    performance.&quot;Non-Learning Impressions&quot;, &#13;&#10;    performance.&quot;Filtered Ad Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Budget Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Bid Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;    campaigns.precheck_eligibility_type&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-------------------------------------HOTEL-------------------------------&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;    entities.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;campaigns.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Budget Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Bid Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;            sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget Count&quot;,&#13;&#10;            sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;            sum(acisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;&#13;&#10;&#9;&#9;from intent_media_production.hotel_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by &#13;&#10;    entities.name, &#13;&#10;    entities.id,&#13;&#10;    entities.advertiser_category_type, &#13;&#10;    ad_groups.name, &#13;&#10;    campaigns.name, &#13;&#10;    acapra.date_in_et, &#13;&#10;    performance.&quot;Eligible Ad Calls&quot;, &#13;&#10;    performance.&quot;Non-Learning Impressions&quot;, &#13;&#10;    performance.&quot;Filtered Ad Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Budget Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Bid Count&quot;,&#13;&#10;    performance.&quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;    campaigns.precheck_eligibility_type &#13;&#10;    &#13;&#10;union&#13;&#10;&#13;&#10;&#13;&#10;--------------------------------------META---------------------------------------&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;    entities.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&apos;Meta&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;campaigns.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;sum(acapra.filtered_ad_count + acapra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;sum(acapra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;    cast(null as int) as &quot;Filtered Ad for Budget Count&quot;,&#13;&#10;    cast(null as int) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;    cast(null as int) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;cast(null as int) as &quot;Click Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;View Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Click Revenue&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by &#13;&#10;    entities.name, &#13;&#10;    entities.id,&#13;&#10;    entities.advertiser_category_type, &#13;&#10;    ad_groups.name, &#13;&#10;    campaigns.name, &#13;&#10;    acapra.date_in_et,&#13;&#10;    campaigns.precheck_eligibility_type</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='Filtered Ads for Bid %' datatype='real' default-format='p0.0%' name='[Calculation_0110318160133069]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Filtered Ad for Bid Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='CTR' datatype='real' default-format='p0.0%' name='[Calculation_0190318160338913]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Clicks])/SUM([Impressions])' scope-isolation='false' />
      </column>
      <column caption='Filtered for Budget' datatype='string' name='[Calculation_1370318161034735]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF SUM([Filtered Ad for Budget Count]) &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;&quot; END' scope-isolation='false' />
      </column>
      <column caption='Filtered Ads for Budget %' datatype='real' default-format='p0.0%' name='[Calculation_2600318160217409]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Filtered Ad for Budget Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_2800318160231337]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Filtered Ad for Click Blackout])/SUM([Eligible Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='Include Prechecks Data' datatype='string' name='[Calculation_3330814140104013]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_3400318120815249]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Impressions])/SUM([Eligible Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_4790318160416073]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
      </column>
      <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_5060318120943624]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Auction Position Sum])/SUM([Impressions])' scope-isolation='false' />
      </column>
      <column caption='Total Click Conversions' datatype='integer' name='[Calculation_5490407144722358]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Total(Sum([Click Conversions]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Pixel' datatype='string' name='[Calculation_5630401154754997]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_5490407144722358] &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;FALSE&quot; END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\aft_advertiser_activity__performance.tde' schema='Extract' tablename='Extract' update-time='2/19/2015 8:22:06 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2285957' timestamp-start='2015-02-19 20:22:06.117000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.308717' measure-ordering='alphabetic' measure-percentage='0.691283' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='mysql.41716.681430439814'>
      <column aggregation='Sum' datatype='integer' name='[Advertiser_ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Advertiser_Name]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[Advertiser_ID]' derivation='None' name='[none:Advertiser_ID:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Advertiser_Name]' derivation='None' name='[none:Advertiser_Name:nk]' pivot='key' type='nominal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='vertica.41716.488056666669'>
      <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='vertica.41716.521386944441'>
      <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
    </datasource-dependencies>
    <datasource-relationship source='vertica.41716.488056666669' target='mysql.41716.681430439814'>
      <column-mapping>
        <map key='[vertica.41716.488056666669].[none:Advertiser ID:ok]' value='[mysql.41716.681430439814].[none:Advertiser_ID:ok]' />
        <map key='[vertica.41716.488056666669].[none:Advertiser Name:nk]' value='[mysql.41716.681430439814].[none:Advertiser_Name:nk]' />
      </column-mapping>
    </datasource-relationship>
    <datasource-relationship source='vertica.41716.521386944441' target='vertica.41716.488056666669'>
      <column-mapping>
        <map key='[vertica.41716.521386944441].[none:Advertiser Name:nk]' value='[vertica.41716.488056666669].[none:Advertiser Name:nk]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <shared-views>
    <shared-view name='vertica.41716.488056666669'>
      <datasources>
        <datasource caption='performance' name='vertica.41716.488056666669' />
      </datasources>
      <datasource-dependencies datasource='vertica.41716.488056666669'>
        <column caption='Include Prechecks Data' datatype='string' name='[Calculation_3330814140104013]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Calculation_3330814140104013]' derivation='None' name='[none:Calculation_3330814140104013:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_3330814140104013:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='AfT Tracker'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SCA Tracker</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='vertica.41716.488056666669' />
            <datasource caption='bulksheets' name='mysql.41716.681430439814' />
            <datasource caption='audits' name='mysql.41716.536882881941' />
            <datasource caption='logins' name='vertica.41716.521386944441' />
          </datasources>
          <datasource-dependencies datasource='mysql.41716.536882881941'>
            <column datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column caption='Count (Audit)' datatype='integer' default-format='n#,##0;-#,##0' name='[Calculation_8330401153211979]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='count([Date])' scope-isolation='false' />
            </column>
            <column caption='Most Recent (Audit)' datatype='date' name='[Calculation_8950401153357592]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Date])' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_8330401153211979]' derivation='User' name='[usr:Calculation_8330401153211979:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_8950401153357592]' derivation='User' name='[usr:Calculation_8950401153357592:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='mysql.41716.681430439814'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser_ID]' role='dimension' type='ordinal'>
            </column>
            <column caption='In Last 30 Days (Bulksheet)' datatype='string' name='[Calculation_2420401092539390]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;month&apos;, [Most_Recent], NOW()) &gt; 1 THEN &quot;FALSE&quot; ELSE &quot;TRUE&quot; END' scope-isolation='false' />
            </column>
            <column caption='Count (Bulksheet)' datatype='integer' default-format='n#,##0;-#,##0' name='[Date_Count]' role='measure' type='quantitative'>
            </column>
            <column caption='Most_Recent (Bulksheet)' datatype='date' name='[Most_Recent]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Calculation_2420401092539390]' derivation='None' name='[none:Calculation_2420401092539390:nk]' pivot='key' type='nominal' />
            <column-instance column='[Most_Recent]' derivation='None' name='[none:Most_Recent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date_Count]' derivation='Sum' name='[sum:Date_Count:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Filtered Ads for Bid %' datatype='real' default-format='p0.0%' name='[Calculation_0110318160133069]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Bid Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CTR' datatype='real' default-format='p0.0%' name='[Calculation_0190318160338913]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column caption='Filtered for Budget' datatype='string' name='[Calculation_1370318161034735]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF SUM([Filtered Ad for Budget Count]) &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;&quot; END' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Budget %' datatype='real' default-format='p0.0%' name='[Calculation_2600318160217409]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Budget Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_2800318160231337]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Click Blackout])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_3330814140104013]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_3400318120815249]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Impressions])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_4790318160416073]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_5060318120943624]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Auction Position Sum])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column caption='Pixel' datatype='string' name='[Calculation_5630401154754997]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_5490407144722358] &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;FALSE&quot; END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Eligible Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_3330814140104013]' derivation='None' name='[none:Calculation_3330814140104013:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Eligible Ad Calls]' derivation='Sum' name='[sum:Eligible Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0110318160133069]' derivation='User' name='[usr:Calculation_0110318160133069:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0190318160338913]' derivation='User' name='[usr:Calculation_0190318160338913:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1370318161034735]' derivation='User' name='[usr:Calculation_1370318161034735:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2600318160217409]' derivation='User' name='[usr:Calculation_2600318160217409:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2800318160231337]' derivation='User' name='[usr:Calculation_2800318160231337:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3400318120815249]' derivation='User' name='[usr:Calculation_3400318120815249:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4790318160416073]' derivation='User' name='[usr:Calculation_4790318160416073:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5060318120943624]' derivation='User' name='[usr:Calculation_5060318120943624:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5630401154754997]' derivation='User' name='[usr:Calculation_5630401154754997:nk:3]' pivot='key' type='nominal'>
              <table-calc ordering-field='[vertica.41716.488056666669].[Advertiser Name]' ordering-type='Field' />
              <table-calc field='[vertica.41716.488056666669].[Calculation_5490407144722358]' ordering-field='[vertica.41716.488056666669].[Advertiser Name]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.521386944441'>
            <column caption='Logins within 30 Days' datatype='integer' name='[Calculation_1720318123720903]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Last Login At], TODAY()-1) &gt;= -30 THEN 1 ELSE 0 END' scope-isolation='false' />
            </column>
            <column caption='Second Most Recent Login' datatype='datetime' name='[Calculation_8930401091743449]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Last Login At])' scope-isolation='false' />
            </column>
            <column caption='Most Recent Login' datatype='datetime' name='[Calculation_9190401091634474]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Last Requested At])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Total Login Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[User Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[User Type]' derivation='None' name='[none:User Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1720318123720903]' derivation='Sum' name='[sum:Calculation_1720318123720903:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Login Count]' derivation='Sum' name='[sum:Total Login Count:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Total Login Count]' derivation='Sum' name='[sum:Total Login Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8930401091743449]' derivation='User' name='[usr:Calculation_8930401091743449:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_9190401091634474]' derivation='User' name='[usr:Calculation_9190401091634474:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41716.488056666669].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Eligible Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_3400318120815249:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_0110318160133069:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_2600318160217409:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_2800318160231337:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_0190318160338913:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_5060318120943624:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_4790318160416073:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Click Conversions:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41716.488056666669].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Eligible Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_3400318120815249:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0110318160133069:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2600318160217409:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2800318160231337:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0190318160338913:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_5060318120943624:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_4790318160416073:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Name:nk]'>
            <groupfilter function='level-members' level='[none:Advertiser Name:nk]' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Segment:nk]'>
            <groupfilter function='level-members' level='[none:Advertiser Segment:nk]' />
          </filter>
          <filter class='quantitative' column='[vertica.41716.488056666669].[none:Date:qk]' included-values='all'>
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter function='level-members' level='[none:Product Category Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[usr:Calculation_5630401154754997:nk:3]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:Calculation_5630401154754997:nk:3]' member='&quot;FALSE&quot;' />
              <groupfilter function='member' level='[usr:Calculation_5630401154754997:nk:3]' member='&quot;TRUE&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.41716.521386944441].[none:User Type:nk]'>
            <groupfilter function='member' level='[none:User Type:nk]' member='&quot;External&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41716.488056666669].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Date:qk]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Name:nk]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41716.488056666669].[usr:Calculation_5630401154754997:nk:3]</column>
            <column>[vertica.41716.521386944441].[none:User Type:nk]</column>
            <column>[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41716.488056666669].[:Measure Names]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.41716.488056666669].[:Measure Names]' value='36' />
            <format attr='width' field='[vertica.41716.521386944441].[usr:Calculation_8930401091743449:ok]' value='112' />
            <format attr='width' field='[vertica.41716.521386944441].[sum:Total Login Count:ok]' value='68' />
            <format attr='width' field='[vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk]' value='64' />
            <format attr='width' field='[vertica.41716.521386944441].[usr:Calculation_9190401091634474:ok]' value='112' />
            <format attr='width' field='[vertica.41716.488056666669].[none:Product Category Type:nk]' value='80' />
            <format attr='width' field='[mysql.41716.681430439814].[sum:Date_Count:ok]' value='68' />
            <format attr='width' field='[vertica.41716.488056666669].[none:Advertiser Name:nk]' value='148' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41716.488056666669].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='16' />
            <format attr='row-horiz-levels' value='16' />
            <format attr='col-levels' value='16' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41716.488056666669].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='aspect' value='1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / ([vertica.41716.488056666669].[none:Advertiser Segment:nk] / ([vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk] / ([vertica.41716.521386944441].[usr:Calculation_9190401091634474:ok] / ([vertica.41716.521386944441].[usr:Calculation_8930401091743449:ok] / ([vertica.41716.521386944441].[sum:Total Login Count:ok] / ([mysql.41716.681430439814].[none:Most_Recent:ok] / ([mysql.41716.681430439814].[none:Calculation_2420401092539390:nk] / ([mysql.41716.681430439814].[sum:Date_Count:ok] / ([mysql.41716.536882881941].[usr:Calculation_8950401153357592:ok] / ([mysql.41716.536882881941].[usr:Calculation_8330401153211979:ok] / [vertica.41716.488056666669].[usr:Calculation_5630401154754997:nk:3]))))))))))))</rows>
        <cols>[vertica.41716.488056666669].[:Measure Names]</cols>
        <join-lod-include-overrides>
          <column>[mysql.41716.536882881941].[Advertiser ID]</column>
          <column>[mysql.41716.681430439814].[Advertiser_ID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Audits'>
      <table>
        <view>
          <datasources>
            <datasource caption='audits' name='mysql.41716.536882881941' />
            <datasource caption='performance' name='vertica.41716.488056666669' />
          </datasources>
          <datasource-dependencies datasource='mysql.41716.536882881941'>
            <column caption='Count (Audit)' datatype='integer' default-format='n#,##0;-#,##0' name='[Calculation_8330401153211979]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='count([Date])' scope-isolation='false' />
            </column>
            <column caption='Most Recent (Audit)' datatype='date' name='[Calculation_8950401153357592]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Date])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[User_Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[User_Type]' derivation='None' name='[none:User_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8330401153211979]' derivation='User' name='[usr:Calculation_8330401153211979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8950401153357592]' derivation='User' name='[usr:Calculation_8950401153357592:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[mysql.41716.536882881941].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[mysql.41716.536882881941].[usr:Calculation_8330401153211979:qk]&quot;' user:op='manual' />
          </filter>
          <filter class='categorical' column='[mysql.41716.536882881941].[none:User_Type:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:User_Type:nk]' member='&quot;External&quot;' />
              <groupfilter function='member' level='[none:User_Type:nk]' member='&quot;Internal&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Name:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Advertiser Name:nk]' to='&quot;Westin Hotels&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter from='&quot;Flights&quot;' function='range' level='[none:Product Category Type:nk]' to='&quot;Meta&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[mysql.41716.536882881941].[none:User_Type:nk]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Name:nk]</column>
            <column>[mysql.41716.536882881941].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[mysql.41716.536882881941].[:Measure Names]' value='91' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[mysql.41716.536882881941].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / [mysql.41716.536882881941].[usr:Calculation_8950401153357592:ok])))</rows>
        <cols>[mysql.41716.536882881941].[:Measure Names]</cols>
        <join-lod-include-overrides>
          <column>[vertica.41716.488056666669].[Advertiser ID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Audits - External'>
      <table>
        <view>
          <datasources>
            <datasource caption='audits' name='mysql.41716.536882881941' />
            <datasource caption='performance' name='vertica.41716.488056666669' />
          </datasources>
          <datasource-dependencies datasource='mysql.41716.536882881941'>
            <column caption='Count (Audit)' datatype='integer' default-format='n#,##0;-#,##0' name='[Calculation_8330401153211979]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='count([Date])' scope-isolation='false' />
            </column>
            <column caption='Most Recent (Audit)' datatype='date' name='[Calculation_8950401153357592]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Date])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[User_Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[User_Type]' derivation='None' name='[none:User_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8330401153211979]' derivation='User' name='[usr:Calculation_8330401153211979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8950401153357592]' derivation='User' name='[usr:Calculation_8950401153357592:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[mysql.41716.536882881941].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[mysql.41716.536882881941].[usr:Calculation_8330401153211979:qk]&quot;' user:op='manual' />
          </filter>
          <filter class='categorical' column='[mysql.41716.536882881941].[none:User_Type:nk]'>
            <groupfilter function='member' level='[none:User_Type:nk]' member='&quot;External&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Name:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Advertiser Name:nk]' to='&quot;Westin Hotels&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter from='&quot;Flights&quot;' function='range' level='[none:Product Category Type:nk]' to='&quot;Meta&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[mysql.41716.536882881941].[none:User_Type:nk]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Name:nk]</column>
            <column>[mysql.41716.536882881941].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[mysql.41716.536882881941].[:Measure Names]' value='91' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[mysql.41716.536882881941].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / [mysql.41716.536882881941].[usr:Calculation_8950401153357592:ok])))</rows>
        <cols>[mysql.41716.536882881941].[:Measure Names]</cols>
        <join-lod-include-overrides>
          <column>[vertica.41716.488056666669].[Advertiser ID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Audits - Internal'>
      <table>
        <view>
          <datasources>
            <datasource caption='audits' name='mysql.41716.536882881941' />
            <datasource caption='performance' name='vertica.41716.488056666669' />
          </datasources>
          <datasource-dependencies datasource='mysql.41716.536882881941'>
            <column caption='Count (Audit)' datatype='integer' default-format='n#,##0;-#,##0' name='[Calculation_8330401153211979]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='count([Date])' scope-isolation='false' />
            </column>
            <column caption='Most Recent (Audit)' datatype='date' name='[Calculation_8950401153357592]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Date])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[User_Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[User_Type]' derivation='None' name='[none:User_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8330401153211979]' derivation='User' name='[usr:Calculation_8330401153211979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8950401153357592]' derivation='User' name='[usr:Calculation_8950401153357592:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[mysql.41716.536882881941].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[mysql.41716.536882881941].[usr:Calculation_8330401153211979:qk]&quot;' user:op='manual' />
          </filter>
          <filter class='categorical' column='[mysql.41716.536882881941].[none:User_Type:nk]'>
            <groupfilter function='member' level='[none:User_Type:nk]' member='&quot;Internal&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Name:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Advertiser Name:nk]' to='&quot;Westin Hotels&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter from='&quot;Flights&quot;' function='range' level='[none:Product Category Type:nk]' to='&quot;Meta&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[mysql.41716.536882881941].[none:User_Type:nk]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Name:nk]</column>
            <column>[mysql.41716.536882881941].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[mysql.41716.536882881941].[:Measure Names]' value='91' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[mysql.41716.536882881941].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / [mysql.41716.536882881941].[usr:Calculation_8950401153357592:ok])))</rows>
        <cols>[mysql.41716.536882881941].[:Measure Names]</cols>
        <join-lod-include-overrides>
          <column>[vertica.41716.488056666669].[Advertiser ID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Bulksheets'>
      <table>
        <view>
          <datasources>
            <datasource caption='bulksheets' name='mysql.41716.681430439814' />
            <datasource caption='performance' name='vertica.41716.488056666669' />
          </datasources>
          <datasource-dependencies datasource='mysql.41716.681430439814'>
            <column caption='In Last 30 Days (Bulksheet)' datatype='string' name='[Calculation_2420401092539390]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;month&apos;, [Most_Recent], NOW()) &gt; 1 THEN &quot;FALSE&quot; ELSE &quot;TRUE&quot; END' scope-isolation='false' />
            </column>
            <column caption='Count (Bulksheet)' datatype='integer' default-format='n#,##0;-#,##0' name='[Date_Count]' role='measure' type='quantitative'>
            </column>
            <column caption='Most_Recent (Bulksheet)' datatype='date' name='[Most_Recent]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Calculation_2420401092539390]' derivation='None' name='[none:Calculation_2420401092539390:nk]' pivot='key' type='nominal' />
            <column-instance column='[Most_Recent]' derivation='None' name='[none:Most_Recent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date_Count]' derivation='Sum' name='[sum:Date_Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[mysql.41716.681430439814].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[mysql.41716.681430439814].[sum:Date_Count:qk]&quot;' user:op='manual' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Name:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Advertiser Name:nk]' to='&quot;Westin Hotels&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter from='&quot;Flights&quot;' function='range' level='[none:Product Category Type:nk]' to='&quot;Meta&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[mysql.41716.681430439814].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Name:nk]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[mysql.41716.681430439814].[:Measure Names]' value='86' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[mysql.41716.681430439814].[none:Calculation_2420401092539390:nk]' value='92' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[mysql.41716.681430439814].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / ([mysql.41716.681430439814].[none:Most_Recent:ok] / [mysql.41716.681430439814].[none:Calculation_2420401092539390:nk]))))</rows>
        <cols>[mysql.41716.681430439814].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Login'>
      <table>
        <view>
          <datasources>
            <datasource caption='logins' name='vertica.41716.521386944441' />
            <datasource caption='performance' name='vertica.41716.488056666669' />
          </datasources>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.521386944441'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Second Most Recent Login' datatype='datetime' name='[Calculation_8930401091743449]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Last Login At])' scope-isolation='false' />
            </column>
            <column caption='Most Recent Login' datatype='datetime' name='[Calculation_9190401091634474]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='max([Last Requested At])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Total Login Count]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Login Count]' derivation='Sum' name='[sum:Total Login Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8930401091743449]' derivation='User' name='[usr:Calculation_8930401091743449:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_9190401091634474]' derivation='User' name='[usr:Calculation_9190401091634474:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Advertiser Segment:nk]'>
            <groupfilter from='&quot;Domestic Airline&quot;' function='range' level='[none:Advertiser Segment:nk]' to='&quot;Tier 2&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.488056666669].[none:Product Category Type:nk]'>
            <groupfilter from='&quot;Flights&quot;' function='range' level='[none:Product Category Type:nk]' to='&quot;Meta&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41716.521386944441].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;' user:op='manual' />
          </filter>
          <slices>
            <column>[vertica.41716.521386944441].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41716.488056666669].[none:Product Category Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41716.521386944441].[:Measure Names]' value='105' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41716.521386944441].[usr:Calculation_8930401091743449:ok]' value='148' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41716.521386944441].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.521386944441].[none:Advertiser Name:nk] / ([vertica.41716.488056666669].[none:Advertiser Segment:nk] / ([vertica.41716.521386944441].[usr:Calculation_9190401091634474:ok] / [vertica.41716.521386944441].[usr:Calculation_8930401091743449:ok])))))</rows>
        <cols>[vertica.41716.521386944441].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Performance'>
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='vertica.41716.488056666669' />
            <datasource caption='logins' name='vertica.41716.521386944441' />
          </datasources>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Filtered Ads for Bid %' datatype='real' default-format='p0.0%' name='[Calculation_0110318160133069]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Bid Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CTR' datatype='real' default-format='p0.0%' name='[Calculation_0190318160338913]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column caption='Filtered for Budget' datatype='string' name='[Calculation_1370318161034735]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF SUM([Filtered Ad for Budget Count]) &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;&quot; END' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Budget %' datatype='real' default-format='p0.0%' name='[Calculation_2600318160217409]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Budget Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_2800318160231337]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Click Blackout])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_3330814140104013]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_3400318120815249]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Impressions])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_4790318160416073]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_5060318120943624]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Auction Position Sum])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Eligible Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_3330814140104013]' derivation='None' name='[none:Calculation_3330814140104013:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Eligible Ad Calls]' derivation='Sum' name='[sum:Eligible Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0110318160133069]' derivation='User' name='[usr:Calculation_0110318160133069:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0190318160338913]' derivation='User' name='[usr:Calculation_0190318160338913:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1370318161034735]' derivation='User' name='[usr:Calculation_1370318161034735:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2600318160217409]' derivation='User' name='[usr:Calculation_2600318160217409:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2800318160231337]' derivation='User' name='[usr:Calculation_2800318160231337:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3400318120815249]' derivation='User' name='[usr:Calculation_3400318120815249:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4790318160416073]' derivation='User' name='[usr:Calculation_4790318160416073:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5060318120943624]' derivation='User' name='[usr:Calculation_5060318120943624:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.521386944441'>
            <column caption='Logins within 30 Days' datatype='integer' name='[Calculation_1720318123720903]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Last Login At], TODAY()-1) &gt;= -30 THEN 1 ELSE 0 END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Total Login Count]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1720318123720903]' derivation='Sum' name='[sum:Calculation_1720318123720903:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Login Count]' derivation='Sum' name='[sum:Total Login Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41716.488056666669].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Eligible Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_3400318120815249:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_0110318160133069:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_2600318160217409:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_2800318160231337:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_0190318160338913:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_5060318120943624:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[usr:Calculation_4790318160416073:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.488056666669].[sum:Click Conversions:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41716.488056666669].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Eligible Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_3400318120815249:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0110318160133069:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2600318160217409:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2800318160231337:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0190318160338913:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_5060318120943624:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_4790318160416073:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41716.488056666669].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.41716.488056666669].[:Measure Names]' value='36' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41716.488056666669].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='16' />
            <format attr='row-horiz-levels' value='16' />
            <format attr='col-levels' value='16' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41716.488056666669].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='aspect' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / ([vertica.41716.488056666669].[none:Advertiser Segment:nk] / [vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk]))))</rows>
        <cols>[vertica.41716.488056666669].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='vertica.41716.488056666669' />
            <datasource caption='logins' name='vertica.41716.521386944441' />
          </datasources>
          <datasource-dependencies datasource='vertica.41716.488056666669'>
            <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Filtered Ads for Bid %' datatype='real' default-format='p0.0%' name='[Calculation_0110318160133069]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Bid Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CTR' datatype='real' default-format='p0.0%' name='[Calculation_0190318160338913]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column caption='Filtered for Budget' datatype='string' name='[Calculation_1370318161034735]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF SUM([Filtered Ad for Budget Count]) &gt; 0 THEN &quot;TRUE&quot; ELSE &quot;&quot; END' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Budget %' datatype='real' default-format='p0.0%' name='[Calculation_2600318160217409]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Budget Count])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_2800318160231337]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Filtered Ad for Click Blackout])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_3330814140104013]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_3400318120815249]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Impressions])/SUM([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_4790318160416073]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_5060318120943624]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Auction Position Sum])/SUM([Impressions])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Eligible Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser ID]' derivation='None' name='[none:Advertiser ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_3330814140104013]' derivation='None' name='[none:Calculation_3330814140104013:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Eligible Ad Calls]' derivation='Sum' name='[sum:Eligible Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0110318160133069]' derivation='User' name='[usr:Calculation_0110318160133069:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0190318160338913]' derivation='User' name='[usr:Calculation_0190318160338913:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1370318161034735]' derivation='User' name='[usr:Calculation_1370318161034735:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2600318160217409]' derivation='User' name='[usr:Calculation_2600318160217409:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2800318160231337]' derivation='User' name='[usr:Calculation_2800318160231337:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3400318120815249]' derivation='User' name='[usr:Calculation_3400318120815249:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4790318160416073]' derivation='User' name='[usr:Calculation_4790318160416073:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5060318120943624]' derivation='User' name='[usr:Calculation_5060318120943624:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41716.521386944441'>
            <column caption='Logins within 30 Days' datatype='integer' name='[Calculation_1720318123720903]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Last Login At], TODAY()-1) &gt;= -30 THEN 1 ELSE 0 END' scope-isolation='false' />
            </column>
            <column datatype='datetime' name='[Last Requested At]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Total Login Count]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Last Requested At]' derivation='None' name='[none:Last Requested At:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1720318123720903]' derivation='Sum' name='[sum:Calculation_1720318123720903:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Login Count]' derivation='Sum' name='[sum:Total Login Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41716.488056666669].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41716.488056666669].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Eligible Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_3400318120815249:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0110318160133069:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2600318160217409:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_2800318160231337:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_0190318160338913:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_5060318120943624:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.488056666669].[usr:Calculation_4790318160416073:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Calculation_1720318123720903:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41716.521386944441].[sum:Total Login Count:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41716.488056666669].[:Measure Names]</column>
            <column>[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.41716.488056666669].[:Measure Names]' value='36' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41716.488056666669].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='16' />
            <format attr='row-horiz-levels' value='16' />
            <format attr='col-levels' value='16' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41716.488056666669].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='aspect' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.488056666669].[none:Advertiser ID:ok] / ([vertica.41716.488056666669].[none:Advertiser Name:nk] / ([vertica.41716.488056666669].[none:Advertiser Segment:nk] / ([vertica.41716.488056666669].[none:Product Category Type:nk] / ([vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk] / [vertica.41716.521386944441].[none:Last Requested At:ok])))))</rows>
        <cols>[vertica.41716.488056666669].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='logins' name='vertica.41716.521386944441' />
          </datasources>
          <datasource-dependencies datasource='vertica.41716.521386944441'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[First Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Last Name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[First Name]' derivation='None' name='[none:First Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Last Name]' derivation='None' name='[none:Last Name:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41716.521386944441].[none:Advertiser Name:nk] / ([vertica.41716.521386944441].[none:First Name:nk] / [vertica.41716.521386944441].[none:Last Name:nk]))</rows>
        <cols></cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Comparison Sheet'>
      <style>
      </style>
      <size maxheight='1500' maxwidth='2400' minheight='1500' minwidth='2400' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='93542' x='6458' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='93375' x='6458' y='0'>
              <zone h='100000' id='1' name='AfT Tracker' show-title='true' w='93375' x='6458' y='0'>
              </zone>
            </zone>
          </zone>
          <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='6458' x='0' y='0'>
            <zone h='4668' id='8' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Date:qk]' type='filter' w='6458' x='0' y='0'>
            </zone>
            <zone h='6734' id='10' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Product Category Type:nk]' type='filter' w='6458' x='0' y='4668'>
            </zone>
            <zone h='10334' id='9' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Advertiser Segment:nk]' type='filter' w='6458' x='0' y='11402'>
            </zone>
            <zone h='3467' id='6' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Advertiser Name:nk]' type='filter' w='6458' x='0' y='21736'>
            </zone>
            <zone h='534' id='7' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Calculation_5630401154754997:nk]' type='filter' w='6458' x='0' y='25203'>
            </zone>
            <zone h='5534' id='11' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]' type='filter' w='6458' x='0' y='25737'>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Performance'>
      <cards>
        <edge name='left'>
          <strip size='234'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.681430439814].[yr:Date:ok]</field>
          <field>[vertica.41716.488056666669].[:Measure Names]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41716.488056666669].[none:Calculation_3330814140104013:nk]</field>
          <field>[vertica.41716.488056666669].[none:Calculation_5630401154754997:nk]</field>
          <field>[vertica.41716.488056666669].[none:Precheck Type:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
          <field>[vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk]</field>
          <field>[vertica.41716.521386944441].[yr:Current Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Requested At:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Login'>
      <cards>
        <edge name='left'>
          <strip size='159'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
          <field>[vertica.41716.521386944441].[:Measure Names]</field>
          <field>[vertica.41716.521386944441].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.521386944441].[none:Last Requested At:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Bulksheets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.681430439814].[none:Calculation_2420401092539390:nk]</field>
          <field>[mysql.41716.681430439814].[yr:Most_Recent:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Audits'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.536882881941].[none:Advertiser ID:ok]</field>
          <field>[mysql.41716.536882881941].[none:Advertiser Name:nk]</field>
          <field>[mysql.41716.536882881941].[none:User_Type:nk]</field>
          <field>[mysql.41716.536882881941].[yr:Date:ok]</field>
          <field>[mysql.41716.681430439814].[yr:Most_Recent:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Audits - External'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.536882881941].[none:Advertiser ID:ok]</field>
          <field>[mysql.41716.536882881941].[none:Advertiser Name:nk]</field>
          <field>[mysql.41716.536882881941].[none:User_Type:nk]</field>
          <field>[mysql.41716.536882881941].[yr:Date:ok]</field>
          <field>[mysql.41716.681430439814].[yr:Most_Recent:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Audits - Internal'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.536882881941].[none:Advertiser ID:ok]</field>
          <field>[mysql.41716.536882881941].[none:Advertiser Name:nk]</field>
          <field>[mysql.41716.536882881941].[none:User_Type:nk]</field>
          <field>[mysql.41716.536882881941].[yr:Date:ok]</field>
          <field>[mysql.41716.681430439814].[yr:Most_Recent:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='AfT Tracker'>
      <cards>
        <edge name='left'>
          <strip size='208'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41716.488056666669].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.41716.488056666669].[none:Product Category Type:nk]' type='filter' />
            <card param='[vertica.41716.488056666669].[none:Advertiser Segment:nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.41716.488056666669].[none:Advertiser Name:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.681430439814].[none:Calculation_2420401092539390:nk]</field>
          <field>[mysql.41716.681430439814].[yr:Date:ok]</field>
          <field>[mysql.41716.681430439814].[yr:Most_Recent:ok]</field>
          <field>[vertica.41716.488056666669].[:Measure Names]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41716.488056666669].[none:Calculation_5630401154754997:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
          <field>[vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk]</field>
          <field>[vertica.41716.488056666669].[usr:Calculation_5630401154754997:nk:1]</field>
          <field>[vertica.41716.521386944441].[none:User Type:nk]</field>
          <field>[vertica.41716.521386944441].[yr:Current Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Requested At:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='234'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41716.681430439814].[yr:Date:ok]</field>
          <field>[vertica.41716.488056666669].[:Measure Names]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser ID:ok]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.488056666669].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41716.488056666669].[none:Product Category Type:nk]</field>
          <field>[vertica.41716.488056666669].[usr:Calculation_1370318161034735:nk]</field>
          <field>[vertica.41716.521386944441].[yr:Current Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Login At:ok]</field>
          <field>[vertica.41716.521386944441].[yr:Last Requested At:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41716.521386944441].[none:Advertiser Name:nk]</field>
          <field>[vertica.41716.521386944441].[none:First Name:nk]</field>
          <field>[vertica.41716.521386944441].[none:Last Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='1' name='Comparison Sheet'>
      <active id='4' />
      <zones>
        <zone name='AfT Tracker' param='[vertica.41716.488056666669].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='checkdropdown' name='AfT Tracker' param='[vertica.41716.488056666669].[none:Advertiser Name:nk]' type='filter' values='relevant' />
        <zone name='AfT Tracker' param='[vertica.41716.488056666669].[none:Calculation_5630401154754997:nk]' show-domain='false' type='filter' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Performance' width='192'>
      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
      wQmYvlcTKQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Login' width='192'>
      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
      7+zEwowLwf8PLCJyGcWE0rEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Bulksheets' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='Audits' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='Audits - External' width='191'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Audits - Internal' width='191'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='AfT Tracker' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      JhrZOGIW9v8BsI2fln5ZgnUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Comparison Sheet' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
