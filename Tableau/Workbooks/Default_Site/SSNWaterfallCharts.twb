<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='SSNWaterfallCharts' path='/workbooks' revision='2.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
        <calculation class='tableau' formula='&quot;Site&quot;' />
        <members>
          <member value='&quot;Segment&quot;' />
          <member value='&quot;Site&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Graph Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Clicked ROI&quot;'>
        <calculation class='tableau' formula='&quot;Clicked ROI&quot;' />
        <members>
          <member value='&quot;Clicked ROI&quot;' />
          <member value='&quot;Exposed ROI&quot;' />
          <member value='&quot;Spend&quot;' />
          <member value='&quot;Conversions per Ad Clicked&quot;' />
          <member value='&quot;Conversions per Ad Served&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;CPC&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Graph Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;All Time&quot;'>
        <calculation class='tableau' formula='&quot;All Time&quot;' />
        <members>
          <member value='&quot;All Time&quot;' />
          <member value='&quot;Year over Year&quot;' />
          <member value='&quot;Year over Year by Breakdown&quot;' />
        </members>
      </column>
      <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
        <calculation class='tableau' formula='#2012-01-17#' />
        <range min='#2010-03-15#' />
      </column>
      <column caption='Publisher' datatype='string' name='[Site]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;OWW&quot;' />
          <member value='&quot;CheapTickets&quot;' />
          <member value='&quot;eBookers&quot;' />
          <member value='&quot;Orbitz&quot;' />
          <member value='&quot;Travelocity&quot;' />
          <member value='&quot;Hotwire&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
        <calculation class='tableau' formula='&quot;Day&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Past 7 Days&quot;' />
          <member value='&quot;Past 28 Days&quot;' />
          <member value='&quot;Quarter to Date&quot;' />
          <member value='&quot;Year to Date&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
        <calculation class='tableau' formula='&quot;Yesterday&quot;' />
        <members>
          <member value='&quot;Yesterday&quot;' />
          <member value='&quot;Reference Day&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='ssn_waterfall_charts' inline='true' name='vertica.41365.548023576390' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;date_in_et as Date,&#13;&#10;&#9;(case when site_type is null then &apos;Total&apos; else&#13;&#10;&#9;(case site_type &#13;&#10;&#9;&#9;when &apos;CHEAPTICKETS&apos; then &apos;CheapTickets&apos;&#13;&#10;&#9;&#9;when &apos;EBOOKERS&apos; then &apos;eBookers&apos;&#13;&#10;&#9;&#9;when &apos;ORBITZ_GLOBAL&apos; then &apos;Orbitz&apos;&#13;&#10;&#9;&#9;when &apos;TRAVELOCITY&apos; then &apos;Travelocity&apos;&#13;&#10;&#9;&#9;when &apos;HOTELCLUB&apos; then &apos;HotelClub&apos;&#13;&#10;&#9;&#9;else site_type&#13;&#10;&#9;end) end) as Site,&#13;&#10;&#9;(case time_frame &#13;&#10;&#9;&#9;when &apos;DAY&apos; then &apos;Day&apos;&#13;&#10;&#9;&#9;when &apos;PAST_7_DAYS&apos; then &apos;Past 7 Days&apos;&#13;&#10;&#9;&#9;when &apos;PAST_28_DAYS&apos; then &apos;Past 28 Days&apos;&#13;&#10;&#9;&#9;when &apos;QUARTER_TO_DATE&apos; then &apos;Quarter to Date&apos;&#13;&#10;&#9;&#9;when &apos;YEAR_TO_DATE&apos; then &apos;Year to Date&apos;&#13;&#10;&#9;&#9;else time_frame&#13;&#10;&#9;end) as &quot;Time Frame&quot;,&#13;&#10;&#9;(case metric &#13;&#10;&#9;&#9;when &apos;ACTIVE_HOTELS&apos; then &apos;Active Hotels&apos;&#13;&#10;&#9;&#9;when &apos;AD_CTR&apos; then &apos;Ad CTR&apos;&#13;&#10;&#9;&#9;when &apos;ADS_PER_PAGE&apos; then &apos;Ads per Page&apos;&#13;&#10;&#9;&#9;when &apos;AVAILABLE_PAGE_ECPM&apos; then &apos;Available Page eCPM&apos;&#13;&#10;&#9;&#9;when &apos;BUDGET_PER_ACTIVE_HOTEL&apos; then &apos;Budget per Active Hotel&apos;&#13;&#10;&#9;&#9;when &apos;CLICKS&apos; then &apos;Clicks&apos;&#13;&#10;&#9;&#9;when &apos;CPC&apos; then &apos;CPC&apos;&#13;&#10;&#9;&#9;when &apos;GROSS_REVENUE&apos; then &apos;Gross Revenue&apos;&#13;&#10;&#9;&#9;when &apos;IMPRESSIONS&apos; then &apos;Impressions&apos;&#13;&#10;&#9;&#9;when &apos;PAGE_CTR&apos; then &apos;Page CTR&apos;&#13;&#10;&#9;&#9;when &apos;PAGE_FILL_RATE&apos; then &apos;Page Fill Rate&apos;&#13;&#10;&#9;&#9;when &apos;PAGES_AVAILABLE&apos; then &apos;Pages Available&apos;&#13;&#10;&#9;&#9;when &apos;PAGES_SERVED&apos; then &apos;Pages Served&apos;&#13;&#10;&#9;&#9;when &apos;SERVED_PAGE_ECPM&apos; then &apos;Served Page eCPM&apos;&#13;&#10;&#9;&#9;when &apos;SOLD_HOTELS&apos; then &apos;Sold Hotels&apos;&#13;&#10;&#9;&#9;else metric&#13;&#10;&#9;end) as Metric,&#13;&#10;&#9;current as Current,&#13;&#10;&#9;previous as Previous,&#13;&#10;&#9;previous_year as &quot;Previous Year&quot;&#13;&#10;from intent_media_production.ssn_site_statistics_by_period&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[% Difference Previous Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Current]-[Previous Year])/[Previous Year]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Color]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Current]-[Previous]' />
      </column>
      <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='-[% Difference Previous]' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
      </column>
      <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\ssn_waterfall_charts.tde' schema='Extract' tablename='Extract' update-time='1/18/2014 2:22:05 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[% Difference Previous (copy)]' formula='([Current]-[Previous])/[Previous]' />
            <calculation column='[% Difference Previous Year]' formula='([Current]-[Previous Year])/[Previous Year]' />
            <calculation column='[% Difference Previous]' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' />
            <calculation column='[Difference]' formula='[Current]-[Previous]' />
            <calculation column='[Minus % Difference]' formula='-[% Difference Previous]' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='278955' timestamp-start='2014-01-18 14:22:04.566000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.298781' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[usr:Color:nk]' type='palette'>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Gain&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Loss&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
          <calculation class='tableau' formula='#2012-01-17#' />
          <range min='#2010-03-15#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='vertica.41365.548023576390'>
      <datasources>
        <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
          <calculation class='tableau' formula='#2012-01-17#' />
          <range min='#2010-03-15#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='vertica.41365.548023576390'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
          <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.41365.548023576390].[none:Date:ok]'>
        <groupfilter expression='[Date] = [Ref Day]' function='filter' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[none:Date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        </groupfilter>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='CheapTickets Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>                          CheapTickets for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;                          ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;CheapTickets&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='81' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='124' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='font-weight' field='[vertica.41365.548023576390].[none:Metric:nk]' value='bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='CheapTickets Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>CheapTickets for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;CheapTickets&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='124' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41365.548023576390].[none:Metric:nk]' value='bold' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='HotelClub Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>HotelClub for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;HotelClub&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='136' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='HotelClub Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>HotelClub for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;HotelClub&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' field='[vertica.41365.548023576390].[none:Metric:nk]' value='20' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Orbitz Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Orbitz for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Orbitz&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='136' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Orbitz Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Orbitz for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Orbitz&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Total for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='136' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Total Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Total for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Travelocity Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Travelocity for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Travelocity&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='136' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Travelocity Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>Travelocity for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Travelocity&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='eBookers Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>eBookers for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Current]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Current]-[Previous]' />
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Previous]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[sum:% Difference Previous:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current]' derivation='Sum' name='[sum:Current:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Difference]' derivation='Sum' name='[sum:Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Previous]' derivation='Sum' name='[sum:Previous:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Current:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Previous:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:Difference:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41365.548023576390].[sum:\% Difference Previous:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Metric:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Active Hotels&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Budget per Active Hotel&quot;' />
                <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Sold Hotels&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sold Hotels&quot;</bucket>
              <bucket>&quot;Active Hotels&quot;</bucket>
              <bucket>&quot;Budget per Active Hotel&quot;</bucket>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Pages Served&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Impressions&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;Clicks&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
              <bucket>&quot;Available Page eCPM&quot;</bucket>
              <bucket>&quot;Served Page eCPM&quot;</bucket>
              <bucket>&quot;Page CTR&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;eBookers&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[:Measure Names]</column>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41365.548023576390].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41365.548023576390].[none:Metric:nk]' value='136' />
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41365.548023576390].[:Measure Names]' value='center' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Time Frame:nk]' value='false' />
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#d7d7d7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41365.548023576390].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>([vertica.41365.548023576390].[none:Time Frame:nk] / [vertica.41365.548023576390].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='eBookers Waterfall'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='10'>eBookers for </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[Parameters].[Time Frame for Waterfalls]</run>
            <run bold='true' fontsize='10'>&gt;</run>
            <run bold='true' fontsize='10'> &#10;ending </run>
            <run bold='true' fontsize='10'>&lt;</run>
            <run bold='true' fontsize='10'>[vertica.41365.548023576390].[none:Date:ok]</run>
            <run bold='true' fontsize='10'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ssn_waterfall_charts' name='vertica.41365.548023576390' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-01-17#'>
              <calculation class='tableau' formula='#2012-01-17#' />
              <range min='#2010-03-15#' />
            </column>
            <column datatype='string' name='[Time Frame for Waterfalls]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Past 7 Days&quot;' />
                <member value='&quot;Past 28 Days&quot;' />
                <member value='&quot;Quarter to Date&quot;' />
                <member value='&quot;Year to Date&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41365.548023576390'>
            <column caption='% Difference Previous Label' datatype='real' default-format='p0.0%' name='[% Difference Previous (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Current]-[Previous])/[Previous]' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[% Difference Previous]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Metric] = &quot;Gross Revenue&quot; THEN -1*([Current]-[Previous])/[Previous] ELSE ([Current]-[Previous])/[Previous] END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Color]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ATTR([Metric]) = &quot;Gross Revenue&quot; THEN &quot;Total&quot;&#13;&#10;ELSE&#13;&#10;IF Sum([% Difference Previous]) &lt; 0&#13;&#10;THEN &quot;Loss&quot;&#13;&#10;ELSE &quot;Gain&quot;&#13;&#10;END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Metric]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Minus % Difference]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='-[% Difference Previous]' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN (TODAY()-1) ELSE [Parameters].[Reference Day] END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Frame]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[% Difference Previous]' derivation='Sum' name='[cum:sum:% Difference Previous:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
            </column-instance>
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Metric]' derivation='None' name='[none:Metric:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Frame]' derivation='None' name='[none:Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[% Difference Previous (copy)]' derivation='Sum' name='[sum:% Difference Previous (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Minus % Difference]' derivation='Sum' name='[sum:Minus % Difference:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Color]' derivation='User' name='[usr:Color:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Metric:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ad CTR&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Ads per Page&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;CPC&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Gross Revenue&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Page Fill Rate&quot;' />
              <groupfilter function='member' level='[none:Metric:nk]' member='&quot;Pages Available&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41365.548023576390].[none:Metric:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pages Available&quot;</bucket>
              <bucket>&quot;Page Fill Rate&quot;</bucket>
              <bucket>&quot;Ads per Page&quot;</bucket>
              <bucket>&quot;Ad CTR&quot;</bucket>
              <bucket>&quot;CPC&quot;</bucket>
              <bucket>&quot;Gross Revenue&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;eBookers&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41365.548023576390].[none:Time Frame:nk]'>
            <groupfilter expression='[Time Frame]=[Parameters].[Time Frame for Waterfalls]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Time Frame:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41365.548023576390].[none:Metric:nk]</column>
            <column>[vertica.41365.548023576390].[none:Time Frame:nk]</column>
            <column>[vertica.41365.548023576390].[none:Date:ok]</column>
            <column>[vertica.41365.548023576390].[none:Site:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]' scope='cols' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.41365.548023576390].[none:Metric:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-pattern' id='refline0' value='solid' />
            <format attr='fill-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-color' id='refline0' value='#d7d7d7' />
            <format attr='stroke-size' id='refline0' value='5' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='solid' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <text column='[vertica.41365.548023576390].[sum:% Difference Previous (copy):qk]' />
              <color column='[vertica.41365.548023576390].[usr:Color:nk]' />
              <size column='[vertica.41365.548023576390].[sum:Minus % Difference:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41365.548023576390].[none:Metric:nk]</rows>
        <cols>[vertica.41365.548023576390].[cum:sum:% Difference Previous:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Waterfall Charts'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1800' minheight='800' minwidth='1800' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='91111' x='0' y='0'>
              <zone h='44250' id='1' name='CheapTickets Table' show-title='true' w='19833' x='0' y='0'>
              </zone>
              <zone h='44250' id='7' name='eBookers Table' show-title='true' w='14334' x='19833' y='0'>
              </zone>
              <zone h='44250' id='9' name='Orbitz Table' show-title='true' w='14722' x='34167' y='0'>
              </zone>
              <zone h='44250' id='10' name='Travelocity Table' show-title='true' w='13778' x='48889' y='0'>
              </zone>
              <zone h='44250' id='11' name='HotelClub Table' show-title='true' w='13166' x='62667' y='0'>
              </zone>
              <zone h='44250' id='12' name='Total Table' show-title='true' w='15278' x='75833' y='0'>
              </zone>
              <zone h='55750' id='16' name='eBookers Waterfall' show-title='true' w='14334' x='19833' y='44250'>
              </zone>
              <zone h='55750' id='18' name='Travelocity Waterfall' show-title='true' w='14389' x='48278' y='44250'>
              </zone>
              <zone h='55750' id='20' name='Total Waterfall' show-title='true' w='15278' x='75833' y='44250'>
              </zone>
              <zone h='55750' id='21' name='CheapTickets Waterfall' show-title='true' w='19833' x='0' y='44250'>
              </zone>
              <zone h='55750' id='24' name='HotelClub Waterfall' show-title='true' w='13166' x='62667' y='44250'>
              </zone>
              <zone h='55750' id='25' name='Orbitz Waterfall' show-title='true' w='14111' x='34167' y='44250'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='8889' x='91111' y='0'>
              <zone h='6375' id='13' param='[Parameters].[Reference Day]' type='paramctrl' w='8889' x='91111' y='0'>
              </zone>
              <zone h='7750' id='23' name='CheapTickets Waterfall' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' w='8889' x='91111' y='6375'>
              </zone>
              <zone h='6250' id='29' param='[Parameters].[Site]' type='paramctrl' w='8889' x='91111' y='14125'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='1' name='CheapTickets Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='eBookers Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Orbitz Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Travelocity Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='HotelClub Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='datetime' param='[Parameters].[Reference Day]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[:Measure Names]</field>
          <field>[ssn_waterfall_charts].[none:Date:ok]</field>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CheapTickets Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='178'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='eBookers Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='261'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Orbitz Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Travelocity Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='HotelClub Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Site]' type='parameter' />
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Waterfall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41365.548023576390].[none:Metric:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[ssn_waterfall_charts].[none:Metric:nk]</field>
          <field>[ssn_waterfall_charts].[none:Site:nk]</field>
          <field>[ssn_waterfall_charts].[none:Time Frame:nk]</field>
          <field>[ssn_waterfall_charts].[usr:Color:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Waterfall Charts'>
      <active id='21' />
      <zones>
        <zone name='CheapTickets Table'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='eBookers Table'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Orbitz Table'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Travelocity Table'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='HotelClub Table'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='eBookers Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='Travelocity Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='Total Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='CheapTickets Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='HotelClub Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='Orbitz Waterfall'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='CheapTickets Waterfall' pane-specification-id='0' param='[vertica.41365.548023576390].[usr:Color:nk]' type='color' />
        <zone mode='compact' name='' param='[Parameters].[Site]' type='paramctrl' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='CheapTickets Table' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nOydZ2AUVfv2z2zvm7Ipm143PaSSUAKh995RqoKA
      iAUERAUVEFFRBOm9d0ghBBLSeyO99022ZHezvZeZ9wPo/3l4H4MmYED39ynJ7szcM3PllPuc
      6xwIQRBgxkx/QQ12AGbebMwCMjMgzAIyMyDMAjIzIMwCeobJZGKz2YMdxZuHWUDPQBBEJBIN
      dhRvHmYBmRkQZgGZGRBmAZkZEGYBmRkQZgGZGRBmAZkZEGYBmRkQZgGZGRBmAZkZEGYBmRkQ
      ZgGZGRBmAZkZEGYBmRkQZgGZGRBmAZkZEGYBmRkQZgGZGRBmAZkZEGYB9RdElX/j4PoVSxYt
      WrHjyF2+Uv9XT9Cef2bnzwkG06sIDmQf3xgZEjN37rwZM5deKeXCf/zNwjv7UhsV/b4Qpt9H
      /ssxdOYeSRJ8/P3pITRN6oOM1sbM5CLFtEVj0jMf+Qe4l1xKaUWsnIL06gaB15TlSNnNpHpk
      wbq1XvLyjOKGmnp28ML1pvhfr6dFvrVhqg/65b8FBCGNXPbFDx+Pl2X+vPTsDV4tBtctj5g2
      tezOhWq108aN8+vzisKmzrDkpMMaKRYFOgpvHjyb6jBmxaaxFkfP1SzaPrPr2jFT+BJB6smk
      Wu2kFe8tiHL/nxcyl0D9hFtfIvONCrcnY0nWk+fMdSMKC3MqlCr1k/IyrqDpYW7b9EWTuckZ
      SNRcauXVuzXISE/97t3Hm9qy40uh95YNvXb3bvCISSMnDHPFoF9NgAZuY2nKw4e3Mxo8HPCF
      N7K9F85rv/JrLZY1lFb/2eFHaG5tXn1HcWpxRebD5sac7w/kzdn6GbX00NnU6vTUJzKg7yhL
      LynKuVmhmDbaMz+/+I8KWLOA+omFpS1aolACAADMqcgu61RgCL9/iFhZWVpbW6Kplk42lgqh
      BKCAnuy+asoIABBHd3cnWyaOiEdjcVgsFgWgVxOgSSURsrt5xOBF2+aHYqzsnaloPl+Lwxhg
      ZtSK2PDocR4l2SVVOrKGaA0kom6Gj5+Xh58XvVUgJaGeqcLKe9TKsV45mUVaHfijmtYsoH5C
      C58y3pB19Ezco/txp+KKqVZuGNCemfmwpkX4X99DYTyCvPAYApNiLOP2EP7jEyyOqBLw5HAf
      7ZOBQPCOnvLuu+8uXzDBlogCAAACPTTCHkZoNkBYJlQxQsY7Vz7gUNwsGWRg7xmlq75981Za
      lTFmRIQPnfP49sOcGqG440lFDxgd6cPnCv6oBEJ/9dVXr+YG3jBgGO7p6WEymX/y+xCaHhDm
      q2ivZ0uQmJlzo3y97alAqKEOj40J9mY5OLh6+bpZWVp4eLF8/ALssdImCWnW7Mnudgw7Zy93
      V1tLK7uQwCE4E8wMZtHQL//fGEsg2bt6uDItIAgAFIZubefj5cMKCkL3tvGA2+I5oxkkK6Yb
      3c1/mL8r08FrxKihtu31HR6xSyYP9/d0IXJ64MiYqMiYCa4wr06EnT5nuq8t7X8/B/PyLk8x
      Go1VVVVhYWGDHcgbxvMC4nA4EolksKIZRGAYFolEtra2gx3IG8bzHUgGg2FhYTEooQwuJpNJ
      q9W6u//vzqqZP+J5AeHxeDwePyihDC5GoxGDwZDJ5MEO5A3D3AszMyD67oWpMy4dvhSfmpNb
      xDVQPJxtsej+JS1gblnCpUd1TC9fGv4PzqCTZyXGcVD0zrxHnRh7VyvS0z8bdcpHl8+I6O7O
      liQA4K7K1OQyWSDrz/aV/kKIf7EX9hwGlTD15pl7WXU0Z5YFSnTvxM93HuXz1JYe3rZYABCT
      viL18qW7aXpLlgsDnXP9yM20eqZfsCVOlXbl1M3kEqJbgAMNBwAAsDLr+ulbmc323t5WGOmj
      y+fji7ocvd0tCAPPVpvETQWnz1+vEkK+boyuJ6kXL92p5BpYHk54LFon70q8cOZhYSvDy48o
      q790+tzjomYLd19LLPfq/kPxWbl8yJHlaoUGAMDyB2cOxxVwPIL8qIig7xJIlZZwS2ITPjKQ
      dmHvviKOUMjpaG3rFMm1JpNexO1s7+ju7uZKNTqNXNjR1soRygwmWCnmt7e2cgRSA/yseQ5r
      +QnHj+4+cDC9hmfUqbhcvs5kUon5PLFSr5Ky29va2HwNjLZxdGFg9dl3r2U1iXQqCbu9rb27
      R6WU3z99KPVJbVsbW6zUdpU/upxYBhu1Qk5nW0e3VK1/TTqR7VmXr5WZAt2xt8+fb259klug
      HzFlWlSQIw4AAIC6K+1ygiBshH/V/fimnEvHilF+pPofr5QISq4eLtCHOYh+OJjUCwAACDfn
      /LlayAuUH00srU0+db+bYC/Luvi4YeARwrKuE4cvQ55DMJU3L6aUpBbXBg+PkueekXG7AQCd
      JUmNWF93pObklYzc5Dswa0yoZdeh72+zGwsf1+FjZ04fyrJBAwAAzH70y3WunZsq7cjDhvKb
      P75I1xi8g4dfKMuSZrjfWJxw+1GxXtNj8F64YwZ1164T1qyghsf5Uw58R8k5UyEhKZTYtza/
      V/XTxjydPQaib9m7b7gbDQAgaSmPa6YtH0dKTS2YwrD7eOOBd44c4B75pNBrw1RTfnILv7O2
      c+G2r9sv7Ccu2AoAQPTyhPMXM2vE7e2C2R9tA0CUn3ybc7NTE/LWGiYACNyac+Pg5XwE0gD/
      OYc+mo2BXlEy9y8gEfKoPjPDg/E37h5qzO+ukkmZxYW0qa6uAAAA+GUZMseApidtYTMXa/M+
      tB+xe8bw2hvrs2WTIq3VNzMq0T7Bk4kAAKBrrSr1GrpzllfJyR9z85x5fjFLJxENK+5Xa+eF
      EPoM4IUYNYp2I3FtZIRRcPdwu/7Kh58iRrmi6D4GAgAA1ri1qxtyzhzjWo50iF2wCweAqLb1
      QbmRX1VUrwfF2UX0eSwUAABoG0qKhoz9ZB5Ze+Jkqi0QvqgNJONc3L1hxUffWYxfMILF8me5
      QCpBY2N9dUaKwn3B9h0bAu3xal7hpTMpdc3tzeXFxfUCrVrQ2dlNsXLEY56919q8BJW979jo
      yJb8Rwor9+kBUNzd7OxW3IzxfrYeXm6WJEV3eU2n8vdrIhDGwdXL1ZbU21pfz5ECQI+e+c62
      tRNb4xM6AACwKTf+fHJJbUd7c0ZqoRh+LYogn1FzKMUHt/8QryZa2EYu+XH3mgh7xZmfTnbJ
      YQBAr5DD69WxfMi3Dh5qFGqJeDyAIJNB0fqkAOs9fGy0l7iuQaoDACAmA4zH4yAIZVKo1Hos
      HoeCIAhWqXUDjhDLcF8dyzywdev9GoXKACMmXUtZZgsqFGfjCAAAAKLYeIwYFy2vyhEpTXJO
      +Y073DkfzgqasOHoZ2+H2giP7L3E1QAAYKMBJuDxEIQyKpQaHf5FAqI7Lv/yaFx8woldKzgP
      fr3XRJkzdxQZABwBb9Cq9DqNWq2DMFiKS+hnPx79bvfm2dFOgWOXvzNvYnfmnaTyNgAAgMUP
      EvMJJs6D3BZUW0lCPWryvNjcy4d4TpFDMOIzPx4xBowfH+72nyWhVso+ffCYwW/8pNCn96ZT
      KrV6vQ4mEvEAAAjCYslBsz86e+yH3R8vYPSzWfaSQSDCtI8O7l0f44i3wuh6TJZeYaFBsJyj
      1pkAAI6sEBs7j4jwQL2ojWDh1tncIuRyUJ4+Jk6tBWvYyLEhuopCvgIAgLVzsGvvaOf38K2C
      AwNd4I5unkAgZLI86QOOEDIZYYeYn498H82kR/vYVGUnplVDb21Yak3FAQA41Rm1MqoPy1nM
      beM25p67WxG1bFWMG1nW3Yy194+M8tdxOlQGAADewcW+qaWZw+U4hIb7e2r6rsJQZJoFEfds
      uNg5KAL16OE1lA0O68CMGG+X9O32L5sUOpyfXdSyGXXHP99o4R27OWIkIm9Pz+1mRE4YE+gK
      AIA5RdXG4B37Dse6w48ObLycXvrOtqmj7W/TR4yyYjDCwlwSbly2NODocok7jU7AY01UGsaC
      wQxweHDzvKUBYcg0FAsrds7Jzzokk9d+4gql0mnk2EWrcw5cWredMmrFhwN+sC8HCOgeHfn0
      uM5q2qpPXCyaft6zoVMFjVm61VZTfP4Gfv6URWEPd61dJxky/dPYmcyyTzevyyUt2Hk41sot
      a89XK68Zhq/9jNkdd6k5cvHEFTaf7X0/lbTk893D7ZzTvvzlc7XFmi+DXkKIaAzEK9x2/Gec
      U8x6V9WpL35sgu1Sk89/tm5WmyEs2lV9ffeGLh1u8sq1tVcPXi6RZ2Um+45csjQGOrt9FV8N
      Tdy0l9p45Rpq6rw5G6FNn32gt3n/h0+GoTD9HMrg5Z9etTtlZGx4Q3nL0q/3TvV54xO4r2go
      Q6toycpRjJkainu55315iPm1VU3QyFH+/evm9VNARp2ssaKSrzDQHbwCvJ2J2Dc+n/SKBGQy
      SCUKEsPqtdUP0GslKh3Fko7t3+HmwdRnmAdT+8fz5RaCIP9OST29a/hVzc75x/J8CcTj8WQy
      2WBFM4gMMBP9r+WNb7uYGVzMAjIzIMwCMjMg+u78S37dsCxN4cAkmYD9sB1bljlR/9RUIcRk
      vLJz6Y12ijuDAljjN4ao8kSeHsLEJGjcDHRmvD5mz7vjCGjQkv7r1v1pdt5OJqWKNXPDprkR
      v3d21dwn5+M7lqyfaznA+3udQXTt6Td+vFeMtg7fsX2ZPREDYF1zxr1TDwp0ONd3P3wvyJ4s
      aszYcTZ325bNnjakQYgQ1tQmnj+cUkN2HLVz+yI6CgCTujb5+om0Cojk/fFnG9woL7K0mYhW
      05fuXOQh/mrbsSr28PLCpFIONHzGolE+xIyb5yt7yNY0UuCkyQ69JTcflVoHTZ47KdKSgAYA
      mIwW41d+9OFEfwBAR0kcAY+FTUYjBMPAZDQ96+kgsMkxcsY3n6/UlJ7ZfrmAN8Yy98rtJjF2
      zJw54kfHrj2SE5xdwqhtcWlNHsOnL54c8vrmUvqHmp/woPPtL78QnvupiK2b5YMxKXiP62Sr
      t+22kHRosShgFOUl5YhMmEHrFis649Ol6/d8UffT9yW8ReMdgVHcdr8e2fHtD8aWWgAgYOx5
      URVm0HTWP8krLJKTrFDd1e0mtyCG8Pq1uIqUa7eqidNnDW14mFTTUnb8+A2qi0/tnaN3Stp/
      O1L46OwPmzZ9djmzQdhWXlTd+T8HPZWCjpKi3KyydrtAl96iPLVtgDuq+fj9ipDwMBf/yGHM
      7kMXC1hB9nln9z9qHvh44muGVs0lWzpZkq0tdK3sXgCARiGTS1tu/PLN3nMpco2qIvWhPjB2
      iCNx0CJUK/l0W0dLqjVd2cqWAACUEpFS3X5697b913IMenlhfOKLBGQySAQcqdFq5aZ1HiRE
      IujqkekQo1HCF1DsPByd3JydLI2Kzs4unUZjHDp1Tqjj7/OpbSat/vTQoX1vx/qi/ni4U6eU
      1hWl3sgVTpsUiYYNPZ3tYpXOAMNYLA6NwSilPKlCoTFRxi6Y70n9x2WnIDRea9AhAEEQCokE
      AIAgqEdPWfLh9gUevUnpxfdTHuQ/vFuWm3Mr7yXMB+oPKBROo9cDBEEAmUR8GiFXS9vw5a5p
      Fo13UwvvPM56kYAItJDRMxYtnDc8wFnYVNolxzIsSVqT0caTpe0szM8vbO6U4Cy9WO40ogW5
      vbZS8RfzcNYeIW+v/fCdGNqNq4nFZSU9JhqDRgJqPYInoFRiFWTrRMXjCKjq0iaEMMD5MK8f
      FjYxDrr05KyCTsdIHzyf04Oi20XbW1WWl9RwEJ+A0A93Hd72/qqgiIgp4R6DEyHDeaRl76PE
      jFKB71AvhNMlIDI9hlti84qL64Sk4PCRX+47+PyUVqVSqdP9XllAeCLNxdPblooHAFg5uGB1
      MjTTP8zXy4VuLK5oIFkwVUKuS8ysuTEsCU/kET0pytcJh4YABHBEkpOHF9OCBABAYwk2Dh6e
      7g72Lh6ezrZ2Tu5udhYoCKAxeEs7V08PV09PNwwEAoaOohvlVNegYC83nyB/Bs4IMYLGR7nw
      eYqgsdOGutFf6bwNBEFUKhWVSn2VF/lvIKIry6G7qY0ZNWaYO62rnU9hOvt72XQ1tZL9Ro+P
      9KSSyUQSiUq38nJxImBfkYW+T1BkV29GR1OXZ+yESAdcS7PA2t0j0JPeWN1qEzF53BBHMpHU
      z0y0SlBz5tDpFjli6ztq5dsznGhvfAPXnInuH+ahjGeYBdQ/zIlEMwPi+TwQhULBYvs5NeSN
      xmQyyWQyBoMx2IG8YTwvICqV+rc2JF8bjEYjh8MxC+ivYq7CzAwIs4DMDIgXWJvzbp259TCr
      qPhJj57s6sjA9pFU/mMQvbwyM/F6YgYfpns5WqP+qg9QJ8yIi9fYBr3S8cQB9sJgo6Y2O/F2
      Ur6O6uDAoEDG3qKkXNjZ8+lUY5NB+vDikYT0om4pxc3LsvTemficZjtvPwu8OP7Xk0k5eWyN
      pbeHDQYAAKvy464k5LXZenhYoOUZt68/fMJlurvQ8C9hIU5xY+bZq3dzcmtI7l6gu/TGzcRW
      Jd7dyRaLhjTitsSrV9JKm4l2blZ4bfbd8yllHKYXi2TgJV6+kF7OZnr70nAQAADAysdXTieX
      8Vz9vCmI6AXW5uQb59pQrj52xuPf7CvlimW9Aj5fIFfrYdgoFwt6BKJekVilM+jVcgGf3ytT
      GWFYq5T08Hm9MpXxt9EvUXPeN99dQlH113450azSqmS9/B6BXK0z6FVCgUAkEAiFIrnGiBg0
      vb1SnUEv6xXwe0RqvREx6aW9AgGn/vaxg2W8gT/AV4i4I/9mYi3TkVaUFs8T96ae/e7THb+0
      qp59alDUJN9pdw+L8vey1VdcP5whs9EWHbhZoespu/WwhzVsWIA7Aw0AAEhPweWTRTILSe7x
      pIrGx2dv12uwncmXM5pfQoiIpirpaieWNWxYmJWBf+LURY2VHSflloQjAADUpl9qx3q7EjqO
      HbpUlnL5crkBz08/cb+uMfNCFezGEKV/f7dKDwAACCf96IUGNKU78fjjlup7P79I11iim3/Y
      SB+ni8ce1xYnXL+fKVeIsEOW7ZhB2/XFL0TXwPbc0qk/fmeRfyavC2hhy1Vb3qv8+f00CQ1P
      cti+d2+0CxUAgCAGg0Kio4ccPLkB11Ow/8B5jhYYmJHrxpvWLzsfs2S0vrsRHvnZniHVi39s
      2Ppe6P07+WqNwnrU8nWBgu3fxbv42FTzZdEv4RG+QoSNpSK6rbRXO2LCbAu8lOYQEcD8v8US
      VXVllXrYo6XBxTWg40mq7aivF42ou78+o4qpqSfoO2sbHRwD0QAAoGt+UuA5/MslXqWXf8rK
      duz2j9kym4hekVT58ayggS66o+0tr1RpWS0NXJIDAxbBuLmxo7jd97EmCQD2EfN3RQAgaobz
      a2uaa8rcRv0w2zF7y8F865Pb1rYVXDkssfanoAEAQFObnx0y6cYyCmrS6YdWMOdPWZuXbfoG
      P3zGMC+vwAAfkqm3vq6mKv2h1HXRrq8+CLDBqvlFF04/au3i1ednZFV1S0Rsnkhmac3E/+YZ
      ZbDG7t//fuvN799auzv5wbWrj55wOB35t1Ib5RrA8F//6Ve71kxmZyTdzSzyHBrNTrmeVtbE
      5zQ/vpiUlPGQEv3uvs0rPBiDNyL955B2d3b2KKhk1dVzJ3sNLtEx3vj/GHsg+0zfs/OtAGvp
      yf2/NgnVZCIBoCCjQY71W3Twk7ksMu/YnvMdagAAYjTARDwBglAmqUKpxxGeWpsVSs3AQ8Ra
      z9yyZXGMb2/+6atVxsm+Fvs+/eJxsxTCAgAAgsBaWVvy7bLhi5czcDoSHg8gYNArDQaISLcP
      jQlX5peIdAAA2KiHiUQ8BKEMErlKS/hT1ub4hAcXvnuPn/zr7TrC7LmxFAAwGLTJqDca9Xq9
      EUKhSE5hO346ceTQ7iWjPKJnb1g1bURL6q3EJ21PzyHhNTUpXX44sMdJcP9Ru9YxetGJMyd/
      +fWTUEsSIBJIaKzj8KmRypQD8boZU0OxEBS56LNzp4/u3bfCDYPRajRGg0FvejXrub88bDz9
      PV18h0VFKMWtUtXzM080cgHBMShmdAxK2oyzcO1saevl8dHufkQtn+YSMnpSNOhqkGgAAFgb
      pm07u0MgFFgGBfg7mdicHpGo147lMfBF42CDVqBD/MJjhntTWrpFthFzDv26O4zpqNcTAABK
      XvXFMw9d566dEWpnZ+vK7mT3CkQkd29Vc0anySE82ltYUynVAgDw9s62za1tfD7PPjTUz+MF
      1mYIhyf8viYQkxVoTHhwGVgZYUf7yIm2D/Zu21EnU6FZdpELx5cf3raO5jZ8i3+InF2ZWixg
      DIkZ6ev09ECUUZ515eCZ4waD68w9y8fe/OmX9RvKvMYsfWcolkjAQRAARI8Jk/2TC9yGuLlh
      Fy1L//bI6lzC2DVb354y796uM+/vtRZpMJjXu7/oMGSC16MfNm2W+09Z7W5DAhoUjoBHQUDF
      yb9bQJwYqrz2zfrv5drwOZ+Om2yZ//GWdzMIs788ykCX7PliTbdEE75qp0N33KWmyEUT3qZu
      3bs2ibDw830j7ZgpX/ywVU1bvXPlwCOEUJC68fGHP+1VYFw//ixIWHDx0Pc1JO9xAaL6wlYp
      KN13LF7klpcWFzVj/Ywl0J5vthmtl3y5jG5I+3rLCrEGO/6Dr6iNV66hp86dvU67cfM6g+V7
      P2yKQfXXWMjNPbHy26xJk6Mr8yoWfLVvhp/dwO9wcHll1ua2rBxJ7NTw13bZQAm/rrIRGTE6
      oH/jD/0UkEErqS4q6pbpLZ39wwM9SGZr8x9g0veKZBQ7m9dWP0CnESk0tH6br83W5meYrc39
      440vOcwMLs+XQHw+XyqVDlY0g4h5PlD/eL4EMtdoZv4S5irMzIAwC8jMgHjBWBiiF8f98tXN
      Jtd9hz9xIzzNKBrqko4eanE//uHMfl5TUrpx1TdKOzcConOPfeuDBSP/AVmAfgBrRWl3rqWU
      Nelxzu98/EGwHdGoFqTcvphR1gXTPVetXSQrjUvIqEM5Dd3w3nxn2iAkAmA1L+HK5Zw6NkLx
      3rBlgxcdY5B3JVy/nF/Dg6z9P/homSr3Rt+2HqDiN1y6lyQR8Sz9xvjbYTrKUi9ff9DY3tIG
      nCe6Gq5dupRW1s1wc7Mm44DJUP74SlJeTU5KShew8bfHVj6+ffZepgxnwzC1X7sRV1JeY7Jw
      dbAkQhp2SnrLyt1Hp/qorsSXhbJoyVcvppS10B1ZZG37rbPnMuvYNY2NtnbM5pxbV++mKwhM
      ZzuLV52J/vttPbBOJULZLnlrAaM7LlsbMsyTbtSq1QT7BYtn4xoSaqAAVwf7KdPGsPNyCX7B
      rhaDMBpoUsslJI8Vb8/F110qw42KcCYa1HINzWv50qma/EuteO/sjOoXvBZ2dbbScvxbY92L
      cosFPe1nz92xHzrKlQTrNZqy5GuPmw0EYVlKYQcAACDGltLUe5WqKaNYD48eupeZcPR+na89
      dOWHX4s7G5Nv5HiOmxLg8Oz1GLTKlrryqupmsoV925M0tf0QfFvW9aTi1Ou/VgDfGC99XFx2
      Y2nc6Vt1tk6ka0d/qez+BxpF0GSb6NAAlEbYJXca6msNAMBRbcKCg1Ca3h6jZ4ivQ2iIb3Xi
      2WYj0RI7OK4pDN1xxBBvo4zD1bAiWXQAAMHSOSrYRyfhCTChAbY6qSW9bwEpix5mdHXVFjRz
      KvLz2D3dfIQe7O3h7eVMIuB9h03wRzc/Ku2SalW/H+Dm7ctycyEibSUlzT18udRAnjB5BAWG
      gK2jN5NBJmCf1YJaZUttuRgfuGndTAoGL+a0i1UGvV7azZM5+Pp7svwdLYC0tb5FrpCqsKPG
      j7cm/zN3l4b1Pan3MigjZkb/ZoCHlezkxAKHUZNDHCgA4GNXbV/kLU0t6xisCPWqrofxeczJ
      C8Osn0nFJG+NTyj3mzHLh4aFDMY+BITo2vJyRXbvffLp+vc+GE7rKmKj3XHynJKyitp2lUbX
      XvNE5zx69kin7u6e349pqysvLK/REYJGDfexoFKcHMnN3b2k/6/0JVnYT16wevnSOUEu6Oq8
      UhXZwZ6ONhnx7u72naX5T5486ZICKw9/F0uKqwOlu42Ngv6BAjKqeLeOXJTbezoSDUKZSiTo
      VUk7L5+5bbB1ZuC1PVz2rStncorKG7iwo93g7OBmVLRf/fW6yc3XFqMUylUCfq9a3Hji6D2a
      D8sCkqkJNuGIqq82kEoqxtmHjB4ZaM+wYjIoWCuvCVEenNYuqltAUHDw6KghRlGHnMhaOGss
      g4IHsLEuL7EH60ZDo6PnLJwYFuxhDTd0qodNmuxrRyfT7f38PAjPZsRCKIKFl683DQ8AINk7
      0KR8oZ1fmLebmzWK/6Sag7OiiwTicXNXRzubWrs1UZOm+TpbvOoF6f/+NpBeKeEIuUJeT3cX
      G8tw0QoEGBJa0tMlEAi72Z1k94hQJqa8rI4SOGbKUG/cYCzIr5UK2b09Ih6vu7ubZOci7hKQ
      aEAi5PG4/C52p6XPqBHBtJfnTDVqH537qtRiwecLwvsdcXfpnV/Op2vRRO8RM1bMjqHj/r7e
      mTkT3T/M1uZnmAXUP/6NCRgzL5HnG6dkMhmNHoyVRAYbk8kklUqtrKwGO5A3jOcFRKPRaLT/
      vcX8Pxuj0cjj8czbfv9VzFWYmQFhFpCZAdGntVnDfZiYgTDcXmIiuLsiq7AbcbW37JdJ+hXS
      z14YrKzIStNZehONvMz4u3k1XCsXdypKV5N7PymrHFi42FkQIABMBmlu/K204iaaK8uSYKpK
      v5eY+QTNcLfDCe6ev5FdUsLHOLDsqQAAYBRn3bubXSdiujmRIUVeYlxGFd/OxZE6AGuzjFtT
      1ihi2lmImorjEh53aYmuTCuDoCEu/kGbAuvCZPxmvNE15D3mYRzpuo6EO3GF1WyqI6Mz/UF8
      enZpaRm7F+XoysSjATCIkq/fKGxVuns7403iPksgZdOx/T8Vt8uUSpVKpVQqVRq1SqFQ6o1G
      rUqpVKkUCgv/lL0AACAASURBVIXOYIKNOoVCoVCo9AaDWqlQKNUGEwwb9SqF/NnPJoNKIVco
      VQYTjCNRaGQcQExalVIuV2r1RthkUKlUTw80wrBRr1XI5Uq11vR6bIbaByadPOfaj5t3fFMt
      BK25tzK7UYbWx6dulfLaMi7friGSNCm3E0RaAADg5186kskjiPL3n8zqbX34a3yLlbU64eQj
      flP68WyBo6cn0+LpEqLG5pST1yt7xaXXbhR0tmVcuFLMlVffvZrd2t8YEZ2o4cdP1353LUcl
      ZF9NTEfhkaTTlyq57HsnLzXJNRk3bvB75AAAgCCS+vSvd32e0SIuuXe2FdiTegsOHkw22Th5
      erhhurMzOw0YFADAUHvvx4Q2Ey/j+N0qSUPS4T+h6+aEUe9dDB/lWZvW6jcuvKe6JHrdp70/
      7ypmhnujeITINR/5VsVsiZsaO2lkpHNhboFCZ4pc8EmsKWHr0RIajTRu/Z5Rhnubf8qi0Egx
      q78Oaj52Wjt1V4xi/6/39GgC0XP0pvn22zbtDwz2K6nkvPPdT9jUfWeKFHiq09bvdo/1tu7v
      g/s7UCtEGI/AMGIhAMB/8saPWWVXTuXgPIi8J+l6rygIhqYsnMggAAAA2dIeryvjyIEDy6Ip
      /SpjyEKdUj5n3YTex9tNVFeZUOUb9nS4R1GV0RY2e88sA/xOZq4DaAmI3byI9GjFg/KN0/z7
      NZ9D397AD582SVAIMFaeH3/6aVnc8WQIjVGJc+XIujUzWrv34RW9AFjo5Ox7j9oC/GkA4GPW
      7IsBoLdRU/yr3Dk0yo+Xk5E2fMe7USQUAEBc8qBj9Offjm5mr0vLgNrb/1QbCE91WPzxR8FE
      vc3wVRsnuNVUtmjRxCHT3vt297L6u7da+SqaW9hHn2/hpR7Jb+QIWsuO382U8rv4QjnR0o5K
      xCgE3bweKZ5uSyM902tm3AXKmI1Hf9gCld9Pb5ECAnPBpm3z/HXVdT08TrdYabS0sca/5lZC
      AKgMj2HDggi/DTJg8BRnloe+s7apubWTzTeqWy8cu8xTIQDAPexWioOrHYOqF3G6OeKm1m4C
      3Hxs321k6Ds75obhuNn7fknuhQEAsEFLIBJQKBTKKJMqtHgiAQ1BECyT99fajPcdGcti/L5C
      Mopq6+JLEdd3KE1YNAmNRqEUEDAAADfl3FO5RLPsKCajEUYQg7T5zvWmcetnMrCmmqJal+FR
      9s/eBqxXk0kkAEEovVSq1BD/1EvCYmlUGgGDwRBIRALu6X8CYjIaYBiGUCgIAgQ8HofFAdhy
      6qZvr1w8f2HrQo/IeZs2zMby8k5cfewQNGPTxgUU6ZPTV5K1BgQAgIJQJqMJRmAEQGgUADS6
      NZlIJRJRGPKIWe++MztUUHDtemZbPx/aYNDTXMoBTsOjA/gtFWTHACdWxKRx0cruKrHCAIC2
      9UmR64j5cxcO46dkEeyZDj7DJs8YoW3IYXMQz4jR06YPVdU/3fabYOOs7ewWiURie5a/h6Oh
      iysUiyU23i/B2mxU9T6prGeGjA6wktdyFAy1ji2W9epsDCgKAOru1u6C2weO3i5PirvZUFN0
      /MLjgCVrp/ozIL22qrvdL4D122nITA95W7tYIBC7+Ad7uqr62zSDdXUppz9N5IQs2exlXwiA
      EoUjTls8c9fZXWtuWs1cv5Omb0l5mKFDu00eNUQnrUp7+FhlYk4YHY4TNQATGDP/ndKDR1an
      YZjR88Z5WT74v/OaBC2ljzKbUS7Ro4PsB/jI/k40kubDuw4IDKjYpdtGRIDyvfvfS1EGTdps
      JXh8vClg7sylt7/bsFoHR6/aNXoUlLv9q6V3FUOWfuGBatjzwQGxTDf6ve9ozXGXVZEz5866
      8dmOLQbae9++H0oENz//9hM1ecWutwceIQT0bdlXfvimyWgVuGNVNKA2ffvFVpRDTAA7P18+
      cvGHP04B4MEPs1qiJpWf2XI8X+uTnZE0cunGlRFKkcnWigIA6C29koKaOmXF/CubVz/G2Ww/
      GhwUMbdPY+Effta6fcxKeOPp7+f5DPzG+gD6q0tRDYD+GgufPiMIgP/9qDSi0sfVjBlj3P7k
      6f7zRP/18wAeRd9OGyG7oIbnMjbaqc9vQhD0P24VesGc6D+M2m7xFzsBi/l3vuDXld+fwf9+
      FDi8Q0S4/V96UNAf/Nxv+r46je4aaGX/Z775P2/VbG1+htna3D9e956Omdec50ugnp6ef+18
      ID6f7+DgMNiBvGE83waCYfjfuXc6DMMIgvw7730gmKswMwPCLCAzA+JF1maDJOnot3daXL/+
      8X0X/DNTV8OjU8da3X7ZMBUAYNL05ibeSCpo0kPYkAnzPWQFNzMqO7ukTC/nkImrmbWHr9Wi
      7Ol4DWK1dvu2SCfyq7+jNwfEwCtO/OFaFtZx+NZN863xaADrW7PvHk8sJHnEvv/WyLrUaw/z
      W2FL1vI1ywOZlMGIUN+afuOX+BK698Tt708nowAwaRpSrh15WMkImrZ5UXD2vasvKIFUws7s
      +jZ5d05JvRiBDeyKtFPHTqeUNPY8G5wxsYvirxbpNu35ce/2VQyj1m/GB99tXWVH8P7k0KH1
      04aoZaioRZsOHtw9i8m9ldfx6u/4jULDu3Oreu6n26L05QVdOgCASc65k9G5cNMHnuKGcraU
      7DFsx95vJtuyc2sFgxOhsv12Anvlzm0sfmaxAAAAjOLWC2m9H+760LqhpEqktQgY/wIBcery
      5LTRi0c7F+WVioQd587cILGG2KB/s46ZdM211XTvcCcyhmzrP33GaBvyc/OpDWJuZ2NtXXMv
      4uX4Wg+tDwIadTfR2sWGametaekQAwAMWo2YSnG2pNnierkScmR4BMGkEBmd/FzpgxOhUsGl
      2jkz6HYWspZOGQBAr1KKGdZuFlR7qKtb7TA8PLjvKkxV+CCN1+teA8QV3bmdI7DdJtriQH+t
      zJXcCAAAAEIRiES9so8NuTUdtcXnSho6iLHHhtq8xFv7JwBBGIPRgAAEAQQ8HgAAoVCQyWRE
      EATB4/EoWM1Ne5BNCxsf5TFIU/1RKIzBaAQIAgABjwMAQCgIMhoNACAIkYAHsJLdl7VZ31mY
      22P19po1ixevCid2lnBQzhh5cVVNbUOnSv/0AvjAYbG4tqzHlc2VOTd3f3+2Q6z/75PQwibM
      37Z1k5eq8GG5wGhOev8nNOtIurKooLKiyzaERZSKZRDZIhDoi55U1+kZLDtV3LV7CpqTux1e
      pTEMToRWzHC8ID+3vLrHPcQTLe6VYazsh2jFmSXV9Th3X1r35XPxfVmbFSIewgiZMD7M2d6W
      SccidO9JQ52bq5sITj5+Af5BbrYAQEQb1yA3cllWVosYO2H2HG97MgqBERzNN9iLBAAMm2zd
      fX28vTztcDwJ2sOD+Td6Tf8ag7BrM4rk6WtTnlNEixg/jkWvq2qlOLkFeVLLi6uYEWPCnQid
      TTVsDre5sQFl5+fGeJVbFf0RaKqHN7U4+4nj6GmjXbFPyjpsWT7BHric7FrWmEkBNH1HW5PZ
      mfoMszO1f7yuBYKZNwSzgMwMiOd7YSQS6d85yweGYalUamExOCvxvLk8LyA6nU6nD1LWYVAx
      Go18Pt/e/k2aR/s6YK7CzAyIF42FwSa9Xmc0IWgMDodFG/R6FBaLGAwQFodFPxMfgsA6rQ6D
      w2PQZjkCAACCmPRanREBWBwBi0ZBEEAQk06rMyEAhydgUJBeqzbCAIXG4QkYk06rNyFYHAGL
      QUEAAATR67RGGMIT8GgIGHRaAwzhCHjMy3XyIojJZNDpDQCFIeBxT7dBRhDYoDOg8U93mkRM
      Br0RwuLQiE6tNQGAxhLwT5dJQ2CdVmsCKDwBjwZI37s2myofnPj620NxCfG3kkusmIxf120S
      sgKb7tyUOfq4WTzLTGgkVcsmLzaFTgh2eIPrvpfYjRfUxG/f8eOdhNtF7SA01JeMRQnKr27e
      cSg+7lYZlzQkGLM1dsLF3NI2vsUQP8P3m7eej4uv6baMGOqBh4Cak7/to88uXktQOkf44Zq+
      2PLZ+avxIpugoR6MgQf2O7BOHHfmx8MnL1y7lTx82DA6jQKbdG3F1zevPGAzY54rCZhU3BPb
      ll2QDBlnV7lk5Jr7FUU9aM9QPzsMAKrOtA3rtl+/lYQJHu+qLeqzBFI3XTwWF7Hl7Kph9Oby
      ciMZC56WN2qN3qCpfnT66OV0i8j5a+e4AYDolZ0/bP7ZfdFGavnJi+ns4Okb1i0eScf+G9vj
      RCvf9/ccdsNzvtm9nyOZaUtC4639P/1xnju+/rMPD3ePBlq3d385/74zFsV9uNMwcuupufYd
      tVI0AAAYm9JvgNiPT/hWrksuCgws10SsORHOXnuvZMU4n5eZ4oTwfrFLxq90bb61g4qIAbBT
      Sury0+slOhgAgMD62qz0RqEGAKBqaiTP23bkq6k01NMyUF+TeNZm6YHv6bc2JBTaWd/qs9Lp
      qMpX2QX6OeHw1IDoUb5MMgAAMWhqCouqGjK/3n9/5uavAzQ1Re09QMu7+Pm6bGzkMC/5kUMP
      7EP9G1LuNPPVL/GW3yBojn6BjoSuqnwrr3kuDAIAwMI1zMcGaSkotBy6whYYgEX9lytmbv7+
      VnEluznv/IZV717IaTfCAACDRChxcXaxtrSS1Ta29EqcHJ2tLCyVte09L7roXwKFp/j7+eJ1
      /MpOmgayBgDQGKHL189xo5MAADJ2SVqraerYIQAAqQbGCZI2LJj17cVSlQkAoBP1SD3cXG0Y
      DEFlbatA2mcJZM1whGVKlfH/byoZdUIjwnC2c5qybadaXHlbyutWuwYYTBgC64OPZ/1y4V43
      MbxXqQLg3zgBCIH1NY/vZnaQl66cao1/+hdjecrNnE7bNe+MtidC50/OhbUNHy7d2uKBson8
      6OAi3cezjje8NTHKDoXFY1RqNQzDGIYlHdfTqFHDCIKxob/05whru++duUcbvcDC/vlB7pqk
      w+euyphQe6sDfsPBHecmUZS85E2rr7BnRPpboXF4tEKlhikw3saKhkf32QYiO5EkRXcyazWC
      +mPf/cSheIrKiuxjRgrzcm3HzsC257b2Sm4fOdJJZXaWt6068L3iwTEBlZZ787HfjCVoXpXn
      iKl+9n/j0NLAeIltoPac0/vO1fiHeqhVWguSqYOrkVee+voKPzzcUaVQm1ri9lyvVXUWt6j8
      Vi0bk5daIOfWsVEhM0YzGnsQfybqelxmV1ONdcz8RSGWtxMyu1rqKJFTZgY5vcTWgFHJPbHz
      q3YrlhNea0uGeTK0hQURpeUm3ykNmDtrRMzsNSuXDCF3inyWhHPPnMwUCSvzhPZjpkbi6gT4
      AKbx3K0sdt0Tj+lr5vpj+xQQhHYLinDAqnvVqLCpi6dHezNdXH39fb09PQKGRMYO9dMp1D6j
      Z04dFuju4T0kNDp6iAfNPnTKaG+NQhs1fVnsELdBWd24f7xEAWnkUkAiAYMexlGZFnB+bquD
      qy2Zgof1OoCn+A6b7KBnC/TWs95e6Mvy86YoenSMmUtneeIVzXKMr3+wG1apsQyZOyHcxtHL
      k6hRUQLmTBxqQXiZS62bDAYDyoSCgU6ns6UilY0Kb19nDArPcHL19HKm4lBoNBpPtXZx9gwN
      j4AErSoKa+FbU+xhUauS6BsU5mgSwI4j540LtHJimY2Fz3hFxkKdsr6qxS4ixOq1/U+S9daw
      Bc6BfvT+RWgW0DPMztT+YU79mRkQz9escrlco+nvakZvMiaTSavV9vS83P7yP5/nBaRSqf61
      E8p0Op1EIhnsQN4wzFWYmQFhFpCZAfGC7IJWzs1PeVTHUzMDR04e5tVemJJZ0WkEaIZ3xKxJ
      wwgabsbDR418jXPQyHHDAql4sxz/GgZh/ZW7mQSv4XNjg3FoCAAjpzwtPrdeb2LOWDkF01Ga
      mldPcAmdNmGo5UvNA/15VN3lVxMLrYPGzhnpAwEAgKGjICmuqAMA50UbZ9O4FX2+cliZdOKn
      Arn9mNERwoJ76TWchrwHPeTgaWN8a+6evF/WlHj85xK189ixUfz8xLQ67t9yR/8gDMKEU7ew
      rABh2v3yXh0AAJgUZQ9KaUGxM2aMtDSIixq6wkYOM1XH3S/lDU6EOs6dEwmWgf5tcXdrnu5r
      ahLn3yl1jp0+Y8YwCw33yrnUPnUtrHhcrVu2b2KAIzogOAroJbcfAbqtkycLZ0vU8+qLmyqR
      d4+MD6CDgID+bzL370UhrpDTVg4P5TXcKW9URNkSTAppfa/QWJOPVodNGxe5cPEKxKSUlFqL
      cYOUhpT2VOrstsSEUQsvVzRrgkKIRrGwSia3KcswukRMxoM6LL1PAWnUCgiP+28rV/bl79gp
      eLzDhFWBtJoUHGFw9hP+R4AgBiwGCwEIAlqdDgCAojCXf/KRUi7KunXjvrXrkgir9qrCbmzg
      5AC7wYkQho04DAZAEABanR4AIorusfHLjzVy3sML51LQixEMuk8BOfhH0G9U1XYGRVlW5WYD
      l0AAwKi3t2+ZxQIAAEWrP+NBWQXHO4xWlZ0FPKIjPV/mpKd/PiSyi1bCFikEvQSv8VYAAKNW
      wRZIA3w9nS1QLVJxfXFlDY84bdE4Bn6QSiAq3Vkp6BLJeqQ0L1c6AMCoEreL1NEBLAeqUQZj
      GTJ5X85UgKY4OVFKk67dSXrcpqYPDfdVtFZomUMjPC0BAABPd3cm5967ci8pja2jh4YH21De
      4OJoEJypGJIzXXL6xBWe5dDFsU75qSUUJ9veysenzt5uwwfOimLEnz1W2tyWn/5IbRPq7zAY
      y7tgqfa4ruMnb6pcxi0aTn+UUMb0s+/Ov3/sbByfMXzVnNFeGLbZmfoMszO1f5g73mYGhFlA
      ZgbE841oFAqFQv1LVQVB0L/23vvN8wKys7OzsxukTuOgYjQa1Wo1i8V68VfN/AfmfzgzA8Is
      IDMDwiwgMwOi7zFepDHr0uEz97lqIwwTJ773+XuT/NF9HvA/4CdHhawlhQ2lwAq0z/RT32+w
      GcAGxG8ECGwUtGR/v+3ziD0FSwIAAABBTNyaB9+8f2bOzbhJltyDn2zJEWpYw1avmwTt+PSI
      gWo99u0vVk33JQBgEFZ+9eX+ZoHWd+Yny9w7D5x90CNV+0zeuHP9uJe7xh2sl2fdPHCuCLt/
      3xdMCpB3FO/ZubdZTZ7x4f5A7rH9Nxv1co6IHrNrgeOlu4V6jTZsyc5NC8PIaBM//+InPyfL
      NagV+49OwuX3PRbWcurABbe1Rw9MduupK25SGzIv7n9UKyExA9+e6HXj5Ck2cFq64aNoJ9Wl
      b/fl8lGz3tsx1U97fNfeMhn1rU92TvS3hAAAAGF4R3xx6o6vMm3FqmP14jnlyRduFPaOXrwm
      RJOfrvBbOd715skr/osWyh6fiyuVj1u+YbyX9OIv9w1oVSfK6/01s4vP/Ww793371oRHsiGf
      TGdePXa0QGi56L214/1f06VYtCpudloml/t/640a9W1p9wo5ch0AQFWT0OK+9sLPYR1PqqsT
      fnVbdfjLCbwdq292jtnpQzY2P04gTv7s0njryno5mkjZ8v1MJ3XO+o8KeevHeb7MGA0txdll
      LWyNzOPp751lD1Vhm74fyT12JX3m/m/vLFLnnPi2wetdXxvuN8c22KlTNm9K7pkV5kFCEJrP
      riPz5Xc/Ol/RE07M6rMK66zIl9tFhbO0vKbqLjlKKa8tzciTe3+8eujVnduV4es2TrXcvfWr
      okfXDj1s8XPGx99Krk65eCJXFuCgu3YjS2x6dhqNRJCflpTwKAP28tPmnf3pdkuIN+nQ57ua
      YE367VsVZUn3y/myvPMH73ICfEkHd+0qaqyJv1viM3UpterK+Yza0tSkBr6kuzY3rbjh4fE9
      91qpfsSGj3b8+trO3CZQnOauWRFi+39rVWFwnks3Lva3twAAcBsqWmvvb1y5/GJ+r72vf1fh
      /Yzseo7qiUAMAFC3NojbM468s2x9Yo2EGRjiYYWur2xxmjPS+SXHiPEaNmXBzJjflw+WysRU
      F0crG5qmq0GuRmR16XdlgW+NcXULHu5B1TbkNTjPncwkAgAwzMDhoOb6r8mqUCaG6Bfbp4As
      rWxNUqlMZ9TIKx8e27zlFBcAZ1cXulHaJTaFhoW5BIdhFZ16x1HvjrK5d++RRC+hBMxaGgrd
      jM826gTq396wyaATdVVfuJAUPn02ltfG05nQdM8Na1aEBI/2RPXciEu1DYtFCTv4JhhF9Vq7
      doUDHWfl5OTtwLS3szUaYQj1rJhETDC7rVWBGCxY4z9ZNum1tSNBEAr938uxQBAK89tf0Bgs
      1mfKsTM/GgvOq/zXvDvCVoUmOpEdySQAAITB8OyjN546uK4zLrFVZapLv5YqdF83N/pljzJC
      KDQa9R8xYtEYvUZngiECkY7FGGrK2oNDAkgoCDHp8pOu5SsCNiwKJ/72dZ+x7576aV7q0bNX
      fu17cQXbUatnOt0++UtOkxCBsUw35tPNzYGF16ihzslXjt27dNcyaKKVtDabQ122dg66m9/+
      JKVM6rxu9SQ5h6v9bXFjiq3zzBWf/rB91uOzx6TMMGc8Ghh4aRVVJEvX+WOsH2dzxkyK8Y8c
      5kxC0DpOTkEVAj+9MwiCIAwO78lyqMnPL2tga9GY4KHhBBjS8yvym/iDse7tX8ao6mnp+L0s
      BgAAt5FzXDvzHzy4r6KFIvXXH7RDUHsdPGa+L45X1WUMnzhR3piV/KAA8vaUpPx0IE3m64Rr
      q+14detUaGS8Do7UJSgaKUq8eyePPnaMNVpdJZK5ujAB0NXc3Xc8V+/miG6pa1NJuqs5/MKT
      e7+/nBiXUMiIHhERZfcCa7NH6HAXnLyVLaR7j1i+ek6gq4uXb6Cngz0rNBQn71ZTfN9eMd/f
      39+dqhEqaTOXLxsZM8wZKxUabBauWhngSEQBAFA4C1tX/wCWu6ePiwXKIXz6WH9yj5Iyff5c
      HwcGg+ng5jtszPAAe0eWnz2qV0OftmCer7ONDdPV19/D2obh7R80LMIXUqvdw8eOjAwfM3as
      C1ElJ/gtnjeBQcG/xOf4sgdT0SQLezc/H7KuNTm11TfEAwthKNb2nr6eFlauHhaS5i548rIV
      wyJD0Nw6Ad5n+cKx1oaeCiFqSGiEvZ7bprSe/9Ykmt6A6FVSqUSjp3oFuhBefNG/GCKGaG3v
      aoEVF1eJQkaMsMUKpFjvOTNHWeNRBDLZ3dWdgjcIuuUw0MilEiPGys3a1CijxcQEieorxET/
      VcunBQaFmp2pz3hV1mZFXXmTTVS4zetrbRZVt/c4Dgnop/naLKBnmK3N/cOcSDQzIJ7PAykU
      in+ztVkgGKSdud5YnheQUqn8185I1Ol0YrF4sAN5wzBXYWYGhFlAZgZEn64MAACsbSlKy6iQ
      OHs7/pG3xKTX5Kc90JBsmgpT1BTH39MzCCJ6cC0VZedsRcYBANjlGSV8yNXe4rkls6XsstvX
      EwvKnlS3CqwdnehEbH/uAzGK2isT4+8XVbSgrJ3t6JrMyzdTCorKKxuUGAuCpOrKnTSTlbuT
      JVyefDehkufi5ET+7zHdv8+VgSBidsWTDrWzDamtPDP+QWaHDO3mYoNFQQDWdVblJSSlt4hh
      Z0crQX1+YnKmAKY52lq85IXGXxChqae5qFaAdrKhIoiJW1faIkEzGU9tIYiWX3/jVny9EHg5
      URqL015QAhkV/IQbJ0+cOlPD0xv1qt5eqdFkUklFUpVOp5LxedyeXqkRgaztmCSUMTPpeh1P
      ppH38rgcoURhQgR3zlx70sjm8YUqnbGjOOVBcZterxULeDxBr0Zvepo/kLQXZVT0BIQEa6ru
      nUisNGgUPTwuTyjRG006tayHxxOKhD0SJWzUSYR8Hl+k0hmf3smzv/SI1HqTpL34l19vEr1D
      g+y0dy/ebJf15sQ9RJgh3gzF2ePny/MfHDr089lHVUZR4/lTJw5fTuLL+9im85UCq/i1R7/7
      6lpWo5LfnFnLDwnxZD86m9GqBQBoeruyq9p8gljCnGsJubW55Y3OLnbZyfFt4r9zwWRY1FJ4
      eN/uhNJuAIyC+pyf9vyQUvPMW41ouHfPJVP8g1FNeTkVNaWt8hfMrBB0PKnTucW6izLza91C
      JHt+TFm3bV3eiW/h2HXM7qQqtp7N0y7ZuLbg7MHAZbsAACaD8M7hay0mTLcAv3HHNKAQFD2O
      K7nZyYx9NxQBAAKNOTduZbSiYK3TsMUrp4U+XVafaGHn6x+kr6CV8bse3y0sbhSzufJZ6zcY
      sk9l8cnWcFcBatjRmZaXHlSaYC0xeMb2JTEAAS05dy+nNyAmlU3YgqGGFInt0IlR4QRMxNAp
      AIBWFI7o5OkXiNNgE+pVBoKDs6PwSeUTf6rQ0cW16xW/gr4wCvi6qPExuZ2A7BD0zvIgxCBm
      Z6ZCKAAAINp4LVvmhRjl0rJMtbXznHE+BTevqSEiCfOXJ9EMAL1EgY4aHlEHAwA0vXLayBFD
      On/7TNPDbqNRQzqb0f6jRkUG46OG9V0CmWqzs3AO4VHDfZsLChAqK8BSk/OktEllNdyXae/k
      aWeJEzV1sKWK3w+AAJbpwbIhgXZ2q0CiBiTr6OnLV0xl5T0uMJhgADQ5964+aWZz2C0F5TUa
      Pfz0KHbx/S+2bbtRRVg4KdzWwcWJQZKzW+rbm/IaZHNXr5s53IcA64se38uva+dx2vOyy59e
      L//BxeL6dm5Xe0pRlVKqQoiE/9ynSifuvvjD9p0/3/KMmelqSaL7+Htry+4lNrB8gwbDovc7
      OPfQMOZve1sjJn1jSV4vc/Tw3wYqEJO+o6qIQwodybICAOscEOQN5E18xR+f8KVD8A4LtSU+
      jZDqPzTQ4j+c+VqNuruxieTiyE+7lNWhh43avkogRNGUlt8GO1nlVCpF7a118rmjo1z2XLvl
      MvRtBpa79/yD2DUbIipb//MQPafg5O3i1TtWscqPAwCA0ajR6Y16PRZPgQAEABpNsBy5YOPy
      AGOnQFFZhwAADXFJREFU3o6Mf/YcXYZO/+rL9xgkoBY2ff3zde9FG4f5NhkhDAYYtQYDUac1
      wRQ0mhQ07a2tYyjVvVQaAAgAGLRF+Ox1G4eim+QMJy0euV3boxpnq2fnPuEHjbDDWzkt//S7
      6QE0AEBjXD7Au4X4ib5N7tk5Lag+dTCLoN9BDIqawqwGKWPOgmg6DgIAIEZ1Q0l2JZc4a/F4
      ikFUUcn19PJigHie6HXJzFEsranW7kHBQaq0G+1d3WXt5X0ICBHVl4qtY7bs2uKFEd/88evi
      qp5Po4fZ3KsIHB5hTdX7OmMzEuJwENpCZiCQKDg0mkAkE63dveiP46+nwgSiXKMnU0D9gzP5
      EtXMJfNIrXwSRI6dPfvc9VPf5VtPXLLuqbBRGDyJiH5aeGCJNB83q4Lke2S1kWmkx4bY3Tz8
      oxNdC+OcRkydUX7hxlcVlGELVj+NL2b2/KqrF/eU0mPnr40OnTKPfePwV5v1epT3mMWRGDSB
      TML+tko1GkukkEisiJghXLEXw5pMIaH/zjbp/wcaSyAQsBJ2+cWzF+QU+9zH12at2460Nbn6
      EK6ePcPD2OVn3Rnz1kZyU+qVs91458h3g2z/3gAhNI5AgJ9pA4sn4nFooOUnJjWOnhW5bGjl
      /s93GshBS/E154/fen2tzQaV+Ny+rd2MSIayXeg0cffKsa/0cmZrc/94facnY4j0+eu2NncK
      jJhoD1+zXes15fUVEIRCWzmxopzM0nmtMWeizQwI83ygZ5jnA/UPcwlkZkCYBWRmQJgFZGZA
      vEBA0o78jxZOnDxp8tpvb0q0pr6//P+jbM1eMGJ5id4IAACiuvdnjxw+edbsqWMXbT7epYT7
      FbCRX57w/rLF8+fNe+u9z1PrBPf3LvIOHz175tSYae+mFeSsGu8ROGpduRiuSfzGh0JZdaK4
      X1d5hcA6yb2f1q3ff8eg4l3Zt2nOnIXrvzzDVRkBAMCofnLjpwUL5izbdrytq/ns3o1L5s1b
      uv7bSp7y74xQr+Be/vrtT0/nAK3g5ncfz5w7e8lHx0TPTFqIUSW4+NWGz448NiKIXsZ5QTee
      35BZIPU5/cuq1jaVScG9c/p0dieY+va6Icb8A7dKsCYczc4qcuaSIGPVuXTx23N8E85cagEe
      y1a/5YG0Xzx7gatAd4i1z5SCwDoNfcPBy4tsy96avq+kanhyxuVyPjLlnc3TPXUX/1975x7U
      1JXH8XNv3u8XAUIggQTyNDG8pQiKtOCWamsfsF1bu6Xd1XXtdFe7XbVdq1Nb7Vh1O7W1xU5r
      lz6ouFoRVBRBBZGXYnhHgkiAhEBCQt4hucn+0XbGne1KSxVwl8/fd8787p3vOefe3+/3Pffg
      oXaEwnP7VWvWh+nKi441ctPy1z2dSYIBCHi6qr7+4LhalJW/bjn7o90fRhV+vO/B8K4LZx0Q
      4vShU369+dP10vcLnznRYPC60ePOq+29Y5j6KjMajfh+tujvMZ7O6jMNPQNWln/ilvqMgfzB
      4QO1b71SqXnq+QSq36orrtG/vHvX9b8XNeoeUC5/Mf9PEaVbdjTeMC3kzFgFz9V69lRz9+Ak
      FQETt862gL+9+9rnf/ikdxKEYAAAtubTVeobOhcVAV5zbVXNFCtQhDw3i92zbdeXfkZoT9l7
      RRedMWzzrm3vqJtrv6zX5z37TJSjpfh4fcOJkg4jcurdnXUONn3k1CvvfHP64121geT87Bhg
      v70Q6O5uqq0qv2ALjbK3V+jp8UrCjf0Hv6ks2VeiZf4uT1xdWdZad3LrjhPhibGNH23+7PIY
      AMHxtvJNe09LE7lVezd9WtnZqCVmLObjULj47BUZUg4E/KM322rO1ahtOGEEBQDWAwuEVy8f
      vdIaXKT6+UdB3HNw4qzHVmWrqADgqWy6z1bXeG3QpOvSGgEAPo/LTKPEsGhhGMOQhZ6UqApa
      9SM0fkIsYwYjxMfnPflImowIAEKKzE4OvrXxHWRRmvD7pYaSkPd4XroUDwDAMtLznppCQNSo
      hO0HPivMoL2/ecvx89XjTrufIH7i6eV0PMQODePwYrMeXHrrcuW33ebMTJm2W213TNCluauy
      5fqBCeECsUAoCWXfPnUmB3u7tE7OX3ZsUYSRxvt7hi0uz6TD0D8SHqeSyCViEtE0qNWZTDYH
      KmN1oTIcBUDAOKQ1mk12Nz73uTXKcAIZ57U7b48RsRpuaQbdORveXp3MBACKS5Td+vpgKyZF
      zr+bzsO7BITF49EQBAAgcBWb1z5uHx5Fk0gsBhUAAMEw7PN7AsEAIJNJKO+I+ovjVxJXFig5
      tBmMEMbi8SgYAADM3TVlpujir95TGL4t6/xuG4VxBPwPhUQUHj/V71G6yvb+dushN5FJJRPF
      SRlMGikEbda064Pf+9Xh8MRlWeBaqyMuXSFYmJSAJbIx4z2GMZ9Exeu6eP5C3eVh4+37Ny1n
      9dqX1q/NXkDXNtb2eSh8NgO4YZ5KOtJ65vTZ2nabIzRmgYRPplHJvQ3XEAwFADg8RiFikMgM
      UltDD1a86MUn+SXvHaq+dH7nhhf2lamDQZwofeX6P65/Ni+ViIYBABxhMhEy8pcu5k6rt3HG
      8Ju0xefU3FDcgFuVE08Y1ukD1NAMnL/81LkGL0fOGtqz/3NUCI/oM43ZPbMSIYkZQfGM1jY0
      6Vy0KDrQ9Rsm/+OaO1qbAaByBCy/vs8YyFlduCI3NwZrHnSzHi14PJZDZXJFCeJoAoEaGRUi
      SchJVnBFciXBNuBgJeavzJQpFBTXoAXmp2SmJSWKKTAEIBhHZUkWyNhEFIDxETH8gHWUFB2f
      IBHzQ7y1VzRUPsvWohE989rzSzj9N/WynKdz48NRACKweUohU9s3qnqkIFsWKYxfRLFp2rp1
      /MWrnlimopAIEUJpHJcBQwBAKCKdrUpNkwolGUuWRHNCYqTKWM5P6lKdyWIqjMaxOAKRRBhN
      cjeo9UmrnkrnETSdOipPoJKxezv74pbmJfGw4zqj2WoaGjQzY6Vc2l13Nt8JFIbA5olEcunC
      sGB9S78o79k8Ob6jbTAsJgILAAqDY0cJYyLoEDQnMtFBm7Z6285DA04kUvrw5q3PcfGzkFyY
      z0RPj7kgoDnBvICmx3wicZ5fxI84Uz2e2Xllm10QBPF6vSaTabYDuc/4EW/8HOlInGECgYDH
      45kX0M9lfgub5xcxL6B5fhF3roV5rp892TbihmAsV5acvlCAQ/1EM0PQ77J0tNS36Wx0rixD
      wWypu2CwAQAAhspOT5V3Xaob9fohGBspT01XRmN/6rD/a/gtN8vPNWF58Q+liDAwBEDQbdRU
      1raRYxIyVUIsCvI5zQ3tfQplPJ04O1lRt7G7okZNE6U+mBDz3aHNruH2k5e6w+RpmYooGILu
      vAK5L5aX9iMhXKr7qw+KOkYnnHarxWJ1ef2BAOKyW61Wm81m9/gQn9dltVjsTg8SCAIAggGk
      /uiHRxpNcQK2rqb4mNoeJZT6tHXVWo9QEE1BBk+WlgfZ0ki6/0hRkcYyk77duYR//NzhEiOa
      1PHtiU7rJAAg6DaVf1FuQaGaKk73WlwgiPRdPvLWoTKTwzflYPcEn7Hik1IbkdD09fFeDwAA
      BJ1DJZ9UIDR0VekpvS8AgshUTfUYfGScMkVgrjjSqG2vrqhusDkteNmq32eR399/GBMea7je
      veTVTdTrR5uHkEmImb/2xVQ+I4DoK873Zv91XZosJO2Bh74babT+WCeIVS2QYq0NGAJFrEyW
      B1EnSptsPv89fgxzFZvpioGwZv3SEeO5pm67Kh3ns5tbfdh1yzI6NQfab9qjnOpLXWiJhDVr
      EY4PN1jZG1cua9eUN2u8ooU4r9nQDLP2Ls/EVO++PugnB+qmEpDdeOLgjmtUiKTKWsjjBcVj
      3S3Vml7NDbzTHvHwGxsWfbrpdbepraq0FhKK7UM9jZpHUvkMACZcE1gi9r8ebmwz9B3Y/hIJ
      eEIXrZAySHf5tu8XgogXj8FBAIIgh8sFAAgEAggGhYMgCHLaTKNVPZ2xqYqh2ove2ZpjgcAk
      AYsFEAQBh8sFAC4QQAI4DA5AEGSfGNGVdd6cSkCUsEfXvPHC4kgAwOWiP5/pVxbmpAxdBDAK
      DiD+AOL3+xEAA3y4/Pktb5DHeqkiHgAAgqPFEn9Hry4tWnBL3WxlKOMF/9aQQOUIC7buGCjd
      3jIZhKH/0xcggCdFuqzDFqfZihPyWAAADJ7AdLj1Nse4jx0RAtn6+iuPtndoB9CCbPmTSbMQ
      IYnCnRjTW+1mG1nAYwAAMEQyw2wZtDtMwSgx3dvv6J/iKwyFQqN+uITFE/j6LpRdGfD6XSGK
      xUx92Z79xYMumMBS5KaQ/7Fn2+eVbW4EAgBAMPmx/IKJ+sMvb3x131e1CBoFAIBR6B/GglFo
      NIxj5j5RgKiPne0cu4ePYC5DDF/5K37xmzur3JJUjquq/IIJE7IiiXl4z95WLC9JLvnNS2+/
      +for6dnLVi+RzU6EFP6KZbQPt+5swS9KYYyc/OdFN1NQkITd/dqem5GKZImscOPb07Q2j14t
      2VJ0NXNJfHdzR+6GjVn3/x/j563N02OaAvJ7J3paWw12Hy0iTiHiETD3fT5pXkDT4191WxtZ
      pnfJIwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='eBookers Table' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvXd0Xdd95/s559ze78VFuegdBNjBLpEUSZGS
      1WVLdlwT25lJMn5vMu+99WZlZTKTZM1M5mXlvZlkbMtFsmRZ1ZIoSiJFUeyk2ECCBZUAiN47
      Lm5vp7w/AFKiLDlWxiJA6n7W4lok7iHu/u6zf2e33/4eSJMmTZo0X0yE63/RNE0CvIBu4YqT
      Js0tRf1oY89UVfVFVVWLFqw4adLcQgRBCHw0AHSqqhbrdLryBStRmjS3EFmW/eInfaCqKolE
      4laXJ02aW84nBkA0GqWvrw9N0251edKkuaV8YgBomkYqlbrVZUmT5pbziQGQJs0XhVuy5Klp
      KoqiAiCKEqIo/DP/4zN/A6rK5/B7/2VoqoKiXh8+CoiSiCh8lrJpqKqGIIosDkUfomkqqqKi
      iSI6UURTFTThY/o0DUVRuFEDoogkimiahqbN3SdVkVEREAEVkESJz1RFvyc+9wBQUjF6L+3l
      jffOMhHIYO39j/PQrqW49NLv7TsS0SHOn5hm+b3LcBsXeBtDidB0aDev7LtIwiAh4GP7t7/O
      /bWFGH/HAFWj45y5MEpFbQ3ZDuPiCQJNZqTtJK+8foDkkkf4wSNrGbn0FsPOu9mxvBidKAAa
      sfEmnv/xq3SE4qA3k197H996ZAOG2V5aB02sWeXi/Gs/pC5VwVLDCM0BO49+9Y9YkWu55ZI+
      39aiyYxcPc6BCxNs+cqfkqXMcPiDJlrLMsgzKxicWXh1YaaCEcwWM2P9I0SwUpBrZnpggpjJ
      y9KyDCa7OuieiJBRWk1FpkB/7yiB2XGiqonyZaugt453DvVDeS53V2bx+wutfwFqkslZmdK7
      HmPrhiKiffW8dqGeUq8CkzOkXHksLbQx2NZG/6xMXsUSMsUJUrYSMs0aU8Pj6N0WXG47Rp2I
      mpjlWmMrI0GR4pqlFGfpGR6ZRO/MIkMKMRWOY7daGWxvYiwiUrJ0DcVe6+fzNE0EaejqQ6m6
      i9yBBpo7oKtDYfX9bqSPBHcqEWBGV8FX/3gTXinJ5XMn2feBnUfXenE5RcY7znB07xSeR3O4
      8F4f3ke/SpYlQmvdZcZkE1U1S3BIIQa7RkhYs1la4mass42eyThZ5TWUeTT6e0fm2gBWKpev
      IdcuMTvWzZX2IXTuQlYtLcGiBuloaGVMNlGxtIZ8t+U3HiafawBoqSjXegeheBsbVtagRyWn
      YgmEZ3nl7YNY1jzCl5xXOXq5nSJfAftfvUTRvduJDg3y7ju9VDzyKJkMc2jPe/TGBIyF/dy/
      ys6en+/DUlGCGhjl9LiBhx1jjI4PMjIdRmWBAwBAMuJy55CXl0cs1YOueZiWk3tpuBCk5onH
      yQhf5b23jzOaErD1jrDK1k2P58v84dIEB95pZO3DSzlzspt7sj34e/bx1v5uUik41jPNv3mo
      kr37DpOx4TF2WBs40jhAZXE577+8D6GwlLgllwJPGTrpc4gAyUCGRWLyfB0Bcz6W9nZMuVXk
      uU3Iiob++ncKIkZHFiXl5eRaJOyJYY60NNLTlcuVdiPrCoYYmY5g9M8w7g/ilAVGLh/j8NFW
      ZtFonQqwUtfHe/v6qXz8MbxyH+/vOUh/XMDcNcR9S43sfuY97JVFpGbHOT9t5wfbbBx7/g3O
      JUUMwnGC+u9TNXWRfYebCAAt/iTf2bUBt+nm1vE59wAasgApswmdACBiFDUiWoqULKOoGpqm
      oCgyqiLhXbKZP3h8M2Nn9pJfey9/8OByRg6+TN2pZpRCN5FIiiW+lZgNy3niT/81jr7DvFAX
      xLt2FWvWFrFlRT76z1XQ74Y628Pbr77P8b0OiNtZ+cQjeKJdVGzdwhPbyrn60iHq69vR51jo
      UiysvHcZXGigTUoRzC3DZ5GQZQUtMU1DW5xVj3+PbcVhfvpPp+kbzSZ5ve7UuboTNA1lRiTn
      rhXkZdjQPq8xk97KyrX3YbAWMR6OMNrZT3j8BP/l9FHufvS7PLmxbP4+fxQRvVEAIUwqpaAo
      OgpW3MWWpXY2/tF6GnvPUL6jkKFfvENj+yQWh8JAaz5FZQYKN9zP1+6voX/v85w/0wL5TkJR
      qM5cgtW8kq/92fcxdB7k9SuTTI8McM66gv/rf78fc6SHoF6i6Y1zNLaNY3Fq9Ld08djmNbc2
      AAS9kTy3m/aua0xFS8ggyLHXnmM8Zzn6JAjxOLFwmIgfyNdhtNswSIBOj8luRS8KCKKVldu/
      wubH1xCeGcFuVOivsOO1iih6A9aP9PWLZddCdBRy37d2suOuYvSCAadDpOHEMGbM6ESQdA42
      PfwtNt9TzHQwQml+NsrQcxw87GXdk5sx68Nzv0gQkQQFRVFQFQU1w4zFbMKWEiAeJ6qGiQYk
      Miu28O/+q4+De/bw0nMz/J9//WVyP5e5kIDZlcuqWit17++h2+Omf9bG9lo9oWvNzNSWkWW8
      fq2GpmmoqSiDg9PExFJspk//vQZLDru+8WU2VIiMJyR0UwNMiZb5NmCjdueTbH54BcGZCez6
      BP3lbjIsElG9AYsgIAgSOjmOoqqomshUJInenMWubz7Ghgod4ykrbvNv1snn2wOIRkpqVpDf
      9mt++HenUGN6jL7VPPnwOmLxQV596yl6jQ6cFZXodHqMRh0CApLOgNGgQ0BPbk0JxrrdvPhM
      K46KJTy+qQizTUUSBDRJj8moQzKZUPov8cGlap7cUoFhQWeNAnqzjUxPDrm5uXM9khxCrzdg
      QAKMFK0t4YNfHeS5586Rs3oT1ctXUVpcTMMoVORno5NiGE0GJGMGa1Zk8MLrT/NBRMC6bie5
      hUXUFup4dfeP6TTacFbWMHjlIB+cuUQ0HqG0NA+z8HmubmvMDDZQN2nhkV2rOL73FY6fj7Fs
      6xPY5luToKnMtLzPf//PZzHqdOAq4oHH1uCJNmM06hBFCaPFgCRIGCxGdJKD6nvyuLjnXZ6u
      01iy7X5WmIwYDRICBvJXlCBdepsXnmnCXb2cR9b6MFsFJECU9BiNBhy55WwWXuD/+btLWJ0Z
      rHv4cdbdU0D9nv08U6dRteMx1nzCIsRHs0HzZVk+rtPpykOhEP39/SxduhThf3k2pRKZHqZv
      aIK4bCKnqBif14ocmqC3fwRFdOLxObHqJGIJiYwMC8lIkEhSj8djRVSTTAz0MzIbx+krJM8l
      4g+oZHjtaIkQM2ERj1tkomcExZVDfpZ9YTc3NIXgbABVZ8Vpn1/B0RTCwSBJzLidJlDijPb2
      MR5RyMwvJjfDQio8RSAm4M7wotNiTE7FcXgcGIgx1N3HdEQku7iInAwrqdAYvf1jaJITd44T
      fSLE4Og0mqjDV1RJttP0uS4pJsJTjMb05HushMb7GPSnyMwvweece8QriSADXf3440k0UYc9
      s4DSPBdqLMRsVMLtFAmMxrDlWomOhjFluzERZaC7H79sIL+4AAtxYrIRj9uCqCYY7+9nNJDE
      lVtErkPDH4SMTDtqLMhsdK7dxGZG6BqYRLJnU1acg0mNMNjdz4ysJ7+4GK/95hU1WZb9tyAA
      0qRZnHxqMlyaNF8U0gGQ5gvNp06CQ6EQXV1dt7IsadLcUjRN+/QAMBgMOJ3O9BwgzR2Lqqqf
      HgBGo5HMzMx0AKS5Y5FlOT0HSPPFZtE5QKTCU1zrGSIuWikuKcJjNSAAmpxgfKiHYX+CzIJy
      8j0WojNDdA1OYXTnUpqfjVEnoKky/plJkkYPOfa5bUlNVQhM9NMzMos9u4hinwctMklX3zCy
      3klxSREO40JnEKkEx/voG5lBsHopKS7EZrj5+RQPTTKWMFLgsRGe7KZ3JIDBNaed6CS9fUMk
      JBv5xWV4bfNJIZo6p33YjzWzgJJcL8Sm6eobJCnZKS4pwWlaaO2fhErUH0QxmrBZTPNtIM7Y
      zCxmuxeHlGCwv5fpqIavqAKfa36bWdMITnTR8/G6GRhD9BZTnu0gOjNAVJ+Nx6r/MG/sb//2
      bx2qqn5XFEVPMpkkEAiQlZV1S4dAWsJP/Z7XeP7gOVqaLpF051Oem4VOUPB3X+GVZ17jdEcr
      oxMqBbkWzr70Ku9cvEjXtRFcheVku0xER1v46U+fptO0hA3FbgAS07288/OXeL+5gb6eGbIL
      c+g79C6vHj7B1Y5uRGcBBT73J+Sx3DpSwQF2736BYx/UceFsC5K3ipJcJ9fzy7TEDMdf+TE/
      aRXYXiix+7XnOHahgWsd7Yg2L70N7/LmeydovHCR8aSP6iU+DCIk/f3se+Yl3mu8Qm/3FJmF
      PoaOvcfLB49ztb0T7PkU+jzoFtVYQGF2sJlf/8MbTGfnU5znQacpTHec4r89vQdDQQ22ocu8
      8MIeLl5rYyZioqSiCLMkIAcGeeWVX9yoG70zm4HWI7zy9kGuDiaoLHFwdv+bTNlKKcmwxhdV
      D6AG+mkMmXn0q9+lwDKD4nAjApqcZLDrEvo1X+dv7s/m7DuvcvzMLOOGKv783+8kUf8aRzr6
      qcrUaDl5gsGwSrE8nxmkacz01jOStZm//NZ6hg7/iuPnziLMwJN/8pcUhc6zu+MqK5YUkmtf
      uOoQJCsrdnybR77lpu2t3XSNjZJQC9CLoKlJBpsv0NY1RrBAIDJ2lQFjLT/49/eROPc0e68N
      smv1Tv5823dJtBzjUEMPQbkWq6Th77vAkGc9f/HndzN+9FecrDuLbiLF4//qLyiPX2Z3SyuT
      1UUUOBdDGuEcyegs1+qbGJ+O4Q7OHaRKhEa4fPw04ymJeDRIZ087xff/KY+sUHn/wGFaR9ey
      uchKbOwq/cY1/OD/vo9E3dPsa2rBKamUb9qFvbubpsvHmLIt57HSHERhke0DxEIzhOJDHHv1
      Gf7Hs+/QPBJARUPTVJJyFKPPjd1oxuCx0dY/DDkO7EYTGT4P7RNT9DWdp51c1tSWIX0kHTgZ
      DyPlubDrTbhy3LQMjJF0GLDbrXi8HgYjccLxhT0DrbN6WVVegiE8zWjCSUl5PiYJ0DSik71c
      uDZOyYb1eOxGjPYsDKFeTp88ScO1EZonYxQXVZCjjzI0JpNTU43L8KF2MdeFXW/E4/PQMjRO
      0q7DbreSkeFmOJYgEEsuqPaPozc6WLpjG2uri7AAyFE6L55jPHMZq6p9aKpCUkxiyXJht9hJ
      mQ0MTs8lEBqu180Hc3XTOC2zMs/F+IVDdNk9zA4lcejiNDY2MOBPLa45gKZCUMviy//HD8ge
      P8DP2trZuqycbCMICGiKiqKqaIkkdpMRFHXuAH8sji2V5NSxC1weUlASwwQq3Xx1VS4FTsPc
      ME5RUTWVVDyO02RA0OayFVOJBFZp7njfwqISnejh6Bv16CtWsrrGh04ATUnS13CEtw9cJdcT
      oinax8XV/4rHNuRy9GIPNpxkZnhQo5OcO3CGESGPnZurMF9Pzb+hXSMZi+M0GhC0uTXwZDKB
      RRLQSwut/WYESY/VZUcvCCSApL+bvftPMqroGJwYpz/qYLtDRqeoKIqMqMhYDHNN2ZBdw5c3
      tHNkvm6yMn1UrtvI6vX30VJ/jDMdUcba6knWQ9V6dXHNAUQhwciFAZI2C8lAN6OKm5X5uQiK
      RiowRVPdMIJlio5TM6y+ZyUzZ7uIu1J0HW8ja8l67lq7hKI8L4lEAM23ml012aRCSUQhStOh
      TtSMGO1HuijfsA7dtQEmlCTjV9vQ9MXUrirBvICTADnYx56f7GbQ7GP56jxsRhOinCAWVbF4
      vBQWFuDShenS8ni4xsmVCY21q8pR+qbIKigkUH+Us70CK7aW4zSaMOo0Iv44khSj+VAnsidO
      +5FOSteswdg7xHgyydS1dmStgDW1ZVgWcgL0icTpPXMNJbeA0rIcsn055HvtjEdi5NesZ6kY
      49q1GWR5iIFmmdqtKzGE46iJYQ71xFizqgKlb4qc8tUsr8hGDvRz7kw7+dWFXAsa2OBzkEzq
      44sqACSjixxHiAMH9nM54OGx+3dgHeqhpStMSW0l4f4POHC6nYKtj7Jz/TJcWhd73ztGLK+W
      h+7dSElxEaVFBdgcFrKKayjTB7haN0FW7RIs4Ubeef8M+pptPHTPOgqcIY4dPUhPys3OB3dR
      5Pl8Myj/OSKT3ZypP0bH4ABtzX3oc4owTw1y9aqfwnXLqSwuJs9rRfGUs31ZKWr/Ud7ZdwK5
      aD33riuhr+UgV/qG6LzaSVjMIM+j0V03indVNbZYC+8cOIVQtZkHt2+gyB3lxLH36Yza2PHg
      lyjxmhdU+yejEp2OYSnw4cvLJMdXSGlhLpLVSc2SFawsdtHddJgPmsdYet/j1ObKtB3rxbyk
      GMPA8Rt186Xt63CbRfxDrVzTlXLfuirMfWc51Z9g5ead8cWXDTrvIKEJApIIU4MDTMVEyqoK
      0c135dedJTR1bkgkCCKi9KGDgqapaNcdB+ZdCK47NVx3KLj5exbGkeAmNA1FVbjuRSaKAv7R
      IcYDCuU1pRjmr/kkPaIw9+/rRhQ3fqaBIAqw2LV/CpqqgiDc1AZVbc5LQhC0uUNCGoiShChw
      w0njo3rFeWcNTVNRNQFJFFDn60pVVf+imgMAc6egbqzJaThzcrGrIgYEkKSbZu2C+Mljd0H4
      MBiun4EQROnmpb6bvmcRIAhI0kdvh4Y9MweLR8DwkWs+TY8g6X5jReNGu1ns2j8F4RPurXjj
      sI+A+DHNN2xxPq6XuTZxfV1EFOfakfzbcoEWBwIGg/Gfv+yO5Ius/dbxqQGgqiqyLKdzgdLc
      sciy/OkBEI1GGRwcvJXlSZPmlvJbA0BVVZLJxbVBkibN75vFPxNKk+ZzZJFPgj87199p8Jtz
      F21+iVGYXx3Rbiw53inznH+J9g9/dvvx0fdX3KRZ0+Y9oj7Upmna3JLq3L+4bohyBwWARni4
      nfeOnGRac7J550Msy3cgAGoqSkf9EY5c7sNYspYn7qkl1n+aQ6ebkB2l7Ni5i7LPy0/zlqAR
      Ge3k/SPHGJcd3H3vgywvdM3tg6RidF06yqGLPeiKVvPE9vUwdI79Jy8xG9NRvn4n29ctxbp4
      cuF+J6KTXRw9uJfOSZHM4mp27bqPHJuAmgrS+MF+zrWOYimq5YHt69HGGzl88jK6JTt4fF0J
      I1ePM+tex+qijDtnCKQlZ2mua0F1VrG8wEZvcwMzcQ3QiM30crlDpXbTWpzDZ2i62sLxxhHc
      SzZQ7fRz+fJlAonF4iv32dGSAa6ebyJhrmRliYu+5itMxeb0JAN9XGyXWblpHRmjdbT0jzLS
      M47Ft5xtO3eysjyPBT8K8ZlRCE6OE1WyuWvHLjbVLsNpmnt6xaYHaI5YWbOhFrGzlcbmTi52
      D5LMyEfoaKCrv5Ur1xJYzUYEQbhzAkCOBpjRp6hYs571KyoIJv2MB+MASAYLHrvIeNcoRkcV
      mRaNlGimsKSasrwMBiYmCCdu3zfiyLEQ01KcsrXrWbe8gqgyy+hsDABRb8ZjF5nsHEFnryDb
      CeMTIcb7BmjvGSUiC3yuRnKfB5pMcHaakf5puru6GQtrSNJcwFsyl/DVLz3A2tUrKCrMwmzR
      Y9WpzI4OMqOoDHV0YCkoJc9lQdPupCGQpqGJIEoier2BmCYQTylzHyUTRKbi6PNNxPsTaNZ8
      qpwtHHzlp7h0OkZcFaTmX+BxW6JpaMK8dp2BhCYQS8pzH6WSRKYS6PKMxPvipIIxpv1RZHs2
      umgvH1yU8dy7kyzrbdQUFIXwVICAZKFQl6D10gFc3m+zLNuMIOkwKiG6zjczoy/irspSrDEL
      FmM3AVkjNDZFYuYUP2moZ9O2B+6cHkCQdEhJiEdiBGf9WJPgtMztpCZCE/RKXjbes55MIUAg
      rpC15G6e+OofcM/aJdRkuLEs9Is1/hcQJB1SSiAejhIMzmKKa7htJkAjFZqkR3Cz/p4NZEtB
      /AmJJTt38bUnH+X+DdWEI1HCcXmhJXwmNEHCu7SWr/7hkzy8bT0eE4wE5np7LRWm6/xlWvpF
      1m5fTqbVhM1bzLr1a3EpQZJ2E736XFbmORnt6b5zegCd1Uup08HBd1+kXoSCyu04lWmunY/j
      LcunNHaAV19pxk4BWy0ife0X6RyYQhc3UrVxDa5PcA6+XdBZ3JR6PBx4/2Uuixp5pdvIwE9H
      XZSsyjzKkwd47ZVWbEoum2xGhjqPc+7cURLxOBmVm/HebjNgTSM008PxK0c4qULCkkutPcG1
      M50YvQO8/ut9qCVlzL4zzbod26jJd+IfbqNtxszWjUVEjhylaVyjcFnlp5vjNjc34/F4FlDl
      Z0eOztDZ1UtEM1FcVoFTTOCfTOEqcBAZ66VzyE9GQQVF2W6Ss/109o4gWLMoKyu77VZBPo4S
      m6Wru5ugbKS4vBKXLoF/LImz0EVsvJfOwWnc+RUU53hIBQbo7B0mKrkoLSsjy2b4579gkSHH
      Zunr7mAypiezqIISt8T0YASDK8FQ/yChOIiSlYKKCnJcJhLBcUYSZoozzMwMdtIXBF9x8aeb
      496OAZAmzWckbY6b5otNOgDSfKH5rd6gLpfrjkkTSJPm4/xWc1yTyUR2dnY6ANLcsaS9QdN8
      4UkHQJovNItu9ycWGGNsKkhKFXBm5pLptM6d+JcTzEwM4Y8y93PHnJWHmooxFU7gtDsQU0HG
      xiaIpcDi9JKd6UEvAppK2D/O2EwYsyubHI8dLRFgeGwKRWclJycbi36hnwUqUf84Y9MhBJOD
      nOwszDeVSSUWiCBYzBj1EongFCOTs0hWD75MD2IyyNj4OAnMZOb4cJjmb62mEpmdYHQ6hMmZ
      RU6GAxJBRsankEUz2Tk5WA0Lrf2T0EiEIigGA2ajgURwnNHJAClFwOH14bEKzEyMEE7p8GTn
      4bHevJehpuJMh+PYbfa5upmcQXBkk+eyEA9PkpRc2IzS4jLG0rQkDW/9I0+9dogrjS0orlLK
      8jLRiwoTXXX8/NmfcrzuCsOzBsori7FICsOX3+M/7z5PaeUSElff5alnfsnpS634NTvl5aVY
      dJCYHWT/M8/y6okTdA1EyC/JZfDYXp55423qmzsxZ5ZSkPWhEe1CkAqP8M7rz/DWvoOcOncV
      s6+Gohz7vAuEzExvI7t/dIBURQk+Y4JTL7/ALw8cpLVjDG9eHmPNB3jm5Ve5cKWRkOimpCAf
      owSp4AgHnn2Ol48d51pfiLziPMZO7efp1/dwobEDQ0YJBTmuBdX+m6iExq/xzo/eZtKTTWGO
      navvPsVTv97PpYYWkjYf4nQTz77wHGfqm/Gn3JSV5WG84SScYqzpEP/l1VPkFxcx3LiPp1/c
      TcMI1JS6OP/eKwwaiinx2haXOS5qkEl/Po9++2usqszF6bBj0gMqSBYv2772FxSYRzj87GWG
      w1sxRwa4dOI0fbOlpJQIU9N61u34EzbeXYPbbsNqYs4ct+cCfZYN/NVfb2D48EucqDuLMpji
      K3/2VxSF6nm3o4WlZbnk2BYwL1gTKdjwBNuezKTj7Tfp6R8gvsKHTacRm52g9Wwd7VcnyQ+r
      RJQWmqN5/Nu/+B5aw1scv3QeKTDDpm/+DVttHbxx/Dx9K2tZnq3D33eebv1q/vKv72Li6Mt8
      cP4cDER55I//A+XJBt7taGJpZR55C2gM/HFSMT9tZ+poaxth2WYZTQsy4c/mgT94mDXV+Tit
      RiaHjTz2vb/CHWnn+L6rTN67HodeADSiM4NcPn6KHr+PZDRE96xK1fZHcVzroOlKlGGpmkdK
      cxAXWzq0Fpmm5fJZnvvhP/Cf/u5/cLCpl+Sc8xHegmrWZEbZv+dNBjMysCtBrl48T7SwlqrS
      DEjEGLp2hVefe4q/+c//jRePXiKcmkuRTURnkUoy8ZhtZOS5aegZIu424nG7yM72MhCJElxg
      g1i93cddK5biVGPMCh4Ki33zefoCBouH5bt2sK6yABOQjATR8lx4rHZy8r10+BNIgsZAZwNX
      rw3QPDTFVDgKQCIyi1jsxWO2kZnvoaFvmLhTjyfDRXZ2BoOxGLORxEJK/w0kvZ2qLVvZuLoC
      G6BF/bQ3nOP5H/9//Me/++/sbxokq2QpVboh9uw9wKwvG5s4d6/VVJj2S+cI5K6ipiILzE5W
      +qz0nXyHVqOT6f4ILoeOwb4epmK/5VD8gqCZKLn7Ue7etAbv5GFebGlmY2UROXY9mqpizKzk
      G9/5Y9569XneOwH9py5izTTSMRjmlC+fZcUb+N6mP2KFa4hXT1+ka3Ilq31mQJhLGdY0VDmF
      WS/Nu4VpKIqMQZxzDFtg8SRmBjn5Zh3JrCrWLM9HP18kyWDC6XXxYbrSvB405FQKsyObzcty
      OHroGPVRK9bMXPSiePO1moaSSmHWfUS7LGMQhDm3uEWEqDPgzHRjnDfHRTNSsP4h/u3a1fgC
      H/DC1QY2VBbhK1rL974j8tKb+7k0cBcPVruJjTbxxt4L6D1m2odmOZW/nP9t+2P8p6U76Gg6
      Q13bOBMNxzh5QmT1vV9eXAGQTMRJZuuxCHH8/jCa7EFNxImoCQa6TnEplMldOQqqIJGVV8Oy
      xx1MDXXSNDOGSScQM2pYrRrhgJ9ETERQUkSCYPHkox3voKVCpP/MNBvXbyByuYVr7S1MjXaQ
      K5bhsi5sQpgSHuL9X77NgLmM7auyIZkiKWvIsoDJdvMbzi0ZuRivNXK1upXoqUFqinwMhWKU
      b/8DsvztnL8KuU4dkUAcc0YBHOmkpcrI8OlJ1teuJ9XcSmdbC8GZDrK1fDLsi9uAK5VMkMzS
      YZES+P0h5IiFy3X7UV0VLDVHkfRGbEaR6GwUbIU88NhOJoe6aZ+VsZoM6PQmiI7S1zlJYUU+
      3djZVSIzOT61uCbBgt5EvPc4u994hzq/my8/uBP7SA8tnSFySh1cO/I8bx5pQax+gG/s3MiS
      qiVUl2QTtWSxrXYVWXIv7+1+mcNtYWq3P8JqV5yrp8fIXFONbvwcr75zGLVkM4/s2kS+eYr9
      +96iNWjh3ge/RFmmZUHPBIfH2jh4+G2a+npoutiBmFmIZWqAlpZpMqt8GEji7w/iXFKIz5eL
      OXKV1996l3Fbyl1vAAAgAElEQVRbFQ/ftwWv0sf7b77IpYEUmx95kiLTNC3Hh/CuqcY4Xc+r
      bx0iUbiRR+/bTKFtlgPvvkXTtJ7tDzxIeY6FBe8AfwOFwPAspvxc8vIzkQdO8eYbb3F20srD
      Dz3CSq/M2XefZ9+5AbLXP8Z9lUZaDnZhW15JTVU1NaU+YhYvd69YSo5dz2TfZRqUQh7cWI3U
      cZTD14JUb9m++MxxVSVJMqWgCRIGg8RMfz8TUSivLkZMJZEVEPV6jLr52NVUUqo2Z/KqySST
      KVRE9AYDEhqKoiHpRVQ5RTKlIOkM6PUSqDLJpIwmiBgMhgVvAJqqkEolmTuYJqAz6AiODDE6
      K1O+vBwTGkpKRZBERFFAVVIkUzKCqMOg18O8dk0Q0RuMiKgo8ofaUykFQafHoNPNXyvPX6tH
      WpS7/RqqrKKJ4pyh7bxeTZAw6PWIgkoqmUTRBCS9Ab0Iqqwhzg9v0TRSqop0wzxYRtZEdJKA
      mkqSUgFB/PR06AVzh74JjXg8hqJIWK2Lu5v+/aORSMRIpURsNtNCF+aORJblRegOfRMCJpNl
      oQuxQAgYjRaMX7S4v8V8agDMrZAo6WS4NHcsiqL8dnPcoaGhW1meNGluKb/VHFdRFOLx+K0s
      T5o0t5zFtQOSJs0tJh0Aab7QLPJVoM+AJjPZ28AHZxuIGrNYv+VeKnOsCEBgsJHDpxuZjSRR
      RSNF63ew2tjHyQtXCcYlSmu3snF5ObetNZCmMNXfyOkzlwnqvazdfC/VuXYEQE7M0nL6CA39
      AbxVG7lnTRWGUD8HT55nImlh7eatLC/0sKjtQdUEfU2nOdfYg5BRztbNd5Pr0iPHwwy2jeCo
      KcVj1CMA8ekejn1wjtGZGIoqkrF8ExszY1y42Iqu/G7uW57PRPc5AvYVLM1z3zk9gBLz09DV
      jeLOwxoa4tyJJoLzhmdGu5fyyiVUFDsItk8jSjIj7T3E9ZlU1dSQn+n6jZeq3U4o8VmaOjuJ
      O/NwxsaoO9ZAIAWgERxp48IUFBd46D9xmtaePi4cPcdkykWeI87I4DUii/w9KMnAMHW9Ezh8
      eaS6W7hwpZdwdJbG9/fw0rMnGI186OuqMzkpLqtiSUUOyf5p1FCIhs5rjKl6/A31dA+1U984
      gTaf/3S7PvN+A9Hk4e4tjyDpREYaDDQMKzc+M7nyWLU6k2sXhinYtoZ1hWbqL8iktCShhEiB
      2XJbB4BodLFx88OIOh0TLXXU96g3/PGd+av4ek4tFvzEh45BfIZZiw63ZkAw+SguKseyyE3B
      9I4CHrrfh1mv0KwmGdfJRP1hdJnZFLmCSB8x9tZZM6hZ7mS0/QwDq6u4a2Ux1xp7SMWiJBUD
      A+2tGPKrKfHaQbiDAkAQJSxGI7NDHbS2pyjZvArbR9TJoTG6J1TKl6/AoQUZHZ1kzKxCVx2j
      sRhf3r4Zt2lRDwQ+FUGUsJhMBIe7aGmJUXzXWhzzjVrSm7GpQTrOtBHPqqLAI9LWMIGi1xOe
      GmU4IZOVsY0M8+LVLkh6bEaV8far9M04WbGmGK/Xgssl03/kCh/fqVITIfoHx/CW30NOlhfb
      slUoqTYieivRqRlk/0V+2dXGmnvuv3OGQGgygaFOTh/uJat2JdXFHx3XKsxOTpJIWvBl20Gy
      seqhR/jud7/JkztWMRsMEIrdXgaxN6EpBEe6OX2oC8/KZSwrybihXU0E6Th3iY5xI+u2LMVr
      M2M0eFm9dRdP3LeWcDTAbHSRW8OrScbbWzh3borKzasozrQifuwF2h+iEQtNMTUpUFToQULE
      6VvCjp07yddHiVkMdGsOCiwwcLXtzukB5PA4x958hYv+DJZYUyjKaqoLrPgH4viWepmanSLk
      KMJrFlHDCfr7znOp6QKp8AzugvU4b9sZMMjRCU7ueYVz406WWJIoaoqlxXZm+mKI4hV+/fo5
      3LU1aCdSrN5QxRK7hQtH9tKoC+POrcGzyMdA8akO3n7pdSYzSoifl1GUDdQUeQEBQRRuTPaH
      WmbxLs8j5h9hyFjMthun3DRmRztoG5dYv66U4MkzDAY0Mh1LPj0demJiArPZvCCC/yWomobO
      asTlzcBmtuDxZuNxGJDjYPXaMJmseH05ZFoNiEYbuS4zclLBllvDprWryLyN3XE1DSSLYV67
      FXdGFhlOE0pMw+Q248rx4LLZsFpd5OQXUVqWhaClMLiL2bB69aI3x1VVDYPbitvtxmq24c3x
      4XaYkCQ9jqwMvD4nBkEhFlaweO0YDSZcPh++eeMEAFVRMOeWUZGfS75FRHLlsWJl1aenQ6fN
      cdN8AUib46b5YpMOgDRfaD515qfX67Hb7beyLGnS3HI+NQDMZjM+ny99HiDNHctvTYeGubdv
      pwMgzZ3KHfWe4DRp/iUsgt0fjWQ0jqbXY9Dr5kyb1BShaAKDyYJJJ4KmkYjOMhOIomqApMfu
      8uAwSciJJLImYDCIRAJ+gtG5zC7BaCXD5cCoE0FTiYdnmQnFMdpcuO0WtGSE6dkgqmjE7XZj
      1C2Onk5TZcKxGHqDFZP+uvbAvHYNJD0WiwklHiGRUkEQ0FuduAwqgUAQWTDgdHuwGK67ZmjE
      I7PMBGMYrE7cdivIEWb8QRTRgMvtnqvjRYSmpgj7pwklVIx2N26bGTUZZsYfRNOZcbtd6EkR
      mPUTSWpYnB7clpv3MjQlSTCWxGy2IKai+AMhBIubDJuRZCxASrRi0gkL7QukEpnq5f1n3mPG
      m0V+pgNRUwn01vOPr+zH4KumyG1CU1J0n3+bHz/3GocP7uf1PfVYl62m3B7j7K/30zorkJej
      48ze53n21b28/9ZbvNcUYuW65XgtepLBUQ7+8uc8s3c/HSMpSkryGDm1jx//6iVOX+nE5isn
      P9O+4NYoaCrBgUv88KV3ULOrKc0wo6kyffV7eerZX3P40H7e2F1Hwilx5eAbvP3eAd56aS8t
      igPD+Bl++cuXOPLBBSKmMqpKvOgEkMMTHP7V0zz99j7aB+MUleYzce49fvz8S3xwqR1Ldjn5
      mY5FZI6rMTt0iWd/9mP27n+fSz0qlZW5DB7dw49f+jVnm3px5ZZhDHTw4rO/4PVDx+kOG1he
      WYbp+kNMk5lqO8Hfv3GanPwCxpr28dQzL3JxTM/yUjf1B16gRyikJNMWX9AASEZnaD5ygIN7
      O/CsqaWq0I0aneDSO7/mzbYYK9eup8JrRhAlPPlL2LptGxWeIEgruX9XBaN1Jzm87zxRRyW1
      Gyqpql7Hts1rcCiTFFTsZFNtLnpgqv0Yx7p9/Os//zaZo+dpmI7S2z7Fpie/x66iFJd6Zygs
      Lllwm3A5PsXlfa/xZkuQpWs2sCTLgiBKuHKXsOWebSzJDKMIy3j8a/ex9e5t3LUyh8SsyJat
      mzDaLKzZ+SQbM2RaWyYpXbMUu05j5toxjnRk8Mf/7jvkTtRzeSrKQPs4ax77Lg+Ui1zuHie/
      uAz7IrJIj8yMESvcyh8+vI6xE3UkM/S0NE+z7Zvf556sEPV9kyQD0ySc6/j6lyrxNzfiqtlI
      pnnOHDceGKburdd4u09iy/IiOvp7cVRuJH+4k5Bumh5/Fls2rMRmEOMLqlrSWSjdcDeb1y7B
      poGmJOhrOkOPsYQVKwtuulbUGdCnJrlyDVY9vJYss5nsqlXcc98GsgQBBAGdXk9iuovuRCEb
      t1dgng/eWGgKqSoPn8NDTqGL+o5eYl4T2TlZFBRk0xcOE1hgc1zUJAPNZ+mUilhdW3zTR6JO
      j0GZouGawoqH1pFtNWHQqQx09aOvWcPyZWVsWruF5TkWYoqZ7LJi7POZHbHQFGJlLj6HB1+x
      m0udfUTdBrJ92eTnZzEQiTCzqMxxBbwla3m4thTiKaT8CrL0cVI+OzlZmRQWZtEViuPIzEbp
      OMpzvzyLveoefLa5e63JMTqvnGXCXU1NdQ6YnCz1Gug48iaNkpWJ7hkyspyEZiaYTS7wK5Ik
      gxlvfham+Yaa8nfy1r4LDI2OMNDSyJVr/URT1/P6VWb6rhFx5lORl4lOMuDJz8Gm/3Aao6lJ
      htuuYqmspcDxm4Y6GnN2Lx81g9VUFREQfiOp9taSmu3hnXfrGBweZqClkYaOPiLJD7X7+zsJ
      WbKpyM9CJwgkwzMMD09RWLMCh0FESwVpPXqa1j4LG7ctx/qxO3tDu/AR7ZqGKLDAyj8BTWa2
      7yqH9lyj5K6NFGVYbpRR01REJUl/eyfR3Lv5+lfXELjUykxy7lBAbLyZ3e9eYXR8iKGWK1zu
      9VO5/nH+w1/+R56o9RJMqrTVv8s//egp9p3tWmSrQDoXq9YvJ9sCyViUWCJJKpEkmZDR5DCd
      fX683gJc1k+eu6uxMRr7TCwtzZqzwFNkErEUZmcOanMvPeM9tJ2fYn1VBfbJKP19PTQ39JAr
      OhfcHBedk5XrVuCzicSjUaKJJKlkkmRcRlOidPfN4HQX4rHpQVMJTQ8wFPRRlW+DVIim9w9w
      /EqEFfcvw6Of1x5NYXb50Fr66BnrpfXcBGvLy7BPJxno7aa1sZts1UGGbTG5b2kEBxrZ88sz
      GJZVU13qxmT3YBoO0DfQQ9OlXooNLiwGAVmU0BtFNFVBVRUS0SSawcu6TUtx69T5ekwhGW3Y
      TRpjveNklviYyqzl0Y1L0YYGFsMqkA5nrhdsRoyuXO57/FsQHsF26jJF1WWE2lpomLGw9p4c
      QhY77nwfphthK2J2u/HorYiAFo8QzC8h12VBRCU43kfzuRBVu9axIuN5fvQPh8ireoDvr1tP
      zDDDL379Q2KmIr72rS/hNi3ss0Dv8LHjkW+wIzKG51Q93soKop2tNAzrWbuzgJDZgjM7D7PI
      nO9lMkGqvIpMo0gyOEXj5f2cvirQOlRP7Y6v8PDdOfSf9VP1pbWsyvkVP/l/j5Jdfh/fX78B
      xRbi6d1PEdXn8cQ3d5JhWTyHYTRNZaTjJKeunoOxJupOr+Sbf/pV7lpp47lf/ROKrZyvf+dR
      yqV+ul58mZ+1itz7yL8hUx3n0ttDlH1lLQ8/WQazvainOrhrdRkmSWB4qJ0BZzXfWF+M1vs0
      e+sFdnzlOywCb1CNVDwFOh3668txmkoiJSNKEoH+XkaiULm0FDElg6THcGPJQkNJySiagN6g
      Q1BlYrKGUa9DFOaegnJSQ2fSoSSiROIpdEYLVpMBTUkQicZRRR1WiwXdgi8BzfMR7aHhfoZm
      ZCpWliOlZJB0GKS5OlLlJAlVwmyQ0FSFeCxMIqUBAnqjGZNBREmq6Ex6lGSMSCyJzmjBYjKA
      kiQSjaEKOiwWC/rFswQEgJyIEImn0DQQRD0WqwVJTRKOxkAyYLGYkVCJRSOkVDBbbOgljVRM
      QWeeNzrWFOIpBZ1Oj04UUOTEXH3pRVLxCDFZwKg3LH5z3Gg0gixLOBy3z9mE3w8asViEZFLE
      6fyi+qN+vtwW5rgWi22hC7FACJjNNm6jM0m3Jb/VHPf6nzRp7kQ0Tfv0AIjFYgwNDaWT4dLc
      0XxqAMiyTDQavZVlSZPmlrO49gHSpLnFpAMgzReaRb4K9NlI+Ieoq7+EX7Wzat1dFGfMvVtL
      U5IMd1zkQvso3vJa1lUXYdYLxAN+JidjZJbncbu/hSs5O8L5+otMyVZWrttEqXdu6VRTUox2
      XqLu6hCe0tWsX1qCRS+QCAWYHA+TUZaP+Tab5mlygoH2eurbR1EVFc2Rw/oN6ynxmEn4BzlX
      f5mJ2QQaIq7KWlZnxGlsuoZUvJYtVdnMDDQQsFRSke28c3oALRXi6ukLdA7FUUKjNF9pIpDU
      AI3o+DU+eL+dpEFi7Mo52seCRAODHHv+Rd7c10T4Nl/p0lJh2s9eoL0/ihqZoPlSA/753Jj4
      VBcfvH+VhEHHRGMdbSOzRIPDnHzhRd54q4HQ7ahdEDCYrDiddtTwCB11gyTnNzIFSY/N7sRh
      0xisb2didJxLrY20TfjprTtH73AXdRe6iKTm/FPvmABQojOMqnFW7niAB7esIhwdZSyYBA2C
      E50klqzmoV0PUFsm0jQwzmTPNJbiXDzy7d8JKrFZRlNhlm17gIe21pKIjzPiTwAaofFOouUr
      eGjnA6yr0NE0MMZkzxSmIh8eRb/4EuF+BwTJgK98Ndu3rMeXYWH9w1soc8714QZHDms3bmF1
      eR5565Zyz6oSdKKI3mhCp8bpa29EyK2iItuFKNxBAaCpKqoEOoMek8lMSBUIJ+ZSnFVFRrAY
      0AsSRrudkWAK39KlLKksxCre/lVwQ7tRj9FoIoJIMH5dewrBYkAnSpgcDkZDKbKra6heUoxN
      ur21R0fb6FOXsLo6l48e6FOTIfoHR/GUrSc3J5PaqipyxCSG3EwifgFlvI3de/fROBS4cwJA
      EEVEGeRkilg0jFXVsBvnMjxFSY8WTZJSU0RmgvjsZkTd3AuU7wQEUURUQE6kiMUimGUVh/lm
      7bKaIjIdwGczI+mk21+7Fmeoa4zMvJyP+bpqxEPTTI0rFBZ70QkSGUWrePyJJ6l2pAgbJTqi
      KoaYn7bm1jtnEixZPPgkExePvUuXFEVvW45LijB0zY8lqxzj8fPskzuIdyVZ+RXv7d8APoJk
      cZFrsFF34l36DDEEYw1efYyh9llsWRVYjp1jn9pFojPO8sczka4n/t3OVRCboT2oJ7/Ei0ES
      UJIhxrpCuCqyiPiHGdQVsfm6RzwagfFO2ocValeX4j93hWhCxYZ455jjCpIRT5adeGQaxZrD
      2rvWkKFLEphK4SopJNsjMzEZI3/tRlaVZmGQRESdAVuGm4wc5239JBBEA+4sB8nYDClzFms2
      ryPTkCIwmcRZXEB2hsLkRITc2g2sqsjBIAmIOj0295x2/e0YCJqGZnOQl52JzSChynFmR6OY
      sx0YRRFjlo9Ct/WGOW4yFkHNKqWmOI8cMUJIn0HNilVpc9w0X2jS5rhpvtikAyDNF5pPHfrq
      dDqsVuutLEuaNLec32qOm5eXl06HTnPH8lvNca8b46YDIM2dStocN80Xnttq+VtJxefcDNBh
      sVoxSJCIRYgmFQxmKxaDHk1JEIrEUAU9NqsZ/fx2/5xzQoR4SsNksWHWi8jJGOFYAslgwWo2
      Lrw36GdATcUJReJooh6r1YyoJm+umxsOGxqpRJRIPIlktGA1GUFJEI7E0EQdFot10blCaJpC
      IhImllLRm61YjQaUVJRINAGSAavVgqimiEYiyIiYLDZM+utbWhqp+JyrhKg3YTWbYN4BRDBa
      sRl1KKkYimBEElhoc9zfHU2O0HTqDX7y06c5cKKelKOSfHOQd597imf27GcwYqei2MPAB2/x
      9z97kYNnG7EVVlDodSCiEh5u4+Wf/YiX9h9jhkzKfCYu7H6W//nS6zQPJSgpK8NpuT2Sw7RU
      mKuH3uDvn36JQ+dbceTnM9N6gJ/9ZK5uko5KygvcSALI0WlOvvoMP3xlN20jMiWlBUxfep//
      +fQvOHKhA0duFXle6yIKfo3gWBMv/Owf+fWefTQM6agsy6b12LM89cuXON04SEZeMZH+E/zs
      xz9h76GTTAlFVJdloxfnEgMP7/4nfv7ibi52BcgvKmCs5T1+9NNnOT9lZmWpmyuHXqBDyaPE
      u8DmuJ8FNR6iayJEzdbHWeeK09w0jl4Y5OpkBd//kwfRrp5iSNFoqB9h45e/zZeWSqhGDz6P
      G1GJ0XbmIL3CBr77jU34m84yEZ+lqc3E1/7sm+RNNXBVyWZJnmcRuSR/OvJkM3sODbL1q99m
      Z6VKSjATkQWWbbteN1OUra3BroPZrpO8f9nMN3/wdbJG62kNJultHKT6/q+zq0SjsXeK/OIS
      bIvFHFfTCIz1MJGxnu88sJqhI3VQmEdYtnH3/Q9QNDtM75SGzi6Ru/YRvlRlpflUJ3nrVuEx
      CqjhMVr8bh58/H5sba2Mq3p6JsdwVK4jd6CDqCFAx4idjRtW4jBKC2uO+1mQLBls3byLjWVe
      JJOLzMIctPg45hUVFGfm4i2wUNd4lbg9xoXXnuEXB/pQ9TYkcS4jMpScwbW8kpLsXEwZEpda
      2tGqCyjJzqO43MPlwUlSirrQMn8n4v4x4vYoZ1/+Oc8eGUHnymfblvvYWJaFZHKRVZyHTQeg
      EZkdRVhaRElWLkVlbs63dRHyGCgsKaK8JJeBcJDp8CIyxxVEsivu5mubl2M1mDAXFJOTV8iX
      tm/C8v+3d17RcV1Xmv7urZyrUKhCqkIiCIAESAAMYpJIWTlakkPLtjwdprune615mDU98zCr
      H/ptUs+4p5PbtmxZbctKDjIlWYFZzCQIEAABIhI5FAqpEireNA8gZUkWJdtrtYQi63sqYJ0C
      7j7n7HvPPneff8+e41e9E9jLKrnjjvu5v7kCncFGUU0lLvPanUvvqeHJu9tYvXKIozMJXL4y
      Gjwig8df54pgITQcojhQAtkkWVnJryBYk1MMnz5HV7+enQe2Yv+Qop9AJpdlLm5g39Pf5Inm
      HMc7ekhklA//EQEQhLViEzd+9ZGf1zu5XI65VTP7v/6HPF4f52hHH8lUguEz5+ga0HPH3S0f
      6ZvrfNROQUDV1oRz1xWawursMEd/3kf5HbupLbah0xmparmPJ+/00TXURTSRZLrrEmdOr7Lt
      vjso+kBCk2i00rjnizy0VeHsyBSNO5/gv/6n/8wXt5eQyGoMtx/kv//tt/j5ufE8cgA5yfDJ
      E5y4mKD1izsJOM1YrUVkBqcIRWaZvRJnR2MdQZy4i0uo8LtJ5yQkWUbVRKwGJ4nhKWYXZ4gM
      Z2ip3wDX5glFQ4x0ztPs864fecRPwezyEsCO219Chd9FKhVj8OQJjl+I0frYTgIOI5qqIksK
      Zkcx6vAcc9F5rnUu0FZdjTWSIxyaY3RwkhLNRpFtfYnjJucHeevFcwj1TWzfUg7xGQ63d7Ao
      WfC57ahqhsmuc7z9ziQbH9rJBp8NNBU5J5NcGObtS32kRSfFTjMKIgarhxKvg9jMPPYKH6Hi
      HXxpTxPK1FD+BMHZ2AxvvfgPvNN3jcGeKyxJRTRvrSfc/kteeOsYasV+nnp4L8Wpa/zrKy9z
      chYevXc/trkZpkIawRovfUdf5mfHL+FsfJDH7mlDGXmP53/xS2bFer74wG58TmNeBMEGqxvT
      Uj8/fOUVTodNPLijnuGj/8qhq6MM9lxhIeekzC3Tf3QS77YGpIGjPP/a64SNTTzx2BeoUOf4
      2S9e4txoin33PMbmKte6iX00TWX07I/5wS+OMRoa5kr3PP6GetJDv+Kll17l2JjC3XfuJXrp
      BV4738+1oV7GF0QqKy0MvjWEodbD1IWXePGlg5xdcfHlhx6k1m9nYeQsp5a9PHFXE6nutznU
      t0jVzntvng26PrRBf42mSCRiy6xmVEDEbHPicpjIrEaJJyUsTg8uqxE1l2IpEkc1WPC6HAhS
      DlnTYzILJGMRVrMqNlcRDrOeXCpGJJ5Gb3XicVh/nSefB8jZVZYjCVSDlSKHhezqyof6xmHV
      I6UUTE4TcjLGSiKD0ebC7bCClGIlGkcVjbjd66c+2g1yyQiRRBpFBVFnxl3kRifHicRSyDoz
      HpcDNbVCLKUAAkazHZfTjLQqYXRaUFIRIokMmnGtTpxRJyBnk6wqelwWPel4hHgO7A7HehfH
      LVDg3w5Zlgvp0AVubz7xTXBBGLfArcyniuOGQqHP8noKFPjMuakDSJJEIpH4LK+lQIHPnEIM
      UOC2puAABW5r8iod+tOQEmF6evuJazYam1spd62JQ2lKjtmRSwxMrSIaLdRt2YlfWKS7b4S4
      3s2W5mbKP6aucD4hrS7S23eViGyhsbmVCvd1ezSFWGiUjv4pRHeQbc3VqEuj9A1NodhKaN6y
      heKblJ1d78irYTp7BohKFhqam6ksvl4tVM4yN9ZL/1SUkg0tbKp0szLeS/98hkD9VmrdAvOh
      CYSi2lvIAeQkQ2cv0D62jM0GqZwBx51tOAwgpVfofe8E49YNlHtc5DJRuq90Mri4SjbVQyIL
      D9+5HZvh0//NukROce38BS4ML2BziCQzIo4DO3EaILcyzvGDx5m1ujBP9KM33s3SyCVWEpBZ
      7GclaeXhuxuwrJ9Kqb8dUowrR49zfi6Hw5QkpRPw7r4Dh14jMTvI8V91IJVbCYdimO5s4tyF
      DlbjMvNRFWOjiQud09zxYPWt4wBycpmpdJLtD32ZLeYp3uwYZz7ehMNrRJaixDOVbN6+mTJ/
      KUGPwIxqobKqHFPCRtqgR8vj931yKsJ0Mk7L/V+izTXPWxcGmY1uxekzkotMESmuZdeGUvR6
      lZKKIBsrKnDYLUyfO85gOo6ch7vdanKZOUHPpqZGSlxg95Vj1q0dplkJDaJuvouv3V3FyOnX
      6B4Ls6pzUFaiQ00uMdi/gLfxUUpdtlvHATRVQTWA0WzEYrURU7kuEGtAWg7Tc7UXk7yIyWBg
      74OPUmwSaO/uRBKctB4oZr2kw/8+aKqCotcwWkxYzFZWEYmmsoCRZHyFpaUonXNDRFHY/cjT
      3FVXQnphjPGwnuDOaix5Mws0VEVBRUBKp4hGQyxPrHBFilHath+/z4dDD4qSQ+e0YNQZMDkd
      zCU8PBBY5vRIDF+xichqMc6pc7y+UHnrOIAgiAgKKLJMNpPCqmnYjHpAwOiq5JE//wu2tAQI
      XXyZd/uHsEeSND3yJJ6JSwxNzZJtqshbJxAEAUEFRZLJZtOYFRW7aW09p4k6TN56vvr4LqI9
      r/Dm+DxbrQnajwzj2LqVplpf3kyCXHyeU+++zJWQkZ272pBEL3c+9TgNWi/PtYdYXs3hcOsR
      RR1aRkJWJbLxJD6Xh807n6KxNcQ7J86DXaJrPoU3filvbP9UdDY3fs3I1TPHmdPHMLCBIkOW
      hYkkshJmaHYOJTPB5PAKwYYt2GLDXOvtwB5bwVLZsG6yIX8fdFYXJYKVnrPHWTAnEKQqfGaJ
      8HgKc0kdZWeucvbiBaSFKGW+CEdfPsKspZKtqTBzISeVZW7WWT7cx6K3FrH97q9SnxNw2XQw
      HmKo82zTe+YAABmrSURBVCILhhA2ix99dpXFWRFbcS3yry5xVBtkpQ9a/qAINJmZ8WGSuGmo
      UBiOqBhMmVtnG1QwOGnet41iU4KY4KZ1fwt2LU0knMARaGZ3icrY6CSGunu4d8dW9ty3BVsu
      glpSQ9uueqz5FgR+AMHgYNOebZTak0Q1By13t+ES0kTDcQy+Bu66r5rI1DhZ353s31SNt64I
      mzHB+PA1QsurKHkSA4h6Ex5/kMpAAJenlDvu24ZdWWQ242Xfjj24hAyxpRT2ymZ27/awOB2h
      /MA+GkusoKqoZgd1LW1sqt/Kfq+KXNVMQRy3wO1MIRu0wO1NwQEK3NbcNAjW6XSYzflePLRA
      gZujKMrNHcBqtRIIBAonwgrcsnyiAwiCgE6nKzhAgVsWTdMKMUCB25v8exGmaSiKiqjXvb+H
      q8oK6NbKnqpylqykIOgMGA2G9zUvNU1FymVRVAG90YhBJ6BIOXKyiqg3YNTryaeHnSJnyX3A
      TkFTyEk5FE3AYDC+LwoMGnIui6Ro1+3UoSkSOUkGUYfBYFx/ahiaipTLIasaot6I0bA21pqm
      oqoaok4HqkIul0PVBPRG028K/GoqkqKiu95WkiTQrf0tTc6hCmtTP290gQDQZBZH+znzbi/2
      xiocOsgk5jn/2iliHi/FFpXzb36bb//wZS4ML1JWtRGv3YSASmSqmx9993/x0ltniOrKqS3W
      ceLn3+I7P36N3lCGyuravBHHVbNxTr/+T/zLD1+hY3yVyuoa1Pkunv3Ot3nx0FlWreU0Bnzo
      REhHx3ntuf/H8y+/RtcMbKjxMXTyJb77vec5dGEIR8VmKrzWdSSOC6tLg7z67N/x45++Tt+i
      mYaNlVh0OSY7O+nonsNX5yfcd4zv/dM/8svDp4kaq2moKkb/vs+rxCc7+d7bF/H4y4gOvMs/
      fef7tK/Yaan20HviJwxIZVR5bfkjjgsq8dA1jv74BQ6fzdH2+Daccozed3/JT37QhW/fToLK
      MC9cSvLIV/6AjZnLdCxZ2VQTwCjIzE2OsODcxuN7q5k83g22KIcnHDzzzFO4Z4/Sm6uiKVhM
      PhRPV2LTnJ82cM+j92IfusqCzsri+Dj6wG7uazIw3j9GedN2XEaN+OwAV7Rann5wO6HjF0kV
      eVmRYeeBBwjEpxkO66hvqsa8Xt6EayrLU1cZNjXx9L1NTBy+iNDQhGWxjze+/yq9C8Xs2F/N
      7PgIxob7uLfGQPepUYK7WvEY1+aqlFqk4+ALPHcpzt6t1Vy9Nogu2IJvcoicdZXeMZFtO1rw
      WPT5I44LoKlWmh7+Als9bnSApuoobmxh37YG7NpaVqQm6jGb12oHdE+GyEgy6IzUthzgyS12
      zr13jLDJh0NUQGfEbLYhajLdkyFkNT/EcfVFG/iDh/bB+FlOT6/icHqprvITu3KKY6dXqGra
      hccMIFBUu4c/eehOAiV+XMEAZZW1PPXgY+xqqMRdUo6v1IVhvUx+AEGktPEAf/LAbsp8PtzB
      AF6HHlFXzM4nvkCtwYRotLNz7+M8ubsRj9dPcbAU+/XJryk5pq+eY1wtob4pCEYrQTtcO3eY
      QVXPzMAE3uoqHDoVRVbzKQgWcQUCBCt81ws7Cxhtbqo212K/fts2lW1lv3eGF/7+WxzuXGJV
      NHFjSguCiMUTYO/evVjpYVLfyE7DZf75f/8jF8dzJDUd5IsMjCCgN1qobt7PnsYcHYN9jPbP
      oCtvprXBzWL/HGn1RlMBKTLDqV90YKnfQUOFG1FOMnTqPENzLrbvbsC6zmaBAGSWJjj+8x6K
      2nZR53NR0rCBMrfj/TW7gMzCQBcnj63QfO8uvNcdILc8yOuHBlAsJrKL00xGZNp2P85f/tEf
      cf/2clbTMN7+Gn/zP/6W17sm8skBfgvkNIbGx/mr//ZX3N+8gTtKijHrRBQpy+TIZS6HFapq
      6nAac0SSaVw7nuGv//o/sqeigp0BH/p8WP8AmeVxTl0dQ+euYkOpnXgqwXwyhTlYQ23Qg5yK
      IykaqqKSi07x3k9Ps+ys4a799dhIMXDiPc5eyXHHk7sIOMzrLu7JLI1x9JVzZAON7NtVi+Wj
      46JJhPs7eeeNUWru301z0IOordkrSypmS46R7g6Ge7rpHgsj2nzU1QSRFhfQl3iYLmrjiZ31
      rA5dy79dIEFnwOq2on8/NhExO62YDDoQRBb73uCN7mnsrq088Uwtkb4+RmUHFnOYQwd/wI9j
      etwNe/nzWjfH3/4Bbw2vUFx6J19uqlx3pYJuiqBjpv0nvPGjZeImP1//+l6qIn08f/C7dOvt
      HHjwTzHGJmg/H8XsOc9Lbx5CV1NF79XLPPjoJs7+/Dm6Uj76Zrq484mv8ehdjesmG1bTFCY6
      f8lLb5/DvrGTnitb+Oqff40tpSZ0RhNWp4CaiXHh3ec4eD5NYOEKl1vu48uPb2b2xBw1j7fx
      l/+lBVZG+NbRq3xh32asBpHZ4S765HKevrsO6eXneWMIdj3yzZtng65XbVBVzrK6ksPis2MQ
      BEAhuZxEtFsxm3RkovPML69idHjxF7tRkylymh6LRSOyMEc0I2LzllDmNJOMzBKOZrB5SvF5
      HPlzJkDTSEVDzK8k0SxuKnxejFqa+fACWc2Iv7QMMzmSMQmdKc3iUgxJAVFvxet1kIkvkEhr
      gB5XcQlet3Ud2a6RjoWZX04gK6Az2PGX+7EbReRMmlRSw+oxsbo0w1JMQkPEbPfgL7aRjWQx
      FzswigIoOZaTWWwWG2aDSC4VJSIb8dmNrC7Ps5QGZ3FxQRy3wO1LQRy3wG1PwQEK3NbcNAjO
      ZDKEw+HP8loKFPjMuakD5HI5otHoZ3ktBQp85hSWQAVuawoOUOC2Ju9ehH0YjUw8QUYVcbjt
      yPEQI9fGSYtOqusa8Nmvi0OpMpHQGCPTKxh8lTRVlSLHphgZn0MxF1NXtwHXuskG+23RyCYS
      pCQBZ5EDJRFm5NoosTQ4/UE2VAex6NdsX5ruZyyUxFFaS13Qj1EnoMlZwsuLiDY/frvx8zbm
      U1CIzo0xOr2I4PCzcUMtFjXG+LUhVrImKjY0UuGxIABSconha+PEkhKIIrbSGmocEpOTIUT/
      BhrLXawuTZAyllHqst48HXphYQGLxfI5Gv1pqKRWxjn8g9e5JtmpqbRy5exhjncNsRQaZzmt
      o6IigEmvkYtOc/zdkwzOTjE0OICjyEd/+zEuDU2wMDNCAjcVJb71lRT2iWikI5Mc/eFBBpNm
      ahr8LPee5O3j51iIZ9BMTgLl5Zj1kF28xmvvHGJiPszs2CLOQBVFNj3xqct8/8U3yZVspsFv
      +7wN+kSk+CzvHHmXodFJhnqGkC0lZBe6eOt0J8tLs8wvxSkJ1mE3Ckjxebq7uxmdHKXjUDvL
      liLklT5OXrrC9FyKinIbXadOkXZXE/DYMnn7BFDlDDN9E6T1OnQJDSUdYS6hsPPhP6ZVP8jB
      86OEV7fjNOmRc6ukdEH27y9nofMiyegcc7Kbe596mrLIaQ4OjhNrqsdqyI/u0NQMs1fHSelE
      tLgGWpZoQiRYt5+mbXUUe4u5ofautxdz14Nfx65f5NxL7UTiOSR7iv5LPSQNNpQ8SIAVjS52
      3P0UPo+NkaPvMrk8x6y2RNW+Z3ikJsWhQ4cYW05TYrNiLq7lkS9VE5nq4LB1nO3baxgaDFPa
      sBXbXJhrAxdJuRvYXeFFFPJ4CSTqzFTv3I6UVJhMCYgmB24j9F88wqphlYGFLFsyWcCAweyh
      VLjC8dev4i7ZxP7SCsLjQ3ScOUJJbo7BeBH3SzL50h2CaKJy+zbktMK1RQGkLOHxQY51hOkZ
      8BDYspsvPbCfIpOI3lpEDctcOHGBUYNGUEgzefUqC64NbDIts+4y4T4GndlJdamdZHicUNJB
      ZWs1hBfpv3KMEzMmBuYT6BNJwAqAJiWZGJ/DVrOdYKAES9LPr461kyptxLCQxuSM0N7ZQf2m
      TXky4h+HIGK0mNFfP8okmFy0tLWR6xoglzRT7ndjNugBjfTSOJcTfr72F/sZ+Mkh5rJt7N2x
      ha7+GVAdlPt9HzhCmA982HYEIxUtB/jTA5VssM7z81NdTCylKaqwoSo5cnonux74BqZ3vs97
      nR24ZrsZW1GJJRYxrxRxV80BitdzcQRNJRke48y7gziat7JpYwVysUI800EkKuD3l+Ew34hj
      NLKrERbnkwTvrsCkM1K+6S7+bMN2BrrO0DWdYmFmAlNunJWEIY8d4KPkEgzNzKO4yykSZskm
      /XhNMpH5LILRjnN1isFhkYikxyPF6VmKYikpQ5jMsNFegsu6jifAp6BIWRZWZ4incmSkWdIZ
      HVYhRyQkI2WGeLd/mabyIqZWJOoaN7F9dxPxlUVOX+6EmiB20/oOfqTEFO+++DbL3g20GVNE
      l6OshKZY0JdQVRIjN2KiukhPZC6KtcTBamSWGTXITs/aOlAQRNKxOUYnEzQ0BpnvgwqXQlZJ
      5/s2qA53ZZCqDV4MRgf1JS5iw+0MRqD1wHZscpy5kUV0/o3ctcvGwKWr2HfvorGumq0+HVM9
      F5gWPezYvRm7IQ/WAh9ChysQoLreh9nipqk6QHL0IhdGUzTt+gIBc5q54QWMpY1stS5x4ewF
      Fov3sK+5hmD1Rpq2tHDnvrvYU1+BWb++p4GUyYAnR2JlmPMnL3BtIUNpSRmmcBeXR5bYeO+d
      lJnShAZDpGQVvdlJYMsGHPr3FRHIZpKY6rexpaGJe/0qc2mRys2Nt5447o3i3r+ZxaqtHfgS
      hPeNvnnb/ORTbUfIK+WLD/LBou037Ptdx0/jRsiz1h+CIERunSXQdW7eGb85+LfKxL/B72J7
      vvFxtv2u4yd84NONr67vZ1+BAv/G3PQJIIoiRuN6f0NYoMDvzydqg9psNoLB4C23TChQ4Aay
      LH+yOK5ery84QIFbmkIMUOC2Jq93gVRFQdU0EER0OhE0FUVRAQFRp/uQ3qWqyqgqCKKITvy1
      cKyqrn1/PWlj/rZ8aBtQ01AUBQ2u2y7ctK2mKiiqBoKATtTlxQ7Rb1wzGoqqoGm/ae+v2354
      XgiiDp24Zr8mrM2BPNIG/TBSOsyxV7/ND174GR1TOaqqywn3vs2z//I93j7bi9HfQNBnQxRA
      Si5y7Gd/x7M/eZORqJkNNQGsRpFsZJrXjxwiYgpQ6cmvajiqnGLiUhdDc6sUVxSRnOzih9//
      Di8evkDaHqC+vOh9p1ZycQZPXmI6I+At0tN34hWeffZ5jnRcwxXYRJnbvK6dQJUTXHrnX3n2
      uRd4r2cWf9VG9Cu9/Pj7/5efHb5E1l5NbbkHnQBqLkn7O9/hX55/hc6pNJVVAVaGjvLdZ5+j
      PeZka6WLgbOvMJDxEyyy5Zc26AdJLUwyatnE0898haLxPtq7Bulfkmh55BvcU22l63g7KxKA
      RmZ5imtCK1/9w69SNNJF32wcRU4zeu4tXjl4lqlI5vM253dC03LM9Z3j1X/4MacuLyDJcXq6
      R3DW3ctX9gWYv3yCUGqtraqkGb94lBf+/hUuj8TIJpYYTJq586lvcIczR8eZKyTkz9eeT0OK
      hhjIeXngK1+niWXaz19heHoRU9MTfOX+NhZOn2Y2tZbWqsZnuboa5JFvPEN9Ypor3X2cGQlh
      27SLomsd9A610z5qoNTrXItzP2fbfm+cwe38WYWGmFtguvoartIK9jRuR0+WIWWBxbD9euV3
      AXuglX//WJD2k68yENPRaNARnezm8qRE/bZ61vXt7+PQVBTVzY6H9zC/qgPRSGlZMUOn+ujG
      SO22ne+nQ2uKgmgpY9c9O1AVMLiCfPnRCkQ1RefSFJJoWfeK2CZvHc98sRZRSXB2YowVn5ut
      e3bTONfLLw6eIqrb8b6ynd5bxzefKGHo0kEOzyW5e48bY0ql52I7VkcV1r4h3LXbKbEZUNQ8
      rhAjiCJiNkLnWxdY9TTRvKEEkygT6umko1uj5a5WHPobbXWYLDYqqpuoLJ2nZ6CLo4cvsWr3
      YZHiLK3EyOVDYvx1BNFM1bYmyl32tTWsKrEyvYRqK6HCayQ6HkO6njmgM9qp3dGM33pdA1QQ
      0ZNjor2d/gk7rbs2rRtZxJsiiOjUNMOnLzIW8dPaVofVoMfq8tPQuAFF7WdiMfV+W6PJgi+w
      icbqDFcXIrTtfICvPfoQu1srSCYF5i6/wd/8z//DWz1T+esASnqZzrdPMRhxc/cjrXhNKrPd
      lzh6LEzT4/vYVO5cM07TSCyO0TmTINiwg4YSHWPhFeLJBXrPHuXMsZOc7b5KNL3O1wGfhJxh
      OpbA1thK6+ZSsrFFsipryS8fRUkxdv4sJ88n2P7kXmq91vU/CeRVBk+e5vwVmT1P7SFgF5ie
      6Gcy52RbSytWMUE4KYEG2egsnWMhnIGttNW4mIsmMbor2da6FXNiGaXIwZh9Mw80B4n0D+fv
      Emhp6DjP/ehFlNqNjP/9MHc/1Eb/y9/mRMjNQGyYawce5cAWN7M9SXyNKc68/j1+uaSwaizi
      mX/3BbZXPgHJeV45chxT3V586/5c7EcR0BkMGE16BKOLtiovP3r7Wa4azezY9wyG2BQdHXHq
      H27CKQroTUYMRh3pxSF+9qPv0C2VM/y9YfY89CUe2LMRyzp+CqzO9fDS888yYavi2j8Pcdej
      j1Es9fLmse+Tyog4NuzkSW+azjcm8O+wcuXES/xyMklUM/PYVxuwGUXCg5fpThTxpfs2kvnp
      SxwZ02i7tyn/xHFvkImFGJ+aI5UDUWejLOhHikyxEFMAPZ7SIGUeI8kVGWeZjURohKnFDIai
      CuoDPow6EVSJ5VgMweSiKO/OA6iko3HSkh6Xzw6ZGBMTk6Q0M5U1ddhIEV2UcAU8GASF1cUY
      ssGCzSwxOznK8qoKGPEFqij3O9Gvz2EGQEpFmJocJ5rSEAQTJZXV+GwKs1OjrGQMeCtqCLp1
      ROdS2Crc5JbGmQjFUO1+NlaWYzPqyMQXCOcsBIrMRGfHmEkIlAYrC+K4BW5fCuK4BW57Cg5Q
      4LbmpkFwNptlaWmpsAQqcMvyienQ2WyW5eXlz/J6ChT4zCksgQrc1hQcoMBtTd6+CPs4lEyc
      6Zk50pqJskAQt+W6eZpCYnmO6YUENm85FT4XelFAU3Isx2IYrB5c5vzuCiWbYGZ2lpRipLSi
      Eo/1hu0qiZU5ZsIxLEXlVPjdqKsLTIcWUQxOKioC2E3r/z6Yjs4xPb8CZg+B8jKsRhFNk0mu
      JNG7HZg/lNCkIaXSZBSwOSxIiWVmQ4sIngqqvHbSsRAZg5ciuzmfxXE/gppl/MJpXj96muHx
      cXI6DxXlxRhEyEZnOPbTNzg9PMDsTAxvsAqPRUd8qovnXn0LyddAXbH187bg90fNMnXpLK8f
      OsXg+DhZwUVFhQ+DCFJ8juM/fYNTQwPMTEUo8hcxdOkQR853MjY6DdZSyv2udVQl8mPIRHjv
      yEHe6+hhbHQWg7uCEq+R2a5z/OqnXThbNuI1G96XPMkm5jj98tsMxPRUVTvov3SEN46e4dq8
      RHXATvfJw6xYKwkW5bE47kdRkouMhFe44/E/odk6w5GuYeYTtdS49MRmelnwbuc/PLaV8LmD
      dE0sUWE2M3Cxk8WcDknNkwrxN0FJrTAyv0Drw39MmyfMkY5hZmN1bCwyEJ/tZd7Vwp99s5Xl
      iwfpnlxma8MBvrHDQOjCOWYmwmSbK69nzq5TRD1VWx+k6U6RseOnWJxaZMWRYXJyimhYQ5Z/
      PX6ammG6Z4hwLI5mVdCkDKEUVLbtxTY1zXD/BSLWeu4JFCMKwq0TA6iyhGwGq9OG0+kgqmlE
      klkApFwKnd+JTW/CUexkdGGJyatdzDtr2Vxfkg/6sJ+IKkvIRg2ry4bD7iABLCfWzjhI2SSi
      34HVYMLpczMaV6kOlqPNdvHe8BhisR2dts5vAEYHG6vKSI22c2YqhMFjw15URsv+O6jxOPhg
      GpMgmAi0tNLa2oBLFMDspLnczXLPWaasLmLzEjZdlqGhAWbiyVspBhBAA03VkGUJIxpG/VrX
      CIIAioqKipzNYc4ucPL0JeYzelbiCziz5eyr3v3rmCHv+LDtBjRMhg/YrqpomoqUzWI3iCia
      QNmW+/mGCC93X6GlqZbq6zqa6xJNRUakesejfE14g1eHr9K6qRKv1fybd3BBxOywreV6AQhG
      qprv4S837mKk9wJd42mWxvrI9WlULn7h1nEAvdWBO6tjorcHyRDGmHJSbIHVSAqzOwBnR+gt
      yxLujLFl3zaCDSUsLcxz9kof1mIPpnWuj/lJ6C12PJKRyd4eNNsSYsyG3yaSWElh8gQQT4/S
      W66w2B6lvlXmxNmjFBVXYliK4bYXYTGu72mQi07zzuVBKkqDSCsJil3+NQf/wBEOTcmRjOYw
      eWwYPjKUgqhDTi0xMRGlekM5syNGWkoUYtn4rbMEEowetuxoJDF5njPDy9Td0YItu8Ro9wy6
      8ibaGnOcfOsY0com2jYG2bi5jT179rJ//352N1Zi+Wiv5RGC0UXTzs1k5y5yuj9M7e42XPIK
      Y5enEUo2s61J4fTbR1gONLKtuYEmL/S89zqHhnI0t+7At85PxBgcZWx2prhw5CAnps1sb23B
      ZRIRdTbKmwI4jDrkbJSxjgkSsgqI2P1+yis9a3d4TSMVWyJXuYXWzU3cZY/QG0pQVrvhQ+nQ
      5cAbsizXptNpent78Xg8n5fNvycaqqqiISCKIgJragiCIKBpKqqqrZ0k+6CCwJpKat7HAZ9k
      +9oRyg/Yrl1vK/y67brn+vh99Jo1VUO4fvr/g5/RNLQPaaJqqJqAKLA2FzQQIPr/Acy/wCpj
      ecCfAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Orbitz Table' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Travelocity Table' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvwAADr8BOAVTJAAAIABJREFUeJzsvXd4HOd97/uZ2d6xwC56JyoBAiRBgr1TIimJ
      alaxbCt2HMdR4uubnJzk3HvOeZLnOHlucpKTchPn+sRWbLnIktUrSVHsvQMkKtGI3rEF28vs
      zP0DULUkmy7kgtjPXwB2ZvF+Z97vvGV+7++FFClSpEixOBHe+0FRFBWQCahvX3FSpLilyB+u
      7E5Zlp+VZbnothUnRYpbiCAIsx82gFqW5UK1Wr3ktpUoRYpbiCRJHvGTPpBlmUgkcqvLkyLF
      LecTDRAKhRgYGEBRlFtdnhQpbimfaABFUZAk6VaXJUWKW84nGiBFisVCygApFjUpA6RY1KQM
      kGJRkzJAikVNygApFjUpA6RY1KQMkGJRkzJAikVNKvQ5xc2jyMSiEeKyiE6vQ4WMlEigUmsR
      hfcOkYiEI0iyAoKARqtHp1GRiMeRBRUqIUE0EkfUqJClBIJah16n/iA+/xaRMkCKmyY6e4MX
      /uMZmj12Hv7SF6nQDHO2Y4Y123eTaxYBGffAeb7z9/9KT9yOxWCgoG4rj+xdT7j9GtOGPNKi
      F/jRS9cpX5lNb/MoNXs+z+O7V2HV3FotKQOkuEkUoqOdtKnLWZvro/tqM176CaVvI90ovn9M
      LOTGSxqPPvV/s9rh4+0f/5CXjlu4t8iC2neDl996iyF1Lcb2i7TFqni0yEjrsTcY9mmobVxN
      tspLV3Mvs9p0KirTGWm/xlTcRv3qRjJiN7h0w4Xs9qDKq2Pj8lwmOi5ztXcGR/lKGqqzmeq8
      QFPPDBllDaytL8Go/uTefsoAKW4SAU1GPrm+U5x261mxwkCnW8f21WmEg2G0Zv373SBRoyct
      3Ul2SRGb1hTxD02dtPT5GNGkE1OpsGRkYosMolfruHHkddomI1jUEc72jnL3Ej8v/7CdVY88
      wETPflpGwK4K0941yaqMLv79eIB7VqVxdX878SeW03T8DEZ7Js19o/hHMzlz7CompxnvhcuE
      tH/OvbVOhE/oX6UMkOKm0WfW8OTv/REun5srRw4hqLW88C9/ja54G1/72v0U2z7ejxEQVWpE
      UUCRQWsvZFlaGYOO9WxNeBmayMLVfpBrY5Dv1BLVWnDnKZhzilnTWMnRb/897VMlFNkUVFIW
      s3qZtPxadj1eR+Tq8/R0tCLbK3nky09glDxcf+dfOXWtg4rSbGKSyOiUF3B+opaUAVLcNIKo
      JSM3n8h4O5PqHPIMbhKNO0m/3seAN0LRvAEUOUE0EibgmuFK0yBFuevRjQd+/gtVGqz2HNav
      3s3ja2y0DflJi11Fq5bQanRYsyrZsfUr3F8t0D8cRz1zCpVLh1arQSuqEfVGYv4Anpkxbgzf
      wCMZKF1xN9/4+t0EutswlXxy5YfUNGiKXxE57KFzdJbqVetZVV2C/8pRBtMKKbLpEQC1zoza
      N8Az//iX/Ldv/QvXtfXs3bySzMwM7DYTVpuDDLMOvSWDLGcxG+/bgHJ9P99++lVGIyosVgfO
      rHTM9kw2b9mO59zzfOcnB5iSDaSlZ5CdYUWt0pGWlUX58q3UWl388Nv/xKGWCQpX72GTfZRn
      /u07HO0KYDRqPrH7Ax/NCpEvSdIxtVpd5vf7GRwcpKamBuHTzkyxuJEThCIRRI0eDTFmPT4U
      vYU0iwGVIJCIR/B5PIQlBUFQoTdbsZp0xEMhJFGNqMRIiAZ0RAgrWixaBd+sj4gkYrZZ0Qlx
      QmEFk9WMkAjj8/qIKmosNhtaOUxAUmM1qYn4wqhMRpSIH18wisY4939iwVl8oRhaow2bRY/q
      E+qxJEmelAFSLFokSfLckjGAHA8xMTzAuCuELi2L4qJczFrVb+CbFWJBN56QiD3dzm/kK38D
      KDE/N27cYGY2AoIKc3oOJUU5GDW/XI8z6ptkKiSS5XSgVS2wB1AsQH//Daa8YRBETPYcSopz
      MGl+uZsT9U8xFVDIcmaiVf/2tf/2DSAFaDv+Jm+e7iSBCkXUULHtYR5aW4ZWpUIUBWRZRhAE
      FFlGgbmOmQIIIqKgkEjIIIioVSKKLCMrCoqiIKok+i++yhvX0njiq49QYE2OyiJPtfMv3/pn
      ZhyFlKVp8AcUNn7xKfbW5yEKIIgizOsQVSpEFGRFQFSJKIkEvql+OqbU2NLsqBTmj1PPXwsF
      lXruOAQVKAkSsoIgqlCpxFv+JvXntLu6+c7/878YtuRRkaHD70+w7vNf58GVhR9oV2RkWUEU
      VYgCyApz2uUEgelBOsYSWNIyUAnMHfdz2ufqwwfaRVQq1a+k/bdugOBkF28du0Lx3X/AIxtK
      8A1c4vKolyv7f0h/op7dq63su9BCWWEG1984w4QlE6fDzeCkQln1Kio0Exw+14kqexn3P7KO
      idf20Rr045oOULZlO9Kpl3nzQgWr7t9JrtVOUjQCcgKEIh586k94oMzI4f/4FvsOvcPIeQ+x
      sIbKlY1Ee85yqT9E5fq7WOX0cmk0nYfuWUrHoRe57hPRpRXiHeviwP5XuTKWoHbTXrbnePnZ
      cR8PfW0jEwdewJe3iUT3IU60TpNZs57HPnfP+zMwt1O7Qj57v/7HPLrUxvEffItXDr/L1BUP
      wYCGyoa1yH3nON/np2zNTtblBTk/YOHhvXV0HX6BNq8KvTWL2fEeDr/zKheHIlRvvJ+7CwP8
      7LCbvb+/Bfe7L+DK2oA4cIyjzRM4qtbw2CP3UWLX3nRxf8uzQAoB1xh+QUtFSR56jQbnkkZ2
      rCsjPNxBR/c4Ib+btq4uRsd7udLST8mK1Rgm+hiNZVOVG+LN597Fr7Mw03KAH79xivZrpxgT
      KtmwVMfJax2k51dRU1NGvs2SVFNa8egETScOs3//Aa4OxiiwyLSf78K4dAVC3wkOnB/GrAvz
      7qsv0zzuw91ykZ6RG1y7NAHRaTq6O2k69g5XZrLZta2WrhMvcfpKO5ev9OKNhRnrbqajo5VT
      TZ2YsvJIzA4xPBMgGRLZSLEpmk8eZt++fVzpj1Bgg84Lnegr69EMnmLf6X5M+hhHX3+R80Ne
      vK0X6B65wbWLYxBz0dHdSfPJg5wfy2DXXQ30n3mJk5fbuXy5G08szHh3M52dbZy+3IohKx8C
      wwxN+38l7b/lOiOgM1hQixAIR5AVhVhwgpYzLXgUENUyspxAlhVAwWyzUVhShNlswZFXhFMd
      YsKVQGswUFi1ioYiO6JaJH9JDTXlxYgaNTqDGYvFhF5z6wOpPgtZDjE1MsTw2CxlW77EY5vK
      0KY5KMp1kvB6CcXV6NKyWVW/gsrypRQWRbh0+DjTWSuoyTWBFMMzG0BbUk1dbQ1mQ5gJfwS9
      AIosk5AVjM4lbF27Ctk9wpRXAkVOCgPIiTDTo8MMjXop3vAEn99cidbmoDAvC3xeAjERnS2T
      hvoGqstrKCmNc+nQcSaddSzLMyMk4ni8flRF1dQtW4bNFGXcF0YvALJMQpYxZJSweW0jgnuY
      SU/8V9b+W39oWnLKWJau5fShQ1y4fIVj+1/naK8Pu9OB39VF09VmhidmARAE3p91EkQVBkc+
      ZUuyWFK5nJIsHTGdFi0CgiDMHyeg1miJBXwEorGkuPnvoTOUsvuLX+Ub33iKx+9dR5ZJC4KA
      oDGQVZxHXmEx9UvLMVlE9GlZlOdm0Xq8idz6cuw6NWh0OB1pxLqbOXv+Ir6IhdKKEhzKOG3n
      LtPe58LrmsKbUFG3rArZM8rAdAD5dgsHtIYi7n7id/nGN57iib0byLHo5u6ZxkBmYT75RcXU
      La3EbBHR2ZyUFeTRfvQSztoy7Ho1qDU4HXbkvmbOnjuPO2CitHIJmeIU7ecu09o3g8c1hScu
      UFtXgzA7Rt+k/1fS/n6X+X/8j/9hlWX5K6IopsdiMWZnZ8nMzPy1p0FFjZmi4lyCQ1c5fb4Z
      v7GS++7bTlW+A89wN+NBPYXVtSwvL8SsS2NJ3VKMSghjVgXLl1aQbY1y9dIVfIZStm2qwywl
      yCivpyhdJKpxsLKiEP9MAEd1Bdk2fXJ0gxIxZsMqltRVkmuZezGkSDECcTXl1bVUlxWSmOni
      UvsEBXXrWF1bisOkIqjLYO2aBhxaCcmYw5rVDWi812nq9VG/9UG2ranCGB2mcyhEbkkhy9Zs
      wBkZ41LrAFm1m9i1sY50/W1+uS/H8YUEimuryLcZ5rQnYgRiIkuqllFdVgieXi62jZJTs5a1
      dWU4TWpC2jQa16wi05BA0mWxavVqjIFuLne5qN3yADvWLcWcGKWj30d2cRHL1mwkW5rk0rUb
      OKo3sGvLcjIMN6ddluXILXsPoMzP3Hzw9Fb4pMyLgiDMp2QU5t7ezZ/H/HkffDZ3/nsTRghC
      UnWB3i/zp/xt7np8uNV77/eP/vzBcXPXQ1GUuQky4D31H72ut5+b1/7hz2+d9s98DxCNRpmZ
      mUmai5oixW+aRCLx6dOgsVgMj8eTMkCKOxZFUT7dABaLhfLy8pQBUtyxSJKUHGPGFCluF0m8
      HkAhHgkRDMcQtQaMOjWxsJ9wbG6yS6XVYzJoiYeCRCQFjd6IyaCbX42kIEXDBENRUOswmQyI
      coxgIERCUGM0mdCICUKBIFFJQWswYdR/sKA7WVBkiXAkhlqnR61IhIJB4syVXze/xE+KhYkk
      REx63fykgUwsEiIUjiFodBiNRjSquQFjLBxCEnUYNBAOBolKoDeZ0GuT6x3KJyFLMULBEDEZ
      9EYTBq2KWDhEKCqh1hk+dO/nUWQi4TCo9WgEiVAoDBoDJoMWJR4lhgaNmMQGSISmOfrys7x7
      pQ8xs4HH7l/L4IlnONruI+B1YajezVP3V3H0pz+jazaKvWIX33zqfvLNWuSoh1NvPMfbx9tR
      HFV87kuP4XCd4vlXzuDFxoZHf49tGTf43tOvM+gKkLHyfr7xpT3kWW/+VfpvDSWBp/cs//bT
      c2z6/BfIn23i2ZffZVpOZ/N9X+KhrZVoE34uvv49XnFV8pdf2Y3NoCY2O8zBV57jaPMomAu5
      9wtPsmVZDgSGee3p/4+pii/wWNksL768j85xidq7H+ELu9eQpkvmzkCc4csHeO6tk4zMShSt
      3svj2/K4vP9ljrfOkF61jq88+TAlae/dP4Woq5uffPs5jNs/z0ptLz976Qjqkg08+aW78Zx7
      mz7HZvauyEneLpAcDZBwruR3f/8JMie6ue5Wc/dX/oK/+ov/xN71K1m7ciXSSDODzm38yR/e
      g3z1PJ2TMQAk9zCnr45Su/shShnjXEs/flnHlieeYnelwrGLLXRcPkGkdBt//OXdTHdcpc+T
      HGEEcyhEAxNcOvgmx68O4Zl10XbxKkrJdnYvNdJ0+hrueJzJ7iYOHTxJ64hnLv0ICrFIFGvR
      av7oz/+UbVlBzh67xmw4yPULpzl85iyDbj/BoET19sf4yp5yOq9dYmo2ersFfyaKEiMUNrL5
      sT/iv3x1BxMnTnN1eIa0snV89cv3I4xfpG3I9/7xiaiP1kvvcOREC9Mz03T3T5FXv5nsYBNN
      TRc43wdVhemIgpC8BtDYS7lrSx1TV96lI6LCYTdjNJqIjLfTq5SwbV058YAHxekkryCbdMXN
      rC8BgMrioDpXw5m3XqEjYqe+egnLN+wiL9TGsYtj5DtNBNyz2GyZ5OXkYAjF8EbjSfEWFUCR
      wvRcOsGwWMyyqhwUtZGCJXl4rx7gwFU3FcsrUM0Ocv5SJzm19WS9HwQmYM6uYMvOHZQ4TejT
      M8kryCAwdI0rfVHq6kux6FXk12+hITfKsYPNaExZ6HVJEUL4qQiCieptd7GhrhiLXk96RQll
      5SvYtKaUziNHGAunk2HVzj3AlDiT3ZdpGtVSv7Qcs8pEUZ6doeYTDCUczFzvRpeXhy7mxxdL
      8kGwWm9l1Z6vcF9tjPNNHYTCs3Rc7KJgRQM5Fg0q1Xs9OAFB0KKe7+t6R7vocinc/6XfZUt+
      go6mHoJxLYX12/j8Yxvwnz3LQEBBEOae+YJGjZhEs13hiTZe3XcZd9jPzEgfrZebONd6nfK7
      v8jjd5Uz1nyOs4df42DrFIHZaSb6rnN9dPb9FiwR8dJ64RwTQglb1+fRdvg1ro778UzPMNDd
      yag3hiVnGU989SFMQ120DbuRkqf5ex//RDcnD7/NsXNNuIISnpE2Dl2cpPGuzSzJMKEx5nLX
      44+xJj3G5Ss9hGRIhMY58so+Bjwh3K4RursHsS7dwTf//D/z2NZqYtEgk1cP8y9//4+88u61
      5DVAdLqb/aeamFWMpJlVxBNxJE8/Te4MKgucaNQqHDmFmCcnGRqZIqgvJNsBkViMWDRETAKr
      PQ2zKo5nfJTmk2/TPpXAareijgs48wqZnZ1hZHwCKdNOrilJwigAQZtG7YoqDFKA2dlZ3G4v
      /nAYrSUNm1lDOOhGlVbKijI7fo+HwKwXTyBEJBoj5p/g5NuvcqorTM26lThNWrJK6ynPUHC7
      A/i8U7SfOcmlzgn0VhtalUxcSpa276PEQ17GRwYZHZ9goPUkL752GnKrqCt14Btu58zpFqI6
      C2ajmngsTiwaRlI0FCxbQb4+jsfnw+vxIqmMpKcZmBy4gS2/FPRFbF9XxuxwR/IOglVGK+qR
      A/zbGz9BdFTzwOOrUcd7MJfmkWU1IIpqsioaqDz+fb79737y1zxGiTzIswdc7F61jI1Le3j7
      6X9DzKhg76PrcXjP8erTf4dLttH4uUfYVh1n5gfP8e2LPoq2PU6R3ZQ0MyGGzAoe/lIFeHrR
      pZ2gdPMOsl0ZvPjmM/wAOxt3P8qOLbUY1TB6KRu508r6LB8/e+c69ZlR3n31bXqx0XHtCmv2
      fpFH7v4Sq0SJpvwQV0y7WJUf4LU3nuH5iRhL1u6lsdzJLVh8ddOklzbyeGkjSmya/f/+T7x7
      qAdbWyuXjzfw6JONTF8/wsuvTmArbuShtcUMXHgNVcXDbP3ck2zFxWHRhr9mC0VpGiKjQ4wk
      Sth69wqu+37COxdnqbv3kWReFK8QjwQJhGIIGj1mkwGVEiccV9BptahEAUVJEAkGCMdktAYz
      emmYAxdmWN9Yh1UrEwxFYP5cUY4RCARJoMZgMqNTK0QCAcJxGZ3RjFGvSRoDvI+cIBSJodbq
      UBEnFAgRR4XJZEY3v7wyEY8QlgT0iTEOXpikoa4Kgyox36UR5rXNTfHGI0Higg6DRiEUDBKN
      g85kwqhLQu0fRkkQDgYIR6X5hYJazBYDSixMMBJHrTNiMmhJxEKgMc0vI5WJhSLIah06rQol
      ESMSA71ejRQJEozK6PX6O2tRvBKdZTIgkJ5mWXhraX9N5rSD3WZFl4yP8yTkli2Kv1UIOhvZ
      uttditvDYtb+6/CpBlAU5f3F6ilS3Il8ZjBcOBxmdHT0VpYnRYpbiiAIn24ASZIIhUK3sjwp
      UtxykmXqO0WK20LKACkWNXfULNBNocgE3EN0901TULsap/F2F+gWosiEvMN09UySV7OaTNMC
      nehQZIKeYbp6JymoWY3TNBcKE/WN03zhCkPeBHmVK1heYWfo6iW63SK1qxrJN0UYujFOesnS
      xdoCKASm+zj4wnd55sUDjPmTMBDmt4ZCaGaAQy8+zQ9+9jYjvoWqXSE408+hF7/HMy/sY2T+
      HiqyzNj1c3TOJLBqfJx+82XOX2nmXEcv0yN9XDrTwY3Oi1y44UUQFm0XSMLr8mHNyydDSfK3
      oL9xJDxuH+a8fBwLWruE1+3DnFeAQ/kgHaQgiuTV3sUjD97L1m3rKNDHiMZlRGGuqscDI1xt
      91C5vAabUVysXSANeZV1qBij+UzH7S7MLUZDbnkNGtUEzSdct7swvwYacstrUYsTXD3l/tDf
      BbRGK2opSN+1PvTlm1i5ohavAbpnImjCXkajAt1HXqMrq2qxtgBzT4rF+pLvTtH+aTqksIfr
      l87QMqlm5caVZFrTqFqzlZ2rSgjFFeyiG7fWhL+lbbG2APMIAqJ4+1OK3xbuFO3v6VASzE6N
      MBlQE+t/l5+83UZuzXLUF8+iNG6myCYx0NMBaZVU2/sYuTKDT9EsZgOIpOWs4L4nSsm2Lfhq
      cJOIWDPruOeJfLLSFrJ2EWtWHfc8UUBWmogYUqPRqDHmL+WuPVnEE6A1GlCLAghqnMW1pJmL
      cKjziSW6CFryPz0curW1lfT09NupLkWK3zaeRTsGSJECFu00aIoUc3zqGECj0WC1Wm9lWVKk
      uOV8qgEMBgM5OTm3siwpUtxSPjM79HvcCfPFKVJ8GqkxQIpFTfK+B1ASBLwu3L4Qos6Cw5GG
      GPMzPe0mmlBjsWeQZlHjn5nGF5Ex2jLISDOimt9hJRLw4nL5QG/BkZGGSgoyPe0ioqixpTux
      aSVcM25CcTDbHaRbDEmUHFch4nMx7Q2iMthwpFsRYkFmZtxIKgMZjgz0KgnP1CS+cAK1zooz
      Ox39+4kAFOLhAL4g2DLMCFIEz/QMwYSKNIcTq0GDgEI04CUoqbFa5zYyTGYS0cDc/ZJELOkO
      0owqAp4ZvIEYGpMNR7ptPhGCghSaZXzaiySD0e7ErpNxu7wIBjsZ6SbksI+QYsCkS+JYoKi7
      l1effZGWgQnCQjq7vvAl8seO8b0XTiGkl7Jhz8OsLZripz/Yx1Q0gS1/PV976lFK07QkQlMc
      fvGHHLrYj2wp5P7feZIc91H+/dkzRGSJvHVf4MElHvYdvMCkP4ytfBu/9+V7KbYbkuLNaCI4
      wcEXfsyJ9kEkfQWf/50HUQ0d5dX9zYREKxse+So7Sz18/y/+gevabEpKNvHkN/ZSYtICClHv
      KMde/DGH+4r447/+HPGrB/j+T4/ii4uUbHuS33+4AUPMzfGf/k9OhNbwza8/So7pdqv+LKL0
      nX6L5w9dZtofIb16J49uyeb8m2/SOhFAMBfx8Fe+zMZKJyo5weCZn/Jff3yFbGcG9Xc/xkrN
      DV564xTqgga++OX7cJ98g6GCu3hwZe5vf5O8X5VEyEfIWsYDD92Hbeww58ZExNFhqLiHp/7o
      MVYucXL90PdpS9vDf/nddQwcep1Q0Uaqc4xIrhu88k4TFdv2YJ25zigZRAZPIqz6Pb5SL3D4
      yDCFK2tYvXkPe9dlc/a1C1hW1FOSYUqKPqESC+BRnGzdvIzpC1fwO4opyE6nZs1GMnydNE+a
      KbNNcLrJyJP//Zvs3bwMp2k+PXjcR8fls5w4dJIWv5O7dtcwenofzeJKHl4OJ1qiNG4ox9dx
      nOdfeQefpYKNa5ZjTeqMEnFm3XHKN97LfavSOPHKJYzVZVRWNPLAA5sJXTtHr5TD8tpc1Ikw
      zUdfYqb4If6vrz3OqiVWrl9rQ8isxua7hldS6B1Ts2nTSuwGVSQZ7vcnonOUsmlVDXathKTK
      oyo/i4QmTPeVN/nn//VP7DvXCwY7kYl+uvpGmPJMMekKACCaMqjKETn1xou0h+3UFDuIB73Y
      bDZsdiu6aITMqlUsK81EicaxLS2nwGZMisoPoDLn0LhiCSMXD9AalMlwZrK0biWa4dMcbx0n
      M8uK5PXjkfp4/l/+hu88e5BRX2z+ZAOFS9eya3MdBp0aVBoyC4oQeg7y7PFRltaXIU53c+bS
      BJWrVpG9IBbDGChd1UhtcTpSRMK+rIraqnpWN1ZjFuKIjixKS7PRAYoSJOBN4G16m7//23/m
      lYvj5BY6GGs5yZiYj6d/CJPThn9iGPdsPHlbAFCI+ie5cuQIY9Zqdmxez4rV69i5fRMlhnGO
      Hu+kbud9pM100j4cRZDHcdbtYXmBCVfvOfZfGuG+J79GUaCdawMJ9Moocs46KrXjnG8O0bC7
      AXHsKgdPD1GzcSv1xRmok2XGS1FQRC25Zcuwei9wfEiksbaC3OJyCqx+Lpy5ztI9T/LY3h1s
      WJFH59sv4cpqZFm+BUFQodfrCNy4wvE+DVu2FdLy5s9g9Vf5nU0mzu8/z8TIdc51jBJxDdDZ
      76awbh0ljmQaA83hGWjiwP63aR2cxZ6ZS3D4MgfPj7N86zZqC9KIuQc5fuwc8awG7lpfjlEl
      IIp6iuo2sm37FpYax/jJO4NseHAvu7dupNAYpGdwjOmBHs6fv8iwrEveFiDmG+LAsz/i9LhI
      xZIihOAkF0+9S8uAi2BIQqPVE5oaJFqwhl3rCzEaV7C0QI8vEEZWBAQlQTQSJh6LI4gasvKW
      MNPfQ/fAOHJeLpHuw/zohZOQXUJhhoGEnDwJYmPTXbxy4Ch947PIqNHKfi4cf4Pz3VNEEyI6
      jZbJzmMcvtLLrC9IQjRi0MjMBkJIiY+v8BIQRIhHI0SjceQ45Czfwd4djWTbTej1BnQaFUkx
      +PkYKo0eizUNi0nDaPN+fvTSOXR5peTbtMyOtfHSsy/Q5bdSVZ4F0SihoJdgaIoL+4/RNjyD
      PxxDazJg0OjQiVH6uvrILK9Ga8pn3cpi4jMjydsCePou8dr+g3QNjNHVehWPqYgyo5/Dr79J
      85SWbfc/RF2Bho6jb3OsZYaanQ+wNsvLc0c7Ka+oIYNpju4/ypShnPs+t5vqXAPdx9/mzECM
      dbs2wvVzHDvfxvBQF60tHnLqK8ky65KiHghqNf7ec7z6+j5GVBU8dP9dZAnTHHr5Va6Mqdj8
      wOdYUaSl4+hbvH3yOplr72dPNbx8vIOcnFxsBjVhzwQTcTtr1tWSbzfSffodznQEaHjgcfZs
      WUntsmpyrQI651LWNyzFnESb47yHzupkSUUNZfkm2g7t4+ilDoYHu2hrnUbUznD24HkGxgdp
      vdyLkuYkNn6eWUMVGYl+9r/+BhdHNez+3F6WF9iJuW/QOmVj89YGDNPNnGz1Ur12163bKPtm
      UWSJWCyOPP9AU2m0qAWFeFxCEUQ0Gg2ioCDF4yRkUGs0CKFBDjd5aVxZg80oEI8nQFSh0WgQ
      SBCPxZEVAbVGA7KEJCXmkq0KKjQ6zfwUanIgS3FiUgJBVKHRqBGUBLHYJ2lXUKm1qCJDHG5y
      sbK+FodNh5KQiMug0ahBThCPv6f9vX0UQElIJBQBlVqVFMb/dBSkWIx4Yq6VFgQVKrVAIi7N
      74kwd09FZBAb9oo1AAAgAElEQVTViHz0WqlEAUVOIMmgVovIUpy4pIAg3mHJceNBvGEBi3k+
      BnwRocRDeMMKZtN7m+Kl+EXceclxNSbsml983J2IoDEuWu2/Dp+ZHDeRSCyoFiBFipvhM4Ph
      gsEgw8PDt7I8KVLcUj7TALIsE40m9/aZKVL8uiTte4AUKW4Fi9oAiqKgLNTMgL8md4r2z9Kh
      fOyDTzrujpoF+qWRI/S3nOf0pU7C+izWbdlKdUF6Uu6U+BtHjjLYdoHTF9sJaJys2bKN2qKM
      Bag9wUTnBQ6fasJLOo3bdrCyLAu1AImon66LxznTOY6jYi3bVuXSc+Y4rdMqVm/ZRpk1zPWO
      ITJrVy/OFkDyT3F92E12VR058g0OHT+PN5S43cW6JSQCM1wfnsFRUUe+apgjR88wE1yA2qMu
      mk5dI2YvwikPcPb0NWYjgCLjHWrmTIuf8mWVMNZNb1c7LZMB9IqftnMd9LRfosMjYlYt0hZA
      bclj+91ZqNQCg4wyNiJzB/QGfilU5my27rwXlVpkWDPJSF/yxEDdFCEfI3EVxTXLKZx2MdTu
      JhpPoOgUXMOdzGjSyJr0YFtSS5EzTGc8yHRQICN9gqvdcep2lKHVLVIDIKrQaWF2vI8+Fyxv
      aCTNoPrF590JzGv3TfbTNyWxrGEzGcaFqV1GQBDnUiPGE3FkWUFRZLwzk0xNJ6hyWrh65AD6
      x77IlnXrGPQECY0NM0qCS6/9mDPO6sXZBUKRmBnq4Ny5FrSljdSXOtEsliuhSLhGrnP+bDNi
      0SpWlGctTO06AxlaNUokQjQqk2axo9WqEAQBS3oOtuxyNmxag5MpRt0JCqqXs7zYji8ukqHx
      k8gtQTM0sDhbgIh7gH0//Q8uz6ZTMenCO7uBnY1LMesWYk24OaKeYQ48/33Oz1ipmHDhnV3H
      zjXLsOoXmHZDBrXFZt498iqXgjIVGxqIuXppC5rIq2pkSdcJXnihhbixil2FaShSmMG+62iz
      l1GT1kv/8R4CinNx5gaVwrMMDdzAHUwAAiZnAUvynGgX3lTITZOI+Bka6MMVkAAwOvJZkp+1
      IHeXjwVdDA6MEMRIYVEBejmIP6bDYdcxOznEyHQAs7OQguw01CTwuSdJGDKxqoIM3RghbLR/
      ejTonWyAFCnmSSXHTbG4SRkgxaLmUwfBOp2O9PT0VDh0ijsWWZY/2wBOpzNlgBR3LJIkpbpA
      KRY3KQOkWNQk74swRWF2oo/+cS8JDOSWlpJlMyDHfEyN+7Hm5WASE3gmhxieCmDOLKQoO+0j
      i+GlqJ+pSTcmZx5GIcho/xCzkpac4mIytDFGh4ZwhUVyCovItBmTKDGUQizgYnBglLDKSlFx
      PmYxyujQAO6ImuyCIjIMccYGhnCHFOw5BeRn2ua1S3jHRxganSGmNpJXVEyGQWJ8YBBvXEN2
      UTFOfZzhgUFcAQlbdiGFWfakX0gfD7kZGhxhNibizCsix6bBNTbEuDuE3p5NUV4mBo0IKERn
      p7gxOEZE0ZNTXEyaGGJ4aAzBmkthnp2EbwovNhzmJN4lUpb8nP7p3/Fin5ninFK2P+4gTeXn
      4r4f8rP9Pr78d/+dpYkuXv3hq/SEo+gtVXzh979AZcZckkslEaP/wsv8w7OXeeibf0n+1AF+
      8PpVBEEmY/Uj3L9kijffucKMN4S9YQ9PPbITpyk5Loci+Wja9yL7r40RlRQaHnicGrmfNw6c
      xSOrKF62g7UFk7z9bjvRWJCYfglP/uHXqM8xgOTm+LNP81anl6yypdy1916c7lM88/IVBBLY
      Gh7l88tdfP9HR4lEQgSdjfzpN5+kymlM4tQoYbqOvckr53oIhfzIztU8sjOfKwcOMxiME46b
      2fPlr7Gzfi43aOvB/+AHp6Yh4MKx/YvsSp/i7UNNqDPLefTLDzFz9E1mKu/hwRU5yWuARGSM
      vj4N6/Y+yX0NxTgy9Ex0XuZG7zgun0hcijPaeYZBWwNfebycwHQQ6/uhDArBiU4OH7uOX54l
      Ho/hGhtFKVzDjqwh9g+MIayr5cEn65m9to/nuwcJRhNJYwDJ3cuR7hgbHnicfLWPqDpO6/kO
      HI0P8VCZjmBMT4Ytk8ef2kOedoD/+Nt/p2cyQl2OAdnrotudoOHBL7F3bSUOs5bmtlHieau5
      p2CMN3v66RB7MC67l/+zUcvf/O9jDHj8VDiNJG9InEj6kjV8edVDpAeb+Nu/PcUky9j+2B+Q
      l61i3//+Htevj7G5Phch4aLziov1j/8Jde6X+PuL7dwoNVK0bC3C1FXaLp7CFcnm/oosREFI
      XgMQjoPdyvUjP6bjuJ3dT/wOm8tXsOOuMZo7W0CWmR7uYqB7iB/0H0Kbs46vVtcDkAhPc/H0
      ZQzlDdQqHgRRRXp2NokzR3ljyEb9tm0UFFURGzzLmye60BdvBxVzSbJur2oAoq4pBif78L04
      SFAysv6uTUwPt9PROUvb8RjVGx/liw+sw6qWGO90octbR3WeHgGISWBJi9F55Hm6z2Sy84HH
      yc/MQTx5nFdHrNRuXonK04reZMBo0KMJxvHFpCQPB9eRW1WNkogyNOjD3lDLsrIqStJ0BMbb
      iaZlU12djx5QlAghnxaHXo/JaEKJxCgoz+fiO6dRskpheByTo5jelmvEKquT1wDqjEq++t/+
      ApVK5sLzf8XrZ66yoeo+jEbt+5VUklVo8hr4w8cKefmfn+Zs106WrHXiGbjGwUPv4tGkM9p7
      lam0w5RMnafywf/EbkcbT//gEN2NtdQVreUbf6bmH/7n21wd3EhBXU5yPAUFATlqYsPXv46l
      6Xv85MwVMsNqKrc/wt3WNn781rv0ra0l09fCsdPDLL9vNxUZBgD0zjK+/H/8FRDm0ovf48C+
      A2SpOim594+5P7+bp797DHWZCswysiIjWI2YNOqkMP7Hme46yRsHTxKz17Bn990Io2c53BJl
      564dFNg0+MY7ePfwZdKWbmVzTRYqICFoMZhFFObWeKitaZTV7WD9qq30Nx/l3fPdTHY003vt
      PI7+bclrgOhUJy8d7aasvIBRD2TlOVCJAvH5z0VRTcnS1WQdcdM3KBJRpWHXxRl3+TBlL+PJ
      r3+T0dEb7JfGKCkswhG/wsD4AINRN6Jew8DZ/QxbHBSZPChpDtLN2qSpBPqcEhpyL+Ea7Mfv
      lsnLL2apSsPI1CADQS8akw1X+0HeONpE3uqtGJUgfr+fmCShCY5w6uxlrAWVTHhl7Dm5pMcG
      GJoYYJAZ0KdTWmXn9PVeLjTLRNPtFFiSs/tjchSxcs1mElorU5de5o2TQ1St34AmEmC8r5vX
      nnuLSPZyNloEfF4/MQIIejulNVrOdjQhzw6Rk7cNq1aLHBmlvb2fgro64pd6KEqPMxX1JG9y
      XFFrgOlOjh47RyC9gYd2byTbpkeJhwnGDFSsqKEgJwe9r5OTlwYoWP8g28vjvHK8i9LSCpaU
      LSE/x4HeoKOmYRv15VmMXTtL+7iajZ97hA1VFnouneBU6zT1u+5j49L8D20xdHsRdTZyMxJc
      O3OWMU05Dz14Dw3l2Uy2n6FtUsOGPXuwuFto6RtjenyYgZEJ7Blmjl/uprCoBH1ohBPHzuG3
      L+X+B3dRtySbybaztAzB+ocfZuOKJcgDVznTPkPdxrtZW1OQNNo/jMaYRk5+EbkOLb2XL9Jx
      Y5Sp8UH6+wPozWF6WvqY8UzSe30MTUYmCVcLIVMlpTkmei6dojfg5O49OyjNsiD5RhgMZ7Nh
      fR22UB/N/THqN25N3uS482WaX9kvIL4/RzmfBUAQEABFkVGUud0s5cAAJ9qCrKyrJM2kef87
      5o5VUGRlPhmuiCB8+Hch+d54KwryvHZB/Pnyg/yRLAdKcJhTbbPU1VZhN2vev26fdK4gfPS6
      JZ32T+C98r6HIAgfyfrwvob5ey3PZ1V+T+979ea98+YyH8rJnRv0k2+OwIf/9IFAEA25NC4H
      g07zke94/zxR+FA35+O/JxmCgPgR7R8vr/iR64Axm9XLs9HrtAjCx7e3/XmtH75uC4FPKu+n
      G/fDD8wP/vaBR+bq1WfGAi1EBLUO8x2l6CZQ6TAZbnchFh6fmRoxFostiOYxRYpfhc9sAUKh
      UCo5boo7ms80gCzLSJJ0K8uTIsUtJxUNmmJRs1iHjCiKTCIhAwKiSvzYjMudjaLIyAkZZUFr
      V5BlGVlWEEQRlfihZ7mikJATKMq8PiAhJwARUSWCIs99JiZzLNBvEyXO4OUj7DvRzCzpbNh9
      H+tr8tAsxHpwsygSw83H2HfsMu5EGut238fG2gK0C6wvkAhOc/H4Qc52zOCsauSenWtxGFSA
      gn+8g8MHjzLg11G3bQ/1Fg8H3zlKyF7DPXs2ohptpiWYy6aVRYu0CxSZpulCPxnL1lOf4aXp
      Yju+SHKHg/3GiM5w9WIf1up1rMgJ0HyhBe+C064Q8E7jJ52NG5fj6TtD+7B/7pNEkM4zpwnk
      rGbXuiW4pkfpaetDMBVjjXZyrauXS003MNstaAVhkRogHGBCUZNZvITSYifxqIe4tAAzJP8q
      RIJMJkQcxUsoK85CinqJxReadgFrbjVbt9Tj7+vCGzVinX/zL8dd9PdEiEx3cL5jhsKCfLKy
      LHjGuxjxqQkNdOKxlVCSriOakBepAWDulbkgzIcF3BmbRfzSCB+8DVVYONmh5XiEqZFeevtu
      4AklUOvSKKurp9gAN/rHiSigxMK4vWNE1Lnk69y8c7gZTely9jxwLzsa65AiQYSxazzz3e/y
      5un2RWoAg4ksrYp4MEgoKGOzpqPTLpLhkN5Ipk5DIhggGJSwWTIWjPZ42EvbuXfY/+67NLf3
      0DvgxlFSRp4V3DOzSAkFdGnkZtnJKqqktjSL8LSHsMZMyZIl6OMuFKMdZo3ULy/CNdK+SAfB
      Bid1FTbeOvgzvBE9jbu3Y9Le7kLdIvQZLKvM4M3DL3EuoqXhro1YdLe7UL8cOms22x75I7Yq
      CqGpPo6/u4+3pkOozflsqstnuvscfks1y7cvY9/xl/lJKEHV2j3kGDREA0P0D0hUb11HJLGf
      o1d6yFi2eXEmxwWQIj6mp91E0ePIdGDWLZ5ngRT1Mz3lIooOh9OJSZ+cC2I+E1nC73Xhmg2j
      s9hx2M1IIR9xjQWzKo5repqgpCbd6cRi0KBIEfyzcYx2E4mAmylvBJM9LZUcN8WiJpUcN8Xi
      JmWAFIuaT+346vV6srKyUuHQKe5YJEn6dANotVrS0tJSBkhxx5JKjpti0ZMyQIpFzcKd/FZk
      gu4h2lr6iBiyqa0rJ92oRVBkgu5R2tu6mJVNlFbXUJihYqjtKn1TQcw55SyvLsSoFvBPDTPi
      VlNSlYd+IfX0FJnZ8V5auwZRrIUsW7qENIMaFJmQd4z2lut4ZQPFlbWU5thQCQoh1whdMxIV
      RTkEx3vp6BlFseWyrLYKh0nzi//nbSbqG6OjrYupkIrCyhrK89JRixD1T9I/6CarrBq7XmAu
      Oe44ba1deBUr1cuWYpNddLT3IjrKqKnIITYzyDROCtMNyZsX6BeRiE5y9KfPc6ZvkuHOK/hs
      JZTn2iHq4+KhZznSPMFE7yXOt82QaQ3y3DNvMObu5+i77WTW1WGe7eDH//CPvHZFZt2uOixJ
      qvOTSASHee07T3Oqf4SOsxeIpFdQUWCHeICmQ89y8Mo4UzeucO7aFKX19dhkN8ef+0e+tW+E
      1cVa9r/yHK1DbnqarzKrzqNiiTOpQ8EVJUjrvtd4p/kGU/0tHLswQVF9NRmaCBdf+3/555+e
      pnTtLvKtInIiyKXXvsPzp/oZ6zhLW1CLOHqNg8cu09vbh7Uwj853DjBmLqE8yxxZsC1AbLKL
      09M6Nm9bS7pawlaYgUoQEDRGqtY9ROVdOSSGD/P0M+fo6QgxWbCev/7KEp7/r99lcHAMnTyB
      qNYSiCtJnhfz51GIEphNkNewkkToIsFQDFkBjVpP+ZoHKN2eA+Mn+N7Tx5nxR1BNXqK1y4No
      zMc73sNE2MyDX/sa/kPf41hLD/6tSzHob7eqT0cQtBQ23s1Xdzgwey/zt393BlcgyOTENU50
      +zDqPpQzSIFQwIsxr4HqRIgOvxefksBZUIbg7abr0hm8mhI+V56JKCzgMUDYNcnQ8HVOHHiF
      Z59/nauDLmQFRLUWZ24pGfoYY0MecpZtJ8ccQ9Zp0Om0aAU/obiFujWbWV9fhEa1AC9BQos1
      10DPubOMCDaynSZUAggqDY7cUpwGifEhF1m1O8hK9HDmyiDFaxvJNWswZhRiF90ceuN1rtzo
      xxv1EU/Spd9zq/YSJGQV6QWFZJphZGgax5p68pjizPk+SuoaKLRp55OIASQw2fKI9JyjaUSg
      sKCMZfVVqAOjkFlJcHIKAx5OHzpM65Bn4Y4BVBotGnUWd/3e75M48ne8dqmN3cuL0ehF4iEX
      V08cod2Tzs69GxDaBtHcUJAkBVQObFYdOr0O9UKs/EBgpIVTUxZ+9z//IcEj/8qb56+wYWku
      Nr1IPOym5dRRWqcs7Lh/A7Er3+OdExfQCUGuTIgcXVrPvfc+QPeomxmphEKznWQNBp1sP8xz
      r71LzLGchx+4F6n/FKd7VezaswbV4GGOv3MIv1nFUPcAysomarMaMYZHOH9iksbf/TPWh47w
      rTcusukvv8of/GkD3ecOcKjJzWTfAFOaboa84YVrAGNBFeuyWui6eI7YGBTX2PFOTRDSCnQe
      +iGvXArSsHkDE0P95GVVUDh5lnfeGaVfzGF5nnFBZUX7ODqrk2zxMs0Xz5KYiJGzxMbs1Dgh
      rYre4z/hZ2fcNGzexORgPyV1j/Otb+1muu0Qs6c8rHBKNLe1obLmE5KNlCytwpak0aD2opU8
      9EQhskrNxNmf8NzRMZZtWst0/zhlFVv4s7+pY3L4Eq++dIy6iiLCU91EDCZyckQGr15ElZjA
      mlOGVaMiOjtIc/sIZasb6D3ZhEqnIijLC3cQLGrTyM/RMtjZjZK7hvu31TDW2sxoUIbQDL6o
      Qmh2moCkYUltIwWGaTpveCnbspNNNQXo1SIgYMospLosC12S6vwk1GYHBekCA109CAVruX9b
      HRPtzQzNSgiRGXxRmdDsDL64SOnSlZTkOkm3WzA7i1hTX0MaQbq7R3DUbGD7uqVYNMnZEqp1
      RuzpDtItIhM3hvCGIoQDXtxeFcX11ZTm55Bht2GzZ1NeWU54vJWodSm1lU48g11MCgXcd/8O
      ljjMJEJufOpiGldW4xRdDM3qWbUpyZPj3hRykK7OHtTmYkqL0hZeeO+vgxKi53o3iq6QstL0
      hTuwu8VIkpTcyXFvCtFAacVSBEGzuCo/gKCnuGxOe6ry3xx3jgEQ0WgWy7Kuj7OYtf96fKoB
      EokEkUjkVpYlRYpbTio5bopFzacaQFHmUs+lSHEnkxozpVjU3EGD4JtDlmJEY3FkRLQ63cIM
      ifgVkaU40VhsYWtXZOKxGDEpgajWotNq+PCuSIqcICYlUKs1iMhEo1EUUYNOqwFZQpIFtBrV
      IjWAEqPnzNu8dfIas7KV9fc+zPaVJegWYD24aZQYN84f4I3jTXgkM2v3PMTO1WXoF5R2hYh7
      kGP799M06MWYVcWevbuoyDYjArIUYbzjHC9fdXHv7l2k+67z6ltHCNmXsveB7agGLnAtWsLO
      xpJF2gUKT3G1ZZIlW/ayvVKg8+p1/AsuQeyvSGSGay3jFG64j7tqNVy/2sFseKFplwkFgpjz
      V/PFJx8hNzjAxZYhojC3VmK4nWPHj3C2tYdgLMRo3ziW7GXkafpp7bzOpbYpcnPT0S3e5LhB
      ZlCTlp1DTnYa8djsIkqOG8KliNiyc8jNzkCK+RagdhXpRTVs3LqafLsFa6aD9DTzfHdGQGvJ
      pn71GkoyBECLI8eGa+gqNzx6osM9hNMLcGgTBIMLOBju10IUET+0oYIgigsn5OPXRRARP7Rl
      6s9vJ5q8JKIBhm9cZzqkIre0mkxdkI6WFiLpS9m0LBcNgCBgcuSR6+qeHxOoyapazSOOEmZn
      Rrl87TqJgSv8qOkUuau2LVIDGC3k6UTCHjcer0SazYFOq/rF590JGMzkGtREPW483hg2az76
      BZIWMhEPMz7QSY9bg6Iz0T90jeGYgzXrK7FpRRIJCQQVqo+ZWtQacTjTmey6iGjPQjOponFN
      AX1TA4vUADoHdbWZvH70FVxxG5v3lmNeLJEEunSW1ebw2uFXuRC1sPHenViTNBz642jNTtbt
      eZJ1SpyRq+/y3bePErI56W3rZN3uuyjQjRO2rWB5oQWV1ogzPR2dWgQUYsFpxqb01G1bTVje
      x4GL3WQ1bF28yXHleAS/P0Bc0GCxWOYv1OJAjkfwB4LEFTVmiwV9koZDfzoKUjSEzxdibvSi
      wmA2oxHiKCoDeo2ILMUIRmLoDSY0KgFFjhMJJ9AadcjRIP5QnP+/vTP7betM7/BzDg93UhQl
      Uaupldoty7K8yUu8JLEdB87STqbtIM3dXBb5C4qiQItiOgHaQaY7inRBikmQus7EVuJxnNiK
      ZUmOrNiWZFsSJYvaJYuSKO48Wy/sLM3AQdw4E1Pkc0nw4rznnN/3fsv7/o7RZNlA1aAPiWi0
      4Mp7jBthv0dEowWXO51jF5DMdvI89q/9/mUaFyUTzq+kdUE0Yr3vfmGwOPj80aeb9LNkeaR8
      YwbImJ2RLBnLAwVgs9koLS3NiiDLhuaBApAkCYfDkRVAlg1L1hw3S8aTFUCWjCZtt0E1Jcr4
      Z30MjM5iLqynY3crhU7zFwcbuprgzvBVFsw1dNQVIwgaoZnb9M/r7GquYOl2P33DAcT8avbt
      2Ulprjltmul1LcXszU/pHQpgKdvMvu1N98xx0YgGp/j00hUWlRxa9+ylvtgJWpzp4WFWzWU0
      1pZgEnUS4XmGBicobNxJuftxPwXUid2doLd3gNmISG1bB20+D6HADXr6RxAKaunY3YbH/uXr
      rMvr3OofQi+rp8y4Ql/vNcSSVva0V5GYu8UMXhpLnenrCxSdvspbv7mGwSwwcqmTSaGK1poi
      JFEANFb9l3ntZ6/xqdbA8W1e1PAcp//1Z7zWtc7heisn3z3NakLndnc3QVctLT5P2owGSnCU
      d969SESLcf18P1ppPTWlLgQ5xvDl03x8ex159jqX70i0tpUw/2knf/MXv8BvrmNnayUmLca1
      zn/hr944S1nbU9QVPt5nAroe5fqZ9+ifTyKF7/Cbj8bxlBnpPv8hSwkDwekAKaeXqtIcREDX
      ZeaHP+Sv//R1Vssa0KcH6B2cZv7OMOaSIobPXiRWXEdNgS19zXGtRZv5yStN5DolupNj9ETX
      UTUAndT6HD2XhpByXBiMIpoSx3+tj8m7Aq48K+G7s0QkBy+++PtMvvMGt2aXSapgSZNyIMlV
      wYkf/yFrgW6mB5ZQ9Hutq6JkoW73CdyVs/SdmWJKVlCVFZaWdIpLirhX8a0SHO+nezhFUSGk
      Q9oTBCuNT75IncWJcfkKgde6CfhHWQnpVG/3kWdz4qvKvz+a68SXA/R+dgPBVohd01B0sNgc
      iIkFxvt7ibjream6IL3NcQ0WJ55cO5G5EWZ1H09sa8BsFNCVOCP9F7mjF9JSX4KoyQQnB7hw
      fZm6Ha3kGjUSySSgIUkSRkklFU+STu3PgtFGgdtOZGUVIUclGomgqTqIBhyuPCxqiNWETg4h
      4nIJu57aQ31ZHgYgtRLgwic38DRtwesyosjKl87KjxmaKpOIx4gnFKx5+TikOCMjc5Ts30aZ
      Kcrk0BhDVy/Teeo9rowuIQOaHGaw62OWLI20Vuaha1aat7ZTkW+iyNdCLBjEEPLz9n/+F31j
      d9Mm6/8WupZiwX+Nrk+uU7jzKbZXFyAJICeijAx8xMWrMvLyLSY9IqdjBi73jkMiyNWglfcd
      h5EkC7IsI+tWXLlOjGl0J7RUhJWYTuuRV0gF/4xfDd3iuY56TKJAdH0FW2UHL/1Y4Ze/eBf/
      0vNUeg33vVA1QosTDPR1EYgZmL4zzIynjz2+o3gcj98NWBw6x7+9fYakp52XXjhOfKyLgUUn
      x453wOgCzvJqTvzBK0z+9z8xNDjBk9srcMTmuXr5Ct3LMYLDfqxrbnbte5UfvVLLzYu/5uKy
      ieX5MHmuVS53d6fvGmB9sodf/vx1bsl55IpxkpINNRQkKuSwedchDj+xj3xhiUTlU/zJT36P
      I089zdYyA37K+OkLB4hMjjJ8c4TRxSj1ew+yxetKm3SYujvCW6feZ2R0lImpFbzNOymSUoSi
      Kaauv8eZT0aYCkySlCroOLCdfCnG7d5elux1HDjYwd4nDtPRWkMiMk/70y/TXpGD+Bg+Z2tu
      Cc1tHexoqWTy/L/zDycHyS12kVxT8VQUsjozyvjEDJMLUarad+DRp0nafOzYf4DDh7dinFmh
      ZN+zHGqvQFvxc75rGF/HThLTd4gkE4iu4kTaCiAVXSdptOJ22BAFcBYUEZ0aJ4SdysoyXE4H
      7vxCqqpr8ZV6sDscOHPdlHpraKr1UelxEIulKN+yhwPb63Ga0uX1B4PNTYlVZfFuiPyG/Ty9
      q5aF24PcVew0b66H1UVixmL2PnOU+kIbgmjA6srHW1ONt8iNw+HAmePCU1KOr7qWXNvjN/rD
      vYI2m92B3SISjcjYXDlYTSKCmEN16xaaNuUTX4+zaes+Du3woYXmweml0O3E4cghr6CYqsZa
      it1WUJKI7jq2NtVQ6oKEsZD23bs3ljmuf+wORnsF5Zuc6bC2e3ToMSbGJsDiparclVmxfwc2
      mDmujSpfI4IgZt4LIFipqMnQ2L8jG0cACBgMabKP+cjJ5Ni/Gw8UgKIoRCKR9JkCZcnykOi6
      /s3muHNzc7/L68mS5XfON06B9Mf1hCRLlkdE+uz9ZcnyPbCBFsHfHl2VCYdDJFL3a2jMdtxO
      22/5yWxEdFUmEl4nnrrnpyCabeQ67feLCNMIXSMRCxOJyxgtDpx2yxfmuGoqzno4ioIBuzMH
      i6gQDkd9WuQAAAZVSURBVEfQDFZynPfOBBKKAZvVmJkCUNbnuXjmFNcmVggHgxgbj/Lqy0cp
      dBh/6Ev73lEiS1x6/yT9/iCRYBDB9ySvvnKckpzHvST6q+gkVwN83Hma/ol1HOXNvPjCcSpz
      TehanLHud/l19xgJjPj2n2Cve5XO9y8Qc9fy7IvHMPovcUNv4Nju6geXQiwtLWG1Wn/IKL83
      DBYn1Y1ttG+uQo/Hqd7aQUN5HlKaDYL/HwxmB1UNbWxv8SEmYlRs7qC5qiDtYk9GQiRNHtpa
      Kpm82Y+xZAtVBVbU6BQfvH2FTcf/iKOVCT74NIBZTSI5KymQAgQTEoHAKk3bWil2mhOZuQYQ
      RIySyNrcGHfFCrY2bcoMa3QAQUSSDIQXRpnXvLS1lKdh7AJ2TyUtDR5GurtZiueSazeiAxiM
      WM0qKwsL3A2uE5sKYd2Ux8r0AOMhJ/LCJLrbgxhbZTUSycwpEIAqR5m6PYmn+Xk86dII8IhQ
      5SiTN8fJb3yOQmv6xC7H1xi9cYWZdQM1W3ZTVVDMweefRz11hhuDd6gvbcFmKWHv8V10XrjK
      kE3H4XBTWrudHQ1bWZv180n/MCn/Z7wz0E1h64HM3QWSIzP4F134vC7Sbf33XVGjc/jnc6jx
      5mJIp9h1HVWRkZUUwekR+nqusaYISGYjggBKKk4iFWV5QWbL4aO0eXPwNFdSaLNjs0gszdzB
      VFKBTcujfUcdyvp05mYAkgpSdSVFto2/8P06elJGrKqkyJ5esRttbrbsfZYt6KRCc/Sc/4A3
      u+7iqtjKkTYvy6NXWMtpJj9HpqvzHVKOcg4+04zLbEAOrbIW8bDtUDtxfYnTVycp7ziauea4
      uqYiqzpGSSLjqj00lVS6x67rKPLn3wgzYjJK6KqCLkgYUEimZHRBwmQ2YhAEdF1FkXUMRgO6
      KpNKqegm8waqBn1IBNFAGrUAPFo2QuyCgGQyI31191b6PKMZsViNX/u7AePn/5VMWO+/+el+
      G7Jk+U48MAMIgvB/PiOUJctG5BvNcb1eb7YcOsuG5RvLoQ0GAxaLJSuALBuWrDlulownK4As
      GU1mboPqCnPDl/ngQj8hsZD9x46ytcqTdgVh3xZNiTF5rYsJuZyOdh9LNz7mbNd1onYvTx47
      xpYKd/qNhPIqfWfP0HVjGq2giuPHj9OyKQd0leXRHk6d6yWk5LD92AlanSE+PPsRUXcLzxzZ
      ibg4zOB6AR3NJekX96NAXZvk1P+cY9lSQn5qlM5zXazE0u1r6d8OTU0wOXCOv//5X/L2xVuE
      gzOcPddLxO5BHe/h9LnrrMs/9FU+POraLOd6bkBJA7vamvA4733rVVPW6T97khmKcax/xpvv
      f8i1S30E5mWWx87RPTxG97lPWFMFBITMFIASXWU6plPXtpttDQVMBsYJx1I/9GV9L2hqgkjK
      SF1DPS5VIBkKEtCMtB84xL7NRSTnl4innQB0QsEFFlcWkaNhkkkwme5NZjRtlVm/keadhzm0
      u4nYyhpxSUROrhNL6QRv9uO31LLL50EkQ6dApvxKDtQ66XzzHxm0JgmpXpR0csd9CCRTLi17
      97A8eJ6JFUDX0AQQRRGDQUFJpdLGGFhXFaLhNRIq6DlVvPTcCeaX1+g7c5K7ioUfHahDQkNV
      7p1hGUQDelKnvH03NpuDtZTA/NQEFjXIP//tEE1PnMhMAQhGG76dR3i5FWL+SySX3dgs6dQR
      9XAIgvBF0ZfRaidXMpNMJCFlw5WfjzlNQk+szdD55uv0zJp54rk/pn3zfna64YOlv2NofJ7k
      vjqMgoO8YpGknCQpp7B5iiksqKDpiJfRy6eZmbWRCoQoa7Rx83pPZgoAOcrtq5f4bDYMKYGt
      h54kf4O3Q4oGCUkSkdyl7PBIXPjVG0TCCttOVJMuoVvcXp7/6Z9zXNOJzA5z5q2TBDUD6xE7
      u/Z7CY71Me2opXF7Ef9x5g0Gw4vUHdyDzSyRDE1w/foivoOHSMbfpdc/g6l654OrQdPOG/Sh
      0Akv3mF4ZBLNWUZTo4/cDd0UoxCc8rMs51JVWYS8EuDGsJ+ExcPmzU140kUBX0FXEsxO3GJ0
      KoijuIYm3yaSKwHiljIKpRCDgzdZU5zUt26mNNeKmlhlNhDFU1NMan6UwYlVCmvqVjNUAFmy
      3DPHzchdoCxZPud/AXaFYASgjhruAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='HotelClub Table' width='192'>
      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
      CPj/L9FM3fPJWUJMAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Table' width='192'>
      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
      BAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='124' name='CheapTickets Waterfall' width='192'>
      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
      Uiiulv8HRD/4hKwpFgMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='124' name='eBookers Waterfall' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAB8CAYAAAA/1L8JAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOwwAADsMBx2+oZAAABKFJREFUeJzt239o1HUcx/HXSaz8I2jEAhXd17XmyEbZWNMM
      LDCUFmyyE/uh/WCBhoO1tcBfJMYWg1YiLXCrZUK/pAkdspGlJYjMGUtlLXTNdThEaIn/uVDq
      +sNN9+vKwt11ez0fcP/cfe/4fOH7vuf3w3ESAAAAACehsU/EYrFYMhYCJMO0ZC8ASCYGANYY
      AFj7xwGIRCKJWAeQUHv37pVEAWCqtLRUEgMAUxQA1l79/jYFG1oZAHhjAGCNAYA1BgDWGABY
      YwBgjQGANQYA1hgAWGMAYI0BgDUGANYYAFhjAGCNAYCltwt+V7SuiAGAJ/4RBmv8IwzWKACs
      UQBYowCwRgFgjQLAGgWANQoAaxQA1igArFEAWKMAsEYBYI0CwBoFgDUKAGsUANYoAKxRAFij
      ALBGAWCNAsAaBYA1CgBrFADWKACsUQBYowCwRgFgjQLAGgWANQoAaxQA1igArFEAWKMAsEYB
      YI0CwBoFgDUKAGsUANYoAKxRAFijALBGAWCNAsAaBYA1CgBrFADWKACsUQBYowCwRgFgjQLA
      GgWANQoAaxQA1igArFEAWKMAsEYBYI0CwBoFgDUKAGsUANYoAKxRAFijALBGAWCNAsAaBYA1
      CgBrFADWKACsUQBYowCwRgFgjQLAGgWANQoAaxQA1igArA0X4JYkr+M/y8zMTPYSkOKqqqpS
      dwBGCoVCyV5CXLFYLNlLwN/gFgjWptwApC0o1+dHTysa7VX3wXo9kSFJYTVHo4qOehzQa7kj
      3pi3Sd+NPaa3USXKULixU73RXnV+sU55Q4dnVbbp6BuFiT9B3FRTbACytL52tc5ueEBBkK0F
      z/Xp+aZ1mq0WlQWBgiBQEORoRVOv+j/bqh2nRry16009du2YAlUfvKCO2i36MvcFrcuJaGXO
      IjVOK9dLyySlh7V51XnVb+9I1oniJpliA/Cg7ru3W8cODUqSLp87rJN3LNIjaSMOyavQW6Xd
      qtl6RJfjfEp6SY023rVLG3cNXH1i8JIujXi9sLJaM/bUquXiZJwDEillByAUCl17XHdaZ36Z
      r4cenS4pTbOWrtHjc+do7rzh19MVfmW1LjTUaH+8q195ernifn1d16Q+STr1kXb2P63Wnnat
      /bNBH/zwoqqKOrTjvb7JOzkkTMoOwMS6VF/1sebUnVA02qVPl/+q42f/0JUrQy+nl2hl4WHt
      /mQg/kcsfkYrBvfo/SPDEzKglrX5yg6ylb/yQ83cUi41NOr2d8fvC5B6Un4Aws3XN63NYeny
      8QY9tXCegmCelmw6pztnntHPQ/f66SXLNf9Qmw7E/faXFj+5VAPfRDTh93vWelUUtuqd9qLx
      +wKkpJQfgJay4Y1roLKW2Srf96N2r5mlNE1XxrICzfkqorahY5cszFd3Z3vce38pVw8XSCeP
      TXT5pyu8eZXO129XhzRuX4DUlPIDMFq/ml7fqVvXf6ue6Ante/Y3bdvWNnTB5+qeuy+qr2f0
      zjXcfLUcGjomO+hTz08TfHRhpapn7FFty8Xx+4L9k3pSmETjfkKNjfnpMhKJqLi4OHErukFB
      ECR7CTeEX4L/36ZYAYB/5y8Ho5S3IywOQwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='124' name='Orbitz Waterfall' width='192'>
      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
      zuodWm0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='124' name='Travelocity Waterfall' width='192'>
      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
    </thumbnail>
    <thumbnail height='124' name='HotelClub Waterfall' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='124' name='Total Waterfall' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAB8CAYAAAA/1L8JAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOwwAADsMBx2+oZAAACS5JREFUeJzt3H9s1PUdx/Hnl7QLpdbmlhDYHFBixeLwV9wo
      diUEsTBwUrQ0YNXN4AYiR1YLUZpSuCFy2gxzW/sH4tYEmJsOOiwq5UcnqXYMGK7ZADnxAmQK
      SIi74Ekg6WXf/SGF0isydv3cfe76eiT9467f632+yfd1r3vffb8FERERERHpT5yed7iu6yZj
      ISLJMCDZCxBJJgVA+jUFQPq1awagubk5EeuQXjQ1NSV7CWlPDWCxsrKyZC8h7SkAFlMDmJeR
      7AWkmsMFoxP2XGXBwwl7rv5KDWAxNYB5CoDFNAOYl7IBiAYbmDY0G8dx8AyfxM82ha7cIBSg
      yHFwuv9ke9lJlGBDCR7HwVPooz1y8e+1VZH3WBORxO/KVakBzEvRAERoXvlLhv46xHm3kyMN
      +eys38bx7pvkV7LbdXFdF9f9N1vn3sKsxucpYRcNtcNYd76T7ZNfx7/xNBCioXoPlb4ycpKz
      Q71SA5iXogEIcXD/fcx4+FsMJIPB02fyo/0HuNrIGNlZy88/XcLqWZ6v7sjNZlD33zf5CIzz
      4803ve7rowYwL0UD8BknP8ok89JnWCPJv/MAH4V62zbEb5e/x6Mrf8xNAEzEuzhIeVYmU3bM
      pvqhk7zsD7Ns0QTrPhJTA5iXogG4Dh2vseYGLz+9u+vwzqDAu5Ow6xLe62Pk5qW89eByxm6O
      nQuSTQ1gXsoEoGXe5WF2XstQvn3rWb64dKAeI/SP27m1l7cwHVv+wPCZD1x89e8h2sbqFR6q
      q86yJmYuSD41gHkpE4Cpr3QNtC6vTL2dsRP2sL31DFGifPnX93jvztHcEvOo4/zlXfjB93s9
      /Ak1VLOn0kdZDjFzgQ3UAOalTACulEHJ40/QMT+PTCeTnGmbua/2J+QDoUARRYGuYeBjgvvv
      oqC34TbShC8wDr83n5i5oHxI4nbla6gBzLvmFWHNzc2UlpYmbkWWS+SpEB++sFIhMCxFG6B/
      0MFvngJgMc0A5ikAFlMDmGfbdz/WG53AU5SbmpoUAsPUABbTwW+eAmAxzQDmKQAWUwOYpwBY
      TA1gnobg65S35J0EPttAFv3t/3++4y8+0IdrSU9qAOnXFADp11I/ABf2UXvHPFp6+124jZpJ
      w/E4Do5nDBWBfYQBwi14R2XjZI+ifEPXiXMnWDv5DlYdSNjKxQIpHYALRzfjLZrIyqsctO3+
      2ey6fwufdLp0HllFTqAUfzscf+1F/j73Azo/Xc5/nl1LOxBpWUH9yJdYeHtCd0GSLIWH4BDr
      /G1M2vQ7Om/e1usWxXWn2N11Y/B0Zkwp5c2LF9HckJXVbcsD1D93jIUtU626KF7MS+EA5DPv
      1QDQQu+Hfw/RDvYdXcDMYsgbt4RRhbeR+exNzFyzle++sZQ5P1zGh71fNyNpLKXfAv3vwrRU
      riK3PkBJDuCZSsORc7jnjrDxkc/w18LzT0WojJkLJN2lfwCiZ2iteZr28rVUFsQW3onGFWx7
      oobCrbFzgaS/tA5ANNhI+V0VHHx8Ay9M8MRuEGlhRf1IXro4+V45F0h/kH4BCAUoKgoQ4jTr
      Fz3JpkOtPDM6s9t/lLi86YH65zi2cBlTcyDv0SWM+tVtZH7nFwyom0tx8vZAEkjXBF+nxJ4K
      ER+dCnFt6dcAItdBAZB+TQGQfi2FvwhLjkS+r9Y1weapASymg988BcBiuiLMPAXAYmoA8xQA
      i6kBzNMQbLF4GyCVvrRLFjWAxdQA5ikAFtMMYJ4CYDE1gHkKgMXUAOYpABZTA5inAFhMDWCe
      AmAxNYB5CoDF1ADmKQAWUwOYpwBYTA1gngJgMTWAeQqAxdQA5ikAFlMDmKcAWEwNYJ5Oh7ZY
      vNcE6/8CXZsawGJqAPMUAItpBjBPAbCYGsA8BcBiagDzFACLqQHMUwAspgYwTwGwmBrAPAXA
      YmoA8xQAi6kBzFMALKYGME8BsJgawDwFwGJqAPMUAIupAcxTACymBjBPAbCYGsA8BcBiagDz
      FACLqQHMUwAspgYwTwGwmBrAPAXAYmoA8xQAi6kBzFMALKYGME8BsJgawDwFwGJqAPMUAIup
      AcxTACymBjBPAbCYGsA8BcBiagDzFACLqQHMUwAspgYwTwGwmBrAPAXAYmoA8xQAi6kBzFMA
      LKYGME8BsJgawDwFwGJqAPMUAIupAcxTACymBjBPAbCYGsA8BcBiagDzFACLqQHMUwAspgYw
      TwGwmBrAPAXAYmoA8zKSvYC+NGLEiGQvoc9VVVUlewlpLa0awHGcZC9BUkxaBUDkesUXgGiQ
      xoq7GZrt4GQPZXzlFv4VBcJt1EwajsdxcDxjqAjsIxzz4DBtNeO/eqxnDBWNQaJANNhAicfB
      8RTia49cfJ42qvIeoykS12pFYsQVgNPrF1EzsJqOz13cz1sp7XiE+etP0+6fza77t/BJp0vn
      kVXkBErxt/d48M5apgWf4vA5F/dMIzfXLWL9adjVUMuwdefp3D6Z1/0bOQ2EGqrZU+mjLCee
      1YrEimsIHjLnHU7N6bo1hhkP3cmfvohQXHeK3V13D57OjCmlvNnz1fvGXAZnDyKr6/Y3POQO
      Asgle1C37SJN+ALj8Ify41mqSK/68FOgMB/sz6bC1+NAjXaw7+gCZhb32Lywmje2jCfLeRjI
      54lN77I8B/Aupu7eLDIZy/K3tnHy5RLCy5qZkFafV4kt+mgIjhIMzOX9R/+I94rjP0xL5Spy
      6wOU9Hj7cqJxFgsGvMJ518Xt3M2E3z9A3QHIKPCyM+zihvfiG7mZpW89yPKxm2PnApE+0AcB
      uMDBtfNZfePzBKZ6Lt8dPUNrzdO0l6+lsiD25fufe7dyT9FYBgJkDKZ4/A28/edQty2itK1e
      gae6irNrYucCkb4QXwDCbdQUfo/6YXW8Oqfg0vupaLCR8rsqOPj4Bl6Y4On1oXfcU8Lxj4/w
      ZRSInqH9/ZNMvLdbfYQaqN5Tia8sh5i5QKSPxBWAdv9sVu07xNpp38RxHBzHoSiwl/WLnmTT
      oVaeGZ156f55LUAoQFFRgBBw05zfsODok+TnOjiDJ7JjytvUFnb95QhNvgDj/F7ygYnexQTL
      s8icsoPZ1eUMiXOnRbrEfHXquq7b/XZzczOlpaWJW1Ec8vLy6LF8ka+lb4KlX/svuavWSreB
      u1UAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Waterfall Charts' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAANRklEQVR4nO3ZaXAb93nH8f9id3EfPEEQoHiKokSKYkRRtKxa
      hy3LV2x1ojq1miZtx9ZkmknaJJ1pXtT1jGf6RtPx1G0nmbpu6tjNYUd2rEiWKMsydZlUJR4S
      RQmQRBLgAeIgCBLERZy72xdybbV1EokPD2n6+7zBDIHdfQB8ufsHwCmKwgAWSrXSA8D9Tbh1
      MzMbXdk5VpzZZBBFIRpL5PPSSs+yEILAW8zGXC4fiyeX87j8yy+/zBhLpTLLeVTGWMf774xP
      +oM3+49d8q1vWOV0Xi82a6+4RjgpMzYZmJ/zHjjww2w8rLWWe72BQ79622Yrj81MzWdSR451
      GkRJEo1cZuoHf/vqmqoSWW0avX7ZUFT+L6/+nc99UzI7vB63wuRUPKY1me/wHKvRqHlelclk
      Zflur+mK6+pg0n/13w73Dg70ryo1z6XlTCwUjufe+el/2MptM1M+lU5/Y8CZTEWzsqjhMt/7
      67/ZsK42keOnvENMbfnxa/8w63NPS6bQhEdiLJ+KqbRm4S6vDSqVSqtRy7Kcyebucv7b5d54
      7V+vD/aLBWWhsPv1f/r52pbqo7887PRMJGZCalOR68zBjsFpPhMzG9Uu96StlBMIByMJzMZf
      2LtvpOsI5/W8cqCXU2sv9dtuXHPZq8rsxWLrl/+kpma1nAi/+fa7f7b3mXjI8+uPzs+N9dU2
      t8Zn0sc/OFhYt+1rX9nUYDOf7BlmqfPZTOI7Le06Y/G2TfVvHToYCY5WrWkNJZMvfffPl/qJ
      xL39v3jveJ3dzFhZKjV/pOME45jCFIWp/M6zpytqh7vPNj/YHBzNGdRBpXD1C1/bu35tVcfx
      04yTUpncX/5Fs6A1Pbqt7ZU3309FgtbqhrFQ8sBL31vqsb+YlMwLxS01QmfH4cadu8yFJe+/
      +xZLamTOHBw6WdXcphHFmG8w5Xjgn3/4o/ote1saV+4MZCs0XuzrN5Y4yh0VDevWiyqueV2d
      oNWl49GSmqZNjbUqTmW32+rr6zwTgXVNLavKimurq2wVDSYDb7dXOCqrbdZiJloKNZn65s3l
      1hKHw5GKz/pj/PYtGyQmbt+yzuVNb2trusN5FnwGUhsKc/PRxg0bOUVet25dRanZuqqhsqyw
      xF7b+KUHSs36mqqSitrG8rKy0tKCckeV3WZlTGUrMdlrG1c5yh0Oh5SOu33RR3Zszcps+44t
      N5zeR7ZtvtvXc3HOQCotL0VDWd32tnUFpeWpsG/9pq02e5VFTOd5Y3V1ldmgq2xo8Y2P79i2
      tcRqK7HouVufwu6dNVDQ5y912Hn6fiY8BmulSXunp9h7ZA00E5zgDNYik/ZuN/x/twb6QlOT
      HkVrmfYOx9IsFvb/+1vvTE8FBS4bS7NY2BecnS8psjz/9T+cngg5Nqz1DI8JUmZk3Fdo0tzw
      TFpLim7fldFSqLmbdQRhDfS5fCbpHB5TsqkJf8Agstdf/XvvTETWmMJTAYPIrjhvFpeV//yV
      F0eC4V53RJOd1Zst168OCvqCiRGXscgqqDi90aLTLGRdsUhrIMYYG3YNqrVap9OltxSNXTt7
      8OiZSd90KhnVW4o8N69mZVGMDT//0ushz/WaVWUrtgb6Qm+8+RN7TfNcJCgKIs8pnJz1+/yj
      3jFREFVMTs1nG/7q+01Nte8f6ogZ+NZS/bEb/qJC3bFjTKsVKld/20Q/cdEc+9lPhpOSKqsy
      aPgPNSqbxTgz5f/gvUNFWv5DDWfLJ8sbNzJjxdClTr21fpD/va5z/zjPF3HHjwfTua27pKd3
      tq7wE2CMJSZ+/It3N9Y55rLKx53H7ZVrclJ21NkzFSj+uPO4vbJ+Ju395u4qixTu8zDu8LF7
      K6AnHnsir7awfA1jnJSOx7J8kUmvcApjnOemM5qMMMa27/6D9o0P2+srhzyBZx5fK6mYWmMZ
      mQjoV7oexthDTzzJXRm1lxSInKIxqa+7PA2VjvmcyiwokUjw9LmexwTWsnnz7qd2TCX5Ge9w
      65PPzcXiXEaOhidqGmpWenzGGGMG+5MPbbauqsnm81lFmAuMrq5rU1JJndmczqSv9Z/XFqwX
      TGX7v/P90LjbVmz4dA0UjSVWevDfYXzYxZttFWVFv/uhC2LQ6wSBTyZTeWlJ1kCJSMjtn2tp
      WrMUO2eMCTxvMOjyeSk5n1qiQzAmD/T2rdmwSa/5/J+Vw08ZQIGfMoAEAQEJAgISBAQkCAhI
      EBCQICAgQUBAgoCABAEBCQICEgQEJAgISBAQkCAgIEFAQIKAgAQBAQkCAhIEBCQICEgQEJAg
      ICBBQECCgIAEAQEJAgISBAQkCAhIEBCQICAgQUBAgoCABAEBCQICEgQEJAgISBAQkCAgIEFA
      QIKAgAQBAQkCAhIEBCQICEgQEJAgICBBQECCgIAEAQEJAgISBAQkCAhIEBCQICAgQUBAgoCA
      BAEBCQICEgQEJAgISBAQkCAgIEFAQIKAgAQBAQkCAhIEBCQICEgQEJAgICBBQECCgIAEAQEJ
      AgISBAQkCAhIhFs386n0ys6x4jRqNc+r0pmsLMsrPctCqFQqrUYtSXImm13O434aUCqVWcSd
      et3Xb3omqivsqsKqWpv5f93ruXmp/8qYw1a+cfuDOsb6+3o2tbXfuiuZSBiMRsYYk9OdZ3p3
      PbLts63OfdyRUXQ7H31Y5BZx0s+JgsDzqkwmm89LC9g8PuU+1ee22csf2Nj82R/7evvaNrf9
      3wef6jy5c9fuz07+F7pOJebz7dt3mbX8QkZnjDEmCLxWo5ZlecFvpZKbP322u9C2auP6tR5n
      T0Fte2JigCuoLispUPOMMdbTfXpt6zaz7tNmPM6eEX9UWPDEv8WJM937X9g/0nXkZ4dPbmlr
      9nqDbZs2fPDhmY11tkgqs+e5p2c6h0s1oa6zH0mSbvhSp286IcX8hqKCrm5XRZG09clvVJti
      5y5eCk9NFjscnitXv/Gtb18fGn+8verQsTPDAxcaWtZrmPzlZ/bcCxfgfCL09sHDhWb1UFjj
      GR0Nj7tyYoFGis8z/djAJ9PJTDLgLq2qdF10a03pxraHWxscnee6E3Nhpi+JBtxPPfunl503
      939lxxu/Ohwfv2arbTLpxV1P7TEuyTvz2/ScfK94w7MXjv90ZLA7PRdIXhyusOoG+g9t2/PV
      sx0fvPjiDzqOdoTnEvH5PKfMb3noMY+zt/bRby3JW2A16z4+eWI2ma2uKO7vHbh8zXXx3Dmf
      d3LMF5iLTCUzMmNs2ucf9/s4juUkye8b67/QFctqCgx8LhU/3ztgtFhKTdrAbDQQmFR4vU5g
      89HpnmveVNDl83ktGtYzEr4X6mGM5VJz3Rf6srk8x5haFPw+XyDg9/snA8FAXpJ9Xk9vV1ck
      Oc9pjFolffqTC6LOUlle5PcFgwF/PMuKzbp8On66+5JJioxO+szFpqPnBpe/HsZYVX3jQPdJ
      TtBHYunyksJUfGbUM2osKA26L8Wy2rzEl6+qjYT80wG/PxKrtJcyxvrPn+IURWGMzcxGl2HE
      E4eP7Pz9PRryftwD50Ji9YNNlYsw038zmwyiKERjiYVdwhZLeNLV704/vqP1bjcUBN5iNuZy
      +Vg8uRSD/SbLGtDtevv6GGOb2/7HEuGjj05YC4ubNreJyzzN0gQ0NNATz7P6lnbzbc9noOuU
      ta4+FJO/1FC1WAdiSxPQncy/fAEdP/Iu05VOe52G0holGR7yzTTV10XDXkNpjZKYjsma5/94
      3/6vPqqteGjfs9v9k1OCws2mM/W1FZOB6L7n9i58eXlnFiWgG72f/OeQr0DkI/PpusrSC2fO
      rm5tT6fymUy6trJkyDm095vfPfbaAd/cjLW+3aiS7fYS57UbVbVrI0FPfdvu9vXVCz70ogS0
      gPmX72J79XJP0Zqt+RxL+EelZFJRRJ/fr+JYwj8qJZIxRWCMte16uvvUBb+vLjkXmQ7L5RWi
      c2jY509IjC11QIsi5Bu75nLXWG1mURkO5BRFmZnyzyR5h1YZ9mdnQ4GMzJhYsKZamEpEMkzN
      KaOKwegZuOwavelo2bnS4y9k/hW7hN3u9MmjKWZ4avfDKzjDUq+BRgb7uq6M/NHX92mW5muI
      pV4D/ab5Pw0ol8svxVHvIzzPq1RcPi/dekHuOxzHCQIvy4okLeuHAO4+fb3gHnGPfJkC9ysE
      BCQICEgQEJAgICBBQECCgIAEAQEJAgISBAQkCAhIEBCQICAgQUBAgoCABAEBCQICEgQEJAgI
      SBAQkCAgIEFAQIKAgAQBAQkCAhIEBCQICEgQEJAgICBBQECCgIAEAQEJAgISBAQkCAhIEBCQ
      ICAgQUBAgoCABAEBCQICEgQEJAgISBAQkCAgIEFAQIKAgAQBAQkCAhIEBCQICEgQEJAgICBB
      QECCgIAEAQEJAgISBAQkCAhIEBCQICAgQUBAgoCABAEBCQICEgQEJAgISBAQkCAgIEFAQIKA
      gAQBAQkCAhIEBCQICEgQEJAgICBBQECCgIAEAQEJAgISBAQkCAhIEBCQICAgQUBAgoCABAEB
      CQICEgQEJAgISBAQkPwXb6euVd8kM0MAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
