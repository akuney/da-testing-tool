<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='SCAImpressionShareReport' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
        <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
        <members>
          <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
          <member value='&quot;AirTkt-ads&quot;' />
          <member value='&quot;Alaska Airlines&quot;' />
          <member value='&quot;ASAP Tickets&quot;' />
          <member value='&quot;Booking.com - UK&quot;' />
          <member value='&quot;Booking.com-ads&quot;' />
          <member value='&quot;bookit.com&quot;' />
          <member value='&quot;BudgetAir - UK&quot;' />
          <member value='&quot;BusBud - Ads&quot;' />
          <member value='&quot;Cathay Pacific&quot;' />
          <member value='&quot;Cathay Pacific - Canada&quot;' />
          <member value='&quot;CheapFareGuru&quot;' />
          <member value='&quot;CheapOair&quot;' />
          <member value='&quot;CheapOair- UK ads&quot;' />
          <member value='&quot;CheapOair-Canada&quot;' />
          <member value='&quot;CheapTickets-Ads&quot;' />
          <member value='&quot;Crowne Plaza&quot;' />
          <member value='&quot;DealBase - ads&quot;' />
          <member value='&quot;Delta&quot;' />
          <member value='&quot;ebookers - UK&quot;' />
          <member value='&quot;Edreams&quot;' />
          <member value='&quot;eDreams - UK&quot;' />
          <member value='&quot;Etihad Airways&quot;' />
          <member value='&quot;Expedia - UK&quot;' />
          <member value='&quot;Expedia-Ads&quot;' />
          <member value='&quot;FareBoom-ads&quot;' />
          <member value='&quot;Faregeek - US&quot;' />
          <member value='&quot;FlightHub&quot;' />
          <member value='&quot;Fly.com&quot;' />
          <member value='&quot;Fly.com - CA&quot;' />
          <member value='&quot;FlyFar&quot;' />
          <member value='&quot;Globehunters - UK&quot;' />
          <member value='&quot;goSeek&quot;' />
          <member value='&quot;Hawaiian Airlines&quot;' />
          <member value='&quot;Holiday Inn&quot;' />
          <member value='&quot;Holiday Inn Express&quot;' />
          <member value='&quot;Hotels.com-Ads&quot;' />
          <member value='&quot;Hotels.com-Ads - UK&quot;' />
          <member value='&quot;HotelsCombined - UK&quot;' />
          <member value='&quot;HotelsCombined - US&quot;' />
          <member value='&quot;Hotwire-Ads&quot;' />
          <member value='&quot;Indian Eagle&quot;' />
          <member value='&quot;InsanelyCheapFlights&quot;' />
          <member value='&quot;Jetcost - UK&quot;' />
          <member value='&quot;Jetsetter-ads&quot;' />
          <member value='&quot;Justairticket-ads&quot;' />
          <member value='&quot;JustFly&quot;' />
          <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
          <member value='&quot;LAN - Ariadna&quot;' />
          <member value='&quot;lastminute.com - UK&quot;' />
          <member value='&quot;Laterooms.com - UK&quot;' />
          <member value='&quot;LatinOFare-ads&quot;' />
          <member value='&quot;On the Beach - UK&quot;' />
          <member value='&quot;Orbitz-ads-on-Network&quot;' />
          <member value='&quot;OWW-ads-on-CTIX&quot;' />
          <member value='&quot;Priceline - UK&quot;' />
          <member value='&quot;Priceline-Ads&quot;' />
          <member value='&quot;Qatar Airways - ads&quot;' />
          <member value='&quot;Roomer Travel - ads&quot;' />
          <member value='&quot;ShareTrips - Ads&quot;' />
          <member value='&quot;Skyscanner - UK&quot;' />
          <member value='&quot;Skyscanner - US&quot;' />
          <member value='&quot;SmartFares&quot;' />
          <member value='&quot;South African Airlines&quot;' />
          <member value='&quot;STA Travel-Ads&quot;' />
          <member value='&quot;StudentUniverse&quot;' />
          <member value='&quot;TAM airlines - Ariadna&quot;' />
          <member value='&quot;Travelocity-Ads&quot;' />
          <member value='&quot;TripAdvisor&quot;' />
          <member value='&quot;TripAdvisor - UK&quot;' />
          <member value='&quot;Trivago&quot;' />
          <member value='&quot;Trivago - UK&quot;' />
          <member value='&quot;United Airlines&quot;' />
          <member value='&quot;Vegas.com-ads&quot;' />
          <member value='&quot;Virgin America&quot;' />
          <member value='&quot;Virgin Atlantic&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Product Category&quot;' />
          <member value='&quot;Campaign&quot;' />
          <member value='&quot;Target&quot;' />
          <member value='&quot;Campaign &gt; Ad Group&quot;' />
          <member value='&quot;Campaign &gt; Ad Group &gt; Target&quot;' />
        </members>
      </column>
      <column datatype='string' name='[O D Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Favorite&quot;'>
        <calculation class='tableau' formula='&quot;Favorite&quot;' />
        <members>
          <member value='&quot;Favorite&quot;' />
        </members>
      </column>
      <column caption='Product Category' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Flights&quot;' />
          <member value='&quot;Hotels&quot;' />
        </members>
      </column>
      <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-03-06#'>
        <calculation class='tableau' formula='#2012-03-06#' />
      </column>
      <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
        <calculation class='tableau' formula='&quot;Yesterday&quot;' />
        <members>
          <member value='&quot;Yesterday&quot;' />
          <member value='&quot;Reference Day&quot;' />
        </members>
      </column>
    </datasource>
    <datasource inline='true' name='by_hour' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;acisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;acisra.aggregation_level_hour_in_et as Hour,&#13;&#10;&#9;e.name as Advertiser,&#13;&#10;&#9;c.name as Campaign,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;ag.name as &quot;Ad Group&quot;,&#13;&#10;&#9;ifnull(ac_o.code,&apos;&apos;) || ifnull(acf_o.name,&apos;&apos;) as Origination,&#13;&#10;&#9;ifnull(ac_d.code,&apos;&apos;) || ifnull(acf_d.name,&apos;&apos;) as Destination,&#13;&#10;&#9;ac_o.code as &quot;Origination Code&quot;,&#13;&#10;&#9;ac_d.code as &quot;Destination Code&quot;,&#13;&#10;&#9;acf_o.name as &quot;Favorite Origination&quot;,&#13;&#10;&#9;acf_d.name as &quot;Favorite Destination&quot;,&#13;&#10;&#9;null as &quot;Hotel City&quot;,&#13;&#10;&#9;null as &quot;Hotel State&quot;,&#13;&#10;&#9;null as &quot;Hotel Country&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acisra.impression_count) as Impressions,&#13;&#10;&#9;sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count + acisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;left join intent_media_production.entities e on acisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on acisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;left join intent_media_production.airport_codes ac_o on acisra.origination_airport_code_id = ac_o.id&#13;&#10;left join intent_media_production.airport_codes ac_d on acisra.destination_airport_code_id = ac_d.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_o on acisra.origination_air_ct_favorite_id = acf_o.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_d on acisra.destination_air_ct_favorite_id = acf_d.id&#13;&#10;where aggregation_level_date_in_et &gt;&gt;= date((current_timestamp - interval &apos;7 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;acisra.aggregation_level_date_in_et,&#13;&#10;&#9;acisra.aggregation_level_hour_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;c.name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;ag.name,&#13;&#10;&#9;ifnull(ac_o.code,&apos;&apos;) || ifnull(acf_o.name,&apos;&apos;),&#13;&#10;&#9;ifnull(ac_d.code,&apos;&apos;) || ifnull(acf_d.name,&apos;&apos;),&#13;&#10;&#9;ac_o.code,&#13;&#10;&#9;ac_d.code,&#13;&#10;&#9;acf_o.name,&#13;&#10;&#9;acf_d.name,&#13;&#10;&#9;c.display_format&#13;&#10;&#9;&#13;&#10;union&#13;&#10;&#13;&#10;&#13;&#10;select&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;hcisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;hcisra.aggregation_level_hour_in_et as Hour,&#13;&#10;&#9;e.name as Advertiser,&#13;&#10;&#9;c.name as Campaign,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;ag.name as &quot;Ad Group&quot;,&#13;&#10;&#9;null as Origination,&#13;&#10;&#9;null as Destination,&#13;&#10;&#9;null as &quot;Origination Code&quot;,&#13;&#10;&#9;null as &quot;Destination Code&quot;,&#13;&#10;&#9;null as &quot;Favorite Origination&quot;,&#13;&#10;&#9;null as &quot;Favorite Destination&quot;,&#13;&#10;&#9;hci.name as &quot;Hotel City&quot;,&#13;&#10;&#9;hci.state as &quot;Hotel State&quot;,&#13;&#10;&#9;(case when hotel_city_id is null then hco.name else hci_hco.name end) as &quot;Hotel Country&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(hcisra.impression_count) as Impressions,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_count + hcisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.hotel_ct_impression_share_report_aggregations hcisra&#13;&#10;left join intent_media_production.entities e on hcisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on hcisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;left join intent_media_production.countries hco on hcisra.hotel_country_id = hco.id and hcisra.hotel_city_id is null&#13;&#10;left join intent_media_production.hotel_cities hci on hcisra.hotel_city_id = hci.id&#13;&#10;left join intent_media_production.countries hci_hco on hci_hco.id = hci.country_id&#13;&#10;where aggregation_level_date_in_et &gt;&gt;= date((current_timestamp - interval &apos;7 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;hcisra.aggregation_level_date_in_et,&#13;&#10;&#9;hcisra.aggregation_level_hour_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;c.name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;ag.name,&#13;&#10;&#9;hcisra.hotel_city_id,&#13;&#10;&#9;hci.name,&#13;&#10;&#9;hci.state,&#13;&#10;&#9;(case when hotel_city_id is null then hco.name else hci_hco.name end),&#13;&#10;&#9;c.display_format&#13;&#10;</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_2690814142747380]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Campaign + Ad Group + Target' datatype='string' name='[Calculation_6040417124233554]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Campaign] + &quot; - &quot; + [Ad Group] + &quot; - &quot; + [Calculation_9460417123825490]' scope-isolation='false' />
      </column>
      <column caption='Include Mobile Data?' datatype='string' name='[Calculation_8421114172131921]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Target' datatype='string' name='[Calculation_9460417123825490]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Product Category Type] = &apos;Flights&apos; &#13;&#10;    THEN [Origination Code] + &quot; - &quot; + [Destination Code]&#13;&#10;ELSE&#13;&#10;    IF ISNULL([Hotel City]) THEN [Hotel Country]&#13;&#10;    ELSE [Hotel City] + &quot;, &quot; + [Hotel State] + &quot;, &quot; + [Hotel Country]&#13;&#10;    END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Campaign + Ad Group' datatype='string' name='[Calculation_9520417124158774]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Campaign] + &quot; - &quot; + [Ad Group]' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Ad Group&quot; THEN [Ad Group]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Hotel City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
      </column>
      <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\aft_impression_share_report__by_hour.tde' schema='Extract' tablename='Extract' update-time='3/25/2015 1:26:06 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_2690814142747380]' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' />
            <calculation column='[Calculation_6040417124233554]' formula='[Campaign] + &quot; - &quot; + [Ad Group] + &quot; - &quot; + [Calculation_9460417123825490]' />
            <calculation column='[Calculation_8421114172131921]' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' />
            <calculation column='[Calculation_9460417123825490]' formula='IF [Product Category Type] = &apos;Flights&apos; &#13;&#10;    THEN [Origination Code] + &quot; - &quot; + [Destination Code]&#13;&#10;ELSE&#13;&#10;    IF ISNULL([Hotel City]) THEN [Hotel Country]&#13;&#10;    ELSE [Hotel City] + &quot;, &quot; + [Hotel State] + &quot;, &quot; + [Hotel Country]&#13;&#10;    END&#13;&#10;END' />
            <calculation column='[Calculation_9520417124158774]' formula='[Campaign] + &quot; - &quot; + [Ad Group]' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='28163562' timestamp-start='2015-03-25 13:26:06.039000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.532857' measure-ordering='alphabetic' measure-percentage='0.28' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[by_hour].[sum:Filtered Ad for Bid Count:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[by_hour].[sum:Impressions:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[by_hour].[sum:Filtered Ad for Budget:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Grouping]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Product Category&quot;' />
            <member value='&quot;Campaign&quot;' />
            <member value='&quot;Target&quot;' />
            <member value='&quot;Campaign &gt; Ad Group&quot;' />
            <member value='&quot;Campaign &gt; Ad Group &gt; Target&quot;' />
          </members>
        </column>
        <column caption='Product Category' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Flights&quot;' />
            <member value='&quot;Hotels&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource inline='true' name='by_day' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;  &apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;  acisra.aggregation_level_date_in_et as Date,&#13;&#10;  e.name as Advertiser,&#13;&#10;  c.name as Campaign,&#13;&#10;  c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;  ag.name as &quot;Ad Group&quot;,&#13;&#10;  ifnull(ac_o.code,&apos;&apos;) || ifnull(acf_o.name,&apos;&apos;) as Origination,&#13;&#10;  ifnull(ac_d.code,&apos;&apos;) || ifnull(acf_d.name,&apos;&apos;) as Destination,&#13;&#10;  ac_o.code as &quot;Origination Code&quot;,&#13;&#10;  ac_d.code as &quot;Destination Code&quot;,&#13;&#10;  acf_o.name as &quot;Favorite Origination&quot;,&#13;&#10;  acf_d.name as &quot;Favorite Destination&quot;,&#13;&#10;  null as &quot;Hotel City&quot;,&#13;&#10;  null as &quot;Hotel State&quot;,&#13;&#10;  null as &quot;Hotel Country&quot;,&#13;&#10;  c.display_format as &quot;Display Type&quot;,&#13;&#10;  sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;  sum(acisra.impression_count) as Impressions,&#13;&#10;  sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;  sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;  sum(acisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;  sum(acisra.filtered_ad_count + acisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;  max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;  sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;  max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;  sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;left join intent_media_production.entities e on acisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on acisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;left join intent_media_production.airport_codes ac_o on acisra.origination_airport_code_id = ac_o.id&#13;&#10;left join intent_media_production.airport_codes ac_d on acisra.destination_airport_code_id = ac_d.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_o on acisra.origination_air_ct_favorite_id = acf_o.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_d on acisra.destination_air_ct_favorite_id = acf_d.id&#13;&#10;where aggregation_level_date_in_et &gt;&gt;= date((current_timestamp - interval &apos;14 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;  acisra.aggregation_level_date_in_et,&#13;&#10;  e.name,&#13;&#10;  c.name,&#13;&#10;  c.precheck_eligibility_type,&#13;&#10;  ag.name,&#13;&#10;  ifnull(ac_o.code,&apos;&apos;) || ifnull(acf_o.name,&apos;&apos;),&#13;&#10;  ifnull(ac_d.code,&apos;&apos;) || ifnull(acf_d.name,&apos;&apos;),&#13;&#10;  ac_o.code,&#13;&#10;  ac_d.code,&#13;&#10;  acf_o.name,&#13;&#10;  acf_d.name,&#13;&#10;  c.display_format&#13;&#10;  &#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;  &apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;  hcisra.aggregation_level_date_in_et as Date,&#13;&#10;  e.name as Advertiser,&#13;&#10;  c.name as Campaign,&#13;&#10;  c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;  ag.name as &quot;Ad Group&quot;,&#13;&#10;  null as Origination,&#13;&#10;  null as Destination,&#13;&#10;  null as &quot;Origination Code&quot;,&#13;&#10;  null as &quot;Destination Code&quot;,&#13;&#10;  null as &quot;Favorite Origination&quot;,&#13;&#10;  null as &quot;Favorite Destination&quot;,&#13;&#10;  hci.name as &quot;Hotel City&quot;,&#13;&#10;  hci.state as &quot;Hotel State&quot;,&#13;&#10;  (case when hotel_city_id is null then hco.name else hci_hco.name end) as &quot;Hotel Country&quot;,&#13;&#10;  c.display_format as &quot;Display Type&quot;,&#13;&#10;  sum(hcisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;  sum(hcisra.impression_count) as Impressions,&#13;&#10;  sum(hcisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;  sum(hcisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;  sum(hcisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;  sum(hcisra.filtered_ad_count + hcisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;  max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;  sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;  max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;  sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.hotel_ct_impression_share_report_aggregations hcisra&#13;&#10;left join intent_media_production.entities e on hcisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on hcisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;left join intent_media_production.countries hco on hcisra.hotel_country_id = hco.id and hcisra.hotel_city_id is null&#13;&#10;left join intent_media_production.hotel_cities hci on hcisra.hotel_city_id = hci.id&#13;&#10;left join intent_media_production.countries hci_hco on hci_hco.id = hci.country_id&#13;&#10;where aggregation_level_date_in_et &gt;&gt;= date((current_timestamp - interval &apos;14 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;  hcisra.aggregation_level_date_in_et,&#13;&#10;  e.name,&#13;&#10;  c.name,&#13;&#10;  c.precheck_eligibility_type,&#13;&#10;  ag.name,&#13;&#10;  hcisra.hotel_city_id,&#13;&#10;  hci.name,&#13;&#10;  hci.state,&#13;&#10;  (case when hotel_city_id is null then hco.name else hci_hco.name end),&#13;&#10;  c.display_format&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[by_day].[max:Max Bid Increment Needed for Position One:qk]&quot;' value='Max Bid Increment Needed for Position One' />
          <alias key='&quot;[by_day].[max:Max Bid Increment Needed to Participate:qk]&quot;' value='Max Bid Increment Needed to Participate' />
        </aliases>
      </column>
      <column datatype='real' name='[ABS(Filtered Ad Count - %D PMTD)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - %D PMTD])' />
      </column>
      <column datatype='real' name='[ABS(Filtered Ad Count - %D PW)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - %D PW])' />
      </column>
      <column datatype='real' name='[ABS(Filtered Ad Count - %D SDPW)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - %D SDPW])' />
      </column>
      <column datatype='integer' name='[ABS(Filtered Ad Count - D PMTD)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - D PMTD])' />
      </column>
      <column datatype='integer' name='[ABS(Filtered Ad Count - D PW)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - D PW])' />
      </column>
      <column datatype='integer' name='[ABS(Filtered Ad Count - D SDPW)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Filtered Ad Count - D SDPW])' />
      </column>
      <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_0000826142717369]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Click Blackout])/sum([Eligible Ad Count])' scope-isolation='false' />
      </column>
      <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Campaign + Ad Group + Target' datatype='string' name='[Calculation_6040417124233554]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Campaign] + &quot; - &quot; + [Ad Group] + &quot; - &quot; + [Calculation_9460417123825490]' scope-isolation='false' />
      </column>
      <column caption='Target' datatype='string' name='[Calculation_9460417123825490]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Product Category Type] = &apos;Flights&apos; &#13;&#10;    THEN [Origination Code] + &quot; - &quot; + [Destination Code]&#13;&#10;ELSE&#13;&#10;    IF ISNULL([Hotel City]) THEN [Hotel Country]&#13;&#10;    ELSE [Hotel City] + &quot;, &quot; + [Hotel State] + &quot;, &quot; + [Hotel Country]&#13;&#10;    END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Campaign + Ad Group' datatype='string' name='[Calculation_9520417124158774]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Campaign] + &quot; - &quot; + [Ad Group]' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary for Position One]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Daily Budget Needed for Position One])/COUNTD([Date])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary to Participate]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Daily Budget Needed to Participate])/countd([Date])' />
      </column>
      <column datatype='real' name='[Filtered Ad Count - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Filtered Ad Count - MTD]) - sum([Filtered Ad Count - PMTD]))/sum([Filtered Ad Count - PMTD])' />
      </column>
      <column datatype='real' name='[Filtered Ad Count - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Filtered Ad Count - Ref Week]) - sum([Filtered Ad Count - PW]))/sum([Filtered Ad Count - PW])' />
      </column>
      <column datatype='real' name='[Filtered Ad Count - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Filtered Ad Count - Ref Day]) - sum([Filtered Ad Count - SDPW]))/sum([Filtered Ad Count - SDPW])' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad Count - MTD]) - sum([Filtered Ad Count - PMTD])' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad Count - Ref Week]) - sum([Filtered Ad Count - PW])' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad Count - Ref Day])-sum([Filtered Ad Count - SDPW])' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Filtered Ad Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Filtered Ad Count] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Filtered Ad Count] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Filtered Ad Count] END' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = [Ref Day] THEN [Filtered Ad Count] END' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Filtered Ad Count] END' />
      </column>
      <column datatype='integer' name='[Filtered Ad Count - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = [Ref Day]-7 THEN [Filtered Ad Count] END' />
      </column>
      <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Bid %]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Bid Count])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Budget %]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Budget])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group &gt; Target&quot; THEN [Calculation_6040417124233554]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Hotel City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Max Bid Increment Needed for Position One]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='C1033%' name='[Max Bid Increment Needed to Participate]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[Month SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;month&apos;,[SDPM]))' />
      </column>
      <column datatype='date' name='[Month of Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='datetime' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN DATE(DATETRUNC(&apos;month&apos;,[Ref Day])-1)&#13;&#10;ELSE DATEADD(&apos;month&apos;,-1,[Ref Day]) &#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day] -7' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Max Bid Increment Needed for Position One]' derivation='Max' name='[max:Max Bid Increment Needed for Position One:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Max Bid Increment Needed to Participate]' derivation='Max' name='[max:Max Bid Increment Needed to Participate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Filtered Ads for Bid %]' derivation='User' name='[usr:Filtered Ads for Bid %:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Filtered Ads for Budget %]' derivation='User' name='[usr:Filtered Ads for Budget %:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\aft_impression_share_report__by_day.tde' schema='Extract' tablename='Extract' update-time='3/25/2015 2:00:45 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_1710814142419812]' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' />
            <calculation column='[Calculation_4111114171534073]' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' />
            <calculation column='[Calculation_6040417124233554]' formula='[Campaign] + &quot; - &quot; + [Ad Group] + &quot; - &quot; + [Calculation_9460417123825490]' />
            <calculation column='[Calculation_9460417123825490]' formula='IF [Product Category Type] = &apos;Flights&apos; &#13;&#10;    THEN [Origination Code] + &quot; - &quot; + [Destination Code]&#13;&#10;ELSE&#13;&#10;    IF ISNULL([Hotel City]) THEN [Hotel Country]&#13;&#10;    ELSE [Hotel City] + &quot;, &quot; + [Hotel State] + &quot;, &quot; + [Hotel Country]&#13;&#10;    END&#13;&#10;END' />
            <calculation column='[Calculation_9520417124158774]' formula='[Campaign] + &quot; - &quot; + [Ad Group]' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='7418549' timestamp-start='2015-03-25 14:00:45.490000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.534022' measure-ordering='alphabetic' measure-percentage='0.327304' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Bid Count:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Bid \%:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[by_day].[sum:Impressions:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[by_day].[usr:Impression Share:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Budget:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Budget \%:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Grouping]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Product Category&quot;' />
            <member value='&quot;Campaign&quot;' />
            <member value='&quot;Target&quot;' />
            <member value='&quot;Campaign &gt; Ad Group&quot;' />
            <member value='&quot;Campaign &gt; Ad Group &gt; Target&quot;' />
          </members>
        </column>
        <column caption='Product Category' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Flights&quot;' />
            <member value='&quot;Hotels&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-03-06#'>
          <calculation class='tableau' formula='#2012-03-06#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='all_time_by_campaign' inline='true' name='vertica.41345.438297812500' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;acisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;c.name as Campaign,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acisra.impression_count) as Impressions,&#13;&#10;&#9;sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count + acisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;left join intent_media_production.entities e on acisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on acisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;acisra.aggregation_level_date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;c.name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;c.display_format&#13;&#10;&#9;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;hcisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;c.name as Campaign,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(hcisra.impression_count) as Impressions,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_for_click_blackout_count) as &quot;Filtered Ad for Click Blackout&quot;,&#13;&#10;&#9;sum(hcisra.filtered_ad_count + hcisra.impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.hotel_ct_impression_share_report_aggregations hcisra&#13;&#10;left join intent_media_production.entities e on hcisra.advertiser_id = e.id&#13;&#10;left join intent_media_production.ad_groups ag on hcisra.ad_group_id = ag.id&#13;&#10;left join intent_media_production.campaigns c on ag.campaign_id = c.id&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;hcisra.aggregation_level_date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;c.name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;c.display_format&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed for Position One:qk]&quot;' value=' Max Bid Increment Needed for Position One' />
          <alias key='&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed to Participate:qk]&quot;' value='Max Bid Increment Needed to Participate' />
        </aliases>
      </column>
      <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_7890814143038531]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Include Mobile Data?' datatype='string' name='[Calculation_9431114172059552]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary for Position One]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Daily Budget Needed for Position One])/COUNTD([Date])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary to Participate]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Daily Budget Needed to Participate])/countd([Date])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Bid %]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Bid Count])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Budget %]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Budget])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Click Blackout %]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Filtered Ad for Click Blackout])/sum([Eligible Ad Count])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Max Bid Increment Needed for Position One]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Max Bid Increment Needed to Participate]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
      </column>
      <column-instance column='[Max Bid Increment Needed for Position One]' derivation='Max' name='[max:Max Bid Increment Needed for Position One:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Max Bid Increment Needed to Participate]' derivation='Max' name='[max:Max Bid Increment Needed to Participate:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\aft_impression_share_report__all_time_by_campaign.tde' schema='Extract' tablename='Extract' update-time='3/25/2015 2:11:42 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_7890814143038531]' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' />
            <calculation column='[Calculation_9431114172059552]' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='168416' timestamp-start='2015-03-25 14:11:42.785000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.344307' measure-ordering='alphabetic' measure-percentage='0.455418' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Product Category' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Flights&quot;' />
            <member value='&quot;Hotels&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='by_day'>
      <datasources>
        <datasource name='by_day' />
      </datasources>
      <datasource-dependencies datasource='by_day'>
        <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='categorical' column='[by_day].[none:Calculation_1040329134621632:nk]'>
        <groupfilter function='member' level='[none:Calculation_1040329134621632:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[by_day].[none:Calculation_1710814142419812:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_1710814142419812:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[by_day].[none:Calculation_4111114171534073:nk]'>
        <groupfilter function='member' level='[none:Calculation_4111114171534073:nk]' member='&quot;No Mobile&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[by_day].[none:Date:qk]' included-values='all'>
      </filter>
    </shared-view>
    <shared-view name='by_hour'>
      <datasources>
        <datasource name='by_hour' />
      </datasources>
      <datasource-dependencies datasource='by_hour'>
        <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_2690814142747380]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Include Mobile Data?' datatype='string' name='[Calculation_8421114172131921]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Calculation_2690814142747380]' derivation='None' name='[none:Calculation_2690814142747380:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_8421114172131921]' derivation='None' name='[none:Calculation_8421114172131921:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[by_hour].[none:Calculation_2690814142747380:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_2690814142747380:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[by_hour].[none:Calculation_8421114172131921:nk]'>
        <groupfilter function='member' level='[none:Calculation_8421114172131921:nk]' member='&quot;No Mobile&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[by_hour].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[by_hour].[none:Product Category Filter:nk]'>
        <groupfilter function='member' level='[none:Product Category Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='vertica.41345.438297812500'>
      <datasources>
        <datasource caption='all_time_by_campaign' name='vertica.41345.438297812500' />
      </datasources>
      <datasource-dependencies datasource='vertica.41345.438297812500'>
        <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_7890814143038531]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Include Mobile Data?' datatype='string' name='[Calculation_9431114172059552]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Calculation_7890814143038531]' derivation='None' name='[none:Calculation_7890814143038531:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_9431114172059552]' derivation='None' name='[none:Calculation_9431114172059552:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.41345.438297812500].[none:Calculation_7890814143038531:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_7890814143038531:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[vertica.41345.438297812500].[none:Calculation_9431114172059552:nk]'>
        <groupfilter function='member' level='[none:Calculation_9431114172059552:nk]' member='&quot;No Mobile&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Ad Count'>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
              <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
              <members>
                <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
                <member value='&quot;AirTkt-ads&quot;' />
                <member value='&quot;Alaska Airlines&quot;' />
                <member value='&quot;ASAP Tickets&quot;' />
                <member value='&quot;Booking.com - UK&quot;' />
                <member value='&quot;Booking.com-ads&quot;' />
                <member value='&quot;bookit.com&quot;' />
                <member value='&quot;BudgetAir - UK&quot;' />
                <member value='&quot;BusBud - Ads&quot;' />
                <member value='&quot;Cathay Pacific&quot;' />
                <member value='&quot;Cathay Pacific - Canada&quot;' />
                <member value='&quot;CheapFareGuru&quot;' />
                <member value='&quot;CheapOair&quot;' />
                <member value='&quot;CheapOair- UK ads&quot;' />
                <member value='&quot;CheapOair-Canada&quot;' />
                <member value='&quot;CheapTickets-Ads&quot;' />
                <member value='&quot;Crowne Plaza&quot;' />
                <member value='&quot;DealBase - ads&quot;' />
                <member value='&quot;Delta&quot;' />
                <member value='&quot;ebookers - UK&quot;' />
                <member value='&quot;Edreams&quot;' />
                <member value='&quot;eDreams - UK&quot;' />
                <member value='&quot;Etihad Airways&quot;' />
                <member value='&quot;Expedia - UK&quot;' />
                <member value='&quot;Expedia-Ads&quot;' />
                <member value='&quot;FareBoom-ads&quot;' />
                <member value='&quot;Faregeek - US&quot;' />
                <member value='&quot;FlightHub&quot;' />
                <member value='&quot;Fly.com&quot;' />
                <member value='&quot;Fly.com - CA&quot;' />
                <member value='&quot;FlyFar&quot;' />
                <member value='&quot;Globehunters - UK&quot;' />
                <member value='&quot;goSeek&quot;' />
                <member value='&quot;Hawaiian Airlines&quot;' />
                <member value='&quot;Holiday Inn&quot;' />
                <member value='&quot;Holiday Inn Express&quot;' />
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
                <member value='&quot;HotelsCombined - UK&quot;' />
                <member value='&quot;HotelsCombined - US&quot;' />
                <member value='&quot;Hotwire-Ads&quot;' />
                <member value='&quot;Indian Eagle&quot;' />
                <member value='&quot;InsanelyCheapFlights&quot;' />
                <member value='&quot;Jetcost - UK&quot;' />
                <member value='&quot;Jetsetter-ads&quot;' />
                <member value='&quot;Justairticket-ads&quot;' />
                <member value='&quot;JustFly&quot;' />
                <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
                <member value='&quot;LAN - Ariadna&quot;' />
                <member value='&quot;lastminute.com - UK&quot;' />
                <member value='&quot;Laterooms.com - UK&quot;' />
                <member value='&quot;LatinOFare-ads&quot;' />
                <member value='&quot;On the Beach - UK&quot;' />
                <member value='&quot;Orbitz-ads-on-Network&quot;' />
                <member value='&quot;OWW-ads-on-CTIX&quot;' />
                <member value='&quot;Priceline - UK&quot;' />
                <member value='&quot;Priceline-Ads&quot;' />
                <member value='&quot;Qatar Airways - ads&quot;' />
                <member value='&quot;Roomer Travel - ads&quot;' />
                <member value='&quot;ShareTrips - Ads&quot;' />
                <member value='&quot;Skyscanner - UK&quot;' />
                <member value='&quot;Skyscanner - US&quot;' />
                <member value='&quot;SmartFares&quot;' />
                <member value='&quot;South African Airlines&quot;' />
                <member value='&quot;STA Travel-Ads&quot;' />
                <member value='&quot;StudentUniverse&quot;' />
                <member value='&quot;TAM airlines - Ariadna&quot;' />
                <member value='&quot;Travelocity-Ads&quot;' />
                <member value='&quot;TripAdvisor&quot;' />
                <member value='&quot;TripAdvisor - UK&quot;' />
                <member value='&quot;Trivago&quot;' />
                <member value='&quot;Trivago - UK&quot;' />
                <member value='&quot;United Airlines&quot;' />
                <member value='&quot;Vegas.com-ads&quot;' />
                <member value='&quot;Virgin America&quot;' />
                <member value='&quot;Virgin Atlantic&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='by_day'>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group &gt; Target&quot; THEN [Calculation_6040417124233554]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping]' derivation='None' name='[none:Grouping:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[by_day].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Filtered Ad for Bid Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Filtered Ad for Budget:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Impressions:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[by_day].[none:Advertiser:nk]'>
            <groupfilter expression='[Advertiser] = [Parameters].[Advertiser]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[by_day].[none:Advertiser:nk]</column>
            <column>[by_day].[:Measure Names]</column>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[Multiple Values]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[by_day].[Multiple Values]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[Multiple Values]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[by_day].[none:Grouping:nk]' value='-90' />
            <format attr='display' field='[by_day].[none:Grouping:nk]' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[by_day].[:Measure Names]' />
              <lod column='[by_day].[sum:Filtered Ad for Bid Count:qk]' />
              <lod column='[by_day].[sum:Filtered Ad for Budget:qk]' />
              <lod column='[by_day].[sum:Impressions:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Date:&#9;</run>
                <run bold='true'>&lt;[by_day].[tdy:Date:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Filtered Ad for Bid Count:&#9;</run>
                <run bold='true'>&lt;[by_day].[sum:Filtered Ad for Bid Count:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Filtered Ad for Budget:&#9;</run>
                <run bold='true'>&lt;[by_day].[sum:Filtered Ad for Budget:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Impressions:&#9;</run>
                <run bold='true'>&lt;[by_day].[sum:Impressions:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>([by_day].[none:Grouping:nk] * [by_day].[Multiple Values])</rows>
        <cols>[by_day].[tdy:Date:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ad Count by Hour'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Ad Call Count by Hour for </run>
            <run>&lt;</run>
            <run>[by_hour].[none:Advertiser:nk]</run>
            <run>&gt;</run>
            <run> by </run>
            <run>&lt;</run>
            <run>[by_hour].[none:Grouping:nk]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='by_hour' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
              <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
              <members>
                <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
                <member value='&quot;AirTkt-ads&quot;' />
                <member value='&quot;Alaska Airlines&quot;' />
                <member value='&quot;ASAP Tickets&quot;' />
                <member value='&quot;Booking.com - UK&quot;' />
                <member value='&quot;Booking.com-ads&quot;' />
                <member value='&quot;bookit.com&quot;' />
                <member value='&quot;BudgetAir - UK&quot;' />
                <member value='&quot;BusBud - Ads&quot;' />
                <member value='&quot;Cathay Pacific&quot;' />
                <member value='&quot;Cathay Pacific - Canada&quot;' />
                <member value='&quot;CheapFareGuru&quot;' />
                <member value='&quot;CheapOair&quot;' />
                <member value='&quot;CheapOair- UK ads&quot;' />
                <member value='&quot;CheapOair-Canada&quot;' />
                <member value='&quot;CheapTickets-Ads&quot;' />
                <member value='&quot;Crowne Plaza&quot;' />
                <member value='&quot;DealBase - ads&quot;' />
                <member value='&quot;Delta&quot;' />
                <member value='&quot;ebookers - UK&quot;' />
                <member value='&quot;Edreams&quot;' />
                <member value='&quot;eDreams - UK&quot;' />
                <member value='&quot;Etihad Airways&quot;' />
                <member value='&quot;Expedia - UK&quot;' />
                <member value='&quot;Expedia-Ads&quot;' />
                <member value='&quot;FareBoom-ads&quot;' />
                <member value='&quot;Faregeek - US&quot;' />
                <member value='&quot;FlightHub&quot;' />
                <member value='&quot;Fly.com&quot;' />
                <member value='&quot;Fly.com - CA&quot;' />
                <member value='&quot;FlyFar&quot;' />
                <member value='&quot;Globehunters - UK&quot;' />
                <member value='&quot;goSeek&quot;' />
                <member value='&quot;Hawaiian Airlines&quot;' />
                <member value='&quot;Holiday Inn&quot;' />
                <member value='&quot;Holiday Inn Express&quot;' />
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
                <member value='&quot;HotelsCombined - UK&quot;' />
                <member value='&quot;HotelsCombined - US&quot;' />
                <member value='&quot;Hotwire-Ads&quot;' />
                <member value='&quot;Indian Eagle&quot;' />
                <member value='&quot;InsanelyCheapFlights&quot;' />
                <member value='&quot;Jetcost - UK&quot;' />
                <member value='&quot;Jetsetter-ads&quot;' />
                <member value='&quot;Justairticket-ads&quot;' />
                <member value='&quot;JustFly&quot;' />
                <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
                <member value='&quot;LAN - Ariadna&quot;' />
                <member value='&quot;lastminute.com - UK&quot;' />
                <member value='&quot;Laterooms.com - UK&quot;' />
                <member value='&quot;LatinOFare-ads&quot;' />
                <member value='&quot;On the Beach - UK&quot;' />
                <member value='&quot;Orbitz-ads-on-Network&quot;' />
                <member value='&quot;OWW-ads-on-CTIX&quot;' />
                <member value='&quot;Priceline - UK&quot;' />
                <member value='&quot;Priceline-Ads&quot;' />
                <member value='&quot;Qatar Airways - ads&quot;' />
                <member value='&quot;Roomer Travel - ads&quot;' />
                <member value='&quot;ShareTrips - Ads&quot;' />
                <member value='&quot;Skyscanner - UK&quot;' />
                <member value='&quot;Skyscanner - US&quot;' />
                <member value='&quot;SmartFares&quot;' />
                <member value='&quot;South African Airlines&quot;' />
                <member value='&quot;STA Travel-Ads&quot;' />
                <member value='&quot;StudentUniverse&quot;' />
                <member value='&quot;TAM airlines - Ariadna&quot;' />
                <member value='&quot;Travelocity-Ads&quot;' />
                <member value='&quot;TripAdvisor&quot;' />
                <member value='&quot;TripAdvisor - UK&quot;' />
                <member value='&quot;Trivago&quot;' />
                <member value='&quot;Trivago - UK&quot;' />
                <member value='&quot;United Airlines&quot;' />
                <member value='&quot;Vegas.com-ads&quot;' />
                <member value='&quot;Virgin America&quot;' />
                <member value='&quot;Virgin Atlantic&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Grouping]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
              <calculation class='tableau' formula='&quot;Total&quot;' />
              <members>
                <member value='&quot;Total&quot;' />
                <member value='&quot;Product Category&quot;' />
                <member value='&quot;Campaign&quot;' />
                <member value='&quot;Target&quot;' />
                <member value='&quot;Campaign &gt; Ad Group&quot;' />
                <member value='&quot;Campaign &gt; Ad Group &gt; Target&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='by_hour'>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_2690814142747380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_8421114172131921]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Ad Group&quot; THEN [Ad Group]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Hour]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2690814142747380]' derivation='None' name='[none:Calculation_2690814142747380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8421114172131921]' derivation='None' name='[none:Calculation_8421114172131921:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping]' derivation='None' name='[none:Grouping:nk]' pivot='key' type='nominal' />
            <column-instance column='[Hour]' derivation='None' name='[none:Hour:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[by_hour].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_hour].[sum:Filtered Ad for Bid Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_hour].[sum:Filtered Ad for Budget:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_hour].[sum:Impressions:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[by_hour].[none:Advertiser:nk]'>
            <groupfilter expression='[Advertiser] = [Parameters].[Advertiser]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[by_hour].[:Measure Names]</column>
            <column>[by_hour].[none:Advertiser:nk]</column>
            <column>[by_hour].[none:Date:qk]</column>
            <column>[by_hour].[none:Product Category Filter:nk]</column>
            <column>[by_hour].[none:Calculation_2690814142747380:nk]</column>
            <column>[by_hour].[none:Calculation_8421114172131921:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_hour].[Multiple Values]' scope='rows' value=' ' />
            <format attr='subtitle' class='0' field='[by_hour].[Multiple Values]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[by_hour].[Multiple Values]' scope='rows' value='true' />
            <format attr='display' class='0' field='[by_hour].[Multiple Values]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[by_hour].[none:Grouping:nk]' value='-90' />
            <format attr='display' field='[by_hour].[none:Grouping:nk]' value='true' />
            <format attr='text-orientation' field='[Parameters].[Grouping]' value='-90' />
            <format attr='text-format' field='[by_hour].[tdy:Date:ok]' value='*m/d/yy' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[by_hour].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([by_hour].[none:Grouping:nk] * [by_hour].[Multiple Values])</rows>
        <cols>([by_hour].[tdy:Date:ok] / [by_hour].[none:Hour:ok])</cols>
      </table>
    </worksheet>
    <worksheet name='Ad Count by Percent'>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
              <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
              <members>
                <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
                <member value='&quot;AirTkt-ads&quot;' />
                <member value='&quot;Alaska Airlines&quot;' />
                <member value='&quot;ASAP Tickets&quot;' />
                <member value='&quot;Booking.com - UK&quot;' />
                <member value='&quot;Booking.com-ads&quot;' />
                <member value='&quot;bookit.com&quot;' />
                <member value='&quot;BudgetAir - UK&quot;' />
                <member value='&quot;BusBud - Ads&quot;' />
                <member value='&quot;Cathay Pacific&quot;' />
                <member value='&quot;Cathay Pacific - Canada&quot;' />
                <member value='&quot;CheapFareGuru&quot;' />
                <member value='&quot;CheapOair&quot;' />
                <member value='&quot;CheapOair- UK ads&quot;' />
                <member value='&quot;CheapOair-Canada&quot;' />
                <member value='&quot;CheapTickets-Ads&quot;' />
                <member value='&quot;Crowne Plaza&quot;' />
                <member value='&quot;DealBase - ads&quot;' />
                <member value='&quot;Delta&quot;' />
                <member value='&quot;ebookers - UK&quot;' />
                <member value='&quot;Edreams&quot;' />
                <member value='&quot;eDreams - UK&quot;' />
                <member value='&quot;Etihad Airways&quot;' />
                <member value='&quot;Expedia - UK&quot;' />
                <member value='&quot;Expedia-Ads&quot;' />
                <member value='&quot;FareBoom-ads&quot;' />
                <member value='&quot;Faregeek - US&quot;' />
                <member value='&quot;FlightHub&quot;' />
                <member value='&quot;Fly.com&quot;' />
                <member value='&quot;Fly.com - CA&quot;' />
                <member value='&quot;FlyFar&quot;' />
                <member value='&quot;Globehunters - UK&quot;' />
                <member value='&quot;goSeek&quot;' />
                <member value='&quot;Hawaiian Airlines&quot;' />
                <member value='&quot;Holiday Inn&quot;' />
                <member value='&quot;Holiday Inn Express&quot;' />
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
                <member value='&quot;HotelsCombined - UK&quot;' />
                <member value='&quot;HotelsCombined - US&quot;' />
                <member value='&quot;Hotwire-Ads&quot;' />
                <member value='&quot;Indian Eagle&quot;' />
                <member value='&quot;InsanelyCheapFlights&quot;' />
                <member value='&quot;Jetcost - UK&quot;' />
                <member value='&quot;Jetsetter-ads&quot;' />
                <member value='&quot;Justairticket-ads&quot;' />
                <member value='&quot;JustFly&quot;' />
                <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
                <member value='&quot;LAN - Ariadna&quot;' />
                <member value='&quot;lastminute.com - UK&quot;' />
                <member value='&quot;Laterooms.com - UK&quot;' />
                <member value='&quot;LatinOFare-ads&quot;' />
                <member value='&quot;On the Beach - UK&quot;' />
                <member value='&quot;Orbitz-ads-on-Network&quot;' />
                <member value='&quot;OWW-ads-on-CTIX&quot;' />
                <member value='&quot;Priceline - UK&quot;' />
                <member value='&quot;Priceline-Ads&quot;' />
                <member value='&quot;Qatar Airways - ads&quot;' />
                <member value='&quot;Roomer Travel - ads&quot;' />
                <member value='&quot;ShareTrips - Ads&quot;' />
                <member value='&quot;Skyscanner - UK&quot;' />
                <member value='&quot;Skyscanner - US&quot;' />
                <member value='&quot;SmartFares&quot;' />
                <member value='&quot;South African Airlines&quot;' />
                <member value='&quot;STA Travel-Ads&quot;' />
                <member value='&quot;StudentUniverse&quot;' />
                <member value='&quot;TAM airlines - Ariadna&quot;' />
                <member value='&quot;Travelocity-Ads&quot;' />
                <member value='&quot;TripAdvisor&quot;' />
                <member value='&quot;TripAdvisor - UK&quot;' />
                <member value='&quot;Trivago&quot;' />
                <member value='&quot;Trivago - UK&quot;' />
                <member value='&quot;United Airlines&quot;' />
                <member value='&quot;Vegas.com-ads&quot;' />
                <member value='&quot;Virgin America&quot;' />
                <member value='&quot;Virgin Atlantic&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='by_day'>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Eligible Ad Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Bid %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Bid Count])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Budget %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Budget])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group &gt; Target&quot; THEN [Calculation_6040417124233554]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping]' derivation='None' name='[none:Grouping:nk]' pivot='key' type='nominal' />
            <column-instance column='[Eligible Ad Count]' derivation='Sum' name='[sum:Eligible Ad Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Bid %]' derivation='User' name='[usr:Filtered Ads for Bid %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Budget %]' derivation='User' name='[usr:Filtered Ads for Budget %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[by_day].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Filtered Ads for Bid \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Filtered Ads for Budget \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Impression Share:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[by_day].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Bid \%:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Budget \%:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Budget:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Impressions:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[by_day].[none:Advertiser:nk]'>
            <groupfilter expression='[Advertiser] = [Parameters].[Advertiser]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[by_day].[none:Advertiser:nk]</column>
            <column>[by_day].[:Measure Names]</column>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[Multiple Values]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[by_day].[Multiple Values]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[Multiple Values]' scope='rows' value='true' />
            <format attr='width' field='[by_day].[Multiple Values]' value='40' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[by_day].[none:Grouping:nk]' value='72' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[by_day].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[by_day].[:Measure Names]' />
              <lod column='[by_day].[usr:Filtered Ads for Bid %:qk]' />
              <lod column='[by_day].[usr:Filtered Ads for Budget %:qk]' />
              <lod column='[by_day].[usr:Impression Share:qk]' />
              <lod column='[by_day].[sum:Eligible Ad Count:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Date:&#9;</run>
                <run bold='true'>&lt;[by_day].[tdy:Date:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Eligible Ad Count:&#9;</run>
                <run bold='true'>&lt;[by_day].[sum:Eligible Ad Count:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Filtered Ads for Bid Count %:&#9;</run>
                <run bold='true'>&lt;[by_day].[usr:Filtered Ads for Bid %:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Filtered Ads for Budget %:&#9;</run>
                <run bold='true'>&lt;[by_day].[usr:Filtered Ads for Budget %:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Impression Share:&#9;</run>
                <run bold='true'>&lt;[by_day].[usr:Impression Share:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='852' />
                <format attr='maxwidth' value='852' />
                <format attr='minheight' value='100' />
                <format attr='maxheight' value='100' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([by_day].[none:Grouping:nk] * [by_day].[Multiple Values])</rows>
        <cols>[by_day].[tdy:Date:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Historical Data Table'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_time_by_campaign' name='vertica.41345.438297812500' />
            <datasource name='Parameters' />
            <datasource name='by_hour' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
              <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
              <members>
                <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
                <member value='&quot;AirTkt-ads&quot;' />
                <member value='&quot;Alaska Airlines&quot;' />
                <member value='&quot;ASAP Tickets&quot;' />
                <member value='&quot;Booking.com - UK&quot;' />
                <member value='&quot;Booking.com-ads&quot;' />
                <member value='&quot;bookit.com&quot;' />
                <member value='&quot;BudgetAir - UK&quot;' />
                <member value='&quot;BusBud - Ads&quot;' />
                <member value='&quot;Cathay Pacific&quot;' />
                <member value='&quot;Cathay Pacific - Canada&quot;' />
                <member value='&quot;CheapFareGuru&quot;' />
                <member value='&quot;CheapOair&quot;' />
                <member value='&quot;CheapOair- UK ads&quot;' />
                <member value='&quot;CheapOair-Canada&quot;' />
                <member value='&quot;CheapTickets-Ads&quot;' />
                <member value='&quot;Crowne Plaza&quot;' />
                <member value='&quot;DealBase - ads&quot;' />
                <member value='&quot;Delta&quot;' />
                <member value='&quot;ebookers - UK&quot;' />
                <member value='&quot;Edreams&quot;' />
                <member value='&quot;eDreams - UK&quot;' />
                <member value='&quot;Etihad Airways&quot;' />
                <member value='&quot;Expedia - UK&quot;' />
                <member value='&quot;Expedia-Ads&quot;' />
                <member value='&quot;FareBoom-ads&quot;' />
                <member value='&quot;Faregeek - US&quot;' />
                <member value='&quot;FlightHub&quot;' />
                <member value='&quot;Fly.com&quot;' />
                <member value='&quot;Fly.com - CA&quot;' />
                <member value='&quot;FlyFar&quot;' />
                <member value='&quot;Globehunters - UK&quot;' />
                <member value='&quot;goSeek&quot;' />
                <member value='&quot;Hawaiian Airlines&quot;' />
                <member value='&quot;Holiday Inn&quot;' />
                <member value='&quot;Holiday Inn Express&quot;' />
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
                <member value='&quot;HotelsCombined - UK&quot;' />
                <member value='&quot;HotelsCombined - US&quot;' />
                <member value='&quot;Hotwire-Ads&quot;' />
                <member value='&quot;Indian Eagle&quot;' />
                <member value='&quot;InsanelyCheapFlights&quot;' />
                <member value='&quot;Jetcost - UK&quot;' />
                <member value='&quot;Jetsetter-ads&quot;' />
                <member value='&quot;Justairticket-ads&quot;' />
                <member value='&quot;JustFly&quot;' />
                <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
                <member value='&quot;LAN - Ariadna&quot;' />
                <member value='&quot;lastminute.com - UK&quot;' />
                <member value='&quot;Laterooms.com - UK&quot;' />
                <member value='&quot;LatinOFare-ads&quot;' />
                <member value='&quot;On the Beach - UK&quot;' />
                <member value='&quot;Orbitz-ads-on-Network&quot;' />
                <member value='&quot;OWW-ads-on-CTIX&quot;' />
                <member value='&quot;Priceline - UK&quot;' />
                <member value='&quot;Priceline-Ads&quot;' />
                <member value='&quot;Qatar Airways - ads&quot;' />
                <member value='&quot;Roomer Travel - ads&quot;' />
                <member value='&quot;ShareTrips - Ads&quot;' />
                <member value='&quot;Skyscanner - UK&quot;' />
                <member value='&quot;Skyscanner - US&quot;' />
                <member value='&quot;SmartFares&quot;' />
                <member value='&quot;South African Airlines&quot;' />
                <member value='&quot;STA Travel-Ads&quot;' />
                <member value='&quot;StudentUniverse&quot;' />
                <member value='&quot;TAM airlines - Ariadna&quot;' />
                <member value='&quot;Travelocity-Ads&quot;' />
                <member value='&quot;TripAdvisor&quot;' />
                <member value='&quot;TripAdvisor - UK&quot;' />
                <member value='&quot;Trivago&quot;' />
                <member value='&quot;Trivago - UK&quot;' />
                <member value='&quot;United Airlines&quot;' />
                <member value='&quot;Vegas.com-ads&quot;' />
                <member value='&quot;Virgin America&quot;' />
                <member value='&quot;Virgin Atlantic&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='by_hour'>
            <column datatype='integer' name='[Filtered Ad for Click Blackout]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Filtered Ad for Click Blackout]' derivation='Sum' name='[sum:Filtered Ad for Click Blackout:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41345.438297812500'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_7890814143038531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_9431114172059552]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary for Position One]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Daily Budget Needed for Position One])/COUNTD([Date])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary to Participate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Daily Budget Needed to Participate])/countd([Date])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Eligible Ad Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Bid %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Bid Count])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Budget %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Budget])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Click Blackout %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Click Blackout])/sum([Eligible Ad Count])' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Max Bid Increment Needed for Position One]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Max Bid Increment Needed to Participate]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Max Bid Increment Needed for Position One]' derivation='Max' name='[max:Max Bid Increment Needed for Position One:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Max Bid Increment Needed to Participate]' derivation='Max' name='[max:Max Bid Increment Needed to Participate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7890814143038531]' derivation='None' name='[none:Calculation_7890814143038531:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9431114172059552]' derivation='None' name='[none:Calculation_9431114172059552:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Type]' derivation='None' name='[none:Product Category Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Eligible Ad Count]' derivation='Sum' name='[sum:Eligible Ad Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad Count]' derivation='Sum' name='[sum:Filtered Ad Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Daily Budget Necessary for Position One]' derivation='User' name='[usr:Daily Budget Necessary for Position One:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Daily Budget Necessary to Participate]' derivation='User' name='[usr:Daily Budget Necessary to Participate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Bid %]' derivation='User' name='[usr:Filtered Ads for Bid %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Budget %]' derivation='User' name='[usr:Filtered Ads for Budget %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Click Blackout %]' derivation='User' name='[usr:Filtered Ads for Click Blackout %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41345.438297812500].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[sum:Eligible Ad Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[sum:Filtered Ad for Bid Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[sum:Filtered Ad for Budget:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[sum:Filtered Ad Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_hour].[sum:Filtered Ad for Click Blackout:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Bid \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Budget \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Click Blackout \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Impression Share:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Daily Budget Necessary to Participate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed to Participate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[usr:Daily Budget Necessary for Position One:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed for Position One:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41345.438297812500].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41345.438297812500].[sum:Eligible Ad Count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[sum:Filtered Ad for Bid Count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[sum:Filtered Ad for Budget:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[sum:Filtered Ad Count:qk]&quot;</bucket>
              <bucket>&quot;[by_hour].[sum:Filtered Ad for Click Blackout:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Bid \%:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Budget \%:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Filtered Ads for Click Blackout \%:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Impression Share:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Daily Budget Necessary to Participate:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed to Participate:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[usr:Daily Budget Necessary for Position One:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41345.438297812500].[max:Max Bid Increment Needed for Position One:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41345.438297812500].[none:Advertiser Name:nk]'>
            <groupfilter expression='[Advertiser Name] = [Parameters].[Advertiser]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <sort class='natural' column='[vertica.41345.438297812500].[none:Date:ok]' direction='DESC' />
          <filter class='quantitative' column='[vertica.41345.438297812500].[none:Date:qk]' included-values='all'>
          </filter>
          <filter class='categorical' column='[vertica.41345.438297812500].[none:Product Category Filter:nk]'>
            <groupfilter function='member' level='[none:Product Category Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41345.438297812500].[none:Advertiser Name:nk]</column>
            <column>[vertica.41345.438297812500].[:Measure Names]</column>
            <column>[vertica.41345.438297812500].[none:Date:qk]</column>
            <column>[vertica.41345.438297812500].[none:Product Category Filter:nk]</column>
            <column>[vertica.41345.438297812500].[none:Calculation_7890814143038531:nk]</column>
            <column>[vertica.41345.438297812500].[none:Calculation_9431114172059552:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41345.438297812500].[:Measure Names]' value='90' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.41345.438297812500].[:Measure Names]' value='52' />
            <format attr='width' field='[vertica.41345.438297812500].[none:Campaign:nk]' value='188' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.41345.438297812500].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41345.438297812500].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41345.438297812500].[none:Date:ok] / ([vertica.41345.438297812500].[none:Product Category Type:nk] / [vertica.41345.438297812500].[none:Campaign:nk]))</rows>
        <cols>[vertica.41345.438297812500].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Table'>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;'>
              <calculation class='tableau' formula='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
              <members>
                <member value='&quot;Airtickets Touristikes Ypiresies Etairia Periorismenis Efthynis - UK&quot;' />
                <member value='&quot;AirTkt-ads&quot;' />
                <member value='&quot;Alaska Airlines&quot;' />
                <member value='&quot;ASAP Tickets&quot;' />
                <member value='&quot;Booking.com - UK&quot;' />
                <member value='&quot;Booking.com-ads&quot;' />
                <member value='&quot;bookit.com&quot;' />
                <member value='&quot;BudgetAir - UK&quot;' />
                <member value='&quot;BusBud - Ads&quot;' />
                <member value='&quot;Cathay Pacific&quot;' />
                <member value='&quot;Cathay Pacific - Canada&quot;' />
                <member value='&quot;CheapFareGuru&quot;' />
                <member value='&quot;CheapOair&quot;' />
                <member value='&quot;CheapOair- UK ads&quot;' />
                <member value='&quot;CheapOair-Canada&quot;' />
                <member value='&quot;CheapTickets-Ads&quot;' />
                <member value='&quot;Crowne Plaza&quot;' />
                <member value='&quot;DealBase - ads&quot;' />
                <member value='&quot;Delta&quot;' />
                <member value='&quot;ebookers - UK&quot;' />
                <member value='&quot;Edreams&quot;' />
                <member value='&quot;eDreams - UK&quot;' />
                <member value='&quot;Etihad Airways&quot;' />
                <member value='&quot;Expedia - UK&quot;' />
                <member value='&quot;Expedia-Ads&quot;' />
                <member value='&quot;FareBoom-ads&quot;' />
                <member value='&quot;Faregeek - US&quot;' />
                <member value='&quot;FlightHub&quot;' />
                <member value='&quot;Fly.com&quot;' />
                <member value='&quot;Fly.com - CA&quot;' />
                <member value='&quot;FlyFar&quot;' />
                <member value='&quot;Globehunters - UK&quot;' />
                <member value='&quot;goSeek&quot;' />
                <member value='&quot;Hawaiian Airlines&quot;' />
                <member value='&quot;Holiday Inn&quot;' />
                <member value='&quot;Holiday Inn Express&quot;' />
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
                <member value='&quot;HotelsCombined - UK&quot;' />
                <member value='&quot;HotelsCombined - US&quot;' />
                <member value='&quot;Hotwire-Ads&quot;' />
                <member value='&quot;Indian Eagle&quot;' />
                <member value='&quot;InsanelyCheapFlights&quot;' />
                <member value='&quot;Jetcost - UK&quot;' />
                <member value='&quot;Jetsetter-ads&quot;' />
                <member value='&quot;Justairticket-ads&quot;' />
                <member value='&quot;JustFly&quot;' />
                <member value='&quot;Kayak Software Corporation - Ads - UK&quot;' />
                <member value='&quot;LAN - Ariadna&quot;' />
                <member value='&quot;lastminute.com - UK&quot;' />
                <member value='&quot;Laterooms.com - UK&quot;' />
                <member value='&quot;LatinOFare-ads&quot;' />
                <member value='&quot;On the Beach - UK&quot;' />
                <member value='&quot;Orbitz-ads-on-Network&quot;' />
                <member value='&quot;OWW-ads-on-CTIX&quot;' />
                <member value='&quot;Priceline - UK&quot;' />
                <member value='&quot;Priceline-Ads&quot;' />
                <member value='&quot;Qatar Airways - ads&quot;' />
                <member value='&quot;Roomer Travel - ads&quot;' />
                <member value='&quot;ShareTrips - Ads&quot;' />
                <member value='&quot;Skyscanner - UK&quot;' />
                <member value='&quot;Skyscanner - US&quot;' />
                <member value='&quot;SmartFares&quot;' />
                <member value='&quot;South African Airlines&quot;' />
                <member value='&quot;STA Travel-Ads&quot;' />
                <member value='&quot;StudentUniverse&quot;' />
                <member value='&quot;TAM airlines - Ariadna&quot;' />
                <member value='&quot;Travelocity-Ads&quot;' />
                <member value='&quot;TripAdvisor&quot;' />
                <member value='&quot;TripAdvisor - UK&quot;' />
                <member value='&quot;Trivago&quot;' />
                <member value='&quot;Trivago - UK&quot;' />
                <member value='&quot;United Airlines&quot;' />
                <member value='&quot;Vegas.com-ads&quot;' />
                <member value='&quot;Virgin America&quot;' />
                <member value='&quot;Virgin Atlantic&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='by_day'>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Filtered Ads for Click Blackout %' datatype='real' default-format='p0.0%' name='[Calculation_0000826142717369]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Click Blackout])/sum([Eligible Ad Count])' scope-isolation='false' />
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary for Position One]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Daily Budget Needed for Position One])/COUNTD([Date])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Daily Budget Necessary to Participate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Daily Budget Needed to Participate])/countd([Date])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Eligible Ad Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Bid Count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Filtered Ad for Click Blackout]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Bid %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Bid Count])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Filtered Ads for Budget %]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad for Budget])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='string' name='[Grouping]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Target&quot; THEN [Calculation_9460417123825490]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group&quot; THEN [Calculation_9520417124158774]&#13;&#10;WHEN &quot;Campaign &gt; Ad Group &gt; Target&quot; THEN [Calculation_6040417124233554]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Max Bid Increment Needed for Position One]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Max Bid Increment Needed to Participate]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Max Bid Increment Needed for Position One]' derivation='Max' name='[max:Max Bid Increment Needed for Position One:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Max Bid Increment Needed to Participate]' derivation='Max' name='[max:Max Bid Increment Needed to Participate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping]' derivation='None' name='[none:Grouping:nk]' pivot='key' type='nominal' />
            <column-instance column='[Eligible Ad Count]' derivation='Sum' name='[sum:Eligible Ad Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Bid Count]' derivation='Sum' name='[sum:Filtered Ad for Bid Count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Budget]' derivation='Sum' name='[sum:Filtered Ad for Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad for Click Blackout]' derivation='Sum' name='[sum:Filtered Ad for Click Blackout:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0000826142717369]' derivation='User' name='[usr:Calculation_0000826142717369:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Daily Budget Necessary for Position One]' derivation='User' name='[usr:Daily Budget Necessary for Position One:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Daily Budget Necessary to Participate]' derivation='User' name='[usr:Daily Budget Necessary to Participate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Bid %]' derivation='User' name='[usr:Filtered Ads for Bid %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ads for Budget %]' derivation='User' name='[usr:Filtered Ads for Budget %:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[by_day].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Eligible Ad Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Filtered Ad for Bid Count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Filtered Ad for Budget:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Filtered Ad for Click Blackout:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Filtered Ads for Bid \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Filtered Ads for Budget \%:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Calculation_0000826142717369:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Impression Share:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Daily Budget Necessary to Participate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[max:Max Bid Increment Needed to Participate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[usr:Daily Budget Necessary for Position One:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[by_day].[max:Max Bid Increment Needed for Position One:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[by_day].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[by_day].[sum:Eligible Ad Count:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Bid Count:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Budget:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Filtered Ad for Click Blackout:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Bid \%:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Filtered Ads for Budget \%:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Calculation_0000826142717369:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Impression Share:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Daily Budget Necessary to Participate:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[max:Max Bid Increment Needed to Participate:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[usr:Daily Budget Necessary for Position One:qk]&quot;</bucket>
              <bucket>&quot;[by_day].[max:Max Bid Increment Needed for Position One:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[by_day].[none:Advertiser:nk]'>
            <groupfilter expression='[Advertiser] = [Parameters].[Advertiser]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[by_day].[none:Advertiser:nk]</column>
            <column>[by_day].[:Measure Names]</column>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[by_day].[:Measure Names]' value='75' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[by_day].[:Measure Names]' value='68' />
            <format attr='width' field='[by_day].[none:Grouping:nk]' value='268' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[by_day].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[by_day].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[by_day].[none:Grouping:nk]</rows>
        <cols>[by_day].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Filtered Ad Count&#10;</run>
            <run>&lt;[by_day].[tdy:Ref Day:qk]&gt; vs. &#10;&lt;[by_day].[tdy:SDPW:qk]&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='by_day'>
            <column datatype='integer' name='[ABS(Filtered Ad Count - D SDPW)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Filtered Ad Count - D SDPW])' />
            </column>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Filtered Ad Count - D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad Count - Ref Day])-sum([Filtered Ad Count - SDPW])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ABS(Filtered Ad Count - D SDPW)]' derivation='User' name='[usr:ABS(Filtered Ad Count - D SDPW):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad Count - D SDPW]' derivation='User' name='[usr:Filtered Ad Count - D SDPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[by_day].[none:Advertiser:nk]' direction='DESC' using='[by_day].[usr:ABS(Filtered Ad Count - D SDPW):qk]'>
          </sort>
          <slices>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' />
              <lod column='[by_day].[tdy:Ref Day:qk]' />
              <lod column='[by_day].[tdy:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[by_day].[none:Advertiser:nk]</rows>
        <cols>[by_day].[usr:Filtered Ad Count - D SDPW:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Day %'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Filtered Ad Count&#10;</run>
            <run>&lt;</run>
            <run>[by_day].[tdy:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. </run>
            <run>&lt;</run>
            <run>[by_day].[tdy:SDPW:qk]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='by_day'>
            <column datatype='real' name='[ABS(Filtered Ad Count - %D SDPW)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Filtered Ad Count - %D SDPW])' />
            </column>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Filtered Ad Count - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Filtered Ad Count - Ref Day]) - sum([Filtered Ad Count - SDPW]))/sum([Filtered Ad Count - SDPW])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ABS(Filtered Ad Count - %D SDPW)]' derivation='User' name='[usr:ABS(Filtered Ad Count - %D SDPW):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad Count - %D SDPW]' derivation='User' name='[usr:Filtered Ad Count - %D SDPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[by_day].[none:Advertiser:nk]' direction='DESC' using='[by_day].[usr:ABS(Filtered Ad Count - %D SDPW):qk]'>
          </sort>
          <slices>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' value='p0%' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' />
              <lod column='[by_day].[tdy:Ref Day:qk]' />
              <lod column='[by_day].[tdy:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[by_day].[none:Advertiser:nk]</rows>
        <cols>[by_day].[usr:Filtered Ad Count - %D SDPW:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Filtered Ad Count&#10;</run>
            <run>WE &lt;[by_day].[tdy:Ref Day:qk]&gt; vs. &#10;WE &lt;[by_day].[tdy:SDPW:qk]&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='by_day'>
            <column datatype='integer' name='[ABS(Filtered Ad Count - D PW)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Filtered Ad Count - D PW])' />
            </column>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Filtered Ad Count - D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Filtered Ad Count - Ref Week]) - sum([Filtered Ad Count - PW])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ABS(Filtered Ad Count - D PW)]' derivation='User' name='[usr:ABS(Filtered Ad Count - D PW):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad Count - D PW]' derivation='User' name='[usr:Filtered Ad Count - D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[by_day].[none:Advertiser:nk]' direction='DESC' using='[by_day].[usr:ABS(Filtered Ad Count - D PW):qk]'>
          </sort>
          <slices>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[usr:Filtered Ad Count - D PW:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - D PW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - D PW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[by_day].[usr:Filtered Ad Count - D PW:qk]' max='1000000000' min='-1000000000' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[by_day].[usr:Filtered Ad Count - D PW:qk]' />
              <lod column='[by_day].[tdy:Ref Day:qk]' />
              <lod column='[by_day].[tdy:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[by_day].[none:Advertiser:nk]</rows>
        <cols>[by_day].[usr:Filtered Ad Count - D PW:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Week %'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Filtered Ad Count&#10;WE </run>
            <run>&lt;</run>
            <run>[by_day].[tdy:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. WE </run>
            <run>&lt;</run>
            <run>[by_day].[tdy:SDPW:qk]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='by_day' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='by_day'>
            <column datatype='real' name='[ABS(Filtered Ad Count - %D PW)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Filtered Ad Count - %D PW])' />
            </column>
            <column datatype='string' name='[Advertiser]' role='dimension' type='nominal'>
            </column>
            <column caption='Product Category Filter' datatype='string' name='[Calculation_1040329134621632]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Total&apos; THEN &quot;Keep&quot; &#13;&#10;ELSE IF [Parameters].[Parameter 1] = [Product Category Type] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END &#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Prechecks Data?' datatype='string' name='[Calculation_1710814142419812]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Include Mobile Data?' datatype='string' name='[Calculation_4111114171534073]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Display Type] = &quot;MOBILE&quot; THEN &quot;Only Mobile&quot;&#13;&#10;ELSE &quot;No Mobile&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Filtered Ad Count - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Filtered Ad Count - Ref Week]) - sum([Filtered Ad Count - PW]))/sum([Filtered Ad Count - PW])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column-instance column='[Advertiser]' derivation='None' name='[none:Advertiser:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1040329134621632]' derivation='None' name='[none:Calculation_1040329134621632:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1710814142419812]' derivation='None' name='[none:Calculation_1710814142419812:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4111114171534073]' derivation='None' name='[none:Calculation_4111114171534073:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ABS(Filtered Ad Count - %D PW)]' derivation='User' name='[usr:ABS(Filtered Ad Count - %D PW):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filtered Ad Count - %D PW]' derivation='User' name='[usr:Filtered Ad Count - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[by_day].[none:Advertiser:nk]' direction='DESC' using='[by_day].[usr:ABS(Filtered Ad Count - %D PW):qk]'>
          </sort>
          <slices>
            <column>[by_day].[none:Date:qk]</column>
            <column>[by_day].[none:Calculation_1040329134621632:nk]</column>
            <column>[by_day].[none:Calculation_1710814142419812:nk]</column>
            <column>[by_day].[none:Calculation_4111114171534073:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[by_day].[usr:Filtered Ad Count - %D PW:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - %D PW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[by_day].[usr:Filtered Ad Count - %D PW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[by_day].[usr:Filtered Ad Count - %D PW:qk]' value='p0%' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[by_day].[usr:Filtered Ad Count - %D PW:qk]' max='100000.0' min='-100000.0' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[by_day].[usr:Filtered Ad Count - %D PW:qk]' />
              <lod column='[by_day].[tdy:Ref Day:qk]' />
              <lod column='[by_day].[tdy:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[by_day].[none:Advertiser:nk]</rows>
        <cols>[by_day].[usr:Filtered Ad Count - %D PW:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Advertiser Tornados'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Advertiser Tornados</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1300' maxwidth='1100' minheight='1300' minwidth='1100' />
      <zones>
        <zone h='100000' id='11' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5232' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='94768' id='6' param='horz' type='layout-flow' w='100000' x='0' y='5232'>
              <zone h='94768' id='4' type='layout-basic' w='85455' x='0' y='5232'>
                <zone h='94768' id='1' name='Tornado - Day' show-title='true' w='45455' x='0' y='5232'>
                </zone>
                <zone h='94768' id='2' name='Tornado - Week' show-title='true' w='40000' x='45455' y='5232'>
                </zone>
              </zone>
              <zone fixed-size='160' h='94768' id='5' is-fixed='true' param='vert' type='layout-flow' w='14545' x='85455' y='5232'>
                <zone h='7924' id='7' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='14545' x='85455' y='5232'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='5693' id='8' param='[Parameters].[Reference Day]' type='paramctrl' w='14545' x='85455' y='13156'>
                </zone>
                <zone h='6001' id='12' param='[Parameters].[Parameter 1]' type='paramctrl' w='14545' x='85455' y='18849'>
                </zone>
                <zone h='8231' id='13' name='Tornado - Day' param='[by_day].[none:Calculation_1710814142419812:nk]' type='filter' w='14545' x='85455' y='24850'>
                </zone>
                <zone h='10847' id='14' name='Tornado - Day' param='[by_day].[none:Calculation_4111114171534073:nk]' type='filter' w='14545' x='85455' y='33081'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Advertiser Tornados by Percent'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Advertiser Tornados by Percent</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1300' maxwidth='1100' minheight='1300' minwidth='1100' />
      <zones>
        <zone h='100000' id='11' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5232' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='94768' id='6' param='horz' type='layout-flow' w='100000' x='0' y='5232'>
              <zone h='94768' id='4' type='layout-basic' w='85455' x='0' y='5232'>
                <zone h='94768' id='1' name='Tornado - Day %' show-title='true' w='46364' x='0' y='5232'>
                </zone>
                <zone h='94768' id='2' name='Tornado - Week %' show-title='true' w='39091' x='46364' y='5232'>
                </zone>
              </zone>
              <zone fixed-size='160' h='94768' id='5' is-fixed='true' param='vert' type='layout-flow' w='14545' x='85455' y='5232'>
                <zone h='7924' id='7' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='14545' x='85455' y='5232'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='5693' id='8' param='[Parameters].[Reference Day]' type='paramctrl' w='14545' x='85455' y='13156'>
                </zone>
                <zone h='6001' id='12' param='[Parameters].[Parameter 1]' type='paramctrl' w='14545' x='85455' y='18849'>
                </zone>
                <zone h='8231' id='13' name='Tornado - Week %' param='[by_day].[none:Calculation_1710814142419812:nk]' type='filter' w='14545' x='85455' y='24850'>
                </zone>
                <zone h='10847' id='14' name='Tornado - Day %' param='[by_day].[none:Calculation_4111114171534073:nk]' type='filter' w='14545' x='85455' y='33081'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ad Count'>
      <cards>
        <edge name='left'>
          <strip size='254'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[by_day].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='list' param='[Parameters].[Grouping]' type='parameter' />
            <card param='[by_day].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[by_day].[none:Calculation_1710814142419812:nk]' type='filter' />
            <card param='[by_day].[none:Calculation_4111114171534073:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[by_day].[none:Calculation_1040329134621632:nk]</field>
          <field>[by_day].[none:Calculation_1710814142419812:nk]</field>
          <field>[by_day].[none:Calculation_4111114171534073:nk]</field>
          <field>[by_day].[none:Precheck Type:nk]</field>
          <field>[mysql.40972.839761458330].[:Measure Names]</field>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[none:Calculation_1230308114808526:nk]</field>
          <field>[mysql.40972.839761458330].[none:Date:qk]</field>
          <field>[mysql.40972.839761458330].[none:Grouping:nk]</field>
          <field>[mysql.40972.839761458330].[tdy:Date:ok]</field>
          <field>[mysql.40972.839761458330].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ad Count by Hour'>
      <cards>
        <edge name='left'>
          <strip size='236'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='list' param='[Parameters].[Grouping]' type='parameter' />
            <card param='[by_hour].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[by_hour].[:Measure Names]' type='color' />
            <card param='[by_hour].[none:Calculation_2690814142747380:nk]' type='filter' />
            <card param='[by_hour].[none:Calculation_8421114172131921:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Grouping]</field>
          <field>[by_hour].[none:Calculation_2690814142747380:nk]</field>
          <field>[by_hour].[none:Calculation_8421114172131921:nk]</field>
          <field>[by_hour].[none:Precheck Type:nk]</field>
          <field>[by_hour].[none:Product Category Filter:nk]</field>
          <field>[mysql.41065.612752789355].[:Measure Names]</field>
          <field>[mysql.41065.612752789355].[none:Advertiser:nk]</field>
          <field>[mysql.41065.612752789355].[none:Date:qk]</field>
          <field>[mysql.41065.612752789355].[none:Grouping:nk]</field>
          <field>[mysql.41065.612752789355].[none:Hour:ok]</field>
          <field>[mysql.41065.612752789355].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ad Count by Percent'>
      <cards>
        <edge name='left'>
          <strip size='239'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='list' param='[Parameters].[Grouping]' type='parameter' />
            <card param='[by_day].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[by_day].[:Measure Names]' type='color' />
            <card param='[by_day].[none:Calculation_4111114171534073:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.40972.839761458330].[:Measure Names]</field>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[none:Calculation_1230308114808526:nk]</field>
          <field>[mysql.40972.839761458330].[none:Grouping:nk]</field>
          <field>[mysql.40972.839761458330].[tdy:Date:ok]</field>
          <field>[mysql.40972.839761458330].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Table'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='239'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='list' param='[Parameters].[Grouping]' type='parameter' />
            <card param='[by_day].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[by_day].[none:Calculation_4111114171534073:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[by_day].[none:Date:qk]</field>
          <field>[mysql.40972.839761458330].[:Measure Names]</field>
          <field>[mysql.40972.839761458330].[none:Ad Group:nk]</field>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[none:Calculation_1230308114808526:nk]</field>
          <field>[mysql.40972.839761458330].[none:Calculation_3270306121944936:qk]</field>
          <field>[mysql.40972.839761458330].[none:Campaign and Ad Group:nk]</field>
          <field>[mysql.40972.839761458330].[none:Date:qk]</field>
          <field>[mysql.40972.839761458330].[none:Destination Category:nk]</field>
          <field>[mysql.40972.839761458330].[none:Grouping:nk]</field>
          <field>[mysql.40972.839761458330].[none:Origination Category:nk]</field>
          <field>[mysql.40972.839761458330].[tdy:Date:ok]</field>
          <field>[mysql.40972.839761458330].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Historical Data Table'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card param='[vertica.41345.438297812500].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.41345.438297812500].[none:Calculation_7890814143038531:nk]' type='filter' />
            <card param='[vertica.41345.438297812500].[none:Calculation_9431114172059552:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41345.438297812500].[:Measure Names]</field>
          <field>[vertica.41345.438297812500].[none:Ad Group:nk]</field>
          <field>[vertica.41345.438297812500].[none:Advertiser Name:nk]</field>
          <field>[vertica.41345.438297812500].[none:Advertiser:nk]</field>
          <field>[vertica.41345.438297812500].[none:Calculation_9431114172059552:nk]</field>
          <field>[vertica.41345.438297812500].[none:Campaign:nk]</field>
          <field>[vertica.41345.438297812500].[none:Date:ok]</field>
          <field>[vertica.41345.438297812500].[none:Date:qk]</field>
          <field>[vertica.41345.438297812500].[none:Precheck Type:nk]</field>
          <field>[vertica.41345.438297812500].[none:Product Category Filter:nk]</field>
          <field>[vertica.41345.438297812500].[none:Product Category Type:nk]</field>
          <field>[vertica.41345.438297812500].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Day'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[by_day].[usr:Filtered Ad Count - D SDPW:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[by_day].[none:Calculation_1040329134621632:nk]</field>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[yr:Ref Day:ok]</field>
          <field>[mysql.40972.839761458330].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Week'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[by_day].[usr:Filtered Ad Count - D PW:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[yr:Ref Day:ok]</field>
          <field>[mysql.40972.839761458330].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Tornados'>
      <zones>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Day %'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[by_day].[usr:Filtered Ad Count - %D SDPW:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[yr:Ref Day:ok]</field>
          <field>[mysql.40972.839761458330].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Week %'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[by_day].[usr:Filtered Ad Count - %D PW:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.40972.839761458330].[none:Advertiser:nk]</field>
          <field>[mysql.40972.839761458330].[yr:Ref Day:ok]</field>
          <field>[mysql.40972.839761458330].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Tornados by Percent'>
      <active id='1' />
      <zones>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Ad Count' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAB2HAAAdhwGP5fFlAAACEElEQVR4nO3UsQ2DQBQFwcMiJ6H/CiGgAhy4AFuskIU0k/zk
      ghesbjrPc8BV8xhDQ1w2f86+71+fHsexLMvNe3iY6ffvZ9u2dV1vXcPjvP49gGcTEImASARE
      IiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQiIBIBkQiIREAkAiIREImA
      SAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQiIBIBkQiIREAkAiIR
      EImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQiIBIBkQiIREAk
      AiIREImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQiIBIBkQiI
      REAkAiIREImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQiIBIB
      kQiIREAkAiIREImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBIBEQi
      IBIBkQiIREAkAiIREImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQiYBI
      BEQiIBIBkQiIREAkAiIREImASAREIiASAZEIiERAJAIiERCJgEgERCIgEgGRCIhEQCQCIhEQ
      iYBIBETyBoxjE0Ez8TXHAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Ad Count by Hour' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAB2HAAAdhwGP5fFlAAADqElEQVR4nO3Xv2ucdQDH8Yvt9SpJy9VUjiimSilURHEQwY7i
      rENQdPFvcROliLSLkVIUQawucRHRoZNSCaQNSm3Qwfwq8YgXLu3lap7LPQ4V5+t9DEfL6zV+
      4YHP8ObL9xkry7ICw3pouM/KslQelaED6vV67Xb7/53yYCrLH77/+vzsp3eK/sbyUnP7zh/X
      F1c3b29vrp19/71rSytlf/fnX27s7e78OL9QKfufffTBO++ebXeLUe8e1JABMaCyv1vUjp+u
      d39aunnlykLZ2Tj34bn1VufbuS9ffu2Nua8uba0u3dwu5r64+M3l+d7O5spW//WZmaOHD456
      +KAEtL/GDtTOvPD0wvXVstvultXG1JNvvvpKpVJ55Nixzy/OVo9MXl288fxzp2feenty/FBR
      9J86Mf3dpQvXllujHj4oAe2vftGd/fiTJ6Ybvy3OH506+d/52nrzxZfO3NpqNju9xkT17mHx
      d6e5tV30K7XqgRHtvWdjwz2Hi6LodDr1en0/Nj1gWn+urTRvnzrRqNSOjNcO3mo1y4fr49Xy
      6sLiqWeeLXZ2jj86Wen31jf+evyxxvLvv/YO1U9OT4169aD+DajVurc7c29vr9vtTkxM7NMs
      7hdjw/2Nu4G4yxuIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiA
      iAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiI
      gIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiI
      iICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgI
      iIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICI
      CIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiA
      iAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiI
      gIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiI
      iICICIiIgIgIiIiAiAiIiICICIiIgIgIiIiAiAiIiICICIjIPz4k0s6AWOUwAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='186' name='Ad Count by Percent' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='97' name='Table' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABhCAIAAAAP/jkbAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAB2HAAAdhwGP5fFlAAAD/UlEQVR4nO3af0jcdRzH8fc3/EO01dkfqX/o9Ydu1iZMRhtn
      wz+mUJNWESSNqz8W0/oj4/zDAkfo3/XHGQblRRG4EfRHpQy3kUGGeBvZRh1r3naESsyBtKxY
      Cnfw6Q+dc+WR58uvN+H5+PPuPvd5//Hk++O+5znnDNio+/I9ALY3AoKEgCAhIEgICBICgoSA
      ICEgSAgIEgKChIAgISBICAgSAoKEgCAhIEgICBICgoSAICEgSAgIEgKChIAgISBICAgSAoKE
      gCAhIEgICBICgoSAICEgSAgIEgKChIAgISBICAgSAoKEgCAhIEgICBICgoSAICEgSAgIEgKC
      hIAgISBICAgSAoKEgCAhIEgICBICgoSAICEgSAgIEgKChIAgISBICAgSAoKEgCAhIEgICBIC
      goSAICEgSAgIEgKChIAgISBICAgSAoKEgCApyPbG4ODgVs6BbcpzzuV7BmxjnMIgISBICAiS
      XAJK9dZ7/+fVM7nsnpmL9w5cyGngpSFy2wb+yecRaKr/8CP1HWM38zgCVLkEVBUZd6tci4bM
      rG149Wuu//D6vy+zcOvvXOfFPYZrIEj8DCgzF4+1NlaWeJ7neSWVja2x+Fxm+b1Ub71X3RE3
      s1iz53n1vanba348deLI/uqyYm952f4jJ4ZmMtn2QL65DVvzFLYifaWvKfCf3QJNfVfSdxav
      CEWvOefczeG24FpDlrUN/7muXbHV/DoCpd5/pX1k3oLh2MT1BefcwvWJWDho8yPtLe8kbOl6
      alUL45EqM0t88FZsuqihZ3Tmr7RzzrmF3y+fDAfNbsS+GvNpUGh8CujSqQ/jZqF3z37auq+8
      0MwKy/e1nhyJhswSfQPZYqjt+sm5W6PdDRX3Lz2jKww8Fg4/aWaWTnMWuyf5E1Bq9FzSLNTy
      XM1dD2urIm+3md0Ym0hlWZeZGYocKLn7l6XmmJnZ5C9TvkwKUdan8ZLS8kqzeDrz76NGKpkw
      s5IHdqy5KjPW1fDse9NFpQdfbKnbU9u45+GHqg/UJrtLno/5MiU2gT8B7dj56C6ziS9OT0Zq
      Vh2EUqc/j5uV7d5Zuuaq80MD02bHPvv1k2dW1mQmhxO+jIjN4dM1UF34tZBZvPOpF3q/m100
      s8XZHz56qakjblbb/vLB1R9NXJ5cPlAVFz9oZt9/OzK7aGa2OP/zl5EnQp1xf0bE5tj4DdxG
      buOLGqJLt/HOOZcePHb79WDXeefSF3tqs425q+fienbFVvPth8SCmtfPXB3vP36oImBmVlRa
      deh4//jUN5E7p7SC5jc/Pro7YGb2x9xvC1ZQ1z16IXp0b2mRmZkFKh5/+o3o2eTXnUGz5LnR
      bFfeyCf+kQgJz8Ig+Qdh4uu6jcvouwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Historical Data Table' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Tornado - Day' width='192'>
      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
      ENGAlf8GkiQWCBwBb6AAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Tornado - Week' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Advertiser Tornados' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Tornado - Day %' width='192'>
      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
      ENGAlf8GkiQWCBwBb6AAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Tornado - Week %' width='192'>
      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
      wEAi7x7IA8YAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Advertiser Tornados by Percent' width='192'>
      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
      DMexk//N0gMAqKFJz98JZT0HVlMxn03nyWvIygCAiI1W3bNjp6i1oJjSXVTR8MPPvxZG3XSZ
      u/HwwT1N9fXA5y3duGfJBLvY1FxJC8Z2o2ZPHCVtsDg5zGLysoHSAwC6xhYKCPuXAwe++npb
      L6tbE48bNij7cjDWCnf2gt/4GfMBAIScpJiIm3eDWGyeQCTCaqjJyUBvT4+amhpaQQ2EvaCk
      oaUiJy8nxxe8XWEWEZO6YvGMQZm8nva9//tuydZDk5zM9fQNG2pJwwL05WDmwkWRCcTx9noA
      AIiYy+PzOX0cHp/d0ycpMO+rDQ8vEY788hNX7sNhEulsRF9FFgDqiMkBEf1K4/vXzuSW1Rw9
      sHPr/qPjZnol+h//OzjQfxlfgEEZm0lJLmqeN+0tcYNA6to8LEB/Eb4AAXo/+gVIIPiA4n8Y
      Q4OMjIys7PsWECKR+F2KqH8FhoMrDONPYZhED+NPYViAhvGnMCxAw/hTGBagYfwp9NtEdHQM
      NrqIjwybMHeJiqxMbUnOo8iECTMWTR3riAh7w2MyvRbO4jDIpy/5o2Tll6/dZGeqK7kEAE1D
      mwkjzEe6j5XYUWWkp0+cNNCnR1hf12JuYSy97u7uVlPrN5tm9XKq6pr/qoH+jVBVUbSz6I+M
      IRAI9PT03lOYzWaz2eyBObzOpudFLfOmuiFCTsDNG0wB5ptvNmMVZXOTn+o7TzfUwMSG+ueU
      kvUtR3671ksGQHIJAF5r1rM7ese5jwQAVmstuVdlpNWrR1Pq6vUszKX2bQNnHgByiwdbbn0k
      +gUIh3vNphzhd1cU5/DU7DYtnXThWdqZc+eTkxJxONyLiJicooplq1cpMcrGzdu0errdsTM+
      k34+CDjc5cujL/5x4X/f7SZm5agpyd7yve40eX5VRYWjhb5Yy6qpMKGcJp4z3tD77IPzP66K
      SMzfsnOnlgpm4KPrmmv3ng4a2jD+UXAbaXnvXH947zf/mYOgpKSkpPRaKOdHT4JKGlhrls2t
      THqIH71o80hsDYNtbmRSVl5W2SH7/fY1nRzU5cuXo++cI/cpjDFRWbd1v/L1C2PW7jNSYmdn
      kShVxCRiw0J345ZOlIBYNH6Und+tu9OXrLtz5dyCHQfrc5IMHCctmDYOXv/R954+NrTBvv0T
      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
    </thumbnail>
  </thumbnails>
</workbook>
