<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.0914.1345                -->
  <repository-location id='SCAAdvertiserReportbyAdUnit' path='/workbooks' revision='1.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='Only Full Time Frames' datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;False&quot;'>
        <calculation class='tableau' formula='&quot;False&quot;' />
        <members>
          <member value='&quot;True&quot;' />
          <member value='&quot;False&quot;' />
        </members>
      </column>
      <column caption='Breakdown' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
        <calculation class='tableau' formula='&quot;Site&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Advertiser&quot;' />
          <member value='&quot;Site&quot;' />
          <member value='&quot;Ad Unit Type&quot;' />
          <member value='&quot;Ad Unit&quot;' />
          <member value='&quot;Product Category&quot;' />
        </members>
      </column>
      <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
        <calculation class='tableau' formula='&quot;CVR&quot;' />
        <members>
          <member value='&quot;AOV&quot;' />
          <member value='&quot;ConvPM&quot;' />
          <member value='&quot;CPA&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;CVR&quot;' />
          <member value='&quot;ROAS&quot;' />
          <member value='&quot;RPC&quot;' />
          <member value='&quot;RPM&quot;' />
        </members>
      </column>
      <column caption='Aggregation Level' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column caption='Week Start' datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
        <calculation class='tableau' formula='&quot;Sunday&quot;' />
        <members>
          <member value='&quot;Sunday&quot;' />
          <member value='&quot;Monday&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='sca_advertiser_report_by_ad_unit' inline='true' name='vertica.41285.366335358798' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;a.date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Ad Unit&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(a.impression_count) Impressions,&#13;&#10;&#9;sum(a.click_count) Clicks,&#13;&#10;&#9;sum(a.actual_cpc_sum) Cost,&#13;&#10;&#9;sum(a.click_conversion_count) Conversions,&#13;&#10;&#9;sum(a.click_conversion_value_sum) Revenue&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations a&#9;&#13;&#10;left join intent_media_production.entities e on e.id = a.advertiser_id&#9;&#13;&#10;left join intent_media_production.ad_units au on au.id = a.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.campaigns c on c.id = a.campaign_ID&#13;&#10;where &#13;&#10;        e.name in&#13;&#10;                (&#13;&#10;                &apos;Alaska Airlines&apos;,&#13;&#10;                &apos;American Airlines&apos;,&#13;&#10;                &apos;CheapTickets-Ads&apos;,&#13;&#10;                &apos;Expedia-Ads&apos;,&#13;&#10;                &apos;FlightNetwork&apos;,&#13;&#10;                &apos;Hotwire-Ads&apos;,&#13;&#10;                &apos;JetBlue&apos;,&#13;&#10;                &apos;Orbitz-ads-on-Network&apos;,&#13;&#10;                &apos;Travelocity-Ads&apos;,&#13;&#10;                &apos;United Airlines&apos;,&#13;&#10;                &apos;Vayama&apos;,&#13;&#10;                &apos;Virgin America&apos;&#13;&#10;                )&#13;&#10;and ((a.date_in_et &gt;&gt; &apos;2011-05-23&apos; and s.name = &apos;ORBITZ_GLOBAL&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2011-06-02&apos; and s.name = &apos;CHEAPTICKETS&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2011-06-22&apos; and s.name = &apos;EXPEDIA&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-02-27&apos; and s.name = &apos;VAYAMA&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-02-29&apos; and s.name = &apos;BUDGETAIR&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-11-21&apos; and s.name = &apos;HOTWIRE&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2013-03-03&apos; and s.name = &apos;KAYAK&apos;)&#13;&#10;or s.name not in (&apos;ORBITZ_GLOBAL&apos;, &apos;CHEAPTICKETS&apos;, &apos;EXPEDIA&apos;, &apos;VAYAMA&apos;, &apos;BUDGETAIR&apos;, &apos;HOTWIRE&apos;, &apos;KAYAK&apos;))&#13;&#10;group by &#13;&#10;&#9;a.date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end),&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;display_format&#13;&#10;&#9;&#13;&#10;&#9;&#13;&#10;union&#13;&#10;---------------------------------Hotel--------------------&#13;&#10;&#13;&#10;select&#13;&#10;&#9;a.date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Ad Unit&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(a.impression_count) Impressions,&#13;&#10;&#9;sum(a.click_count) Clicks,&#13;&#10;&#9;sum(a.actual_cpc_sum) Cost,&#13;&#10;&#9;sum(a.click_conversion_count) Conversions,&#13;&#10;&#9;sum(a.click_conversion_value_sum) Revenue&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations a&#9;&#13;&#10;left join intent_media_production.entities e on e.id = a.advertiser_id&#9;&#13;&#10;left join intent_media_production.ad_units au on au.id = a.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.campaigns c on c.id = a.campaign_ID&#13;&#10;where &#13;&#10;        e.name in&#13;&#10;                (&#13;&#10;                &apos;Alaska Airlines&apos;,&#13;&#10;                &apos;American Airlines&apos;,&#13;&#10;                &apos;CheapTickets-Ads&apos;,&#13;&#10;                &apos;Expedia-Ads&apos;,&#13;&#10;                &apos;FlightNetwork&apos;,&#13;&#10;                &apos;Hotwire-Ads&apos;,&#13;&#10;                &apos;JetBlue&apos;,&#13;&#10;                &apos;Orbitz-ads-on-Network&apos;,&#13;&#10;                &apos;Travelocity-Ads&apos;,&#13;&#10;                &apos;United Airlines&apos;,&#13;&#10;                &apos;Vayama&apos;,&#13;&#10;                &apos;Virgin America&apos;&#13;&#10;                )&#13;&#10;group by &#13;&#10;&#9;a.date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end),&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;display_format&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
      </column>
      <column datatype='string' name='[Breakdown Measure]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;    WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;    WHEN &quot;Ad Unit Type&quot; THEN [Type of Ad Unit]&#13;&#10;    WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;    WHEN &quot;Site&quot; THEN [Site]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;    WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
      </column>
      <column caption='Ref Day' datatype='date' name='[Calculation_6780307222813543]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='TODAY()-1' />
      </column>
      <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 4]&#13;&#10;    WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;    WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;DESKTOP&quot;' value='Desktop' />
          <alias key='&quot;MOBILE&quot;' value='Mobile' />
        </aliases>
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Calculation_6780307222813543]&#13;&#10;WHEN &quot;Week&quot; THEN &#13;&#10;(CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Monday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Calculation_6780307222813543]) = 1 THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Calculation_6780307222813543]))) END)&#13;&#10;    WHEN &quot;Sunday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Calculation_6780307222813543]) = 7 THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Calculation_6780307222813543]))-1) END)&#13;&#10;END)&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Calculation_6780307222813543] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Calculation_6780307222813543]))) THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Calculation_6780307222813543]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Metric Measure]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;    WHEN &quot;AOV&quot; THEN [AOV]&#13;&#10;    WHEN &quot;ConvPM&quot; THEN [ConvPM]&#13;&#10;    WHEN &quot;CPA&quot; THEN [CPA]&#13;&#10;    WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;    WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;    WHEN &quot;CVR&quot; THEN [CVR]&#13;&#10;    WHEN &quot;ROAS&quot; THEN [ROAS]&#13;&#10;    WHEN &quot;RPC&quot; THEN [RPC]&#13;&#10;    WHEN &quot;RPM&quot; THEN [RPM]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[Breakdown Measure]' derivation='None' name='[none:Breakdown Measure:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='E:\MS_Tableau_Repository\aft_advertiser_report_by_ad_unit.tde' schema='Extract' tablename='Extract' update-time='2/19/2015 8:18:29 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_7290813154107329]' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='270939' timestamp-start='2015-02-19 20:18:28.731000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.334566' measure-ordering='alphabetic' measure-percentage='0.388786' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Breakdown Measure:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;BudgetAir&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Delta&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Mobissimo&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Aeromexico&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AirFastTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AirTkt&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Alaska Airlines&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Total Exit Units&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Travelzoo&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Vayama&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Webjet&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Airfarewatchdog&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Expedia-Ads&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;SmartFares&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Media Fill In&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cathay Pacific - Canada&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Jetsetz&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Virgin America&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;British Airways&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;HOTWIRE_MEDIA_FILL_IN&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Kayak&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Student Universe&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity-Ads&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Apple Vacations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hawaiian Airlines&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hotwire&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Orbitz-ads-on-Network&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Trip.com Hotels path&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;AirTicketsDirect&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Expedia.ca&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Fly.com&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;South African Airlines&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Edreams&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;One Travel&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Air Canada&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AirTickets.co.uk&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;OWW-ads-on-CTIX&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;TravelJunction&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Bookit&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Frontier Airlines&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Virgin Atlantic&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;FlightHub&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Kayak Software Corporation - Ads&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travel Ticker&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;BMI&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Expedia IAB&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Gogobot&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Hawaiian Airlines - JFK Launch&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;JetBlue&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;LowFares&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;CheapOair&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Hotels.com&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Priceline&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Emirates Airlines&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Expedia&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotwire-Ads&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Starwood Hotels&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Trip.com Flights path&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;DealBase&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;LAN Airlines&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;TripAdvisor&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;BudgetAir.ca&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;KAYAK&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;LowCostAirlines&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelation&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;United Airlines&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cathay Pacific&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;La Quinta &quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;OneTravel&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity.ca&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Air Canada - Marketel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;American Airlines&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;CheapAir&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total List Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Traveljunction&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Trip.com&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Webjet.ca&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Explore Trip&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;FareSpotter&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;FlightNetwork&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Globester&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hilton Hotels&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Air France&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;CheapTickets-Ads&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Qatar Airways&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Only Full Time Frames' datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;False&quot;'>
          <calculation class='tableau' formula='&quot;False&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Breakdown' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
          <calculation class='tableau' formula='&quot;Site&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Advertiser&quot;' />
            <member value='&quot;Site&quot;' />
            <member value='&quot;Ad Unit Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Product Category&quot;' />
          </members>
        </column>
        <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
          <calculation class='tableau' formula='&quot;CVR&quot;' />
          <members>
            <member value='&quot;AOV&quot;' />
            <member value='&quot;ConvPM&quot;' />
            <member value='&quot;CPA&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;CTR&quot;' />
            <member value='&quot;CVR&quot;' />
            <member value='&quot;ROAS&quot;' />
            <member value='&quot;RPC&quot;' />
            <member value='&quot;RPM&quot;' />
          </members>
        </column>
        <column caption='Aggregation Level' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column caption='Week Start' datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
          <calculation class='tableau' formula='&quot;Sunday&quot;' />
          <members>
            <member value='&quot;Sunday&quot;' />
            <member value='&quot;Monday&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='vertica.41285.366335358798'>
      <datasources>
        <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
          <members>
            <member value='true' />
            <member value='false' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='vertica.41285.366335358798'>
        <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
        </column>
        <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;DESKTOP&quot;' value='Desktop' />
            <alias key='&quot;MOBILE&quot;' value='Mobile' />
          </aliases>
        </column>
        <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
        <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Advertiser Name:nk]'>
        <groupfilter expression='([Parameters].[Parameter 2] AND SUM([Conversions]) &gt; 0) OR (NOT [Parameters].[Parameter 2])' function='filter' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[none:Advertiser Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Advertiser Segment:nk]'>
        <groupfilter function='level-members' level='[none:Advertiser Segment:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_7290813154107329:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[vertica.41285.366335358798].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Display Type:nk]'>
        <groupfilter function='member' level='[none:Display Type:nk]' member='&quot;DESKTOP&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Data by Ad Unit'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Ad Unit:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Ad Unit:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Ad Unit Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='272' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Type of Ad Unit:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Advertiser'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Advertiser Name:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Advertiser and Ad Unit Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='148' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='128' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41285.366335358798].[none:Advertiser Name:nk] / [vertica.41285.366335358798].[none:Type of Ad Unit:nk])</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Site'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Site:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Site:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Site:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Full Data Table'>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[vertica.41285.366335358798].[none:Ad Unit:nk]' direction='ASC' />
          <sort class='alphabetic' column='[vertica.41285.366335358798].[none:Advertiser Name:nk]' direction='ASC' />
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='108' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='108' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41285.366335358798].[none:Advertiser Name:nk] / ([vertica.41285.366335358798].[none:Type of Ad Unit:nk] / [vertica.41285.366335358798].[none:Ad Unit:nk]))</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Longitudinal Graph'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sca_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
            <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
              <calculation class='tableau' formula='&quot;CVR&quot;' />
              <members>
                <member value='&quot;AOV&quot;' />
                <member value='&quot;ConvPM&quot;' />
                <member value='&quot;CPA&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;CVR&quot;' />
                <member value='&quot;ROAS&quot;' />
                <member value='&quot;RPC&quot;' />
                <member value='&quot;RPM&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Measure]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;    WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;    WHEN &quot;Ad Unit Type&quot; THEN [Type of Ad Unit]&#13;&#10;    WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;    WHEN &quot;Site&quot; THEN [Site]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;    WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 4]&#13;&#10;    WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;    WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='real' name='[Metric Measure]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;    WHEN &quot;AOV&quot; THEN [AOV]&#13;&#10;    WHEN &quot;ConvPM&quot; THEN [ConvPM]&#13;&#10;    WHEN &quot;CPA&quot; THEN [CPA]&#13;&#10;    WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;    WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;    WHEN &quot;CVR&quot; THEN [CVR]&#13;&#10;    WHEN &quot;ROAS&quot; THEN [ROAS]&#13;&#10;    WHEN &quot;RPC&quot; THEN [RPC]&#13;&#10;    WHEN &quot;RPM&quot; THEN [RPM]&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Measure]' derivation='None' name='[none:Breakdown Measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Metric Measure]' derivation='User' name='[usr:Metric Measure:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Breakdown Measure:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Breakdown Measure:nk]' to='&quot;Webjet.ca&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[vertica.41285.366335358798].[none:Breakdown Measure:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[Parameters].[Parameter 3]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' value='Include the following:'>
              <formatted-text>
                <run>Include the following:</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Parameters].[Parameter 3] * [vertica.41285.366335358798].[usr:Metric Measure:qk])</rows>
        <cols>[vertica.41285.366335358798].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Data </run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='4000' maxwidth='3000' minheight='4000' minwidth='3000' />
      <zones>
        <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='21' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1000' id='20' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98900' id='10' param='horz' type='layout-flow' w='100000' x='0' y='1000'>
              <zone h='98900' id='8' param='vert' type='layout-flow' w='90767' x='0' y='1000'>
                <zone h='98900' id='6' type='layout-basic' w='90767' x='0' y='1000'>
                  <zone h='43849' id='1' name='Data by Ad Unit' show-title='true' w='90767' x='0' y='1000'>
                  </zone>
                  <zone h='6671' id='2' name='Data by Ad Unit Type' show-title='true' w='90767' x='0' y='44849'>
                  </zone>
                  <zone h='15455' id='3' name='Data by Site' show-title='true' w='90767' x='0' y='51520'>
                  </zone>
                  <zone h='10094' id='4' name='Data by Advertiser' show-title='true' w='90767' x='0' y='66975'>
                  </zone>
                  <zone h='22831' id='5' name='Data by Advertiser and Ad Unit Type' show-title='true' w='90767' x='0' y='77069'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='277' h='98900' id='9' is-fixed='true' param='vert' type='layout-flow' w='9233' x='90767' y='1000'>
                <zone h='1550' id='19' param='[Parameters].[Parameter 2]' type='paramctrl' w='9233' x='90767' y='1000'>
                  <formatted-text>
                    <run>Only Include Advertisers &#10;with Conversions</run>
                  </formatted-text>
                </zone>
                <zone h='1175' id='12' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Date:qk]' type='filter' w='9233' x='90767' y='2550'>
                </zone>
                <zone h='2050' id='22' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' w='9233' x='90767' y='3725'>
                </zone>
                <zone h='2050' id='23' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' w='9233' x='90767' y='5775'>
                </zone>
                <zone h='2500' id='18' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Advertiser Segment:nk]' type='filter' w='9233' x='90767' y='7825'>
                </zone>
                <zone h='7975' id='16' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' w='9233' x='90767' y='10325'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Longitudinal'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 3]</run>
            <run>&gt;</run>
            <run> by </run>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 1]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='800' maxwidth='1800' minheight='800' minwidth='1800' />
      <zones>
        <zone h='100000' id='8' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='13' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5000' id='12' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='5000'>
              <zone h='95000' id='2' type='layout-basic' w='69945' x='0' y='5000'>
                <zone h='95000' id='1' name='Longitudinal Graph' show-title='true' w='53967' x='0' y='5000'>
                </zone>
                <zone h='95000' id='6' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' w='15978' x='53967' y='5000'>
                </zone>
              </zone>
              <zone fixed-size='258' h='95000' id='20' is-fixed='true' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' w='14777' x='69945' y='5000'>
              </zone>
              <zone fixed-size='275' h='95000' id='3' is-fixed='true' param='vert' type='layout-flow' w='15278' x='84722' y='5000'>
                <zone h='6250' id='22' param='[Parameters].[Parameter 2]' type='paramctrl' w='15278' x='84722' y='5000'>
                </zone>
                <zone h='12500' id='21' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Segment:nk]' type='filter' w='15278' x='84722' y='11250'>
                </zone>
                <zone h='6250' id='14' param='[Parameters].[Parameter 3]' type='paramctrl' w='15278' x='84722' y='23750'>
                </zone>
                <zone h='6250' id='7' param='[Parameters].[Parameter 1]' type='paramctrl' w='15278' x='84722' y='30000'>
                </zone>
                <zone h='6250' id='16' param='[Parameters].[Parameter 4]' type='paramctrl' w='15278' x='84722' y='36250'>
                </zone>
                <zone h='6250' id='19' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='15278' x='84722' y='42500'>
                </zone>
                <zone h='5875' id='5' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Date:qk]' type='filter' w='15278' x='84722' y='48750'>
                </zone>
                <zone h='10250' id='23' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' w='15278' x='84722' y='54625'>
                </zone>
                <zone h='10250' id='24' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' w='15278' x='84722' y='64875'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Full Data Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' />
            <card param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_7940122120432406:nk]</field>
          <field>[vertica.41285.366335358798].[none:Display Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Ad Unit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Display Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Ad Unit Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Site'>
      <cards>
        <edge name='left'>
          <strip size='204'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Advertiser'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_0850103115759288:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Advertiser and Ad Unit Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41285.366335358798].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Data'>
      <active id='1' />
      <zones>
        <zone name='Data by Ad Unit'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Ad Unit Type'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Site'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Advertiser'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Advertiser and Ad Unit Type'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Longitudinal Graph'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='216'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 3]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' />
            <card param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 3]</field>
          <field>[mysql.41257.666202546294].[none:Calculation_4941214180119641:nk]</field>
          <field>[mysql.41257.666202546294].[none:Date:qk]</field>
          <field>[mysql.41257.666202546294].[yr:Calculation_0901219093823857:ok]</field>
          <field>[mysql.41257.666202546294].[yr:Date:ok]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Filter:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Name:nk]</field>
          <field>[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[vertica.41285.366335358798].[usr:Calculation_4710503154146517:nk]</field>
          <field>[vertica.41285.366335358798].[usr:Calculation_9380408101708281:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Longitudinal'>
      <zones>
        <zone name='Longitudinal Graph'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Longitudinal Graph' pane-specification-id='0' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' />
        <zone name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' values='relevant' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 4]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Full Data Table' width='192'>
      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
      je8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Data by Ad Unit' width='192'>
      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
      BEDNS+IwlKJWbzTmJIZ8ctrj/IaU5DcRd6OrE4IacYfNIFL5HFN9cDbm3WFmGjoA+D6P5oOR
      URd00zIQtMU5OOZosZCOGkHfMohC6IcCE6BpghrBs/3iI0V34zXdCIMWRlmrK4sPuo1ZWXBN
      3lN6LFUCfWKaBPBsVNxWJMQUnIMGxW1jfr1B08CXJJMdcV34lR0LRbXOc2PFgFfZaKHVbNAM
      JUAQAFG565k3VUZiulmXJEolhBgWM8GrNPKb81EMEAsE00zThcrLb1dR7cmgKxzGlEIpJWMM
      EqUSkltPvWkPiMkyVHQVswnd6MqOZMNUdriQqHoNrwNPPpoHw2HDNzlhb2lgINBkfSV1DSIF
      QgqaAtFVxUfHZU+qOMjdn5M9SQ2QYAW8wUYL5mJ+2Rirar2VH2WtjhoZIiJA0IAkEUkz4dcs
      lmNpQtL0qrHUBMv7y7mtY5yLwuhItSkKrtPoKJ2AQ0AlRLY5yTALIpJmFtEbzUZhc6FabxS3
      vX+u9LVRPQFptpxYuMwNsezGL3ND/I+Vl7XMr53Lgql8urz3nw6H4XntzVg3Uu3Z9tyr9d4t
      qfC1ZnmqMsLsr3/zb5MLg1YqhafE7hf3nk9t6P24lLo76714OHkL4zNhaXKvftemBRWVt79k
      3e16U2XtYhJ0mvWfq+QNVX+1rn1MU2cGrJW4Z381a0P7pApDtW9/KZ8b2fWfvt6caVvU6ryu
      9ESJ4PzFM/NxMmCsUH/9H7/dnOEb7l0nevLiGRXj+W6nO7gqJU+0B2CQnxD6ykHRkb3OrL7K
      xjgUJ7r2Gtv74R7vWDMIYu3NeEBLibl2eKp38Rx2lYrDQJ0b/NVNXq4TFYiJ7++5+NbFvS8c
      wjgo7TuU37ylWS3v+eFhPN0p/feqmvPrc2oJFRr5K+VKMxTHDrUjPXv74J4flObDbmnvPqXU
      oSPNTfe51w6mBnP+t5/dQyn93g9KA2c6e/d5+c1b6i+XK0fb8cnmvn/y4xNHglvXpc6I3c/t
      DcJw3z/VR+4bXXJaz2XHISpMQHaqMmBqf4kOs0atQTpqxADEPgD0z/ZBJ9Wp3STNOJcj20g/
      7mOCKuClMDBlQyApaIQfq1nDORXK8v6SCIQKlBANSKyq1sdBirGUsf7kH45HMaIKylOtaF4t
      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
      13S9+v8BOB1f2pwcwtMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Data by Ad Unit Type' width='192'>
      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
      gv8DAgCnmFcJiwQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Data by Site' width='192'>
      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
    </thumbnail>
    <thumbnail height='64' name='Data by Advertiser' width='192'>
      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
      kUKKLTIvMQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='64' name='Data by Advertiser and Ad Unit Type' width='192'>
      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
      1s/QXzkD/Q7ybqp4ge+/wgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Data' width='192'>
      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
      PhzJ3apcrpFBxXn9pC7PVNTMdl6EC0ZibRSt1i5iro3DhGPRgtquLe/ZW5iNcbVj4RQKTyUE
      7qtmMCmVz7RGWVQss8xXkA7UtAyXIzwZEgsW9pQtEXcALblZAkxwxhgDNR1Ex5tmA+sr+MDH
      anxKUYzmFEjJrAWWY+Wdsr7cEFL5HGJtBsJVvnKdwbqOZdFnQGrm/aeyAcDGse5tx1sZb0tG
      9aNhbe/CtmWhjDXQmC0xdqLHbIlfT0Tr443G8UZ08hwR3UVznog2+mQU/pKIxpa2PYxO4vCr
      /gMTnbioIhogPHKxRPRy/ZnjRoChzOVTPststIa13eX6sUiVAp7ZYH4h1hjMqYNL9fUIoqYO
      5ueBICgId0Yd/PKj5Ei/IIUzAHCXnj7YaGpZUmwTg9/fTwYDzsKTGEyrET+svphgKzq4FJZv
      u3gayCL2UPchKGzTAc8aiTbGVbRgUXgqeRVYlpAjlMd0G2UxYJllBR9SUtMyXNZ48hnKzS7s
      LhMRd0AnJCAZTApxVkQ3ko24HuH+u+Z5UTEg3TZSSubAf+AJBADYRbXzYp5geCSsjTKd402M
      negxW2K8CxuzJc7vWDgscD7HQjjzViEA1A8vOZcLwXPYiiZy0nRPv/5nrTWxGb4HGD0Xxr04
      TidlIac72tvhYRdt34odwlpiToYv9uPO2sr32m8ZZRoeqdufprGluNull+NubN2f9cPmWl7I
      3BUOZIQvpoIzuCitWDKqP/NsOkiJJiZoM2p1+y/qOLbdH9li7rX6P69lg376s4ludyQlyWfA
      VmTTCTdLv/lvbQFWv9jvvtjzrnCfPRqmp/r2pf7Kd7sXtmMhtqJuTPGLXXmtjL4V6h/E8U/S
      nl7LexKfP7/ZiiW+ulzHk2gdAek6ZS4r+EHBXTq2+sQXHtUdrZRa/Gojjg4tfHLRaM0Yqz+9
      iIkIivy+e2rkiFWN1Tm1+PSh1Zxttgfz5VlwQHIup8XBzy9SPpHTd7N0HZh48qsHVrVRRWWN
      rn3sAZ+BujlQUoRrRhaMtXbfPQtxC5NNxB7p1gFgnGexbg/U3KxZa6hdZdtF48jqjNx377YU
      hxDZnkZiQYHUnnk89uTAYmX3/bgWBYUAj69igcmcGzbXR1oTTSmhQcwSS3DoWD3KVO22YP72
      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
    </thumbnail>
    <thumbnail height='192' name='Longitudinal Graph' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAHiklEQVR4nO3dwYsb9xXA8ZcygSdQYQR7kGANK3CgKulBhkLT
      Ww2+GHpojgk9lBxL/4NeQw4hxyWHsOQQuj4U5MNi+WDQHmxWhpgdQxZPwYYR1LBzEOh3EOhB
      BtyDQ9fZnXFsv7G8Wn0/h9gxy+p3+CL99HsazXvPnj0T4E396l0vAKstev5HCOEXf3QWZq24
      9ZbXgxXzU0BxHP/yzxav9mNYJ7yEwYWA4FIdUPHCf4EK5QGFSfLPL7ZDIaO93c+/3B7uj5e8
      LKyK8oBUtRGJhTx9Ort+7Y9hOrO5WWFLXhzOv/de/SAxTEO8wbsw/AybaLgQEFwICC4EBBcC
      ggsBwYWA4FIZUHI/EZH0YWKF5Hm+xCVhlZQHZE+Tg+Qwn4tGMtwb3tofWTAzTqJxWsUoY6Pb
      0pYUYZykvQ+6nbitsarqkheH849RBlzYRMOFgOBCQHAhILgQEFwICC4EBJeKgAob309EJHkw
      zidZNmGUgXIVV2U8SR79kIVCYtVsasn3h4wyUKo8oHiz22iqzEOSpBpZfKnDKAOlGGXAhU00
      XAgILgQEFwKCCwHBhYDgQkBwqQjIwu53AytkfGc4vp+M7iXLXRVWRsVVGdNsYRZM2p1Ou91p
      qDLKQKmo9F+13f/tZdMiPPrvcaNl2ow1Vi0YZeA0RhlwYRMNFwKCCwHBhYDgQkBwISC4EBBc
      yg8SRWRwYzf+oNdRyY5nIc8/+esny1wWVkVlQBqpzWb260an05V5YJSBUpUn0SEEVbV5kChW
      FVXlJBpnVT4DPb85oWp7iYvB6mETDRcCggsBwYWA4EJAcCEguBAQXCo/VP/5F18Fk9HtwfY3
      u7s3h0teFlbFy0YZM7MQrNOOpRBGGSj1slFG3NQQgmosEaMMlOOqDLiwiYYLAcGFgOBCQHAh
      ILgQEFwqA8qeZCJic7N5yKdhiUvCKqm61cF4cHscChl8uzPcH93aG9rcrOAkGqdVfD/QRluj
      TMx6H/a008qapqpqfD8QTuMkGi5souFCQHAhILgQEFwICC4EBBcCgkvlrQ6Gt0cikj5MskmW
      HGVLXRRWR/lJdJikx3kIhaRJqptxmEtvs8OH6nFWeUDxVq/1eCFm/d/3LRIz4VYHKMUoAy5s
      ouFCQHAhILgQEFwICC4EBBcCgkvlKGOwNxKR9EGSTdLRvfFSF4XVUR5QPkln0xAKSdO0tdFp
      Ndt8PxBKlY8y2lv9TvbTKEPms+6HXY2EUQbOYpQBFzbRcCEguBAQXAgILgQEFwKCCwHBpfJW
      B9tf75rI8MYgOUqSh+mSl4VVUX4SbfNcIrVCVDV9nIppb6vLKANnVZ5Ep/9Ju5tdM1OV42Dd
      zTYn0TiLUQZc2ETDhYDgQkBwISC4EBBcCAgulQGdHBsWIsWSVoOVU3Grg0ny1Zc7VsjO1zvD
      vd3hXa7KQLnygFRVVMPculud3u/6FmbcKwOlOImGC5touBAQXAgILgQEFwKCCwHBhYDgUhFQ
      IeP7YxEJT3MRyfN8mWvCCqm4KiNPDpNH+VyGe7eSo+TWnRHfD4RSVXdt7raamRTW71/RjU6n
      PeNWByjFKAMubKLhQkBwISC4EBBcCAguBAQXAoJL1SjDxvcSEcknWZ7n2YRRBspVXJXxJHmU
      ZqGQ0Z2RNDX5/pBRBkqVBxRv9hpNFbN+/8piety51NFYVRll4DRGGXBhEw0XAoILAcHlhc8D
      mYVCpLA4ZqODV3XyDDS+ezD897+ML+LA6zgJSCPRuLWYc9iD13ASUK9/JY4k2OIdrgYr5ySg
      9OhQmp04bomIzMPud7tWSLI/zibp6F7yzhaI8+2Fd2FRQ2SRPz0WEZsfH+ezYDYLMytEImGU
      gVI/P4kuTt6WhWnQpoqImZlJux1zEo2zoqr/+38rjMDwEhwkwoWA4EJAcCEguBAQXAgILpUB
      hTx/Plg14wjxojGT0ZNQy68q/3oXETm4O5KN9pVLjcNMjp8cfvq3z/im+gsjzcP2fnb1ct//
      qyoDkkj1/Ubc7ramM73c00g14kQRp1UGdP0vHz//y0d/aIv0lrUerBg20XAhoLVVz46WgNZV
      TZ9dJqB1ZHU9/xDQmqrvNqYEtKZ4BsKbWyzhGSibZCJic7N5yKf1HHvj/Fi81YDsaTq4OcxN
      Bt/uDMcHB3cPzLjp7sVhhVlRz/VbFbc6iFsaqZh1f9OTVmMmC0YZF0mN1x9XjDKa7b//4zMR
      aV+7WttD4TypqyE20WupEPmxnt9EQOvIeAaCSyELZmF4Y4tiwUk03OpoiIDWkf0oUtM0g4DW
      VEP1bT4DWRjeHonIeH+UPEySo7SGh8K5YYXo+/W8ESs/SAyT9DgPwWwWsvRBFm80eptdLu65
      SGIVExPxThfKA4q3eq3HCyms1exc/VNHNOauzReJFdKIGrW8hFWMMjT++M9XReSja9dreBCc
      N4VpVM9Ank30OlqIqGoteyACWkuFaPUlpa+FgNaRiTQiqeUDXgS0lgpewuBgz1/CCAhvylqR
      1PKZVgJaR1aIvtVRhk2z7W92rZDBjZ3BzeFwf1zDQ+E80be6ibaQq6gVpiqHR6mFGbc6uEgW
      9c3C/gcRsze72zrjeQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Longitudinal' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
