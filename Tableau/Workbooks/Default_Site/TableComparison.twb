<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.0408.1805                -->
  <repository-location id='TableComparison' path='/t/PreQA/workbooks' revision='1.2' site='PreQA' />
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='table_comparison' inline='true' name='vertica.41690.681263969906' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>-- advertiser_account_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;advertiser_account_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.advertiser_account_report_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- advertiser_ad_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;advertiser_ad_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id,&#9;&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.advertiser_ad_report_aggregations&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;), ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- advertiser_revenue_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;advertiser_revenue_aggregations&apos; as table_name,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and product_category_type = &apos;FLIGHTS&apos; then &apos;AfT Flights&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and product_category_type = &apos;HOTELS&apos; then &apos;Hotel AfT&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;SSR&apos; and product_category_type = &apos;HOTELS&apos; then &apos;SSN&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;META&apos; then &apos;Hotel Meta&apos;&#13;&#10;&#9;&#9;else &apos;Unknown&apos;&#13;&#10;&#9;end) as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(amount) as gross_media_revenue&#13;&#10;from intent_media_production.advertiser_revenue_aggregations&#13;&#10;left join intent_media_production.ad_units on ad_units.id = advertiser_revenue_aggregations.ad_unit_id&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;), ad_unit_id, ad_type, product_category_type, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- advertiser_slot_performance_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;advertiser_slot_performance_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.advertiser_slot_performance_report_aggregations&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;), ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- advertiser_travel_window_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;advertiser_travel_window_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.advertiser_travel_window_report_aggregations&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;), ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- air_ct_advertiser_performance_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;air_ct_advertiser_performance_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;AfT Flights&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;cast(null as int) as ad_unit_id,&#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- air_ct_auction_position_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;air_ct_auction_position_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;AfT Flights&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.air_ct_auction_position_performance_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- air_ct_impression_share_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;air_ct_impression_share_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;AfT Flights&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;cast(null as int) as ad_unit_id,&#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_production.air_ct_impression_share_report_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- air_ct_media_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;air_ct_media_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;AfT Flights&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impresions,&#13;&#10;&#9;sum(gross_revenue_sum) as gross_media_revenue&#13;&#10;from intent_media_production.air_ct_media_performance_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- air_ct_placement_type_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;air_ct_placement_type_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;AfT Flights&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.air_ct_placement_type_performance_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_ct_advertiser_performance_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_ct_advertiser_performance_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel AfT&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_ct_impression_share_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_ct_impression_share_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel AfT&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_ct_impression_share_report_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_ct_media_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_ct_media_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel AfT&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(gross_revenue_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_ct_media_performance_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_ct_placement_type_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_ct_placement_type_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel AfT&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_ct_placement_type_performance_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_meta_advertiser_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_meta_advertiser_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel Meta&apos; as product,&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;ad_unit_id, &#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;sum(actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations&#13;&#10;where date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date_in_et, ad_unit_id, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_meta_media_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_meta_media_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel Meta&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(gross_revenue_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_meta_media_performance_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- hotel_meta_position_media_performance_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;hotel_meta_position_media_performance_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;Hotel Meta&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(gross_revenue_sum) as gross_media_revenue&#13;&#10;from intent_media_production.hotel_meta_position_media_performance_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- impression_share_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;impression_share_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;cast(null as int) as ad_unit_id,&#13;&#10;&#9;advertiser_id, &#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;sum(impression_count) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_production.impression_share_report_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- publisher_market_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;publisher_market_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;cast(null as int) as ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_production.publisher_market_report_aggregations&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;)&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- publisher_performance_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;publisher_performance_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;aggregation_level_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;sum(ad_call_count) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(gross_actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.publisher_performance_report_aggregations&#13;&#10;where aggregation_level_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by aggregation_level_date_in_et, ad_unit_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- publisher_slot_performance_report_aggregations&#13;&#10;select&#13;&#10;&#9;&apos;publisher_slot_performance_report_aggregations&apos; as table_name,&#13;&#10;&#9;&apos;SSN&apos; as product,&#13;&#10;&#9;date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) as date_in_et,&#13;&#10;&#9;cast(null as int) as ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(gross_actual_cpc_sum) as gross_media_revenue&#13;&#10;from intent_media_production.publisher_slot_performance_report_aggregations&#13;&#10;where date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;) between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;group by date(aggregation_level at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;)&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- ad_calls&#13;&#10;select&#13;&#10;&#9;&apos;ad_calls&apos; as table_name,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when ad_unit_type = &apos;CT&apos; and product_category_type = &apos;FLIGHTS&apos; then &apos;AfT Flights&apos;&#13;&#10;&#9;&#9;when ad_unit_type = &apos;CT&apos; and product_category_type = &apos;HOTELS&apos; then &apos;Hotel AfT&apos;&#13;&#10;&#9;&#9;when ad_unit_type = &apos;SSR&apos; and product_category_type = &apos;HOTELS&apos; then &apos;SSN&apos;&#13;&#10;&#9;&#9;when ad_unit_type = &apos;META&apos; then &apos;Hotel Meta&apos;&#13;&#10;&#9;&#9;else &apos;Unknown&apos;&#13;&#10;&#9;end) as product,&#13;&#10;&#9;requested_at_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;cast(null as int) as advertiser_id,&#13;&#10;&#9;count(1) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_log_data_production.ad_calls &#13;&#10;where requested_at_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;&#9;and ip_address_blacklisted = 0&#13;&#10;&#9;and ((ad_unit_type = &apos;SSR&apos; and outcome_type = &apos;SERVED&apos;) or (ad_unit_type != &apos;SSR&apos;))&#13;&#10;group by requested_at_date_in_et, ad_unit_id, ad_unit_type, product_category_type&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- impressions&#13;&#10;select&#13;&#10;&#9;&apos;impressions&apos; as table_name,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and product_category_type = &apos;FLIGHTS&apos; then &apos;AfT Flights&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and product_category_type = &apos;HOTELS&apos; then &apos;Hotel AfT&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;SSR&apos; and product_category_type = &apos;HOTELS&apos; then &apos;SSN&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;META&apos; then &apos;Hotel Meta&apos;&#13;&#10;&#9;&#9;else &apos;Unknown&apos;&#13;&#10;&#9;end) as product,&#13;&#10;&#9;requested_at_date_in_et as date_in_et,&#13;&#10;&#9;ad_unit_id,&#13;&#10;&#9;advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;count(1) as impressions,&#13;&#10;&#9;cast(null as float) as gross_media_revenue&#13;&#10;from intent_media_log_data_production.impressions&#13;&#10;left join&#13;&#10;    (&#13;&#10;      select ad_type, product_category_type, id&#13;&#10;      from intent_media_production.ad_units&#13;&#10;    ) ad_units on ad_units.id = impressions.ad_unit_id&#13;&#10;where requested_at_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;&#9;and ip_address_blacklisted = 0&#13;&#10;group by requested_at_date_in_et, ad_unit_id, ad_type, product_category_type, advertiser_id&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;-- clicks&#13;&#10;&#13;&#10;select&#13;&#10;&#9;&apos;clicks&apos; as table_name,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and ad_units.product_category_type = &apos;FLIGHTS&apos; then &apos;AfT Flights&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;CT&apos; and ad_units.product_category_type = &apos;HOTELS&apos; then &apos;Hotel AfT&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;SSR&apos; and ad_units.product_category_type = &apos;HOTELS&apos; then &apos;SSN&apos;&#13;&#10;&#9;&#9;when ad_type = &apos;META&apos; then &apos;Hotel Meta&apos;&#13;&#10;&#9;&#9;else &apos;Unknown&apos;&#13;&#10;&#9;end) as product,&#13;&#10;&#9;i.requested_at_date_in_et as date_in_et,&#13;&#10;&#9;i.ad_unit_id,&#13;&#10;&#9;i.advertiser_id,&#13;&#10;&#9;cast(null as int) as ad_call_count,&#13;&#10;&#9;cast(null as int) as impressions,&#13;&#10;&#9;sum(c.actual_cpc) as gross_media_revenue&#13;&#10;from intent_media_log_data_production.clicks c&#13;&#10;left join intent_media_log_data_production.impressions i&#13;&#10;&#9;on c.external_impression_id = i.external_id&#13;&#10;left join&#13;&#10;    (&#13;&#10;      select ad_type, product_category_type, id&#13;&#10;      from intent_media_production.ad_units&#13;&#10;    ) ad_units on ad_units.id = i.ad_unit_id&#13;&#10;where i.requested_at_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;1 day&apos;)&#13;&#10;&#9;and c.requested_at_date_in_et between (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos; - interval &apos;31 days&apos;) and (date(current_timestamp) at timezone &apos;UTC&apos; at timezone &apos;America/New_York&apos;)&#13;&#10;&#9;and c.requested_at_date_in_et &lt;&lt;= (i.requested_at_date_in_et + interval &apos;24 hours&apos;)&#13;&#10;&#9;and c.ip_address_blacklisted = 0&#13;&#10;&#9;and c.fraudulent = 0&#13;&#10;&#9;and i.ip_address_blacklisted = 0&#13;&#10;group by i.requested_at_date_in_et, i.ad_unit_id, ad_type, ad_units.product_category_type, i.advertiser_id</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]&quot;' value='Gross Media Revenue Difference' />
          <alias key='&quot;[vertica.41690.681263969906].[usr:Calculation1:qk:2]&quot;' value='Ad Call Count Difference' />
        </aliases>
      </column>
      <column caption='Ad Call Count Difference' datatype='integer' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first())&#13;&#10;END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='zero_filter' datatype='string' name='[Calculation_0310310175632059]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ROUND([Calculation_6590221141051847],2) = 0 THEN &quot;remove&quot; ELSE &quot;keep&quot; END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='null_filter_impressions' datatype='string' name='[Calculation_0600310182657900]' role='measure' type='nominal'>
        <calculation class='tableau' formula='if isnull([Calculation_4490310165848921]) then &quot;remove&quot; else &quot;keep&quot; end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='null_filter_adCallCount' datatype='string' name='[Calculation_3990311144005965]' role='measure' type='nominal'>
        <calculation class='tableau' formula='if isnull([Calculation1]) then &quot;remove&quot; else &quot;keep&quot; end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Impressions Difference' datatype='integer' name='[Calculation_4490310165848921]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ZN(SUM([impressions])) - LOOKUP(ZN(SUM([impressions])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([impressions])) - LOOKUP(ZN(SUM([impressions])), first())&#13;&#10;END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='gross_media_revenue filter' datatype='string' name='[Calculation_4490529214408725]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ABS([Calculation_6590221141051847]) &gt; 10 THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Gross Media Revenue Difference' datatype='real' default-format='C1033%' name='[Calculation_6590221141051847]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first())&#13;&#10;END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='ad_call filter' datatype='string' name='[Calculation_9160529214246040]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ABS([Calculation1]) &gt; 20 THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Ad Call Count' datatype='integer' name='[ad_call_count]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[ad_unit_id]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[advertiser_id]' role='dimension' type='ordinal'>
      </column>
      <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
      </column>
      <column caption='Gross Media Revenue' datatype='real' default-format='C1033%' name='[gross_media_revenue]' role='measure' type='quantitative'>
      </column>
      <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
      </column>
      <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
      </column>
      <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
      <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
      <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:2]' pivot='key' type='quantitative'>
        <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
          <order field='[vertica.41690.681263969906].[product]' />
          <order field='[vertica.41690.681263969906].[table_name]' />
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_6590221141051847]' derivation='User' name='[usr:Calculation_6590221141051847:qk:4]' pivot='key' type='quantitative'>
        <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
          <order field='[vertica.41690.681263969906].[product]' />
          <order field='[vertica.41690.681263969906].[table_name]' />
        </table-calc>
      </column-instance>
      <group hidden='true' name='[Action (date_in_et)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[date_in_et]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Inclusions (date_in_et,product,table_name)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:date_in_et:ok]' />
          <groupfilter function='level-members' level='[none:product:nk]' />
          <groupfilter function='level-members' level='[none:table_name:nk]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\table_comparison.tde' schema='Extract' tablename='Extract' update-time='7/19/2014 6:42:19 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1830224' timestamp-start='2014-07-19 18:42:19.270000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='vertica.41690.681263969906'>
      <datasources>
        <datasource caption='table_comparison' name='vertica.41690.681263969906' />
      </datasources>
      <datasource-dependencies datasource='vertica.41690.681263969906'>
        <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='quantitative' column='[vertica.41690.681263969906].[none:date_in_et:qk]' included-values='all'>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Text'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#6f95bf'>Filters applied to Ad Call Count and Gross Media Revenue:&#10;Ad Call Count: keep records with difference &gt; 20&#10;Gross Media Revenue: keep records with difference &gt; $10</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
          </datasources>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='ad_calls'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Ad Call Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='Ad Call Count Difference' datatype='integer' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first())&#13;&#10;END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='null_filter_adCallCount' datatype='string' name='[Calculation_3990311144005965]' role='measure' type='nominal'>
              <calculation class='tableau' formula='if isnull([Calculation1]) then &quot;remove&quot; else &quot;keep&quot; end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Ad Call Count' datatype='integer' name='[ad_call_count]' role='measure' type='quantitative'>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[diff:sum:ad_call_count:qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[sum:ad_call_count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[impressions]' derivation='Sum' name='[sum:impressions:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:2]' pivot='key' type='quantitative'>
              <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_3990311144005965]' derivation='User' name='[usr:Calculation_3990311144005965:nk:2]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation1]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[usr:Calculation1:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[diff:sum:ad_call_count:qk:2]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='natural' column='[vertica.41690.681263969906].[none:date_in_et:ok]' direction='DESC' />
          <filter class='categorical' column='[vertica.41690.681263969906].[none:product:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:product:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[none:table_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;ad_calls&quot;</bucket>
              <bucket>&quot;air_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;publisher_market_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_position_media_performance_aggregations&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='quantitative' column='[vertica.41690.681263969906].[sum:ad_call_count:qk]' included-values='non-null'>
          </filter>
          <filter class='quantitative' column='[vertica.41690.681263969906].[usr:Calculation1:qk:1]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]'>
            <groupfilter function='member' level='[usr:Calculation_3990311144005965:nk:2]' member='&quot;keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[sum:ad_call_count:qk]</column>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[none:product:nk]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation1:qk:1]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='83' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='228' />
            <format attr='height' field='[vertica.41690.681263969906].[:Measure Names]' value='54' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='ad_calls with filter'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Ad Call Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='Ad Call Count Difference' datatype='integer' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([ad_call_count])) - LOOKUP(ZN(SUM([ad_call_count])), first())&#13;&#10;END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='null_filter_adCallCount' datatype='string' name='[Calculation_3990311144005965]' role='measure' type='nominal'>
              <calculation class='tableau' formula='if isnull([Calculation1]) then &quot;remove&quot; else &quot;keep&quot; end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='ad_call filter' datatype='string' name='[Calculation_9160529214246040]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ABS([Calculation1]) &gt; 20 THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Ad Call Count' datatype='integer' name='[ad_call_count]' role='measure' type='quantitative'>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[diff:sum:ad_call_count:qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[sum:ad_call_count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[impressions]' derivation='Sum' name='[sum:impressions:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:2]' pivot='key' type='quantitative'>
              <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_3990311144005965]' derivation='User' name='[usr:Calculation_3990311144005965:nk:2]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation1]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_9160529214246040]' derivation='User' name='[usr:Calculation_9160529214246040:nk:2]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation1]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[usr:Calculation1:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[diff:sum:ad_call_count:qk:2]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='natural' column='[vertica.41690.681263969906].[none:date_in_et:ok]' direction='DESC' />
          <filter class='categorical' column='[vertica.41690.681263969906].[none:product:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:product:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[none:table_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;ad_calls&quot;</bucket>
              <bucket>&quot;air_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;publisher_market_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_position_media_performance_aggregations&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='quantitative' column='[vertica.41690.681263969906].[sum:ad_call_count:qk]' included-values='non-null'>
          </filter>
          <filter class='quantitative' column='[vertica.41690.681263969906].[usr:Calculation1:qk:1]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]'>
            <groupfilter function='member' level='[usr:Calculation_3990311144005965:nk:2]' member='&quot;keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_9160529214246040:nk:2]'>
            <groupfilter function='empty-level' member='[usr:Calculation_9160529214246040:nk:2]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[sum:ad_call_count:qk]</column>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[none:product:nk]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation1:qk:1]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_9160529214246040:nk:2]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='83' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='228' />
            <format attr='height' field='[vertica.41690.681263969906].[:Measure Names]' value='54' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='ad_unit'>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='Ad Call Count' datatype='integer' name='[ad_call_count]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[ad_unit_id]' role='dimension' type='ordinal'>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='C1033%' name='[gross_media_revenue]' role='measure' type='quantitative'>
            </column>
            <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[ad_unit_id]' derivation='None' name='[none:ad_unit_id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[sum:ad_call_count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[gross_media_revenue]' derivation='Sum' name='[sum:gross_media_revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[impressions]' derivation='Sum' name='[sum:impressions:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41690.681263969906].[none:ad_unit_id:ok]'>
            <groupfilter function='level-members' level='[none:ad_unit_id:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[none:ad_unit_id:ok]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='82' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='272' />
            <format attr='height' field='[vertica.41690.681263969906].[:Measure Names]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:product:nk] / ([vertica.41690.681263969906].[none:ad_unit_id:ok] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='comp'>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='Ad Call Count' datatype='integer' name='[ad_call_count]' role='measure' type='quantitative'>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='C1033%' name='[gross_media_revenue]' role='measure' type='quantitative'>
            </column>
            <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[ad_call_count]' derivation='Sum' name='[sum:ad_call_count:qk]' pivot='key' type='quantitative' />
            <column-instance column='[gross_media_revenue]' derivation='Sum' name='[sum:gross_media_revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[impressions]' derivation='Sum' name='[sum:impressions:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41690.681263969906].[sum:ad_call_count:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='70' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='304' />
            <format attr='height' field='[vertica.41690.681263969906].[:Measure Names]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='gross_media_revenue'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Gross Media Revenue&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='zero_filter' datatype='string' name='[Calculation_0310310175632059]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ROUND([Calculation_6590221141051847],2) = 0 THEN &quot;remove&quot; ELSE &quot;keep&quot; END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Gross Media Revenue Difference' datatype='real' default-format='C1033%' name='[Calculation_6590221141051847]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first())&#13;&#10;END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='C1033%' name='[gross_media_revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[gross_media_revenue]' derivation='Sum' name='[sum:gross_media_revenue:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0310310175632059]' derivation='User' name='[usr:Calculation_0310310175632059:nk:3]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation_6590221141051847]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_6590221141051847]' derivation='User' name='[usr:Calculation_6590221141051847:qk:4]' pivot='key' type='quantitative'>
              <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]&quot;' />
            </groupfilter>
          </filter>
          <sort class='natural' column='[vertica.41690.681263969906].[none:date_in_et:ok]' direction='DESC' />
          <filter class='categorical' column='[vertica.41690.681263969906].[none:product:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:product:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[none:table_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;clicks&quot;</bucket>
              <bucket>&quot;advertiser_account_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_ad_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_revenue_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_slot_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_travel_window_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_auction_position_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_position_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;publisher_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_slot_performance_report_aggregations&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='quantitative' column='[vertica.41690.681263969906].[sum:gross_media_revenue:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]'>
            <groupfilter function='member' level='[usr:Calculation_0310310175632059:nk:3]' member='&quot;keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]' included-values='non-null'>
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[sum:gross_media_revenue:qk]</column>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
            <column>[vertica.41690.681263969906].[none:product:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='117' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='272' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='gross_media_revenue with filter'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Gross Media Revenue&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='zero_filter' datatype='string' name='[Calculation_0310310175632059]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ROUND([Calculation_6590221141051847],2) = 0 THEN &quot;remove&quot; ELSE &quot;keep&quot; END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='gross_media_revenue filter' datatype='string' name='[Calculation_4490529214408725]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ABS([Calculation_6590221141051847]) &gt; 10 THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Gross Media Revenue Difference' datatype='real' default-format='C1033%' name='[Calculation_6590221141051847]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([gross_media_revenue])) - LOOKUP(ZN(SUM([gross_media_revenue])), first())&#13;&#10;END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='C1033%' name='[gross_media_revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[gross_media_revenue]' derivation='Sum' name='[sum:gross_media_revenue:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0310310175632059]' derivation='User' name='[usr:Calculation_0310310175632059:nk:3]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation_6590221141051847]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4490529214408725]' derivation='User' name='[usr:Calculation_4490529214408725:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation_6590221141051847]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_6590221141051847]' derivation='User' name='[usr:Calculation_6590221141051847:qk:4]' pivot='key' type='quantitative'>
              <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:gross_media_revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]&quot;' />
            </groupfilter>
          </filter>
          <sort class='natural' column='[vertica.41690.681263969906].[none:date_in_et:ok]' direction='DESC' />
          <filter class='categorical' column='[vertica.41690.681263969906].[none:product:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:product:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[none:table_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;clicks&quot;</bucket>
              <bucket>&quot;advertiser_account_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_ad_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_revenue_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_slot_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_travel_window_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_auction_position_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_position_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;publisher_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_slot_performance_report_aggregations&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='quantitative' column='[vertica.41690.681263969906].[sum:gross_media_revenue:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]'>
            <groupfilter function='member' level='[usr:Calculation_0310310175632059:nk:3]' member='&quot;keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_4490529214408725:nk:1]'>
            <groupfilter function='member' level='[usr:Calculation_4490529214408725:nk:1]' member='&quot;Keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]' included-values='non-null'>
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[sum:gross_media_revenue:qk]</column>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_6590221141051847:qk:4]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
            <column>[vertica.41690.681263969906].[none:product:nk]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_4490529214408725:nk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41690.681263969906].[:Measure Names]' value='117' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='272' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='impressions'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Impressions</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='table_comparison' name='vertica.41690.681263969906' />
          </datasources>
          <datasource-dependencies datasource='vertica.41690.681263969906'>
            <column caption='null_filter_impressions' datatype='string' name='[Calculation_0600310182657900]' role='measure' type='nominal'>
              <calculation class='tableau' formula='if isnull([Calculation_4490310165848921]) then &quot;remove&quot; else &quot;keep&quot; end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Impressions Difference' datatype='integer' name='[Calculation_4490310165848921]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ZN(SUM([impressions])) - LOOKUP(ZN(SUM([impressions])), first()) = 0 THEN NULL ELSE&#13;&#10;ZN(SUM([impressions])) - LOOKUP(ZN(SUM([impressions])), first())&#13;&#10;END' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Date' datatype='date' name='[date_in_et]' role='dimension' type='ordinal'>
            </column>
            <column caption='Impressions' datatype='integer' name='[impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date_in_et]' derivation='None' name='[none:date_in_et:qk]' pivot='key' type='quantitative' />
            <column-instance column='[impressions]' derivation='None' name='[none:impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[product]' derivation='None' name='[none:product:nk]' pivot='key' type='nominal' />
            <column-instance column='[table_name]' derivation='None' name='[none:table_name:nk]' pivot='key' type='nominal' />
            <column caption='Product' datatype='string' name='[product]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[impressions]' derivation='Sum' name='[sum:impressions:qk]' pivot='key' type='quantitative' />
            <column caption='Table Name' datatype='string' name='[table_name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0600310182657900]' derivation='User' name='[usr:Calculation_0600310182657900:nk:2]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[vertica.41690.681263969906].[Calculation_4490310165848921]' level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4490310165848921]' derivation='User' name='[usr:Calculation_4490310165848921:qk:3]' pivot='key' type='quantitative'>
              <table-calc level-break='[vertica.41690.681263969906].[table_name]' ordering-type='Field'>
                <order field='[vertica.41690.681263969906].[product]' />
                <order field='[vertica.41690.681263969906].[table_name]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41690.681263969906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[sum:impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41690.681263969906].[usr:Calculation_4490310165848921:qk:3]&quot;' />
            </groupfilter>
          </filter>
          <sort class='natural' column='[vertica.41690.681263969906].[none:date_in_et:ok]' direction='DESC' />
          <filter class='quantitative' column='[vertica.41690.681263969906].[none:impressions:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[vertica.41690.681263969906].[none:product:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:product:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[vertica.41690.681263969906].[none:table_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;impressions&quot;</bucket>
              <bucket>&quot;ad_calls&quot;</bucket>
              <bucket>&quot;advertiser_account_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_ad_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_revenue_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_slot_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;advertiser_travel_window_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_auction_position_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_impression_share_report_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;air_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;clicks&quot;</bucket>
              <bucket>&quot;hotel_ct_advertiser_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_impression_share_report_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_ct_placement_type_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_advertiser_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;hotel_meta_position_media_performance_aggregations&quot;</bucket>
              <bucket>&quot;impression_share_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_market_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_performance_report_aggregations&quot;</bucket>
              <bucket>&quot;publisher_slot_performance_report_aggregations&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:2]'>
            <groupfilter function='empty-level' member='[usr:Calculation_0600310182657900:nk:2]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41690.681263969906].[none:impressions:qk]</column>
            <column>[vertica.41690.681263969906].[:Measure Names]</column>
            <column>[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:2]</column>
            <column>[vertica.41690.681263969906].[none:date_in_et:qk]</column>
            <column>[vertica.41690.681263969906].[none:product:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41690.681263969906].[none:table_name:nk]' value='272' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41690.681263969906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41690.681263969906].[none:date_in_et:ok] / ([vertica.41690.681263969906].[none:product:nk] / [vertica.41690.681263969906].[none:table_name:nk]))</rows>
        <cols>[vertica.41690.681263969906].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Metrics Crossvalidation Across Tables (filtered)'>
      <style>
      </style>
      <size maxheight='1100' maxwidth='2000' minheight='1100' minwidth='2000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='93364' id='10' param='horz' type='layout-flow' w='92350' x='7650' y='6636'>
            <zone h='93364' id='8' type='layout-basic' w='92150' x='7650' y='6636'>
              <zone h='88780' id='4' name='impressions' show-title='true' w='30750' x='69050' y='11220'>
              </zone>
              <zone h='4584' id='5' type='text' w='26769' x='7650' y='6636'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Ad_Calls</run>
                </formatted-text>
              </zone>
              <zone h='4584' id='6' type='text' w='34650' x='34419' y='6636'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Clicks</run>
                </formatted-text>
              </zone>
              <zone h='4584' id='7' type='text' w='30731' x='69069' y='6636'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Impressions</run>
                </formatted-text>
              </zone>
              <zone h='88780' id='17' name='ad_calls with filter' show-title='true' w='26750' x='7650' y='11220'>
              </zone>
              <zone h='88780' id='18' name='gross_media_revenue with filter' show-title='true' w='34650' x='34400' y='11220'>
              </zone>
            </zone>
          </zone>
          <zone h='93364' id='16' param='vert' type='layout-flow' w='7650' x='0' y='6636'>
            <zone h='6001' id='12' name='ad_calls with filter' param='[vertica.41690.681263969906].[none:date_in_et:qk]' type='filter' w='7650' x='0' y='6636'>
            </zone>
            <zone h='10819' id='14' name='ad_calls with filter' param='[vertica.41690.681263969906].[none:product:nk]' type='filter' w='7650' x='0' y='12637'>
            </zone>
          </zone>
          <zone h='6636' id='19' name='Text' show-title='true' w='100000' x='0' y='0'>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Unfiltered'>
      <style>
      </style>
      <size maxheight='1100' maxwidth='2000' minheight='1100' minwidth='2000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='horz' type='layout-flow' w='92350' x='7650' y='0'>
            <zone h='100000' id='8' type='layout-basic' w='92150' x='7650' y='0'>
              <zone h='95091' id='1' name='ad_calls' show-title='true' w='29160' x='7650' y='4909'>
              </zone>
              <zone h='95091' id='3' name='gross_media_revenue' show-title='true' w='34131' x='36810' y='4909'>
              </zone>
              <zone h='95091' id='4' name='impressions' show-title='true' w='28859' x='70941' y='4909'>
              </zone>
              <zone h='4909' id='5' type='text' w='26769' x='7650' y='0'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Ad_Calls</run>
                </formatted-text>
              </zone>
              <zone h='4909' id='6' type='text' w='34650' x='34419' y='0'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Clicks</run>
                </formatted-text>
              </zone>
              <zone h='4909' id='7' type='text' w='30731' x='69069' y='0'>
                <formatted-text>
                  <run bold='true' fontcolor='#d8504c' fontsize='12'>Reference Table: Impressions</run>
                </formatted-text>
              </zone>
            </zone>
          </zone>
          <zone h='100000' id='16' param='vert' type='layout-flow' w='7650' x='0' y='0'>
            <zone h='6365' id='12' name='ad_calls' param='[vertica.41690.681263969906].[none:date_in_et:qk]' type='filter' w='7650' x='0' y='0'>
            </zone>
            <zone h='10819' id='14' name='ad_calls' param='[vertica.41690.681263969906].[none:product:nk]' type='filter' w='7650' x='0' y='6365'>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='comparison'>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1000' minheight='1200' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='82625' x='17375' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='82225' x='17375' y='0'>
              <zone h='100000' id='1' name='comp' show-title='true' w='82225' x='17375' y='0'>
              </zone>
            </zone>
          </zone>
          <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='17375' x='0' y='0'>
            <zone h='10249' id='6' name='comp' param='[vertica.41690.681263969906].[none:product:nk]' type='filter' w='17375' x='0' y='0'>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='comparison_by_ad_unit'>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1000' minheight='1200' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='84000' x='16000' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='83600' x='16000' y='0'>
              <zone h='100000' id='1' name='ad_unit' show-title='true' w='83600' x='16000' y='0'>
              </zone>
            </zone>
          </zone>
          <zone h='100000' id='8' param='vert' type='layout-flow' w='16000' x='0' y='0'>
            <zone h='10249' id='6' name='ad_unit' param='[vertica.41690.681263969906].[none:product:nk]' type='filter' w='16000' x='0' y='0'>
            </zone>
            <zone h='89751' id='7' name='ad_unit' param='[vertica.41690.681263969906].[none:ad_unit_id:ok]' type='filter' w='16000' x='0' y='10249'>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='comp'>
      <cards>
        <edge name='left'>
          <strip size='196'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:ad_unit_id:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:ok]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='ad_unit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:ad_unit_id:ok]' type='filter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:ad_unit_id:ok]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='comparison'>
      <active id='1' />
      <zones>
        <zone name='comp'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='comparison_by_ad_unit'>
      <zones>
        <zone name='ad_unit'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='ad_calls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:ad_unit_id:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:qk]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:5]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:3]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='ad_calls with filter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:ad_unit_id:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:qk]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:5]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:3]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_9160529214246040:nk:2]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='gross_media_revenue'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.41690.681263969906].[none:product:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:1]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='gross_media_revenue with filter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.41690.681263969906].[none:product:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:ad_unit_id:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:ok]</field>
          <field>[vertica.41690.681263969906].[none:date_in_et:qk]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:5]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:3]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_3990311144005965:nk:2]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_4490529214408725:nk:1]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='impressions'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.41690.681263969906].[none:product:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41690.681263969906].[:Measure Names]</field>
          <field>[vertica.41690.681263969906].[none:impressions:qk]</field>
          <field>[vertica.41690.681263969906].[none:product:nk]</field>
          <field>[vertica.41690.681263969906].[none:table_name:nk]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0310310175632059:nk:3]</field>
          <field>[vertica.41690.681263969906].[usr:Calculation_0600310182657900:nk:2]</field>
          <field>[vertica.41690.681263969906].[yr:date_in_et:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='1' name='Metrics Crossvalidation Across Tables (filtered)'>
      <zones>
        <zone forceUpdate='true' name='' type='text' />
        <zone name='ad_calls with filter' param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Unfiltered'>
      <active id='1' />
      <zones>
        <zone forceUpdate='true' name='' type='text' />
        <zone name='ad_calls' param='[vertica.41690.681263969906].[none:date_in_et:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Text'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='comp' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='ad_unit' width='191'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='comparison' width='192'>
      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
      Ac3/pdHb+tROAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='comparison_by_ad_unit' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO292XMc6Znu92XlvtW+AlWFKqwEQIIEAbK7pZHE
      Vo9aUo+WkTSSZ+bYMR7f+cKXvvBf4fCxwxHHEQ474pwzo5g5M3PG0tHC05u6m72wuQDEWigA
      te977ltl+qLQJNRdIEESIECgfjcsZFRmvVl8K/PL93u+54UsywIDBjwrtpMOYMDLzUEJZDSb
      3MM/ZFl+MdEMeOlAev+8919/h9kdXLXt9LIITorNYqupB8NB3QSmDa/kEz/6878kseO6XFV2
      15o2/3TM96XtXbm9XZH8DtLlch3TRw94TvYSqNlsEt0uijN8uwUQXuAEGMIS66sE63UPRVjG
      bh7DUGnl7q2NPH8hRN369LP5N/4KAACA9vbbHyMoBGv8bqE+NTXOK/p/ePcP/9P//L/47fiR
      BzDg+dlLoCuLr4yNjb3gz/7kw/dXSkb3YjgeHvpiG7SdWJMtOOxi3/iTufXduoI7hgM+EoVe
      cGwDDgnUewq7ffs2DMOapsmy/O1vf1sR2l2MzWw9kFVzcvZyYXvFROxDIa/T4Wi1Ww6akLso
      TSDP+dmVQkZQQdDvyOZKQruRzpdwu29xJibokJMmHHZKlHXThqqdmsMfYUj0KM53wBGzlwQw
      DKMo+t577924cQMAkNjZ0eV2nbM7aYMlkPtLSy5PpFHaLJVMg5IYqV0y3JfnLr165cLzfHZg
      eCQAAABgetoJALj2lTfgJAAAACf7PJ8y4Fh5NC6GYfhv//ZvIQgCAIidjmzaokN+u8MOAJia
      vTIaHbIBwLXbQ7GJodBwLDrMd1onFvWAU8PeLaxQKJTLZQAATdMXLvS/rhiquJUpz0y+6KHS
      gNPM3hWI47gvvfgqCE4PsmfAl9gbA0mSNDs7+3d/93dzc3MAgH/55X/QEftUzLOVLIxevKCX
      t4PXfirsfKhZ6P3VLAZpP/2rv6aPrSw04JhIp9OxWGz/nwCA/VseYsidlor6nNQTj/noSep3
      v/vdK6+8oigKAMDlCxEElc8lK1Wp9clHdhQKXrMK5aYF1JlL14FSHmTPS4SptP+P//3fBS9c
      QUE3Fot9+tH7rMv94e9/x4xdjTjRWCz20fvv2GlsJ1vdrsmXR/2axHG1fPjaj31X4k88+N4Y
      aHNzUxRFAIBlWYuLi8d+TgNeIF2lc+vTe6wnoMsCTdNmtwtBVqvZJD1hBohdCO12uxiGdZot
      1uUSZM3vthtiC7BD49HAEw++l0D5fL5SqQAAKIqanp4+9nMacFbYu4VVKpWFhYV33323l09L
      9+5hGM7SRLFY9EVGLK5Cx67dfv/XQ4xFRRcQqdCxHG47PTYyfKLBDzh5Ho2BfvnLX7Is63A4
      AACprXUdsfuc+u3bpeh4Fubr18PXxFohWTeqO8II3lI8F7el1nMmUO+mOeClZu8WdufOnV4J
      keO4119/vd1q2Wy2TrNOsXZBlHAcd3qDKl+TZM2yAIphgiBYMDEaDZ10/ANOmL0EkiSp3W4D
      ACiKcjqdL+7zTe3f/m//7msLEw0TbbSsv37r8v/6f/5DeHRsMuLSVL1UqNnjY0IxE/I5YrOv
      eNg/mpDPr32a7tLtTHNxceqd3//mL/77/+Hw8/WaxK/v5NV2eXj6StjrXLv/+Xah/cMfvGlI
      /PpOnrC1tzPmwuVwudzAKWI7m/HRrDsQVPkOTFLRkTHMaN/bLPo9dFdVCpm0xgTjXqLVUSwE
      ttvtqMYJJk6RGN9sOb0ugnaFg95yIdNsddoq8FG2Ni8yDiewIV2uRniGZb6xubQ+/eormC5V
      OcPvQll3OOR7gf8Lz8HeLWx5eXlkZCSVSum6fuPGjcTasg6TaqdG4ATpj2JdPRwZevyBno30
      2t3YeGR1p/lnP/vO+noVAHD1tRtArTeKqSbfrbUgyNfCUGT13mdEaOZLCQQAwIBZKueX1p5a
      atIu5z6+v+Lvtkevvw6AUanUUJT6YvvyhRBBQexGYmtzKzsyMeWi0Ua5UG3UisXa0OjU7PQ0
      l6/l8rmdHdGFmYx3DIK62e012WKAK4zBnbX7H3PM5NUoXG4judzu0PiVcNCbWF/Z2i27IlGN
      ALvrO5PXZmp1nlbFZq5ldlVY5nLFEtxMKUiMF9pDkP1lSaC9K9Ddu3dLpVKhUFhcXFxYWNhc
      ud/RASSLUitfRkMjdua11xZeaFyG/Nnte2OXFrwscayfUy3lak1hYnoaA9rGRpJx+yIh/+N3
      2U1uqLLsic0eUqLUrlcKlXpsfAo2xGSm7CQBygaDXgcAZmJlJTg+6yCfV9dwguwl0CeffGK3
      20mSzGQyr7/++trSHYhkuEbTwZJO/xAndafix3IFOhEMwzjpEM4OewmkKArP8wAAgiBY9ozL
      J3rV9gFHAnQOl/UoiqJJ/GaqoHWqQ1NzQx7H+vLd3VLnre+9YUj8ZqpA2Do7OXP+YrhSaeAU
      sZvLeinWGfBrPA8TRHhkFDM6S4mS30MZqlrKZnUmEHXjbV4FsI1l7ajOCyZGkZjQbDs8Dpx2
      Dge8ibU1AFtGFwYwgnZFDeCZdOq7f/aWKfGbqQIJ64pqGTCGQTpkGDDFWgCCFG672I4PO+Uu
      TiNG17QBnJqdHD3p7++PeInvvs9Dp1r4bHnN223HFr4JgFGrNlCE/GL7ymQQpwCbSCa3tnOR
      sUknjTUqxVqrXirVg7GJ6QsX+GK9UCikUqITsxhPDEDd/O66AhjgGEbhzsbypxwzcSUMVzpI
      vpAKjc4NB7ycKGaSDywi4PG7Ub21XVIvxkPA2otkKkRmsk1/OOKiuhurKVd4xGFHy+srhm+m
      lN4RgNvjZ9RGsWMypy2BzukV6OHrWrlQbwnjU1Mo0BOJbcblHQ5+eXHIl0htJzRFdkenfYcb
      RHca1WK1ER2doHGkXCh4h4f3frXmo0/M7m5aCCOr+oWJOACgVSu35W48+hIU+s9jAum6ftIh
      nB3OYwINOELO6RjooEp0dnubVwRVkCDCzuKWZNi6uslQkKYDDO22O8DupsVaMT73qocCn99e
      anTqExMX2m2BwiFgg9z+aMBjX1l5gFiGDhEYQeh83USpTKb4ox+8KfGtnXwFktpd3AHZDEgD
      RlenWAay2eQOV2i1w06iS3gQvW3CDEHTU2Oxk/6ensw5TaCDKtGiILQUhdGan26WLoYgFXbt
      ZIrxYbthwkZXFngkpNgpTchUOp44m1hb8U/O1tPrH6+U51+Zre2sTV93BDx2QWxt3V/H/eFQ
      gNXqjYJKjg3ZLQDKufT95Y0gDuc1Kuy30V18eScTjY/YUWNtOeG/uJDa3gYeNcDC9Xy6ywZf
      igQ677ewgyrR+Vw+HAkftFchu9uWzdmp8S9tr1cKlXp7fGoWR0A+nw+H945gavJGctftC4X8
      zsTKCuX2SYo+NTbSC0DuoiPh4LGd4vHysibQ80hBTNM8wkjOOX+UQCpXrSlE2G/f9wazWasq
      JjoU8LSbTbvbndreHhv/8i/v5WJQiT5C9sZAN3/1923B6nb1+PwbYb/95s2bwLL4ToNwOIxa
      yQhc+tl3PMt37gimzvPaKUmgRnrj13dTf/Ozt55hX+2LirOg+q5eia8v32U8Ia2V/2RbuBJl
      45cWmXOxasC8+fu3r83FtwpaPr3zo7/4wdIH76DecLlY5crpN3/2b5yHmOXdewdGsB4c01TZ
      TuMAALeDbgpGND4BIB0wjIySAACHy4WbOopqx3pOh6ctqk7mGefqH1acWbcPgG6t2qi3Bb5R
      ApAvldz0TVxhMOxooz2V2Nwup8vtAvmy34mXGhLjCwe9zla9cXEqXqy0nTHvEw/xZUGZzLcV
      w4qOTrDko2+Qb9ezhUpgOOo9E8vU+1eiz8MV57GIokjT9NPu9UjOsV9Q9mB52e12hyORXD5n
      WVD04OeRl5FBJfoI+eIWhmH37t3rCcoAAOnN5TWbO7D+0fKOdX1+9IwlEIoOnGKOjL0E0jQt
      Ho/PzMxkMhkAwNy1PxEkSRcb16+5I8EzaC+n7dc+X4nWylUIJ1LZbNDuYLxeQ+Qfap83MzXL
      hgRceLMhIRTSLlSZUNhNw7VydeziFRoFq/fvo3ZXV5O4Jk+5HKjNhiO2QkseC9p3N5YF+2SU
      kjSIIgiEb3bmrl3H4ZM++SNlL4Hm5+d7grLeFSg2ero0A0fOfu3z1s7u+moiNDrlYfFGrZyv
      FCqV1kPtc6FUrbaFUZdNs2GyqTnUbqLGDzFacrfiH5ulYeP2rT+wYwuUkhcUgjJtoLJjAkLA
      ab2RrlVrNpu/3K6k6rb52WBibW3y6llLoP4OZdndLfdQnCHO9aV+N7lhosx4LHLQG3LpbUG3
      TU+M1suFjqQKnDh7+RICAU3mN3YKly8+l/vWy8IjUT2Kojdv3rxx48bi4mKtuJOu6teez4Ds
      1DLQRB8hjypFPYeynuXH8oONS9e+cWJBHTODBDpCnsKh7MzwRE20x4kLLUUzOqtbzeuL47qs
      cYbt+uWZVrmQavBOtKuZCEC6Kx+vTFy7BCQZp2mMoMdikd3kpgnZeEGnCLCZ3I4ND8MEbXUN
      Q5ftrpCmC2Kt5QgNQabGC/qly7O2rrK8us3SiKHrTclykTCCWCbA1C5w4sb9jczkWFQWVYoh
      Iasr6MjC3Kn7r9m7Ah3Goews8VhN9Np4AK5UwOX5qMwLpUqlldlGIgsAgFalVGzIIqpLvKjC
      kK6bQrPUrgkq6ZkIKgBEyuWyxNUz9e7YZDw+7Cnn8w3IMRakcVRf/vgzg7GGMXqprU36oHsb
      5cnZWURs3Lp158LFEa6Q151B1OvMJJchOmS32wudVJUjAvZ8talCDl8Q5tdLyilMoEdjoIcO
      ZYuLi7du/iM58o2rUy+rxuDxPJMm2khuJGVVHb94heo3QSRyrWyhDGBs+tAugLvJDYhwxCND
      xeyuDlBOkC7NTAEAhHaj0OBfCjEQ2J9AuVxuYmJCUZSFhYW1pU/bOvX1a3MnHd6xMKhEHyF7
      vyaapiORiKIovXyavfLqiUZ1vAwq0UfIXgIxDNOTaD3DdNrLyEGa6Hoxmy3XGYqURJWxU+n1
      peHZ11CbOTk6srO1btlQriPiBJzY2oqHIzBJWd2uocsOd0jVFblRoTxDCGTwgn55/pLNUO6v
      bDlYVJXVpgK8JAwQC7YRvGp4SXNlIzM0NgJEGaNJFIZaovnKwqUX3s/B/M1vfv/qldFEXsul
      kj/5b/787ns3MV+0VCh3Srvf/8XfuKgn/9L6O5SVt5fqaPTiiPt44z85DtJE17IlmUCNwub9
      nU4sHgWatLGxiaLw5OhIsVTSpXYix49OTY5GvKVsrm5zTAQZHNPuffiJwWCjdvR2XrgcIT5f
      L01duoQK9Q8+vH3x8mgznTbcQ6jfmU7cR+xhiqZLnXSFp+zOYrPGq6R3jNVWd1vXFi698Bq1
      zeN2uT1uK1fyO4liXWL9kZDP2azV5qbHCuW2a/QJS+TA/jFQMplkWTYYDC4sLLz/n/9fdejr
      370+cfzncMIcxp1D5tu72YIJI5cuTB3ysA+r2KVcSjYAL6q9wrTYaWbKrZmp02i3LQgCwzBP
      u1d/hzJgKB3V5qDPpqhqUEg8Qk7aoewkGGiij5D+DmVba8u0LzLsP7NjoIMq0Y1SvtSWdL4B
      U0472tUBYcNAp1SzSLuXRVTVkCyIr9e/deObH7z//uR4NF8VHE5G5bj4zBxtiZ8uJfwBr6VJ
      1XK+oTNTo36l3uJNiGHtTtxoSQDFMFNqEQ4PhtPR4UC9UmxzfKPGO/2sIQoWykAwjFkyhFCK
      rpW2Vh2xSz4aFKucP+AhKPaJ5lcvnv6Cso3ERtxGn+EEOqgSXS+VCoJKSZXV9dz8mJfnJJNE
      7KpZ5czMThq1cDY+TmAoAADD8J3tlG7DVL68kSz44hdoG58vFHZzOR9pkQ4/AFCplIE7KmcR
      qg0pJB5keea1uXC90pHyBVdoNDoc2E1uZrM5C/Z1uoJWSuG+yaYghhijXZeaFhoj9d1s0aBE
      TkV4RXW6vKcwgfo7lCVW71HekUjQc9LhHQuPqUTLsjZ99fLjTTdkoZPOFYPDUZFrQRA0PDwM
      AMilthVNodzRYZ/9sXvv0atchyIxFgNriZTXRVkoOxzwAACyu5ukK+JzvRz1lPPoUDaoRB8h
      e7ewBw8e7BeUFbO7jkCUxs/myvlBJfoI6d/ycvnuLddI99WrZ7YOxDcq6XoxsVyZmw1s5Rpz
      E5Ey371+Zeak43r56N/y0uEJMfTZ0u7+MaVy2bKAIPDlSsVQhGq1trK2edJBvZScR0HZgCPk
      PArKBpXoI6R/y8tf/cvfeyMXX1u8dKKxHReDBDpC+re8xBEEOtOPKpmdHUGVVEGykSxN2hTJ
      MEzIziCKasA2Q5IRgsXURpVwB3CcHB20RTuY/oKyN3/48xON6tiRRLGtKLTe+jxZmokQqgyn
      ys2xqFvRTE0VVI3y+AnWUDYbEutwDRLoMZxTQdn03J5a1xcr9ErJfbn2ouJ5eekvKHtw6/c6
      M9IW+De+fkq/w+exuNs/BvJ6vaqqHkVE55T+LS/tBPp5qekmTu9g85xcKU8/ewlkWdbExAT4
      4jE+ODn/1jRea57qR/rtlXvrZe5H37nxDPs+dOcQVP/i1dG1+5/T3iGtmf1oS7gas4/NXWPP
      mAfCYzF16aP33p/62nfvvv0Pbm8k1RTjrBWYeS0ecDxx370EmpmZ6QnKxsbGAAAE6wIA0BR1
      nGE/L16fh98qPtu+D9057B4/AN1KpQa1eK5RACCwm1gLTF49VwlkmUZHBbAhUzSZypQdAS/r
      9x0me8BBDmX55IqMOtut9rX5s1kKesgjTfS5t7h7Nk10f0EZV86Qs1PdSvWIYzwd7B9Eu30h
      tw8A0zDOvXc0QRDPUGLt71A2NDabL6dw5mwKgwaV6CPkPArKHrpz7HUmvBSpV+oQjmfyOT9r
      ZzweQxQfdibcytYtG+x34q2mjFBIp1ilg2EXbauX6/GZORq11h8so4yzq8tcS6CcdtRmwxBb
      qSXHg/Z0YkVkxsOUrEEkjiNCi7u0uHDG7pX9BWWq0FYtuNkRYy9tD4fHs78z4XYqvbmeDMYm
      3AzWqlWKlVK11n7YmbBUrlU7YtwJaTZMMTW7am7VhRCt76SrvvgFGu7e+fgjdnSeUguCgpNd
      G1Tb7QJCxCm9ma3XaraQr9KpZhrQ3HQwubk+cWXhjBlQ93co++y3f0/Nfj+3+ulbb33vpCM8
      eg65rCe1nbBQ5jHzGIXMrqBDU+PxRqXISZrAi9OXZhEIaLKQSBV6VhtnnkcJRBBEMBhMp9ML
      CwvlrXsN2F/OZ9741tdPOsKjZ6CJPkIGgrIBz8V5FJSBg905DIlf38l7XRjfVDSj82Cz8eor
      E7qkcYbt1fmLzVJ+t859YXFnLn+0NPXKZSDKOEtjODMxGt3ZWjeBjRN0igAbia86eIhCpeka
      GgKmtt/Bw04juq43JMu9z+LOhRt31lIXJmKSqNIsCZldXkdOoWq7v6Ds9u9+2bIFOQv++XfP
      ptXmQe4cve2TQbhcBvMLMZnji6VyM5VEYtcAAK1SMd+QBFQXeVG1AU0zhWaxWeVV0jsVUgCI
      FkslqV1L1bsTU2P9HDysME7fbakX/NB+B4+ZuVgnm9NdIdTnTG/dh+ghh8ORb+9WO0TQka00
      VcgRGIK51aJ8ChOov0NZ+u67DXYqtXbvL37yw5OO8Hg5jDsHAAAAI7GWkBV14vJVur/FXTOd
      KwEYm71w2KUs24k1G+kcjQ4XMts6wDq81HPw4Nv1Qo3v9f8+/ewl0ObmZk8gYVlWrxh9hhkU
      Eo+Q8ygoGyTQEXKgoMx0jWu6ev3yqbvpHgkHu3PkcpUGQ5GSpDIMmUmsDE1fRyFrPB7ZTW4C
      GOU4Ecfhre2vekDLSrNGeoII1N3vAe1gUFVRWwrwkDCALdhG8JrhIc31zVxwNAIkGaNI1Aa1
      JXNxfvaFW9ztYenSrQ8+nHz1T5fe/WeXJ5xuiTHW8l94ZcT/5HX+BwrKbu9mupp4VhPoQHeO
      XEUmEKO49SDVGRmJWJqUSGyhCDwej5TLZV3uJAt8bGKinwc0GmexO0XhUpjY7wE9MxdrZbKG
      O4R6HZnkA4QdImm6zGVqPMU6S62aoFLuOKOvpdpX52dPSkFiml1OBbAhEzSZypUdfi/j8x4m
      e8BBDmUK3+oiRKXaGB05U53CejytT3TPjsO0IbNThx0gP6xil/NpxYB4SekVpkWulau0T+cA
      +bk6Fp4rh7JBJfoI6e9Qlk+u6IQnny9847VTKqp/HgbuHEfIgYIy6uIUjddPNLZj5DE+0cWW
      pPF1hHLZMUO3SBsGOsWaSdl9dkRVDNGC+Frt22+8/t4771yYHMmVBaeLUbjO2MUrtCXeurcZ
      DPpMVayUcnWNmR4PyPUWb0Isa3fhRlMCKI51hRbp9OIEPRIO1suFZoerV3l3kNWFnsUdglkS
      hNCKrhYTDxzxy34aFKpcIOAhKXt0OHDS39yXOVBQZgIBH5080diOkQN9ogulnKDQYmWlnF0Y
      93Gc2CVRh9qtdMx0chc1cfvYJImhAAAcw7e3djSYUPjSWiLnH5ulIS6Xy29nMgHKIh0BAEHF
      YhruKB2TVG1IfmMpzTF/Mh+tldtiLuceGh8JB7cT6+lMxoL9na6gFneIwFSDE4dYo10XGyYa
      I7WdTMGgBE5BeFlxurVTmEDnUVC2ny9VomVZm12cf4LFHd/ezRZCkZjYaUIACkfCAIDsblJW
      ZdoTCx/u4aVXuR6OjrI4WNnY8blpC2XDQS8AILO9TrqjfvdTy5NPhANbXjq9wRYnjZxFQdmg
      kHiE9HcoIwn43//Hf7owPTZIoAGP58CWl19bnG1qJ1UaPXb4ZjVbLydXKxcv+LcLzdmx4apg
      nsJ2bqefvQQKBoPlcjmdTvdKSX/6vR+caFTHTqVSsWyWIAqVGjAUtVZvrKZqgwR6BvbGQBsb
      G5IkAQC63e7169dPOqrjZdDq4AjpLyhbvX9r7cF2E7b/j//tT040vGMBhs/RsuXjpr9DWXY3
      Q3l8wLBOLrBjZFCJPkLOo6AMAJDe3uYVQRUkiLCzFCxJene/xZ2EEHZcaZRJd4ggyLHYGZxR
      PirOo6AMACAKQktRGK356Wbp4gihyvBOqTEx4lE0U1V5TaU8AZI15PWaZHe6Bgn0GPoLylbv
      f5bKVVhv6MbXzuBkKgBg9sqV3gt/PN8rJX+n39vOcuvhI6K/oIymab8/sJXNnVqbwOexuDPN
      R04cDqejN4cz4Nno71AmK9pweDgYiZ1gZI/neW61g8f4I+QlFpRpsvCHT+7iVtsdvnZxaujw
      O+535xBU39Ur8fXlu4wnpLXyn2wLV6Js/NIic8ZMNP6YUuL+3XL3+wvRf/7tJ6wDD7hdiUzz
      Zz/9zu/+0z+OX17MFfKgVZv61g9HPOQTD7X3NS0vLwMAUqnU0tISAGBt6bPkZvLOauJYT+M5
      wUiGpfBnm23puXOUShUAAADdWrWR3kkmkrsAWKnkpqCc8cky2h9GDUGSZQiA+PhUs1qAu2qN
      E2kSrTUlDH2KH8+jhYWlUqknKFtYWGhVUv/Pf3p38dLkN795Blem9tdEn+UrTn++JIJ+Nk10
      f0FZsVx768bXBOtsfqn7K9HB4WjwvPrQ2+32x/x5SM67oGzAc9LfoSyf3vEMxTRJcDgP5fX6
      0vHQJ3o7Yy5cidbKVQgnUtls0O5gvF5D5GGSio6MYUZ7M1OzbEjAhTcbEkIh7UKVCYXdNFwr
      V8cuXqFRsHr/Pmp3dTWJa/KUy4HabDhiK7TksaB9d2NZsE9GKUmDKIJA+GZn7tr1M+Yf3F9Q
      1lWbn33W6bSrP/7hGXQoA/t8oimI3drZXV9NhEanPCzeqJXzlUKl0hoanZqdnubytUKpWm0L
      oy6bZsNkU3Oo3USNH2K05G7FPzZLw8btW39gxxYoJS8oBGXaQGXHBISA03ojXavWbDZ/uV1J
      1W3zs8HE2trk1bOWQP0dytaWbwPSpwnt+avzJx3hibGb3DBRZjwWOegNufS2oNumJ0br5UJH
      UgVOnL18CYGAJvMbO4We1caZ5zw6lA0krUfIeXQoGyTQEdJfUHbr5j+KeFzkaj/54fdPNLzj
      4iB3DkPiN1MFjxMXWopmdFa3mtcXx3VZ4wzb9cszrXIh1eC/sLjrrny8MnHtEpBknKYxgh6L
      RXaTmyZk4wWdIsBm8qsOHoJYazlCQ5Cp7XfwYGnE0PWmZLn2Wdw5ceP+RmZyLCqLKsWQkNUV
      dOQUim77C8qc/kh+fYv2HXj7f9k5yJ2jt308AFcq4PJ8VOaFUqXSymwjkQUAQKtSKjZkEdUl
      XlRhSNdNoVlq1wSV9EwEFQAi5XJZ4uqZendsMt7PwcMaxuiltjbpg/Y7eFy4OMIV8roziHqd
      meQyRIfsdnuhk6pyRMCerzZVyOELwvx6STmFCXQeBWVP684BAADASG4kZVUdv3iF6m9x18oW
      ygDGpifHDhnGbnIDIhzxyFAxu6sDlBOknoOH0G4UGvzUWOypT+wk2EugfD5fqVQAABRFTU9P
      n3RUx8vAneMI6S8oW7v3IafbVV298SdncIXGQBN9hPQXlDF2Zy7TMuQzq7R6jDtHtlxnKFIS
      VcZOpdeXhmdfQ23m5OjIzta6ZUO5jogTcGLrqx7QityoUJ4hBDL2e0A7WFSV1aYCvCQMEAu2
      EbxqeElzZSMzNDYCRBmjSRSGWqL5ysKlF7aOs7h59/Oi8YPrsX/41S27Aw96Xevp5l/+/Hv/
      5Zd/P3H1ejaXA83q9Ld/EvM+Wc7RX1AGI+SrC5EWJx3raZwgB7pzZEsygRqFzfs7nVg8CjRp
      Y2MTReHJ0ZFiqaRL7USOH52a7OcBjY3a0dt54XKE2O8BffHyaDOdNtxDqN+ZTtxH7GGKpkud
      dIWn7M5is8arpHeM1VZ3W9cWLr2wGjXjj6DZFVGSAQCjU9O59TuwAVc7Ik1i1YaEobB26EO9
      xIKyI+EwPrFGOE8AABJVSURBVNE9Ow4TRi5dOGz/lIdV7FIuJRuAF9VeYVrsNDPl1szUYQfa
      x8qXWhQ+W8fC/i0v15Y+QzGHZMOuXBg9ypBPB4NC4hHS36FsKOR/76NV2uMEgwQa8FgOFJSN
      T47q3RMN7Tg52Cc6X2pLOt+AKacd7eqAsGGgU6pZpN3LIqpqSBbE1+vfuvHND95/f3I8mq8K
      Diejclx8Zo62xE+XEv6A19Kkajnf0JmpUb9Sb/EmxLB2J260JIBimCm1CIcHw+nocKBeKbY5
      vlHjnX7WEHsWdzBmyRBCKbpW2lp1xC75aFCscv6Ah6DYA9ownCR7CTQ/P98TlPWuQLOXz+DT
      +34O9IkulQqCSkmV1fXc/JiX5ySTROyqWeXMzE4atXA2Pk5gKAAAw/Cd7ZRuw1S+vJEs+OIX
      aBufLxR2czkfaZEOPwBQqZSBOypnEaoNKSQeZHnmtblwvdKR8gVXaDQ6HNhNbmazOQv2dbqC
      VkrhvsmmIIYYo12XmhYaI/XdbNGgRE5FeEV1urynMIH6O5Tl0zsOj6/WEkajT7Ha4WXhMZVo
      Wdamr15+gsWd0EnnisHhqMi1IAgaHh4GAORS24qmUO7osO+QFnetbKEcisRYDKwlUl4XZaHs
      cMADAMjubpKuiM/1ciwR7t/yMpP4/L0PE5jP+9c/PoOCskEl+gjp71AmKJY36MLPqDh6UIk+
      Qs6joAwAwDcq6XoxsVyZmw1s5RpzE5Ey3z2F7dxOP3sLd86VoAwAUCqXLQsIAl+uVAxFqFZr
      K2ubJx3US8mjMdBDQdni4uL2nbf/sCW7HPhP/+zNk45wwKmmv6Cs3W7zgu5yPP5x5GVlUEg8
      Qs67oGzAc3JOHcoyOzuCKqmCZCNZmrQpkmHst7iTEYLF1EaVcAdwnBwdOa+Lnw9Bf0FZeXtp
      swF1FeGNb339RMM7LiRRbCsKrbc+T5ZmIoQqw6lycyzqVjRTUwVVozx+gjWUzYbEOlyDBHoM
      /QVlm6tLLWZmfOjUFc6Pium5ud4LX6zQKyX35ZTas50m+gvKbvzgL1O5Ei+f3ort81jc7R9E
      e71eVVWPIqJzynkXlA14Tvq3vBTquZblEhq56Qund4VGz+Iu4sVUdPjydPTp9v3CnUNQ/YtX
      R9fuf057h7Rm9qMt4WrMPjZ3jT1jHgj9MHXpo/feJ7whUVTkTuNbb37v45v/5By6xPOtcmrj
      +7/4Gxf15DmfvUp0T1C2urraMwd6/3f/+tvf/Po3f7hzvGfwfGAkw1JYsVAPhjxPu2+7nPv4
      /lKxWAYAANCtVGqpZGJjaxsAazexJihnVwm1D8s0Oipw21kMRUbicaCrMIwwTjeFQ3PTY4Vy
      +zAHeSRptdvtJElmMpnXX38dKO0sjwC1FQ2f2cWpPR5pos+mG9tT8Fya6HPlUDaoRB8h/R3K
      TE1qdsRqi5+ZHGiiBzyO/g5lq5++/aCMjoyf2R4RD32id3Lm/KVIvVKHcDyTz/lZO+PxGKII
      E0R4ZBQzOlvZumWD/U681ZQRCukUq3Qw7KJt9XI9PjNHo9b6g2WUcXZ1mWsJlNOO2mwYYiu1
      5HjQnk6siMx4mJI1iMRxRGhxlxYXzti9sr+gDKPsLi+m8WdW2tHziZ4M4hRgt1PpzfVkMDbh
      ZrBWrVKslKq1djA2MX3hAl+sl8q1akeMOyHNhimmZlfNrboQovWddNUXv0DD3Tsff8SOzlNq
      QVBwsmuDartdQIg4pTez9VrNFvJVOtVMA5qbDiY31yeuLGDYSZ/8kXIeBWWHnExNbScslHnM
      PEYhsyvo0NR4vFEpcpIm8OL0pVkEAposJFKFntXGmec8trwcaKKPkP4OZf/+//q3Q2MzDcn6
      xQ/7tkF6uRlooo+Q/oKyq9evffDxsuPsergf5M5hSPz6Tt7rwvimohmdB5uNV1+Z0CWNM2yv
      zl9slvK7de4Liztz+aOlqVcuA1HGWRrDmYnR6M7WuglsnKBTBNhIfNXBQxQqTdfQEDC1/Q4e
      dhrRdb0hWe59Fncu3LizlrowEZNElWZJyOzyOnIKVdt7CUTTdCQSURSld0ebvfLa7JXXTjSw
      4+Ugd47e9skgXC6D+YWYzPHFUrmZSiKxawCAVqmYb0gCqou8qNqApplCs9is8irpnQopAESL
      pZLUrqXq3YmpsX4OHlYYp++21At+aL+Dx8xcrJPN6a4Q6nOmt+5D9JDD4ci3d6sdIujIVpoq
      5AgMwdxqUT6FCXQeHcr2cxh3DgAAAEZiLSEr6sTlq3R/i7tmOlcCMDZ7YeKQH72dWLORztHo
      cCGzrQOsw0s9Bw++XS/U+AsT8Wc+qRfJI1F9T1Bmt9sXFxc//sM7/uGRrd3sW29++6QjPHoG
      hcQjpL+gjMDhQqkUCJ7NibBBAh0h/QVl/mB4wuOHsDOrjz7YnSOXqzQYipQklWHITGJlaPo6
      Clnj8chuchPAKMeJOA5vbX/VA1pWmjXSE0Sg7n4PaAeDqoraUoCHhAFswTaC1wwPaa5v5oKj
      ESDJGEWiNqgtmYvzsy/M4q6HpUu3PviQ8AQlSVG41tff+NPP3v5XR2hWENqVdOLNn/0bJ9nv
      bv3H7L1jZmamJygbGxsDAIRj48ca+olzoDtHriITiFHcepDqjIxELE1KJLZQBB6PR8rlsi53
      kgU+NjHRzwMajbPYnaJwKUzs94CemYu1MlnDHUK9jkzyAcIOkTRd5jI1nmKdpVZNUCl3nNHX
      Uu2r87MvWIJkml1OBUN2Vte6vpERoGswgjBOV1frXJyKFyttZ8z7xIMc5FB2h6DtDVG/fmX2
      +E/kRfO0PtE9Ow7ThsxOHXaA/LCKXc6nFQPiJaVXmBa5Vq7SPp0D5GfrWNi/5eW9Tz/c2s3C
      rOfnZ7Hd06ASfYT0dyjDSXxm9rJqveCb8gviYSWaFwT2CwnV/t/f/u1fpffOx/9eLUOttMSg
      z/08cQrtBkQ6aPzJA5ET5DwKygAAqtC++dEduyVFF74R9zs++/AP+ab8kx+/lU2sZ9oSaUql
      ljLipyXJaGkKKigq5SbNhq5jsMsNROHN7/7p27+/GQnad6u6341trW+9/qNfBFHutx8uI4jN
      0kTd0E0qFPLAYrHW6iIOj9tj4zNtyOdhuqJogK6N8n7j+uVCKpHYTqsq6gwxWqNioI4aJ40H
      KQimK82W2S7joUkfrqaKHZfHMRQZm4ydOr+v/oKyXGoLJe2KAWLh4MnGd0x06hULxS1Ncjld
      AJgQBPn9AQCA2Ol0bRhQJMNGAABBKDE25FOr7RbEUAgK613L5cFYCgAQDAbrXIfGDAjgw9FR
      hkCAqnZEdXg44CdZxUIF3QaA4nS6UIBhTkenXOl2aY+TqUkSQTkCQT8AoFpvYgjUqHH2EMNx
      3NDEuNsPd7lcOp2mAyF/0NsCAAAr4HcTrIvnOABOXQL1dyh7/+avOUnvaOC/+8VPTjrC4+VL
      lWgbio9Njj/+ntGzjQ5FYsBQERixO+wAgOxuUjbM0HDMTh/KkaJXuR6OjrI4SBVqNGLSnpCd
      wgEAmd3tQCROoC/HspADW142OA3A+De/dgYXZ2ra4Y3YBzyB8ywoMyrlViDo4zmOfaaW6QPA
      +Wx5CQAoZXebCp9crcYiVKHSHosN71TlP/v2WRYgHBN7Cu+eoGx5edlmswEA/uk//t//8p9/
      9c//5eaJxnaMQBBkWTDNEACyOTx+CEAIGBSHnoX+gjKKZXPFkjcSO7G4jplgJB4E4OI+1fK5
      EDAfA+fRoazbPRcrl18M59GhDIZhURBIhum/QsvUBNliDvc0PqC/Q9ndz24hBFNvn1mHslq5
      XKgWNb4j2ZxBF9xpyYVyLRzx4whiwbCuQASLSuV8l3L7QpEr02dwee5R8ehH+Mtf/lKWZQiC
      AADZzE6xUvf7zqxDGQCAcXrDIW+90YAg4HQ6Y+NTQ363AaGaLAAALACCwQDFOkW+c9KRnmr6
      C8pe+9o31S7oiGe24BYb3xM8BUa4Xim5x2Ao/bS8rA5lR2VxN+A56S8o21pbNkyb0LWdckEZ
      z3NCu+UZimLwUyhP9gnKDEHQGeaL3sSGWm5JQZ/riKM8lfA8T2K25G6WJEkYxxVOHJsaL2RS
      DqdTVDSu2QyNjPbm5h5Pf4eyjcTGg5XlTC53vCfxfGiy8Mnte7pU20xVn3pfsfPbt9+9e/uD
      re0SAObntz7Y2dm+9cE7//Wjuzd//a+Cesaf83VZ+PzuEoLTkGWFfKzQrKVLja7ZRQw5VZFK
      hSIKA/RwLhD9BWUXJidlA9HBqZ4QxkgmHPIrhkw/ubv5l+nUqxaCA2D0Lj+QDapU6xhBBVDW
      aVqi2mXOtEciSjJDQV+73SZpulYX4qOxTnut1mzt5msupwozbhgHJHKoi/p5FJT110SfLdue
      w6BpGrbvMvOlPw9J/5aXlXwGoRhe0s+koGxQiT5C+juUffrpLVE2ujgbO4uCMhh+eHsyBF5n
      2L1boCgKlgUxzJHV4g1V7MiWx/nUzpUvEf0dyoaGhkTDZkOefnDxkqAK7ZsffR50gkzeunwx
      cOfzB+7wiCR23CiMONzZZNIbib96/TosFj9eyVRa/LXpUDrX1GET5WVbYGTEBd25s/L6j34R
      tCPv/ub/w/0xINd53sRddq1ds8GkipIXAtSD5QdUfMHdrdYFyOdni+nS9378ozM2uNpLoGAw
      WC6X0+l0by7s2tdunGRQx09PEw2AMRl38aptODpK2B1BD61LOi8Lw9FR0u5gKUwSgcPlsXsD
      ktiOjAxDCFCr7YquNjrGng7alCVZhwxT4TiZN+lwxI3DNgCt5Gp1vOv1ebswAF1gQwknQ/Mk
      rHTBGUug8+hQdkh2kxsmyozHDjQIyKW3Bd02PTFaLxcshGhzwvjoCASAJvOFGh8/ix3Tv0r/
      lpe33/tVstolGepMtrwcaKKPkP6CMsQxfNXZ3Si2Ti6wY8Q0zd6L/d7skiRRFPVH77O69Xrb
      7fMc8IBv1KsdjMLtByxBrFYq3kDgeYoDkiSZpvkM7vEvkvMoKFMURRM773xyjzGl6PzXR3z2
      z299VGzJP/zBdw2x884n92JhR60gutzw8mbr0mxIrDc4xPG9b14vbW9tNXkn0uU4AXHYM0tb
      F67NcLVWFyXdTsfli9MPlu5oipxMVaLxsCS2GJgQIIxGgWnIjD3Y4KqgI5GhiAvvLq3u/vjn
      f0FY8m9vfhAKucV2W4BpD25r1XMQGWBYxg7xd7fri7OxWoO34QQFlIqCn0LV9nkUlIGHlWhN
      cjqdAJiQDfL5/Q+3SxzXBQhCsi5WAQBYoOtyewAAstjRTRgAQNmdosz7/H4IWMACGMkwJAoA
      4DiOwNCRsQmWxYMetlqooATjduAoYuwmioSXcvmput61MHNkbAK1AZ1rqYatCyyOE0TEjPtH
      YFvXgohGh7cQyedyAQCABXDazkBYQxFO8Bs7iP4OZaufvy/CflXmv/n1V046wqPnad05AAAA
      GMmNJECw2NhY35q1yLWyhTLr9IT7O+T1YTe5ARGOeGSomEuTrIMTlJFwCAAgtBu8DoWeb139
      C+NRAiWTSZZlg8HgwsLC8r17F+evfvDee69/+/WTjvDoGVSij5D+grL4xAQMgSvzV04ytGPj
      YSX6IHeOh7TrFdzuI7/S3qJSLvuCwecZIMuiqFumnTmxaUee50gMTmynSYpEMELmxInpiXxq
      x+Fyi4raaTSGY+OHWabd36HMzrIAAJfrzCpjDnTn2FzdrjZZxNzaKYxOTorllH/8Cs/z33h1
      Yene7a6urW9lwiMjqtJm1noDZMg0JNYRqnNNRGgBZzjAQvcebP/0r/6StORf/+a9cNjbrjck
      lPXhUK2WxZghnCRdsLC83ZidG+tUmwaCuwgr1zT//K0bL8xNp6eEefONG5BlDfvt27v5XFUe
      nRpFuvJuWegKVRdDoPihJlb3fkXLy8sAgFQqtbS0BADYXLnz8Se3P7+/cnzncLLsuXMA4HK6
      AAAP3TmAafOHQnYKi45OEIiNYZlqtY5hCACA63QABKKjE063ezw2AoCFEqzH4xkKh6q5AoZh
      wWBA0w3LMmPjU5gN6EJTMWwGABzHcRzHulyB4LDbQXMc15Ekr9sNAQtYFk47GJrBbV3zBZ5+
      TwnTarVIhqnWhLHxURbrVhvNZLaKyBWUccM49XRyji85lCVW7g1NzKwtr736ysIxn8sJcxif
      6J4dB+N0jwyHDnnYh1XsUi6NUSwnqr3CtNhptuRuuP84/UVzlHKOL7W8LBZLpsLVZGh+dvIo
      Qz4dDCrRR8j/D3ugiPoank4RAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='ad_calls' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='gross_media_revenue' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='gross_media_revenue with filter' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO3daXDc1oEn8Aeg0egLfd/sbpLN+5BISaTuW5Zs
      x7Ys2/EmGeeqTDmzM1UztbtV2drZmdr1Vqp2N1uVyU5l1klmk4wn8SHLsS3LuqybEknxvslm
      82yy2Wz2fTcajWs/iLYlWZtQhqTE5vt9I4iHfkD/8R6AhwYQQRAABH1e6B+7AtAXGwwQJAoM
      ECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAk
      CgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoM
      ECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAkCgwQJAoMECQKDBAk
      CgwQJIrknlOTyWQikXjEVYG+iJB7vq2H4zie5x99baAvnHsHCILWCB4DQaLAAEGi3Psg+p7o
      5HI4zQoAIChGGku0UobK5ymO0GpkgMmnkhlOSmpIBX4rk3whvhLJSQ1Oo0LgWTqXyghKjYRO
      JtIFDuAKtVZDyjA2l0ymcgUeU+iNOgWOIYggcGw2HskiapNRJQEAAIGjc6lkhiPUGrVS+jAD
      L7BUKpHMUgwPEImM1Bs0BCpwhXQsnqE5AcGkClKjUUnZXCqV4+UajUqOo4DNRsO0zKRT4ijy
      EOv2kFExf0pqtZL4WgtwVDKex9RqDHvllVfWVoT1vP1ffni8Z3ZydMw7h5buKJOGx7ouXZmX
      1ZXJYp62t1/73VBeV+Z2qHEAAJ/33/jl//yH14Ou57c5+Hzc2/bmyUW1NnjljTdO3ejrG5qJ
      4cYSHTt38d13zl1pb++epIzlFRYVJhSj84Onfv2zD2Y1LdvKFAAArhAavfzGL98cyOvLKlya
      Na/h/WOSU+0fvH/mSntP/9BA75APddSUkYWZ6++8/t7VvsGBvqExX5zXl+ji3e/9+s2rSY2z
      zK4j0Hj7P//oGrd5o0OFYw+vbg/b2L/8zb9mdh6sItdaINb/5qtnk+W199ECxZb8ed2uf//D
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Metrics Crossvalidation Across Tables (filtered)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Unfiltered' width='192'>
      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
    </thumbnail>
    <thumbnail height='144' name='Text' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAIAAAAeHsdkAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAABQElEQVR4nO3SMQHAMAzAsKz8OWePObSHhMCHv90dmDm3A3iF
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFcgP9eEEHcxAtUgAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
