<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.13.1231.1350                -->
  <repository-location id='SSNDashboard' path='/workbooks' revision='3.3' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
    <color-palette custom='true' name='Red-Black-Blue' type='ordered-sequential'>
      <color>#993300</color>
      <color>#000000</color>
      <color>#000099</color>
    </color-palette>
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Total GDS List Page&quot;' />
          <member value='&quot;Total Hotel Details Page&quot;' />
          <member value='&quot;Total Hotel List Page&quot;' />
          <member value='&quot;Total Packages List Page&quot;' />
          <member value='&quot;Total SEM List Page&quot;' />
          <member value='&quot;Apollo List Page&quot;' />
          <member value='&quot;Galileo List Page&quot;' />
          <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
          <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;Hotel List Page - ebookers.com&quot;' />
          <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
          <member value='&quot;Hotel List Page - HotelClub&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
          <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
          <member value='&quot;Martini Package Page - Travelocity&quot;' />
          <member value='&quot;Package List Page - Orbitz Global&quot;' />
          <member value='&quot;Package List Page - Travelocity&quot;' />
          <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Worldspan List Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
          <member value='&quot;Year&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
        <calculation class='tableau' formula='&quot;Site&quot;' />
        <members>
          <member value='&quot;Site&quot;' />
          <member value='&quot;Page Type&quot;' />
          <member value='&quot;Ad Unit&quot;' />
          <member value='&quot;Segment&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Difference Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Percent Difference&quot;'>
        <calculation class='tableau' formula='&quot;Percent Difference&quot;' />
        <members>
          <member value='&quot;Actual Difference&quot;' />
          <member value='&quot;Percent Difference&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Atlanta&quot;' />
          <member value='&quot;Atlantic City&quot;' />
          <member value='&quot;Austin&quot;' />
          <member value='&quot;Boston&quot;' />
          <member value='&quot;Charleston&quot;' />
          <member value='&quot;Chicago&quot;' />
          <member value='&quot;Dallas&quot;' />
          <member value='&quot;Daytona Beach&quot;' />
          <member value='&quot;Denver&quot;' />
          <member value='&quot;Florida Keys&quot;' />
          <member value='&quot;Fort Lauderdale&quot;' />
          <member value='&quot;Fort Myers&quot;' />
          <member value='&quot;Honolulu&quot;' />
          <member value='&quot;Houston&quot;' />
          <member value='&quot;International&quot;' />
          <member value='&quot;Jacksonville&quot;' />
          <member value='&quot;Knoxville&quot;' />
          <member value='&quot;Las Vegas&quot;' />
          <member value='&quot;Los Angeles&quot;' />
          <member value='&quot;Miami&quot;' />
          <member value='&quot;Minneapolis&quot;' />
          <member value='&quot;Monterey&quot;' />
          <member value='&quot;Myrtle Beach&quot;' />
          <member value='&quot;Nashville&quot;' />
          <member value='&quot;New Orleans&quot;' />
          <member value='&quot;New York&quot;' />
          <member value='&quot;Ocean City&quot;' />
          <member value='&quot;Orange County&quot;' />
          <member value='&quot;Orlando&quot;' />
          <member value='&quot;Palm Springs&quot;' />
          <member value='&quot;Panama City&quot;' />
          <member value='&quot;Philadelphia&quot;' />
          <member value='&quot;Phoenix&quot;' />
          <member value='&quot;Rest of US&quot;' />
          <member value='&quot;San Antonio&quot;' />
          <member value='&quot;San Diego&quot;' />
          <member value='&quot;San Francisco&quot;' />
          <member value='&quot;Savannah&quot;' />
          <member value='&quot;Seattle&quot;' />
          <member value='&quot;Tampa&quot;' />
          <member value='&quot;Virginia Beach&quot;' />
          <member value='&quot;Washington DC&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Metric]' param-domain-type='list' role='measure' type='nominal' value='&quot;Pages Available&quot;'>
        <calculation class='tableau' formula='&quot;Pages Available&quot;' />
        <members>
          <member value='&quot;Pages Available&quot;' />
          <member value='&quot;Fill Rate&quot;' />
          <member value='&quot;Page CTR&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;Gross Media Revenue&quot;' />
          <member value='&quot;Ads per Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
        <calculation class='tableau' formula='&quot;True&quot;' />
        <members>
          <member value='&quot;True&quot;' />
          <member value='&quot;False&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;OWW&quot;' />
          <member value='&quot;Apollo&quot;' />
          <member value='&quot;CheapTickets&quot;' />
          <member value='&quot;ebookers&quot;' />
          <member value='&quot;Galileo&quot;' />
          <member value='&quot;HotelClub&quot;' />
          <member value='&quot;Orbitz&quot;' />
          <member value='&quot;Travelocity&quot;' />
          <member value='&quot;Worldspan&quot;' />
        </members>
      </column>
      <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-07-30#'>
        <calculation class='tableau' formula='#2012-07-30#' />
      </column>
      <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
        <calculation class='tableau' formula='&quot;Yesterday&quot;' />
        <members>
          <member value='&quot;Yesterday&quot;' />
          <member value='&quot;Reference Day&quot;' />
        </members>
      </column>
    </datasource>
    <datasource inline='true' name='market_data' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;dimensions.*,&#13;&#10;&#9;data.Impressions,&#13;&#10;&#9;data.Clicks,&#13;&#10;&#9;data.Conversions,&#13;&#10;&#9;data.Spend,&#13;&#10;&#9;data.&quot;Auction Position Sum&quot;,&#13;&#10;&#9;data.Revenue,&#13;&#10;&#9;data.&quot;Exposed Conversions&quot;,&#13;&#10;&#9;data.&quot;Exposed Revenue&quot;&#13;&#10;from&#13;&#10;(select *&#13;&#10;from&#13;&#10;(select &#13;&#10;&#9;distinct(aggregation_level_date_in_et) as Date,&#13;&#10;&#9;0 as Zero&#13;&#10;from intent_media_production.advertiser_account_report_aggregations&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)) dates,&#13;&#10;(select&#13;&#10;&#9;imm.name as &quot;Market Name&quot;,&#13;&#10;&#9;imm.report_segment as &quot;Segment&quot;&#13;&#10;from intent_media_production.intent_media_markets imm&#13;&#10;union&#13;&#10;select &apos;Other&apos; as &quot;Market Name&quot;,&#13;&#10;&#9;&apos;Other&apos; as &quot;Segment&quot;) markets,&#13;&#10;(&#13;&#10;select &#13;&#10;&#9;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end) as Pub,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end) as &quot;SSN Channel Type&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;&#13;&#10;from intent_media_production.advertiser_account_report_aggregations ppra&#13;&#10;left join intent_media_production.ad_units au on ppra.ad_unit_id = au.id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;where ad_type = &apos;SSR&apos;&#13;&#10;group by &#13;&#10;&#9;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end),&#13;&#10;&#9;au.name&#13;&#10;&#9;) ad_unit_names) dimensions&#13;&#10;left join&#13;&#10;(&#13;&#10;&#13;&#10;select &#13;&#10;&#9;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end) as Pub,&#13;&#10;&#9;s.display_name as Site,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end) as &quot;SSN Channel Type&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;,&#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;&#9;ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;&#9;aggregation_level_date_in_et as Date, &#13;&#10;&#9;sum(impression_count) as Impressions,&#13;&#10;&#9;sum(click_count) as Clicks,&#13;&#10;&#9;sum(click_conversion_count) as Conversions,&#13;&#10;&#9;sum(actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(auction_position_sum) as &quot;Auction Position Sum&quot;,&#13;&#10;&#9;sum(click_conversion_value_sum) as Revenue,&#13;&#10;&#9;sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;sum(exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;&#13;&#10;from intent_media_production.advertiser_account_report_aggregations aara&#13;&#10;left join intent_media_production.ad_units au on au.id = aara.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = aara.market_id&#13;&#10;left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#13;&#10;where (case &#13;&#10;&#9;&#9;when s.name = &apos;TRAVELOCITY&apos;&#13;&#10;&#9;&#9;&#9;then aggregation_level_date_in_et &gt;&gt;= &apos;2011-04-01&apos; and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;&#9;&#9;&#9;and (((au.name like &apos;%SEM%&apos; or au.name like &apos;%Hotel Details%&apos;) and aggregation_level_date_in_et &gt;&gt;= &apos;2012-05-15&apos;)&#13;&#10;&#9;&#9;&#9;or (au.name not like &apos;%SEM%&apos; and au.name not like &apos;%Hotel Details%&apos;))&#13;&#10;&#9;end)&#13;&#10;group by e.name,&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end),&#13;&#10;&#9;au.name,&#13;&#10;&#9;aggregation_level_date_in_et, &#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;),&#13;&#10;&#9;ifnull(imm.report_segment, &apos;Other&apos;)&#13;&#10;) data&#13;&#10;&#13;&#10;on dimensions.Date = data.Date&#13;&#10;and dimensions.Pub = data.Pub&#13;&#10;and dimensions.Site = data.Site&#13;&#10;and dimensions.&quot;Type of Ad Unit&quot; = data.&quot;Type of Ad Unit&quot;&#13;&#10;and dimensions.&quot;Ad Unit&quot; = data.&quot;Ad Unit&quot;&#13;&#10;and dimensions.&quot;Market Name&quot; = data.&quot;Market Name&quot;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[market_data].[sum:Spend - Ref Week:qk]&quot;' value='Spend  ' />
          <alias key='&quot;[market_data].[usr:Clicked ROI - \%D PPW:qk]&quot;' value='Clicked ROI ' />
          <alias key='&quot;[market_data].[usr:Clicked ROI - \%D PW:qk]&quot;' value='Clicked ROI' />
          <alias key='&quot;[market_data].[usr:Clicked ROI - Ref Week:qk]&quot;' value='Clicked ROI  ' />
          <alias key='&quot;[market_data].[usr:Exposed ROI - \%D PPW:qk]&quot;' value='Exposed ROI ' />
          <alias key='&quot;[market_data].[usr:Exposed ROI - \%D PW:qk]&quot;' value='Exposed ROI' />
          <alias key='&quot;[market_data].[usr:Exposed ROI - Ref Week:qk]&quot;' value='Exposed ROI  ' />
          <alias key='&quot;[market_data].[usr:Spend - \%D PPW:qk]&quot;' value='Spend ' />
          <alias key='&quot;[market_data].[usr:Spend - \%D PW:qk]&quot;' value='Spend' />
        </aliases>
      </column>
      <column datatype='integer' name='[Auction Position Sum]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PPW])/[Clicked ROI - PPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]' />
      </column>
      <column datatype='real' name='[Clicked ROI - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - PPW])/sum([Spend - PPW])' />
      </column>
      <column datatype='real' name='[Clicked ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Clicked ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
      </column>
      <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
      </column>
      <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
      </column>
      <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Exposed Conversions]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PPW])/[Exposed ROI - PPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]' />
      </column>
      <column datatype='real' name='[Exposed ROI - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - PPW])/sum([Spend - PPW])' />
      </column>
      <column datatype='real' name='[Exposed ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Exposed ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
      </column>
      <column datatype='real' name='[Exposed Revenue - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='string' name='[Label - Pub and Ad Unit]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Type of Ad Unit]&#13;&#10;    WHEN &quot;Total&quot; THEN [Parameters].[Publisher]&#13;&#10;    WHEN &quot;Total Exit Units&quot; THEN [Parameters].[Publisher] + &quot; Exit Units&quot;&#13;&#10;    WHEN &quot;Total List Page&quot; THEN [Parameters].[Publisher] + &quot; List Page&quot;&#13;&#10;    ELSE [Type of Ad Unit]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Revenue - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[SDPPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day] - 14' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day]-7' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Spend - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PPW]))/sum([Spend - PPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Spend - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Spend - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Spend - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Zero]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
      <column-instance column='[Auction Position Sum]' derivation='Sum' name='[sum:Auction Position Sum:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed Conversions]' derivation='Sum' name='[sum:Exposed Conversions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Is Leap Year]' derivation='Sum' name='[sum:Is Leap Year:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Last Day of Month]' derivation='Sum' name='[sum:Last Day of Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Previous Month]' derivation='Sum' name='[sum:Previous Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - Ref Week]' derivation='Sum' name='[sum:Spend - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Year of Previous Month]' derivation='Sum' name='[sum:Year of Previous Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Zero]' derivation='Sum' name='[sum:Zero:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - %D PPW]' derivation='User' name='[usr:Clicked ROI - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - %D PW]' derivation='User' name='[usr:Clicked ROI - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - Ref Week]' derivation='User' name='[usr:Clicked ROI - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - %D PPW]' derivation='User' name='[usr:Exposed ROI - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - %D PW]' derivation='User' name='[usr:Exposed ROI - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - Ref Week]' derivation='User' name='[usr:Exposed ROI - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - %D PPW]' derivation='User' name='[usr:Spend - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - %D PW]' derivation='User' name='[usr:Spend - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\ssn_dashboard__market_data.tde' schema='Extract' tablename='Extract' update-time='1/9/2014 8:12:28 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Month Name]' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1181016' timestamp-start='2014-01-09 20:12:26.877000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.57953' measure-ordering='alphabetic' measure-percentage='0.183956' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Breakdown Color:nk]' type='palette'>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Top 10&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rest of US&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;HotelClub&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Worldspan&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Apollo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Galileo&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;11 to 40&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#67bf5c'>
              <bucket>2012</bucket>
            </map>
            <map to='#729ece'>
              <bucket>2010</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>2011</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[market_data]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[market_data].[sum:Auction Position Sum:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[market_data].[usr:Conversions per Click:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data].[usr:Clicked ROI - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data].[usr:Clicked ROI - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data].[usr:Clicked ROI - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data].[usr:Clicked ROI:qk]&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;[market_data].[sum:Revenue:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[market_data].[sum:Is Leap Year:qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[market_data].[sum:Exposed Revenue:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[market_data].[usr:Conversions per Impression:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[market_data].[sum:Year of Previous Month:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[market_data].[sum:Last Day of Month:qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[market_data].[sum:Impressions:qk]&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;[market_data].[sum:Spend:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[market_data].[sum:Exposed Conversions:qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[market_data].[sum:Zero:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[market_data].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data].[sum:Spend - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data].[usr:Spend - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data].[usr:Spend - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;[market_data].[sum:Previous Month:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[market_data].[sum:Clicks:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data].[usr:Exposed ROI - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data].[usr:Exposed ROI - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data].[usr:Exposed ROI - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data].[usr:Exposed ROI:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[market_data].[sum:Conversions:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
            <member value='&quot;Year&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
          <calculation class='tableau' formula='&quot;Site&quot;' />
          <members>
            <member value='&quot;Site&quot;' />
            <member value='&quot;Page Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;International&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-07-30#'>
          <calculation class='tableau' formula='#2012-07-30#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource inline='true' name='active_hotels_with_budget' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;pa.Date,&#13;&#10;&#9;pa.&quot;Advertiser ID&quot;,&#13;&#10;&#9;pa.&quot;Market ID&quot;,&#13;&#10;&#9;pa.Site AS &quot;Site&quot;,&#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;&#9;(case when pa.Pub = &apos;Orbitz&apos; then &apos;OWW&apos; else pa.Pub end) as Pub,&#13;&#10;&#9;spend_query.&quot;Impressions Served&quot;,&#13;&#10;&#9;spend_query.Clicks,&#13;&#10;&#9;spend_query.Spend,&#13;&#10;&#9;spend_query.Conversions,&#13;&#10;&#9;spend_query.&quot;Exposed Conversions&quot;,&#13;&#10;&#9;spend_query.&quot;Conversion Value Sum&quot;,&#13;&#10;&#9;spend_query.&quot;Exposed Conversion Value Sum&quot;&#13;&#10;from&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;pa.aggregation_level_date_in_et as Date,&#13;&#10;&#9;&#9;pa.advertiser_id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&#9;pa.market_id as &quot;Market ID&quot;,&#13;&#10;&#9;&#9;s.display_name as Site,&#13;&#10;&#9;&#9;e.name as Pub&#13;&#10;&#9;from intent_media_production.participating_advertisers pa&#13;&#10;&#9;left join intent_media_production.sites s on s.name = pa.site&#13;&#10;&#9;left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;&#9;&#9;group by pa.aggregation_level_date_in_et, pa.advertiser_id, pa.market_id, s.display_name, e.name) as pa&#13;&#10;left join&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;aara.aggregation_level_date_in_et as Date,&#13;&#10;&#9;&#9;aara.advertiser_id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&#9;aara.market_id as &quot;Market ID&quot;,&#13;&#10;&#9;&#9;s.display_name as Site,&#13;&#10;&#9;&#9;sum(impression_count) as &quot;Impressions Served&quot;,&#13;&#10;&#9;&#9;sum(click_count) as Clicks,&#13;&#10;&#9;&#9;sum(actual_cpc_sum) as Spend,&#13;&#10;&#9;&#9;sum(click_conversion_count) as Conversions,&#13;&#10;&#9;&#9;sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;&#9;sum(click_conversion_value_sum) as &quot;Conversion Value Sum&quot;,&#13;&#10;&#9;&#9;sum(exposed_conversion_value_sum) as &quot;Exposed Conversion Value Sum&quot;&#13;&#10;&#9;from intent_media_production.advertiser_account_report_aggregations aara&#13;&#10;&#9;left join intent_media_production.ad_units au on au.id = aara.ad_unit_id&#13;&#10;&#9;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;&#9;group by aara.aggregation_level_date_in_et, aara.advertiser_id, aara.market_id, s.display_name) as spend_query&#13;&#10;on pa.Date = spend_query.Date&#13;&#10;&#9;and pa.&quot;Advertiser ID&quot; = spend_query.&quot;Advertiser ID&quot;&#13;&#10;&#9;and pa.&quot;Market ID&quot; = spend_query.&quot;Market ID&quot;&#13;&#10;&#9;and pa.Site = spend_query.Site&#13;&#10;left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = pa.&quot;Market ID&quot;&#13;&#10;left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#9;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;Date,&#13;&#10;&#9;cast(null as int) as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&quot;Market ID&quot;,&#13;&#10;&#9;&quot;Site&quot;,&#13;&#10;&#9;&quot;Market Name&quot;,&#13;&#10;&#9;Pub,&#13;&#10;&#9;cast(null as integer) as &quot;Impressions Served&quot;,&#13;&#10;&#9;cast(null as integer) as Clicks,&#13;&#10;&#9;cast(null as float) as Spend,&#13;&#10;&#9;cast(null as integer) as Conversions,&#13;&#10;&#9;cast(null as integer) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;cast(null as float) as &quot;Conversion Value Sum&quot;,&#13;&#10;&#9;cast(null as float) as &quot;Exposed Conversion Value Sum&quot;&#13;&#10;from&#13;&#10;(select &#13;&#10;&#9;distinct(aggregation_level_date_in_et) as Date,&#13;&#10;&#9;0 as Zero&#13;&#10;from intent_media_production.publisher_performance_report_aggregations&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)) dates,&#13;&#10;(select&#13;&#10;&#9;imm.id as &quot;Market ID&quot;,&#13;&#10;&#9;imm.name as &quot;Market Name&quot;,&#13;&#10;&#9;imm.report_segment as &quot;Segment&quot;&#13;&#10;from intent_media_production.intent_media_markets imm&#13;&#10;union&#13;&#10;select&#13;&#10;&#9;cast(null as integer) as &quot;Market ID&quot;,&#13;&#10;&#9;&apos;Other&apos; as &quot;Market Name&quot;,&#13;&#10;&#9;&apos;Other&apos; as &quot;Segment&quot;) markets,&#13;&#10;(select &#13;&#10;&#9;(case when entities.name = &apos;Orbitz&apos; then &apos;OWW&apos; else entities.name end) as Pub,&#13;&#10;&#9;sites.display_name AS &quot;Site&quot;&#13;&#10;from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;left join intent_media_production.ad_units on ppra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on intent_media_production.sites.id = intent_media_production.ad_units.site_id&#13;&#10;left join intent_media_production.entities on intent_media_production.entities.id = intent_media_production.sites.publisher_id&#13;&#10;where ad_type = &apos;SSR&apos;&#13;&#10;group by &#13;&#10;(case when entities.name = &apos;Orbitz&apos; then &apos;OWW&apos; else entities.name end),&#13;&#10;&#9;sites.display_name&#13;&#10;) sites</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[active_hotels_with_budget].[usr:Active Hotels - Ref Day:qk]&quot;' value='Active Hotels' />
          <alias key='&quot;[active_hotels_with_budget].[usr:Active Hotels for Table:qk]&quot;' value='Active Hotels ' />
          <alias key='&quot;[active_hotels_with_budget].[usr:Calculation_3610106160432967:qk]&quot;' value='Budget per Hotel ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue for Table:qk]&quot;' value='Gross Media Revenue ' />
          <alias key='&quot;[publisher_data].[sum:Pages Available for Table:qk]&quot;' value='Pages Available ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page for Table:qk]&quot;' value='Ads per Page ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM for Table:qk]&quot;' value='Available Page eCPM ' />
          <alias key='&quot;[publisher_data].[usr:CPC for Table:qk]&quot;' value='CPC ' />
          <alias key='&quot;[publisher_data].[usr:CTR for Table:qk]&quot;' value='CTR ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate for Table:qk]&quot;' value='Fill Rate ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM for Table:qk]&quot;' value='Served Page eCPM ' />
          <alias key='&quot;[sold_hotels].[cum:sum:Sold Hotels:qk]&quot;' value='Total Sold Hotels' />
          <alias key='&quot;[sold_hotels].[usr:Budget per Hotel - Ref Day:qk]&quot;' value='Budget per Hotel' />
          <alias key='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' value='Sold Hotels' />
        </aliases>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - PMTD])/[Active Hotels - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - PQTD])/[Active Hotels - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - PW])/[Active Hotels - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - YTD]-[Active Hotels - PYTD])/[Active Hotels - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPW])/[Active Hotels - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPY])/[Active Hotels - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - SMTDPY])/[Active Hotels - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - SQTDPY])/[Active Hotels - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - SWPY])/[Active Hotels - SWPY]' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Advertiser ID] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Advertiser ID] END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Advertiser ID] &#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] = [Ref Day] THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Active Hotels - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
      </column>
      <column caption='Budget per Hotel - PYTD' datatype='real' default-format='C1033%' name='[Calculation_0040106162202694]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - PYTD])/[Active Hotels - PYTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PYTD' datatype='real' default-format='p0.0%' name='[Calculation_1070106162755693]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2790106162448809]-[Calculation_0040106162202694])/[Calculation_0040106162202694]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SDPY' datatype='real' default-format='p0.0%' name='[Calculation_1110106160520217]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_4300106160335263])/[Calculation_4300106160335263]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PQTD' datatype='real' default-format='C1033%' name='[Calculation_1230106162113303]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - PQTD])/[Active Hotels - PQTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SDPW' datatype='real' default-format='p0.0%' name='[Calculation_2460106161409047]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_6410106161224985])/[Calculation_6410106161224985]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - Ref Week' datatype='real' default-format='C1033%' name='[Calculation_2600106161507552]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - Ref Week])/[Active Hotels - Ref Week]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SMTDPY' datatype='real' default-format='C1033%' name='[Calculation_2670106162036194]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - SMTDPY])/[Active Hotels - SMTDPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - YTD' datatype='real' default-format='C1033%' name='[Calculation_2790106162448809]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - YTD])/[Active Hotels - YTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SQTDPY' datatype='real' default-format='C1033%' name='[Calculation_2840106162136209]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - SQTDPY])/[Active Hotels - SQTDPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PMTD' datatype='real' default-format='p0.0%' name='[Calculation_3020106162305006]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_4170106162336528]-[Calculation_6310106162009648])/[Calculation_6310106162009648]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - Ref Day' datatype='real' default-format='C1033%' name='[Calculation_3610106160432967]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - Ref Day])/[Active Hotels - Ref Day]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SWPY' datatype='real' default-format='C1033%' name='[Calculation_3610106161728278]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - SWPY])/[Active Hotels - SWPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - MTD' datatype='real' default-format='C1033%' name='[Calculation_4170106162336528]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - MTD])/[Active Hotels - MTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PW' datatype='real' default-format='C1033%' name='[Calculation_4190106161651870]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - PW])/[Active Hotels - PW]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SDPY' datatype='real' default-format='C1033%' name='[Calculation_4300106160335263]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - SDPY])/[Active Hotels - SDPY]' scope-isolation='false' />
      </column>
      <column caption='Label - Active Hotels' datatype='string' name='[Calculation_4470422111851734]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Active Hotels&quot;' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SMTDPY' datatype='real' default-format='p0.0%' name='[Calculation_4960106162539043]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_4170106162336528] -[Calculation_2670106162036194])/[Calculation_2670106162036194]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PQTD' datatype='real' default-format='p0.0%' name='[Calculation_6200106162656365]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_1230106162113303])/[Calculation_1230106162113303]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PMTD' datatype='real' default-format='C1033%' name='[Calculation_6310106162009648]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - PMTD])/[Active Hotels - PMTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SQTDPY' datatype='real' default-format='p0.0%' name='[Calculation_6380106162722912]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_2840106162136209])/[Calculation_2840106162136209]' scope-isolation='false' />
      </column>
      <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget])/[Active Hotels]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SDPW' datatype='real' default-format='C1033%' name='[Calculation_6410106161224985]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - SDPW])/[Active Hotels - SDPW]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SWPY' datatype='real' default-format='p0.0%' name='[Calculation_6560106161837608]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_3610106161728278])/[Calculation_3610106161728278]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PW' datatype='real' default-format='p0.0%' name='[Calculation_8590106161806731]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_4190106161651870])/[Calculation_4190106161651870]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - QTD' datatype='real' default-format='C1033%' name='[Calculation_9970106162410403]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels].[Budget - QTD])/[Active Hotels - QTD]' scope-isolation='false' />
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Market ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Percent of Budget Used]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Total Spend])/SUM([sold_hotels].[Budget])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels].[Gross Media Revenue 7 Day Average]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Month Name' datatype='string' name='[Previous Month Name (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='real' name='[Total Spend]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Market Name] = &quot;Total&quot; THEN [Spend] END' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Active Hotels - Ref Day]' derivation='User' name='[usr:Active Hotels - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_3610106160432967]' derivation='User' name='[usr:Calculation_3610106160432967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[sold_hotels].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\ssn_dashboard__active_hotels_with_budget.tde' schema='Extract' tablename='Extract' update-time='1/9/2014 8:02:47 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[Previous Month Name (copy)]' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            <calculation column='[Total Spend]' formula='IF [Market Name] = &quot;Total&quot; THEN [Spend] END' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='8506391' timestamp-start='2014-01-09 20:02:47.105000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.214929' measure-ordering='alphabetic' measure-percentage='0.564994' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels:qk]&quot;</bucket>
            </map>
            <map to='#39737c'>
              <bucket>&quot;[sold_hotels].[usr:Total Sold Hotels:qk]&quot;</bucket>
            </map>
            <map to='#86b4a9'>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels for Table:qk]&quot;</bucket>
            </map>
            <map to='#86b4a9'>
              <bucket>&quot;[active_hotels_with_budget].[usr:Total Sold Hotels:qk]&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;[sold_hotels].[sum:Budget:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[sold_hotels].[usr:Calculation_6230419180048246:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[sold_hotels].[usr:Gross Media Revenue 7 Day Average:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0f'>
              <bucket>&quot;[sold_hotels].[cum:sum:Sold Hotels:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>2010</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>2012</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#d62728'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>2011</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
            <member value='&quot;Year&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;International&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-07-30#'>
          <calculation class='tableau' formula='#2012-07-30#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='publisher_data'>
        <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Ads per Page - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Available Page eCPM for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Available Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CPC - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CTR - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Fill Rate - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Gross Media Revenue - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Pages Available - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Served Page eCPM for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Served Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Available Page eCPM for Table]' derivation='User' name='[usr:Available Page eCPM for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Served Page eCPM for Table]' derivation='User' name='[usr:Served Page eCPM for Table:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <datasource-dependencies datasource='sold_hotels'>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - MTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PMTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Budget] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Budget] END)&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - PQTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PW]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - PYTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Budget] &#13;&#10;END)&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - QTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Day]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Week]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SDPW]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SMTDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - SQTDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - SWPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - YTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END)&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget]' role='measure' type='quantitative'>
        </column>
        <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Calculation_6230419180048246]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='SUM([active_hotels_with_budget].[Spend])/sum([Budget])' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='RUNNING_SUM(SUM([Sold Hotels]))'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column datatype='integer' name='[Sold Hotels]' role='measure' type='quantitative'>
        </column>
        <column-instance column='[Sold Hotels]' derivation='Sum' name='[cum:sum:Sold Hotels:qk]' pivot='key' type='quantitative'>
          <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
        </column-instance>
        <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Calculation_6230419180048246]' derivation='User' name='[usr:Calculation_6230419180048246:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
      </datasource-dependencies>
    </datasource>
    <datasource inline='true' name='publisher_data' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;dimensions.*,&#13;&#10;&#9;data.&quot;Pages Available&quot;, &#13;&#10;&#9;data.&quot;Pages Served&quot;, &#13;&#10;&#9;data.&quot;Spend&quot;, &#13;&#10;&#9;data.&quot;Clicks&quot;, &#13;&#10;&#9;data.&quot;Impressions Served&quot;,&#13;&#10;&#9;data.&quot;Auction Participant Count&quot;&#13;&#10;from&#13;&#10;(select *&#13;&#10;from&#13;&#10;(select &#13;&#10;&#9;distinct(aggregation_level_date_in_et) as Date,&#13;&#10;&#9;0 as Zero&#13;&#10;from intent_media_production.publisher_performance_report_aggregations&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)) dates,&#13;&#10;(select&#13;&#10;&#9;imm.name as &quot;Market Name&quot;,&#13;&#10;&#9;imm.report_segment as &quot;Segment&quot;&#13;&#10;from intent_media_production.intent_media_markets imm&#13;&#10;union&#13;&#10;select &apos;Other&apos; as &quot;Market Name&quot;,&#13;&#10;&#9;&apos;Other&apos; as &quot;Segment&quot;) markets,&#13;&#10;(select &#13;&#10;&#9;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end) as Pub,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end) as &quot;SSN Channel Type&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;&#13;&#10;from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;left join intent_media_production.ad_units au on ppra.ad_unit_id = au.id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;where ad_type = &apos;SSR&apos;&#13;&#10;group by &#13;&#10;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end),&#13;&#10;&#9;au.name&#13;&#10;) ad_unit_names) dimensions&#13;&#10;left join&#13;&#10;(&#13;&#10;select &#13;&#10;&#9;(case when e.name = &apos;Orbitz&apos; then &apos;OWW&apos; else e.name end) as Pub,&#13;&#10;&#9;s.display_name as Site,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end) as &quot;SSN Channel Type&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;,&#13;&#10;&#9;aggregation_level_date_in_et as Date, &#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;&#9;ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;&#9;sum(ad_call_count) as &quot;Pages Available&quot;, &#13;&#10;&#9;sum(case when positions_filled &gt;&gt; 0 then ad_call_count else 0 end) as &quot;Pages Served&quot;, &#13;&#10;&#9;sum(gross_actual_cpc_sum) as &quot;Spend&quot;, &#13;&#10;&#9;sum(click_count) as &quot;Clicks&quot;, &#13;&#10;&#9;sum(ad_call_count*positions_filled) as &quot;Impressions Served&quot;,&#13;&#10;&#9;sum(auction_participant_count) as &quot;Auction Participant Count&quot;&#13;&#10;from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;left join intent_media_production.ad_units au on au.id = ppra.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = ppra.market_id&#13;&#10;left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#13;&#10;where (case &#13;&#10;&#9;&#9;when s.name = &apos;TRAVELOCITY&apos;&#13;&#10;&#9;&#9;&#9;then aggregation_level_date_in_et &gt;&gt;= &apos;2011-04-01&apos; and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;&#9;&#9;&#9;and (((au.name like &apos;%SEM%&apos; or au.name like &apos;%Hotel Details%&apos;) and aggregation_level_date_in_et &gt;&gt;= &apos;2012-05-15&apos;)&#13;&#10;&#9;&#9;&#9;or (au.name not like &apos;%SEM%&apos; and au.name not like &apos;%Hotel Details%&apos;))&#13;&#10;&#9;end)&#13;&#10;group by e.name,&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;(case when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; else &apos;OTA&apos; end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;&#9;&#9;when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;&#9;&#9;else au.name&#13;&#10;&#9;end),&#13;&#10;&#9;au.name,&#13;&#10;&#9;aggregation_level_date_in_et, &#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;),&#13;&#10;&#9;ifnull(imm.report_segment, &apos;Other&apos;)&#13;&#10;) data&#13;&#10;&#13;&#10;on dimensions.Date = data.Date&#13;&#10;and dimensions.Pub = data.Pub&#13;&#10;and dimensions.Site = data.Site&#13;&#10;and dimensions.&quot;Type of Ad Unit&quot; = data.&quot;Type of Ad Unit&quot;&#13;&#10;and dimensions.&quot;Ad Unit&quot; = data.&quot;Ad Unit&quot;&#13;&#10;and dimensions.&quot;Market Name&quot; = data.&quot;Market Name&quot;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[active_hotels_with_budget].[usr:Active Hotels for Table:qk]&quot;' value='Active Hotels' />
          <alias key='&quot;[publisher_data].[sum:Blank:qk]&quot;' value=' ' />
          <alias key='&quot;[publisher_data].[sum:Clicks - 28Days:qk]&quot;' value='Clicks  ' />
          <alias key='&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;' value='Clicks   ' />
          <alias key='&quot;[publisher_data].[sum:Clicks - Ref Day:qk]&quot;' value='Clicks' />
          <alias key='&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;' value='Clicks ' />
          <alias key='&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;' value='Clicks    ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue - 28Days:qk]&quot;' value='Gross Media Revenue  ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;' value='Gross Media Revenue   ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Day:qk]&quot;' value='Gross Media Revenue' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;' value='Gross Media Revenue ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;' value='Gross Media Revenue    ' />
          <alias key='&quot;[publisher_data].[sum:Gross Media Revenue for Table:qk]&quot;' value='Gross Media Revenue     ' />
          <alias key='&quot;[publisher_data].[sum:Impressions Served - 28Days:qk]&quot;' value='Impressions Served  ' />
          <alias key='&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;' value='Impressions Served   ' />
          <alias key='&quot;[publisher_data].[sum:Impressions Served - Ref Day:qk]&quot;' value='Impressions Served' />
          <alias key='&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;' value='Impressions Served ' />
          <alias key='&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;' value='Impressions Served    ' />
          <alias key='&quot;[publisher_data].[sum:Net Media Revenue - Ref Day:qk]&quot;' value='Net Media Revenue' />
          <alias key='&quot;[publisher_data].[sum:Pages Available - 28Days:qk]&quot;' value='Pages Available  ' />
          <alias key='&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;' value='Pages Available   ' />
          <alias key='&quot;[publisher_data].[sum:Pages Available - Ref Day:qk]&quot;' value='Pages Available' />
          <alias key='&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;' value='Pages Available ' />
          <alias key='&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;' value='Pages Available    ' />
          <alias key='&quot;[publisher_data].[sum:Pages Available for Table:qk]&quot;' value='Pages Available     ' />
          <alias key='&quot;[publisher_data].[sum:Pages Served - 28Days:qk]&quot;' value='Pages Served  ' />
          <alias key='&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;' value='Pages Served   ' />
          <alias key='&quot;[publisher_data].[sum:Pages Served - Ref Day:qk]&quot;' value='Pages Served' />
          <alias key='&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;' value='Pages Served ' />
          <alias key='&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;' value='Pages Served    ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - \%D P28Days:qk]&quot;' value='Ads per Page Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;' value='Ads per Page Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;' value='Ads per Page Delta ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;' value='Ads per Page Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - 28Days:qk]&quot;' value='Ads per Page  ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;' value='Ads per Page   ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - Ref Day:qk]&quot;' value='Ads per Page' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;' value='Ads per Page ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;' value='Ads per Page    ' />
          <alias key='&quot;[publisher_data].[usr:Ads per Page for Table:qk]&quot;' value='Ads per Page     ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - \%D P28Days:qk]&quot;' value='Available eCPM Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - \%D PQTD:qk]&quot;' value='Available eCPM Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;' value='Available eCPM Delta ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;' value='Available eCPM Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - 28Days:qk]&quot;' value='Available eCPM  ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - QTD:qk]&quot;' value='Available eCPM   ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - Ref Day:qk]&quot;' value='Available eCPM' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;' value='Available eCPM ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;' value='Available eCPM    ' />
          <alias key='&quot;[publisher_data].[usr:Available Page eCPM for Table:qk]&quot;' value='Available eCPM     ' />
          <alias key='&quot;[publisher_data].[usr:Clicks - \%D P28Days:qk]&quot;' value='Clicks Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;' value='Clicks Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;' value='Clicks Delta ' />
          <alias key='&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;' value='Clicks Delta    ' />
          <alias key='&quot;[publisher_data].[usr:CPC - \%D P28Days:qk]&quot;' value='CPC Delta  ' />
          <alias key='&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;' value='CPC Delta   ' />
          <alias key='&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;' value='CPC Delta ' />
          <alias key='&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;' value='CPC Delta    ' />
          <alias key='&quot;[publisher_data].[usr:CPC - 28Days:qk]&quot;' value='CPC  ' />
          <alias key='&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;' value='CPC   ' />
          <alias key='&quot;[publisher_data].[usr:CPC - Ref Day:qk]&quot;' value='CPC' />
          <alias key='&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;' value='CPC ' />
          <alias key='&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;' value='CPC    ' />
          <alias key='&quot;[publisher_data].[usr:CPC for Table:qk]&quot;' value='CPC     ' />
          <alias key='&quot;[publisher_data].[usr:CTR - \%D P28Days:qk]&quot;' value='CTR Delta ' />
          <alias key='&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;' value='CTR Delta   ' />
          <alias key='&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;' value='CTR Delta' />
          <alias key='&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;' value='CTR Delta    ' />
          <alias key='&quot;[publisher_data].[usr:CTR - 28Days:qk]&quot;' value='CTR  ' />
          <alias key='&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;' value='CTR   ' />
          <alias key='&quot;[publisher_data].[usr:CTR - Ref Day:qk]&quot;' value='CTR' />
          <alias key='&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;' value='CTR ' />
          <alias key='&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;' value='CTR    ' />
          <alias key='&quot;[publisher_data].[usr:CTR for Table:qk]&quot;' value='CTR     ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - \%D P28Days:qk]&quot;' value='Fill Rate Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;' value='Fill Rate Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;' value='Fill Rate Delta ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;' value='Fill Rate Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - 28Days:qk]&quot;' value='Fill Rate  ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;' value='Fill Rate   ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - Ref Day:qk]&quot;' value='Fill Rate' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;' value='Fill Rate ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;' value='Fill Rate    ' />
          <alias key='&quot;[publisher_data].[usr:Fill Rate for Table:qk]&quot;' value='Fill Rate     ' />
          <alias key='&quot;[publisher_data].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;' value='Gross Media Revenue Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' value='Gross Media Revenue Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;' value='Gross Media Revenue Delta ' />
          <alias key='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' value='Gross Media Revenue Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Impressions Served - \%D P28Days:qk]&quot;' value='Impressions Served Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;' value='Impressions Served Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;' value='Impressions Served Delta' />
          <alias key='&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;' value='Impressions Served Delta     ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - \%D P28Days:qk]&quot;' value='Page CTR Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - \%D PQTD:qk]&quot;' value='Page CTR Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;' value='Page CTR Delta ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;' value='Page CTR Delta     ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - 28Days:qk]&quot;' value='Page CTR  ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - QTD:qk]&quot;' value='Page CTR   ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - Ref Day:qk]&quot;' value='Page CTR' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;' value='Page CTR ' />
          <alias key='&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;' value='Page CTR    ' />
          <alias key='&quot;[publisher_data].[usr:Pages Available - \%D P28Days:qk]&quot;' value='Pages Available Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;' value='Pages Available Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;' value='Pages Available Delta ' />
          <alias key='&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;' value='Pages Available Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Pages Served - \%D P28Days:qk]&quot;' value='Pages Served Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;' value='Pages Served Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;' value='Pages Served Delta ' />
          <alias key='&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;' value='Pages Served Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - \%D P28Days:qk]&quot;' value='Served Page eCPM Delta  ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - \%D PQTD:qk]&quot;' value='Served eCPM Delta   ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;' value='Served eCPM Delta ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;' value='Served eCPM Delta    ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - 28Days:qk]&quot;' value='Served Page eCPM  ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - QTD:qk]&quot;' value='Served eCPM    ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - Ref Day:qk]&quot;' value='Served eCPM' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;' value='Served eCPM ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;' value='Served eCPM     ' />
          <alias key='&quot;[publisher_data].[usr:Served Page eCPM for Table:qk]&quot;' value='Served eCPM  ' />
        </aliases>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - MTD]-[Ads per Page - PMTD])/[Ads per Page - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - 28Days] - [Ads per Page - S28DaysPY])/[Ads per Page - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Day]-[Ads per Page - SDPY])/[Ads per Page - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - MTD] - [Ads per Page - SMTDPY])/[Ads per Page - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - QTD] - [Ads per Page - SQTDPY])/[Ads per Page - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Week] - [Ads per Page - SWPY])/[Ads per Page - SWPY]' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - MTD])/sum([Pages Served - MTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - P28Days])/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PMTD])/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PQTD])/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PW])/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PYTD])/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - Ref Day])/sum([Pages Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - S28DaysPY])/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SDPW])/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' name='[Ads per Page - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SDPY])/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SMTDPY])/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SQTDPY])/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SWPY])/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Ads per Page - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - 28Days]-[Available Page eCPM - P28Days])/[Available Page eCPM - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - MTD]-[Available Page eCPM - PMTD])/[Available Page eCPM - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - QTD]-[Available Page eCPM - PQTD])/[Available Page eCPM - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - Ref Week]-[Available Page eCPM - PW])/[Available Page eCPM - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - YTD]-[Available Page eCPM - PYTD])/[Available Page eCPM - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - 28Days] - [Available Page eCPM - S28DaysPY])/[Available Page eCPM - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - Ref Day]-[Available Page eCPM - SDPW])/[Available Page eCPM - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - Ref Day] - [Available Page eCPM - SDPY])/[Available Page eCPM - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - MTD] - [Available Page eCPM - SMTDPY])/[Available Page eCPM - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - QTD] - [Available Page eCPM - SQTDPY])/[Available Page eCPM - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available Page eCPM - Ref Week] - [Available Page eCPM - SWPY])/[Available Page eCPM - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Available - MTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Pages Available - P28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Pages Available - PMTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Pages Available - PQTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Pages Available - PW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Pages Available - PYTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Available - Ref Day])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Pages Available - S28DaysPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Pages Available - SDPW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Pages Available - SDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Pages Available - SMTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Pages Available - SQTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Pages Available - SWPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Available Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available Page eCPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
      </column>
      <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
      </column>
      <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - 28Days] - [CPC - S28DaysPY])/[CPC - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPY])/[CPC - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - MTD] - [CPC - SMTDPY])/[CPC - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - QTD] - [CPC - SQTDPY])/[CPC - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Week] - [CPC - SWPY])/[CPC - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Clicks - MTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Clicks - P28Days])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Clicks - PMTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Clicks - PQTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Clicks - PW])' />
      </column>
      <column datatype='real' name='[CPC - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Clicks - PYTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Clicks - Ref Day])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Clicks - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Clicks - SDPW])' />
      </column>
      <column datatype='real' name='[CPC - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Clicks - SDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Clicks - SMTDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Clicks - SQTDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Clicks - SWPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CPC - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - 28Days] - [CTR - S28DaysPY])/[CTR - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Day] - [CTR - SDPY])/[CTR - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - MTD] - [CTR - SMTDPY])/[CTR - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - QTD] - [CTR - SQTDPY])/[CTR - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Week] - [CTR - SWPY])/[CTR - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Impressions Served - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - P28Days])/sum([Impressions Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PMTD])/sum([Impressions Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PQTD])/sum([Impressions Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PW])/sum([Impressions Served - PW])' />
      </column>
      <column datatype='real' name='[CTR - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PYTD])/sum([Impressions Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Impressions Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - S28DaysPY])/sum([Impressions Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPW])/sum([Impressions Served - SDPW])' />
      </column>
      <column datatype='real' name='[CTR - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPY])/sum([Impressions Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SMTDPY])/sum([Impressions Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SQTDPY])/sum([Impressions Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SWPY])/sum([Impressions Served - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CTR - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - MTD]) - sum([Clicks - PMTD]))/sum([Clicks - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - 28Days])-sum([Clicks - S28DaysPY]))/sum([Clicks - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPW]))/sum([Clicks - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPY]))/sum([Clicks - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - MTD])-sum([Clicks - SMTDPY]))/sum([Clicks - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - QTD])-sum([Clicks - SQTDPY]))/sum([Clicks - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - SWPY]))/sum([Clicks - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Clicks] &#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Clicks] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Clicks] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Clicks] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
      </column>
      <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='YEAR([Ref Day])' />
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Table]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN IF [Date] = [Ref Day] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;    WHEN &quot;Week&quot; THEN IF [Date] &lt;= [Ref Day] &#13;&#10;                        AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) &#13;&#10;                        THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;    WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;                        AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;                        THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year by Day Only]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[MM] + &quot;-&quot; + [DD]' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - MTD]-[Fill Rate - PMTD])/[Fill Rate - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - 28Days] - [Fill Rate - S28DaysPY])/[Fill Rate - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Day]-[Fill Rate - SDPW])/[Fill Rate - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Day] - [Fill Rate - SDPY])/[Fill Rate - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - MTD] - [Fill Rate - SMTDPY])/[Fill Rate - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - QTD] - [Fill Rate - SQTDPY])/[Fill Rate - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Week] - [Fill Rate - SWPY])/[Fill Rate - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - MTD])/sum([Pages Available - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - P28Days])/sum([Pages Available - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PMTD])/sum([Pages Available - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PQTD])/sum([Pages Available - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PW])/sum([Pages Available - PW])' />
      </column>
      <column datatype='real' name='[Fill Rate - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PYTD])/sum([Pages Available - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - Ref Day])/sum([Pages Available - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - S28DaysPY])/sum([Pages Available - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SDPW])/sum([Pages Available - SDPW])' />
      </column>
      <column datatype='real' name='[Fill Rate - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SDPY])/sum([Pages Available - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SMTDPY])/sum([Pages Available - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SQTDPY])/sum([Pages Available - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SWPY])/sum([Pages Available - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Fill Rate - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
      </column>
      <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - S28DaysPY]))/sum([Gross Media Revenue - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day])-sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPY]))/sum([Gross Media Revenue - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - SMTDPY]))/sum([Gross Media Revenue - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD])-sum([Gross Media Revenue - SQTDPY]))/sum([Gross Media Revenue - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - SWPY]))/sum([Gross Media Revenue - SWPY])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Spend] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Spend] END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Spend] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ATTR(DATEPART(&apos;dayofyear&apos;,[Date])) &gt;= 7 THEN&#13;&#10;WINDOW_AVG(SUM([Spend]), -6, 0)&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Gross Media Revenue - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - MTD]) - sum([Impressions Served - PMTD]))/sum([Impressions Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - 28Days])-sum([Impressions Served - S28DaysPY]))/sum([Impressions Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPW]))/sum([Impressions Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPY]))/sum([Impressions Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - MTD])-sum([Impressions Served - SMTDPY]))/sum([Impressions Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - QTD])-sum([Impressions Served - SQTDPY]))/sum([Impressions Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - SWPY]))/sum([Impressions Served - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Impressions Served] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Impressions Served] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Impressions Served] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='string' name='[Label - Pub and Ad Unit]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE([Parameters].[Publisher] + &quot; &quot; + [Parameters].[Ad Unit Type], &quot;Total Total&quot;, &quot;Total&quot;)' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SWPY]' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - 28Days]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - 28Days]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - MTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - MTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - QTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - QTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Day]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Day]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Week]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Week]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - YTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - YTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - PMTD])/[Page CTR - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - S28DaysPY])/[Page CTR - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPW])/[Page CTR - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPY])/[Page CTR - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - SMTDPY])/[Page CTR - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - SQTDPY])/[Page CTR - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Week] - [Page CTR - SWPY])/[Page CTR - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Pages Served - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - P28Days])/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PMTD])/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PQTD])/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PW])/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PYTD])/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Pages Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - S28DaysPY])/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPW])/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPY])/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SMTDPY])/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SQTDPY])/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SWPY])/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - 28Days])-sum([Pages Available - S28DaysPY]))/sum([Pages Available - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPY]))/sum([Pages Available - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - MTD])-sum([Pages Available - SMTDPY]))/sum([Pages Available - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - QTD])-sum([Pages Available - SQTDPY]))/sum([Pages Available - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - SWPY]))/sum([Pages Available - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Pages Available] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Pages Available] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Pages Available] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Pages Available - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - MTD]) - sum([Pages Served - PMTD]))/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - 28Days])-sum([Pages Served - S28DaysPY]))/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPW]))/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPY]))/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - MTD])-sum([Pages Served - SMTDPY]))/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - QTD])-sum([Pages Served - SQTDPY]))/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - SWPY]))/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Pages Served] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Pages Served] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Pages Served] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Month Name' datatype='string' name='[Previous Month Name (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='string' name='[Previous Quarter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,DATEADD(&apos;quarter&apos;,-1,[Ref Day])))' />
      </column>
      <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Current Year]-1' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day]-7' />
      </column>
      <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
      </column>
      <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - 28Days]-[Served Page eCPM - P28Days])/[Served Page eCPM - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - MTD]-[Served Page eCPM - PMTD])/[Served Page eCPM - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - QTD]-[Served Page eCPM - PQTD])/[Served Page eCPM - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - Ref Week]-[Served Page eCPM - PW])/[Served Page eCPM - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - YTD]-[Served Page eCPM - PYTD])/[Served Page eCPM - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - 28Days] - [Served Page eCPM - S28DaysPY])/[Served Page eCPM - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - Ref Day]-[Served Page eCPM - SDPW])/[Served Page eCPM - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - Ref Day]-[Served Page eCPM - SDPY])/[Served Page eCPM - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - MTD] - [Served Page eCPM - SMTDPY])/[Served Page eCPM - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - QTD] - [Served Page eCPM - SQTDPY])/[Served Page eCPM - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served Page eCPM - Ref Week] - [Served Page eCPM - SWPY])/[Served Page eCPM - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Served - MTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Pages Served - P28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Pages Served - PMTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Pages Served - PQTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Pages Served - PW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Pages Served - PYTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Served - Ref Day])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Pages Served - S28DaysPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Pages Served - SDPW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Pages Served - SDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Pages Served - SMTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Pages Served - SQTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Pages Served - SWPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Served Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served Page eCPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Pages Served])*1000' />
      </column>
      <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' name='[Tornado Measure - Day ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - Day])' />
      </column>
      <column datatype='real' name='[Tornado Measure - Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Day] - [Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Day] - [CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Day] - [CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Day] - [Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Day] - [CPC - SDPW])/[CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Day] - [CTR - SDPW])/[CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Day] - [Fill Rate - SDPW])/[Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Tornado Measure - MTD ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - MTD])' />
      </column>
      <column datatype='real' name='[Tornado Measure - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - MTD] - [Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - MTD] - [CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - MTD] - [CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - MTD] - [Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - MTD]) - sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - MTD] - [Ads per Page - PMTD])/[Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - MTD] - [CPC - PMTD])/[CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - MTD] - [Fill Rate - PMTD])/[Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Tornado Measure - Week ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - Week])' />
      </column>
      <column datatype='real' name='[Tornado Measure - Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Week] - [Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Week] - [CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Week] - [CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Week] - [Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Week]) - sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Week] - [Ads per Page - PW])/[Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Week] - [CPC - PW])/[CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Week] - [CTR - PW])/[CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Week] - [Fill Rate - PW])/[Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Week]) - sum([Pages Available - PW]))/sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
      <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - Ref Day]' derivation='Sum' name='[sum:Clicks - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - Ref Day]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - Ref Day]' derivation='Sum' name='[sum:Impressions Served - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Net Media Revenue - Ref Day]' derivation='Sum' name='[sum:Net Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - Ref Day]' derivation='Sum' name='[sum:Pages Available - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - Ref Day]' derivation='Sum' name='[sum:Pages Served - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - Ref Day]' derivation='User' name='[usr:Ads per Page - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - %D P28Days]' derivation='User' name='[usr:Available Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - %D PQTD]' derivation='User' name='[usr:Available Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - %D PW]' derivation='User' name='[usr:Available Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - %D PYTD]' derivation='User' name='[usr:Available Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - 28Days]' derivation='User' name='[usr:Available Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - QTD]' derivation='User' name='[usr:Available Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - Ref Day]' derivation='User' name='[usr:Available Page eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - Ref Week]' derivation='User' name='[usr:Available Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM - YTD]' derivation='User' name='[usr:Available Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available Page eCPM for Table]' derivation='User' name='[usr:Available Page eCPM for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - Ref Day]' derivation='User' name='[usr:CPC - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - Ref Day]' derivation='User' name='[usr:CTR - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - Ref Day]' derivation='User' name='[usr:Fill Rate - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - Ref Day]' derivation='User' name='[usr:Page CTR - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - %D P28Days]' derivation='User' name='[usr:Served Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - %D PQTD]' derivation='User' name='[usr:Served Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - %D PW]' derivation='User' name='[usr:Served Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - %D PYTD]' derivation='User' name='[usr:Served Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - 28Days]' derivation='User' name='[usr:Served Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - QTD]' derivation='User' name='[usr:Served Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - Ref Day]' derivation='User' name='[usr:Served Page eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - Ref Week]' derivation='User' name='[usr:Served Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM - YTD]' derivation='User' name='[usr:Served Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served Page eCPM for Table]' derivation='User' name='[usr:Served Page eCPM for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\ssn_dashboard__publisher_data.tde' schema='Extract' tablename='Extract' update-time='1/9/2014 8:16:57 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Blank]' formula='IF 1=0 THEN 1 END' />
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[Date without Year by Day Only]' formula='[MM] + &quot;-&quot; + [DD]' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[Previous Month Name (copy)]' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1181016' timestamp-start='2014-01-09 20:16:56.758000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.557419' measure-ordering='alphabetic' measure-percentage='0.291613' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Breakdown Color:nk]' type='palette'>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Top 10&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rest of US&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;HotelClub&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Total Details Page&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Worldspan&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Apollo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hotel List Page - Travelocity GT&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Total Hotel Details Page&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Hotel List Page - Travelocity WebApp&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Galileo&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Martini Package Page - Travelocity&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Package List Page - Travelocity&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;11 to 40&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Total List Page&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#67bf5c'>
              <bucket>2012</bucket>
            </map>
            <map to='#729ece'>
              <bucket>2010</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>2011</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
            <member value='&quot;Year&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
          <calculation class='tableau' formula='&quot;Site&quot;' />
          <members>
            <member value='&quot;Site&quot;' />
            <member value='&quot;Page Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Difference Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Percent Difference&quot;'>
          <calculation class='tableau' formula='&quot;Percent Difference&quot;' />
          <members>
            <member value='&quot;Actual Difference&quot;' />
            <member value='&quot;Percent Difference&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;International&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Metric]' param-domain-type='list' role='measure' type='nominal' value='&quot;Pages Available&quot;'>
          <calculation class='tableau' formula='&quot;Pages Available&quot;' />
          <members>
            <member value='&quot;Pages Available&quot;' />
            <member value='&quot;Fill Rate&quot;' />
            <member value='&quot;Page CTR&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;Gross Media Revenue&quot;' />
            <member value='&quot;Ads per Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-07-30#'>
          <calculation class='tableau' formula='#2012-07-30#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='active_hotels_with_budget'>
        <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Active Hotels - YTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
    </datasource>
    <datasource inline='true' name='sold_hotels' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select &#13;&#10;&#9;sold_hotels.Date,&#13;&#10;&#9;sold_hotels.&quot;Sold Hotels&quot;,&#13;&#10;&#9;budgets.&quot;Budget&quot;&#13;&#10;from&#13;&#10;(select&#13;&#10;&#9;&#9;dates.date_in_et as Date,&#13;&#10;&#9;&#9;sold_hotels_query.sold_hotels as &quot;Sold Hotels&quot;&#9;&#9;&#13;&#10;from&#13;&#10;&#9;(select &#13;&#10;&#9;&#9;distinct(aggregation_level_date_in_et) as date_in_et&#13;&#10;&#9;from intent_media_production.participating_advertisers) dates&#13;&#10;left join&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;count(id) as sold_hotels,&#13;&#10;&#9;&#9;sold_date_in_et as date_in_et&#13;&#10;&#9;from&#13;&#10;&#9;&#9;(select&#13;&#10;&#9;&#9;&#9;id,&#13;&#10;&#9;&#9;&#9;case when active = 1 and first_auction_participation is not null then DATE(first_auction_participation at timezone &apos;America/New_York&apos;)end as sold_date_in_et&#13;&#10;&#9;&#9;from intent_media_production.entities&#13;&#10;&#9;&#9;where entity_type = &apos;HotelSsrAdvertiser&apos;) as sold_dates&#13;&#10;&#9;where sold_date_in_et is not null&#13;&#10;&#9;group by date_in_et) as sold_hotels_query&#13;&#10;on sold_hotels_query.date_in_et = dates.date_in_et) sold_hotels&#13;&#10;&#13;&#10;left join&#13;&#10;&#13;&#10;(select&#13;&#10;&#9;pa.Date,&#13;&#10;&#9;sum(budgets_query.Budget) as Budget&#13;&#10;from&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;aggregation_level_date_in_et as Date,&#13;&#10;&#9;&#9;advertiser_id as &quot;Advertiser ID&quot;&#13;&#10;&#9;from intent_media_production.participating_advertisers&#13;&#10;&#9;group by aggregation_level_date_in_et, advertiser_id) as pa&#13;&#10;left join &#9;&#13;&#10;&#9;(select&#13;&#10;&#9;&#9;latest.date_in_et,&#13;&#10;&#9;&#9;latest.advertiser_id,&#13;&#10;&#9;&#9;allocated_budget as &quot;Budget&quot;&#13;&#10;&#9;from&#13;&#10;&#9;&#9;(select&#13;&#10;&#9;&#9;&#9;date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;max(id) as latest_id&#13;&#10;&#9;&#9;from intent_media_production.historical_budgets&#13;&#10;&#9;&#9;group by date_in_et, advertiser_id) latest&#13;&#10;&#9;&#9;left join intent_media_production.historical_budgets hb &#13;&#10;&#9;&#9;on latest.date_in_et = hb.date_in_et &#13;&#10;&#9;&#9;&#9;and latest.advertiser_id = hb.advertiser_id&#13;&#10;&#9;&#9;&#9;and latest.latest_id = hb.id) budgets_query&#13;&#10;on budgets_query.date_in_et = pa.Date&#13;&#10;&#9;and budgets_query.advertiser_id = pa.&quot;Advertiser ID&quot;&#13;&#10;group by Date) budgets&#13;&#10;on budgets.Date = sold_hotels.Date&#13;&#10;order by Date</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - MTD])-sum([Budget - PMTD]))/sum([Budget - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - QTD]) - sum([Budget - PQTD]))/sum([Budget - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Week])-sum([Budget - PW]))/sum([Budget - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - YTD])-sum([Budget - PYTD]))/sum([Budget - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Day])-sum([Budget - SDPW]))/sum([Budget - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Day]) - sum([Budget - SDPY]))/sum([Budget - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - MTD])-sum([Budget - SMTDPY]))/sum([Budget - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - QTD])-sum([Budget - SQTDPY]))/sum([Budget - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Week])-sum([Budget - SWPY]))/sum([Budget - SWPY])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Budget] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Budget] END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Budget] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Date without Year' datatype='string' name='[Calculation_2940419174350427]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Calculation_6230419180048246]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([active_hotels_with_budget].[Spend])/sum([Budget])' scope-isolation='false' />
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM([Sold Hotels]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Month Name' datatype='string' name='[Previous Month Name (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPM])/[Sold Hotels as of SDPM]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPQ]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPQ])/[Sold Hotels as of SDPQ]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Sold Hotels as of SDPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [SDPM] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Sold Hotels as of SDPQ]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [SDPQ] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Sold Hotels as of SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Sold Hotels as of SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\ssn_dashboard__sold_hotels.tde' schema='Extract' tablename='Extract' update-time='1/9/2014 8:19:24 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[Previous Month Name (copy)]' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1397' timestamp-start='2014-01-09 20:19:24.013000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.341935' measure-ordering='alphabetic' measure-percentage='0.427097' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>2010</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>2012</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#d62728'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>2011</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
            <member value='&quot;Year&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2012-07-30#'>
          <calculation class='tableau' formula='#2012-07-30#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='active_hotels_with_budget'>
        <column datatype='real' name='[Spend]' role='measure' type='quantitative'>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='active_hotels_with_budget'>
      <datasources>
        <datasource name='active_hotels_with_budget' />
      </datasources>
      <datasource-dependencies datasource='active_hotels_with_budget'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='quantitative' column='[active_hotels_with_budget].[none:Date:qk]' included-values='all'>
      </filter>
    </shared-view>
    <shared-view name='market_data'>
      <datasources>
        <datasource name='market_data' />
      </datasources>
      <datasource-dependencies datasource='market_data'>
        <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
        </column>
        <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
        <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[market_data].[none:Ad Unit:nk]'>
        <groupfilter from='&quot;Apollo List Page&quot;' function='range' level='[none:Ad Unit:nk]' to='&quot;Worldspan List Page&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[market_data].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[market_data].[none:Filter for Publisher:nk]'>
        <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[market_data].[none:Type of Ad Unit:nk]'>
        <groupfilter from='&quot;Total GDS List Page&quot;' function='range' level='[none:Type of Ad Unit:nk]' to='&quot;Total SEM List Page&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='publisher_data'>
      <datasources>
        <datasource name='publisher_data' />
      </datasources>
      <datasource-dependencies datasource='publisher_data'>
        <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
        </column>
        <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
        <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
        <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[publisher_data].[none:Ad Unit:nk]'>
        <groupfilter from='&quot;Apollo List Page&quot;' function='range' level='[none:Ad Unit:nk]' to='&quot;Worldspan List Page&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[publisher_data].[none:Filter for Publisher:nk]'>
        <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[publisher_data].[none:Type of Ad Unit:nk]'>
        <groupfilter from='&quot;Total GDS List Page&quot;' function='range' level='[none:Type of Ad Unit:nk]' to='&quot;Total SEM List Page&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='sold_hotels'>
      <datasources>
        <datasource name='sold_hotels' />
      </datasources>
      <datasource-dependencies datasource='sold_hotels'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='quantitative' column='[sold_hotels].[none:Date:qk]' included-values='all'>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='28Days Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Past 28 Days through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;vs. Past 28 Days through &lt;[publisher_data].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - 28Days]-[Available Page eCPM - P28Days])/[Available Page eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - 28Days]-[Served Page eCPM - P28Days])/[Served Page eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='Day-Trunc' name='[tdy:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D P28Days]' derivation='User' name='[usr:Available Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - 28Days]' derivation='User' name='[usr:Available Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D P28Days]' derivation='User' name='[usr:Served Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - 28Days]' derivation='User' name='[usr:Served Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D P28Days:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data].[none:Breakdown Color:nk]' value='54' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='true' />
            <format attr='font-weight' field='[publisher_data].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[tdy:SDPM:qk]' />
              <lod column='[publisher_data].[none:Current Month Name:nk]' />
              <lod column='[publisher_data].[none:Previous Month Name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='28Days Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;[publisher_data].[none:Current Month Name:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data].[tdy:SDPM:qk]&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - 28Days]-[Available Page eCPM - P28Days])/[Available Page eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - 28Days]-[Served Page eCPM - P28Days])/[Served Page eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='Day-Trunc' name='[tdy:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D P28Days]' derivation='User' name='[usr:Available Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - 28Days]' derivation='User' name='[usr:Available Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D P28Days]' derivation='User' name='[usr:Served Page eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - 28Days]' derivation='User' name='[usr:Served Page eCPM - 28Days:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D P28Days:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D P28Days:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='true' />
            <format attr='display' field='[publisher_data].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[tdy:SDPM:qk]' />
              <lod column='[publisher_data].[none:Current Month Name:nk]' />
              <lod column='[publisher_data].[none:Previous Month Name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Active Hotels YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Active Hotels Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[usr:Active Hotels:qk]</rows>
        <cols>[active_hotels_with_budget].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Active and Sold Hotels'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Active and Sold Hotels in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Sold Hotels]' derivation='Sum' name='[cum:sum:Sold Hotels:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[active_hotels_with_budget].[usr:Active Hotels:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[active_hotels_with_budget].[usr:Active Hotels:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[sold_hotels].[cum:sum:Sold Hotels:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='4' y-axis-name='[active_hotels_with_budget].[usr:Active Hotels:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([sold_hotels].[cum:sum:Sold Hotels:qk] + [active_hotels_with_budget].[usr:Active Hotels:qk])</rows>
        <cols>[active_hotels_with_budget].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ad CTR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:CTR:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:CTR:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:CTR:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:CTR:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:CTR:qk] + [publisher_data].[usr:CTR:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ads per Page'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:Ads per Page:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:Ads per Page:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:Ads per Page:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:Ads per Page:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:Ads per Page:qk] + [publisher_data].[usr:Ads per Page:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ads per Page YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Ads per Page Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:Ads per Page:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Available Page eCPM'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM]' derivation='User' name='[usr:Available Page eCPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:Available Page eCPM:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:Available Page eCPM:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:Available Page eCPM:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:Available Page eCPM:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:Available Page eCPM:qk] + [publisher_data].[usr:Available Page eCPM:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Available Page eCPM YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Available Page eCPM Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Available Page eCPM]' derivation='User' name='[usr:Available Page eCPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:Available Page eCPM:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Budget per Hotel'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Average Budget per Hotel in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget])/[Active Hotels]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6380106163627707]' derivation='User' name='[usr:Calculation_6380106163627707:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[active_hotels_with_budget].[none:Date:qk]' value='Date (top 4 graphs)'>
              <formatted-text>
                <run>Date (top 4 graphs)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[usr:Calculation_6380106163627707:qk]</rows>
        <cols>[active_hotels_with_budget].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Blank Title'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Æ &#10;</run>
            <run bold='true' fontsize='8'>Æ   &#10;   </run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Budget per Hotel YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Average Budget per Hotel Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='sold_hotels' />
            <datasource name='Parameters' />
            <datasource name='active_hotels_with_budget' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget])/[Active Hotels]' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_6380106163627707]' derivation='User' name='[usr:Calculation_6380106163627707:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column caption='Date without Year' datatype='string' name='[Calculation_2940419174350427]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Calculation_2940419174350427]' derivation='None' name='[none:Calculation_2940419174350427:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[sold_hotels].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[sold_hotels].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[usr:Calculation_6380106163627707:qk]</rows>
        <cols>[sold_hotels].[none:Calculation_2940419174350427:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='CPC'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:CPC:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:CPC:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:CPC:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:CPC:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:CPC:qk] + [publisher_data].[usr:CPC:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='CPC YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CPC Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:CPC:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='CSV'>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Impressions Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Pages Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='None' name='[none:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served]' derivation='Sum' name='[sum:Impressions Served:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue]' derivation='Sum' name='[sum:Net Media Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served]' derivation='Sum' name='[sum:Pages Served:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[ctd:Segment:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Available:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='natural' column='[publisher_data].[none:Date:ok]' direction='DESC' />
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Pages Available:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Pages Available:qk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='84' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[publisher_data].[none:Type of Ad Unit:nk]' value='200' />
            <format attr='height' field='[publisher_data].[:Measure Names]' value='38' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[none:Date:ok] / ([publisher_data].[none:Pub:nk] / ([publisher_data].[none:Site:nk] / ([publisher_data].[none:Type of Ad Unit:nk] / ([publisher_data].[none:Ad Unit:nk] / ([publisher_data].[none:Segment:nk] / [publisher_data].[none:Market Name:nk]))))))</rows>
        <cols>[publisher_data].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='CSV Data'>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Impressions Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Pages Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='None' name='[none:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Impressions Served]' derivation='Sum' name='[sum:Impressions Served:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Net Media Revenue]' derivation='Sum' name='[sum:Net Media Revenue:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pages Served]' derivation='Sum' name='[sum:Pages Served:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <sort class='natural' column='[publisher_data].[none:Date:ok]' direction='DESC' />
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Pages Available:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Pages Available:qk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[publisher_data].[none:Type of Ad Unit:nk]' value='200' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[none:Date:ok] / ([publisher_data].[none:Pub:nk] / ([publisher_data].[none:Site:nk] / ([publisher_data].[none:Type of Ad Unit:nk] / ([publisher_data].[none:Ad Unit:nk] / ([publisher_data].[none:Segment:nk] / ([publisher_data].[none:Market Name:nk] / ([publisher_data].[sum:Pages Available:ok] / ([publisher_data].[usr:Fill Rate:ok] / ([publisher_data].[sum:Pages Served:ok] / ([publisher_data].[usr:Ads per Page:ok] / ([publisher_data].[sum:Impressions Served:ok] / ([publisher_data].[usr:CTR:ok] / ([publisher_data].[sum:Clicks:ok] / ([publisher_data].[usr:CPC:ok] / ([publisher_data].[sum:Spend:ok] / [publisher_data].[sum:Net Media Revenue:ok]))))))))))))))))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='CTR YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CTR Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:CTR:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Clicked ROI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data].[usr:Clicked ROI:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data].[usr:Clicked ROI:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data].[usr:Clicked ROI:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data].[usr:Clicked ROI:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[usr:Clicked ROI:qk] + [market_data].[usr:Clicked ROI:qk])</rows>
        <cols>[market_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Clicked ROI YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Clicked ROI Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data].[usr:Clicked ROI:qk]</rows>
        <cols>[market_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Click'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data].[usr:Conversions per Click:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data].[usr:Conversions per Click:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[market_data].[none:Breakdown Color:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data].[usr:Conversions per Click:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data].[usr:Conversions per Click:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[usr:Conversions per Click:qk] + [market_data].[usr:Conversions per Click:qk])</rows>
        <cols>[market_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Click YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Click Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[market_data].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data].[usr:Conversions per Click:qk]</rows>
        <cols>[market_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Impression'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Impression</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data].[usr:Conversions per Impression:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data].[usr:Conversions per Impression:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data].[usr:Conversions per Impression:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data].[usr:Conversions per Impression:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[usr:Conversions per Impression:qk] + [market_data].[usr:Conversions per Impression:qk])</rows>
        <cols>[market_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Impression YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Impression Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data].[usr:Conversions per Impression:qk]</rows>
        <cols>[market_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Exposed ROI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data].[usr:Exposed ROI:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data].[usr:Exposed ROI:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data].[usr:Exposed ROI:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data].[usr:Exposed ROI:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[usr:Exposed ROI:qk] + [market_data].[usr:Exposed ROI:qk])</rows>
        <cols>[market_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Exposed ROI YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Exposed ROI Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[none:Date Filter for Full Time Frames:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Filter for Market:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data].[usr:Exposed ROI:qk]</rows>
        <cols>[market_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Fill Rate YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Fill Rate Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:Fill Rate:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[sum:Spend:qk]</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue %'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[pcto:sum:Spend:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[pcto:sum:Spend:qk]</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Gross Media Revenue Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[sum:Spend:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Revenue Graph'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Publisher]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> Gross Revenue by Day</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date without Year by Day Only]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[MM] + &quot;-&quot; + [DD]' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ATTR(DATEPART(&apos;dayofyear&apos;,[Date])) &gt;= 7 THEN&#13;&#10;WINDOW_AVG(SUM([Spend]), -6, 0)&#13;&#10;END'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year by Day Only]' derivation='None' name='[none:Date without Year by Day Only:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue 7 Day Average]' derivation='User' name='[usr:Gross Media Revenue 7 Day Average:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' tc-options='NullIfIncomplete' />
            </column-instance>
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[publisher_data].[usr:Gross Media Revenue 7 Day Average:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[publisher_data].[usr:Gross Media Revenue 7 Day Average:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[publisher_data].[sum:Spend:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.3010752201080322' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:Gross Media Revenue 7 Day Average:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.95150536298751831' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[sum:Spend:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[sum:Spend:qk] + [publisher_data].[usr:Gross Media Revenue 7 Day Average:qk])</rows>
        <cols>[publisher_data].[none:Date without Year by Day Only:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Month Name:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - MTD])/sum([Pages Served - MTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Available - MTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Clicks - MTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Impressions Served - MTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - MTD])/sum([Pages Available - MTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - MTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - MTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Pages Served - MTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Served - MTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - MTD]' derivation='Sum' name='[sum:Clicks - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - MTD]' derivation='Sum' name='[sum:Gross Media Revenue - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - MTD]' derivation='Sum' name='[sum:Impressions Served - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - MTD]' derivation='Sum' name='[sum:Net Media Revenue - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - MTD]' derivation='Sum' name='[sum:Pages Available - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - MTD]' derivation='Sum' name='[sum:Pages Served - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - MTD]' derivation='User' name='[usr:Ads per Page - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - MTD]' derivation='User' name='[usr:Available Page eCPM - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - MTD]' derivation='User' name='[usr:CPC - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - MTD]' derivation='User' name='[usr:CTR - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - MTD]' derivation='User' name='[usr:Fill Rate - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - MTD]' derivation='User' name='[usr:Page CTR - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - MTD]' derivation='User' name='[usr:Served Page eCPM - MTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - MTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - MTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='MTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - MTD' datatype='real' default-format='C1033%' name='[Calculation_4170106162336528]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget - MTD])/[Active Hotels - MTD]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - MTD]' derivation='User' name='[usr:Active Hotels - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4170106162336528]' derivation='User' name='[usr:Calculation_4170106162336528:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_4170106162336528:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - MTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - MTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Market Differences PPW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Percent Difference between WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> and WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data].[none:SDPPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PPW])/[Clicked ROI - PPW]' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PPW])/[Exposed ROI - PPW]' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] - 14' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Spend - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PPW]))/sum([Spend - PPW])' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPPW]' derivation='None' name='[none:SDPPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicked ROI - %D PPW]' derivation='User' name='[usr:Clicked ROI - %D PPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - %D PPW]' derivation='User' name='[usr:Exposed ROI - %D PPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - %D PPW]' derivation='User' name='[usr:Spend - %D PPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Clicked ROI - \%D PPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Exposed ROI - \%D PPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Spend - \%D PPW:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Market Name:nk]</column>
            <column>[market_data].[:Measure Names]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[Multiple Values]' scope='cols' value='% Difference' />
            <format attr='subtitle' class='0' field='[market_data].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[market_data].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data].[:Measure Names]' />
              <lod column='[market_data].[none:Ref Day:qk]' />
              <lod column='[market_data].[none:SDPPW:qk]' />
              <lod column='[market_data].[usr:Clicked ROI - %D PPW:qk]' />
              <lod column='[market_data].[usr:Exposed ROI - %D PPW:qk]' />
              <lod column='[market_data].[usr:Spend - %D PPW:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Market Name:&#9;</run>
                <run bold='true'>&lt;[market_data].[none:Market Name:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>WE </run>
                <run bold='true'>&lt;[market_data].[none:Ref Day:qk]&gt; </run>
                <run fontcolor='#787878'>vs. WE </run>
                <run bold='true'>&lt;[market_data].[none:SDPPW:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Clicked ROI % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Clicked ROI - %D PPW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Exposed ROI % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Exposed ROI - %D PPW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Spend % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Spend - %D PPW:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[none:Market Name:nk] / [market_data].[:Measure Names])</rows>
        <cols>[market_data].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='Market Differences PW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Percent Difference between WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> and WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data].[none:SDPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Spend - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicked ROI - %D PW]' derivation='User' name='[usr:Clicked ROI - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - %D PW]' derivation='User' name='[usr:Exposed ROI - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - %D PW]' derivation='User' name='[usr:Spend - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Clicked ROI - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Exposed ROI - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Spend - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Market Name:nk]</column>
            <column>[market_data].[:Measure Names]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[Multiple Values]' scope='cols' value='% Difference' />
            <format attr='subtitle' class='0' field='[market_data].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[market_data].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data].[:Measure Names]' />
              <lod column='[market_data].[none:Ref Day:qk]' />
              <lod column='[market_data].[none:SDPW:qk]' />
              <lod column='[market_data].[usr:Clicked ROI - %D PW:qk]' />
              <lod column='[market_data].[usr:Exposed ROI - %D PW:qk]' />
              <lod column='[market_data].[usr:Spend - %D PW:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Market Name:&#9;</run>
                <run bold='true'>&lt;[market_data].[none:Market Name:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>WE </run>
                <run bold='true'>&lt;[market_data].[none:Ref Day:qk]&gt; </run>
                <run fontcolor='#787878'>vs. WE </run>
                <run bold='true'>&lt;[market_data].[none:SDPW:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Clicked ROI % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Clicked ROI - %D PW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Exposed ROI % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Exposed ROI - %D PW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Spend % Difference: </run>
                <run bold='true'>&lt;[market_data].[usr:Spend - %D PW:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data].[none:Market Name:nk] / [market_data].[:Measure Names])</rows>
        <cols>[market_data].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='PMTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Month Name:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - MTD]-[Ads per Page - PMTD])/[Ads per Page - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - MTD]-[Available Page eCPM - PMTD])/[Available Page eCPM - PMTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - MTD]) - sum([Clicks - PMTD]))/sum([Clicks - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - MTD]-[Fill Rate - PMTD])/[Fill Rate - PMTD]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - MTD]) - sum([Impressions Served - PMTD]))/sum([Impressions Served - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - PMTD])/[Page CTR - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - MTD]) - sum([Pages Served - PMTD]))/sum([Pages Served - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - MTD]-[Served Page eCPM - PMTD])/[Served Page eCPM - PMTD]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PMTD]' derivation='User' name='[usr:Ads per Page - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PMTD]' derivation='User' name='[usr:Available Page eCPM - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PMTD]' derivation='User' name='[usr:CPC - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PMTD]' derivation='User' name='[usr:CTR - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PMTD]' derivation='User' name='[usr:Clicks - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PMTD]' derivation='User' name='[usr:Fill Rate - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PMTD]' derivation='User' name='[usr:Gross Media Revenue - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PMTD]' derivation='User' name='[usr:Impressions Served - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PMTD]' derivation='User' name='[usr:Net Media Revenue - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PMTD]' derivation='User' name='[usr:Page CTR - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PMTD]' derivation='User' name='[usr:Pages Available - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PMTD]' derivation='User' name='[usr:Pages Served - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PMTD]' derivation='User' name='[usr:Served Page eCPM - %D PMTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PMTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PMTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PMTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - PMTD])/[Active Hotels - PMTD]' />
            </column>
            <column caption='Budget per Hotel - %D PMTD' datatype='real' default-format='p0.0%' name='[Calculation_3020106162305006]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_4170106162336528]-[Calculation_6310106162009648])/[Calculation_6310106162009648]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PMTD]' derivation='User' name='[usr:Active Hotels - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3020106162305006]' derivation='User' name='[usr:Calculation_3020106162305006:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPM])/[Sold Hotels as of SDPM]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPM]' derivation='User' name='[usr:Sold Hotels - %D SDPM:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPM]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_3020106162305006:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPM:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D PMTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='PQTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data].[none:Current Quarter:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - QTD]-[Available Page eCPM - PQTD])/[Available Page eCPM - PQTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - QTD]-[Served Page eCPM - PQTD])/[Served Page eCPM - PQTD]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PQTD]' derivation='User' name='[usr:Available Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PQTD]' derivation='User' name='[usr:Net Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PQTD]' derivation='User' name='[usr:Served Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PQTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - PQTD])/[Active Hotels - PQTD]' />
            </column>
            <column caption='Budget per Hotel - %D PQTD' datatype='real' default-format='p0.0%' name='[Calculation_6200106162656365]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_1230106162113303])/[Calculation_1230106162113303]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PQTD]' derivation='User' name='[usr:Active Hotels - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6200106162656365]' derivation='User' name='[usr:Calculation_6200106162656365:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPQ]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPQ])/[Sold Hotels as of SDPQ]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPQ]' derivation='User' name='[usr:Sold Hotels - %D SDPQ:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPQ]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPQ:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_6200106162656365:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPQ:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='PW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Week]-[Available Page eCPM - PW])/[Available Page eCPM - PW]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Week]-[Served Page eCPM - PW])/[Served Page eCPM - PW]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PW]' derivation='User' name='[usr:Available Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PW]' derivation='User' name='[usr:Net Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PW]' derivation='User' name='[usr:Served Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PW Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - PW])/[Active Hotels - PW]' />
            </column>
            <column caption='Budget per Hotel - %D PW' datatype='real' default-format='p0.0%' name='[Calculation_8590106161806731]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_4190106161651870])/[Calculation_4190106161651870]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PW]' derivation='User' name='[usr:Active Hotels - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8590106161806731]' derivation='User' name='[usr:Calculation_8590106161806731:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPW]' derivation='User' name='[usr:Sold Hotels - %D SDPW:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPW]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_8590106161806731:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='PYTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - YTD]-[Available Page eCPM - PYTD])/[Available Page eCPM - PYTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - YTD]-[Served Page eCPM - PYTD])/[Served Page eCPM - PYTD]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PYTD]' derivation='User' name='[usr:Available Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PYTD]' derivation='User' name='[usr:Net Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PYTD]' derivation='User' name='[usr:Served Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[none:Current Year:ok]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PYTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - YTD]-[Active Hotels - PYTD])/[Active Hotels - PYTD]' />
            </column>
            <column caption='Budget per Hotel - %D PYTD' datatype='real' default-format='p0.0%' name='[Calculation_1070106162755693]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2790106162448809]-[Calculation_0040106162202694])/[Calculation_0040106162202694]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PYTD]' derivation='User' name='[usr:Active Hotels - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1070106162755693]' derivation='User' name='[usr:Calculation_1070106162755693:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_1070106162755693:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Page CTR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR]' derivation='User' name='[usr:Page CTR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:Page CTR:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:Page CTR:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:Page CTR:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:Page CTR:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:Page CTR:qk] + [publisher_data].[usr:Page CTR:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Page CTR YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Page CTR Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Page CTR]' derivation='User' name='[usr:Page CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[usr:Page CTR:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Page Fill Rate'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[publisher_data].[usr:Fill Rate:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data].[usr:Fill Rate:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data].[none:Breakdown Color:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data].[usr:Fill Rate:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data].[usr:Fill Rate:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data].[usr:Fill Rate:qk] + [publisher_data].[usr:Fill Rate:qk])</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Pages Available'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[sum:Pages Available:qk]</rows>
        <cols>[publisher_data].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Pages Available YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Pages Available Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data].[none:Date:qk]' filter-group='4' included-values='all'>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data].[none:Date:qk]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[sum:Pages Available:qk]</rows>
        <cols>[publisher_data].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Percent of Budget Used YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent of Budget Used Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Calculation_6230419180048246]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([active_hotels_with_budget].[Spend])/sum([Budget])' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_6230419180048246]' derivation='User' name='[usr:Calculation_6230419180048246:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[sold_hotels].[usr:Calculation_6230419180048246:qk]</rows>
        <cols>[active_hotels_with_budget].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Percent of Hotels Active'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent of Active Hotels</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels].[Gross Media Revenue 7 Day Average]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]' field-type='quantitative' max='1.0' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]</rows>
        <cols>[active_hotels_with_budget].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Performance by Market'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='publisher_data' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Active Hotels - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Ads per Page - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Available Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CPC - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [CTR - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Fill Rate - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Gross Media Revenue - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Pages Available - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served Page eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served Page eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served Page eCPM - MTD]&#13;&#10;    WHEN &quot;Year&quot; THEN [Served Page eCPM - YTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM for Table]' derivation='User' name='[usr:Available Page eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM for Table]' derivation='User' name='[usr:Served Page eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Publisher:nk]'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Ad Unit:nk]'>
            <groupfilter from='&quot;Apollo List Page&quot;' function='range' level='[none:Ad Unit:nk]' to='&quot;Worldspan List Page&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Type of Ad Unit:nk]'>
            <groupfilter from='&quot;Total GDS List Page&quot;' function='range' level='[none:Type of Ad Unit:nk]' to='&quot;Total SEM List Page&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Publisher:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='79' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[active_hotels_with_budget].[:Measure Names]' value='32' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[active_hotels_with_budget].[:Measure Names]' value='center' />
            <format attr='font-weight' field='[active_hotels_with_budget].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[none:Market Name:nk]</rows>
        <cols>[active_hotels_with_budget].[:Measure Names]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data].[Filter for Publisher]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='QTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data].[none:Current Quarter:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - QTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - QTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - QTD]' derivation='Sum' name='[sum:Net Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - QTD]' derivation='User' name='[usr:Available Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - QTD]' derivation='User' name='[usr:Served Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - QTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - QTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='QTD Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data].[none:Current Quarter:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,DATEADD(&apos;quarter&apos;,-1,[Ref Day])))' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Quarter]' derivation='None' name='[none:Current Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Quarter]' derivation='None' name='[none:Previous Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPQ]' derivation='Day-Trunc' name='[tdy:SDPQ:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='text-align' value='right' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data].[none:Breakdown Color:nk]' value='58' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='font-weight' field='[publisher_data].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Previous Quarter:nk]' />
              <lod column='[publisher_data].[none:Current Quarter:nk]' />
              <lod column='[publisher_data].[tdy:SDPQ:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='QTD Data 2'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - QTD]-[Available Page eCPM - PQTD])/[Available Page eCPM - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - QTD]-[Served Page eCPM - PQTD])/[Served Page eCPM - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PQTD]' derivation='User' name='[usr:Available Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - QTD]' derivation='User' name='[usr:Available Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PQTD]' derivation='User' name='[usr:Served Page eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - QTD]' derivation='User' name='[usr:Served Page eCPM - QTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='QTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - QTD' datatype='real' default-format='C1033%' name='[Calculation_9970106162410403]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget - QTD])/[Active Hotels - QTD]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - QTD]' derivation='User' name='[usr:Active Hotels - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9970106162410403]' derivation='User' name='[usr:Calculation_9970106162410403:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_9970106162410403:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - QTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - QTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Ref Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Day])/sum([Pages Served - Ref Day])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Available - Ref Day])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Clicks - Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Impressions Served - Ref Day])' />
            </column>
            <column datatype='integer' name='[Clicks - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Day])/sum([Pages Available - Ref Day])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' name='[Impressions Served - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Day]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Day]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Pages Served - Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Served - Ref Day])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Day]' derivation='Sum' name='[sum:Clicks - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Day]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Day]' derivation='Sum' name='[sum:Impressions Served - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - Ref Day]' derivation='Sum' name='[sum:Net Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Day]' derivation='Sum' name='[sum:Pages Available - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Day]' derivation='Sum' name='[sum:Pages Served - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Day]' derivation='User' name='[usr:Ads per Page - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - Ref Day]' derivation='User' name='[usr:Available Page eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Day]' derivation='User' name='[usr:CPC - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Day]' derivation='User' name='[usr:CTR - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Day]' derivation='User' name='[usr:Fill Rate - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Day]' derivation='User' name='[usr:Page CTR - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - Ref Day]' derivation='User' name='[usr:Served Page eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - Ref Day:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
            <format attr='height' field='[publisher_data].[:Measure Names]' value='20' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='196' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='font-size' field='[publisher_data].[:Measure Names]' value='12' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
            <format attr='border-style' data-class='subtotal' value='solid' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='solid' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='Ref Day Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] = [Ref Day] THEN [Advertiser ID] END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - Ref Day' datatype='real' default-format='C1033%' name='[Calculation_3610106160432967]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget - Ref Day])/[Active Hotels - Ref Day]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - Ref Day]' derivation='User' name='[usr:Active Hotels - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3610106160432967]' derivation='User' name='[usr:Calculation_3610106160432967:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_3610106160432967:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - Ref Day:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Ref Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Week]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Week]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - Ref Week]' derivation='Sum' name='[sum:Net Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - Ref Week]' derivation='User' name='[usr:Available Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - Ref Week]' derivation='User' name='[usr:Served Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='192' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='font-size' field='[publisher_data].[:Measure Names]' value='12' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
            <format attr='border-style' data-class='subtotal' value='solid' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='solid' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='Ref Week Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - Ref Week' datatype='real' default-format='C1033%' name='[Calculation_2600106161507552]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget - Ref Week])/[Active Hotels - Ref Week]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - Ref Week]' derivation='User' name='[usr:Active Hotels - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2600106161507552]' derivation='User' name='[usr:Calculation_2600106161507552:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_2600106161507552:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='89' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='SDPW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Day]-[Available Page eCPM - SDPW])/[Available Page eCPM - SDPW]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPW]))/sum([Clicks - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Day]-[Fill Rate - SDPW])/[Fill Rate - SDPW]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day])-sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPW]))/sum([Impressions Served - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPW])/[Page CTR - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPW]))/sum([Pages Served - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Day]-[Served Page eCPM - SDPW])/[Served Page eCPM - SDPW]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SDPW]' derivation='User' name='[usr:Ads per Page - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D SDPW]' derivation='User' name='[usr:Available Page eCPM - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SDPW]' derivation='User' name='[usr:CPC - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SDPW]' derivation='User' name='[usr:CTR - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SDPW]' derivation='User' name='[usr:Clicks - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SDPW]' derivation='User' name='[usr:Fill Rate - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SDPW]' derivation='User' name='[usr:Gross Media Revenue - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SDPW]' derivation='User' name='[usr:Impressions Served - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SDPW]' derivation='User' name='[usr:Net Media Revenue - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SDPW]' derivation='User' name='[usr:Page CTR - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SDPW]' derivation='User' name='[usr:Pages Available - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SDPW]' derivation='User' name='[usr:Pages Served - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D SDPW]' derivation='User' name='[usr:Served Page eCPM - %D SDPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D SDPW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SDPW Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPW])/[Active Hotels - SDPW]' />
            </column>
            <column caption='Budget per Hotel - %D SDPW' datatype='real' default-format='p0.0%' name='[Calculation_2460106161409047]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_6410106161224985])/[Calculation_6410106161224985]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SDPW]' derivation='User' name='[usr:Active Hotels - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2460106161409047]' derivation='User' name='[usr:Calculation_2460106161409047:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPW]' derivation='User' name='[usr:Sold Hotels - %D SDPW:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPW]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_2460106161409047:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D SDPW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='SDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Day]-[Ads per Page - SDPY])/[Ads per Page - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Day] - [Available Page eCPM - SDPY])/[Available Page eCPM - SDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPY])/[CPC - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Day] - [CTR - SDPY])/[CTR - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPY]))/sum([Clicks - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Day] - [Fill Rate - SDPY])/[Fill Rate - SDPY]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPY]))/sum([Gross Media Revenue - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPY]))/sum([Impressions Served - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPY])/[Page CTR - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPY]))/sum([Pages Available - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPY]))/sum([Pages Served - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Day]-[Served Page eCPM - SDPY])/[Served Page eCPM - SDPY]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SDPY]' derivation='User' name='[usr:Ads per Page - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D SDPY]' derivation='User' name='[usr:Available Page eCPM - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SDPY]' derivation='User' name='[usr:CPC - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SDPY]' derivation='User' name='[usr:CTR - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SDPY]' derivation='User' name='[usr:Clicks - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SDPY]' derivation='User' name='[usr:Fill Rate - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SDPY]' derivation='User' name='[usr:Impressions Served - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SDPY]' derivation='User' name='[usr:Net Media Revenue - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SDPY]' derivation='User' name='[usr:Page CTR - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SDPY]' derivation='User' name='[usr:Pages Available - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SDPY]' derivation='User' name='[usr:Pages Served - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D SDPY]' derivation='User' name='[usr:Served Page eCPM - %D SDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D SDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D SDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPY])/[Active Hotels - SDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SDPY' datatype='real' default-format='p0.0%' name='[Calculation_1110106160520217]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_4300106160335263])/[Calculation_4300106160335263]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SDPY]' derivation='User' name='[usr:Active Hotels - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1110106160520217]' derivation='User' name='[usr:Calculation_1110106160520217:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_1110106160520217:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D SDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='SMTDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Month Name:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - MTD] - [Ads per Page - SMTDPY])/[Ads per Page - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - MTD] - [Available Page eCPM - SMTDPY])/[Available Page eCPM - SMTDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - MTD] - [CPC - SMTDPY])/[CPC - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - MTD] - [CTR - SMTDPY])/[CTR - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - MTD])-sum([Clicks - SMTDPY]))/sum([Clicks - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - MTD] - [Fill Rate - SMTDPY])/[Fill Rate - SMTDPY]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - SMTDPY]))/sum([Gross Media Revenue - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - MTD])-sum([Impressions Served - SMTDPY]))/sum([Impressions Served - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - SMTDPY])/[Page CTR - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - MTD])-sum([Pages Available - SMTDPY]))/sum([Pages Available - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - MTD])-sum([Pages Served - SMTDPY]))/sum([Pages Served - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - MTD] - [Served Page eCPM - SMTDPY])/[Served Page eCPM - SMTDPY]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SMTDPY]' derivation='User' name='[usr:Ads per Page - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D SMTDPY]' derivation='User' name='[usr:Available Page eCPM - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SMTDPY]' derivation='User' name='[usr:CPC - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SMTDPY]' derivation='User' name='[usr:CTR - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SMTDPY]' derivation='User' name='[usr:Clicks - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SMTDPY]' derivation='User' name='[usr:Fill Rate - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SMTDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SMTDPY]' derivation='User' name='[usr:Impressions Served - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SMTDPY]' derivation='User' name='[usr:Net Media Revenue - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SMTDPY]' derivation='User' name='[usr:Page CTR - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SMTDPY]' derivation='User' name='[usr:Pages Available - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SMTDPY]' derivation='User' name='[usr:Pages Served - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D SMTDPY]' derivation='User' name='[usr:Served Page eCPM - %D SMTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D SMTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D SMTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SMTDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - SMTDPY])/[Active Hotels - SMTDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SMTDPY' datatype='real' default-format='p0.0%' name='[Calculation_4960106162539043]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_4170106162336528] -[Calculation_2670106162036194])/[Calculation_2670106162036194]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SMTDPY]' derivation='User' name='[usr:Active Hotels - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4960106162539043]' derivation='User' name='[usr:Calculation_4960106162539043:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_4960106162539043:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D SMTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='SQTDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data].[none:Current Quarter:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD] - [Ads per Page - SQTDPY])/[Ads per Page - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - QTD] - [Available Page eCPM - SQTDPY])/[Available Page eCPM - SQTDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD] - [CPC - SQTDPY])/[CPC - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - SQTDPY])/[CTR - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD])-sum([Clicks - SQTDPY]))/sum([Clicks - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD] - [Fill Rate - SQTDPY])/[Fill Rate - SQTDPY]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD])-sum([Gross Media Revenue - SQTDPY]))/sum([Gross Media Revenue - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD])-sum([Impressions Served - SQTDPY]))/sum([Impressions Served - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - SQTDPY])/[Page CTR - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD])-sum([Pages Available - SQTDPY]))/sum([Pages Available - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD])-sum([Pages Served - SQTDPY]))/sum([Pages Served - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - QTD] - [Served Page eCPM - SQTDPY])/[Served Page eCPM - SQTDPY]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SQTDPY]' derivation='User' name='[usr:Ads per Page - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D SQTDPY]' derivation='User' name='[usr:Available Page eCPM - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SQTDPY]' derivation='User' name='[usr:CPC - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SQTDPY]' derivation='User' name='[usr:CTR - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SQTDPY]' derivation='User' name='[usr:Clicks - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SQTDPY]' derivation='User' name='[usr:Fill Rate - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SQTDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SQTDPY]' derivation='User' name='[usr:Impressions Served - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SQTDPY]' derivation='User' name='[usr:Net Media Revenue - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SQTDPY]' derivation='User' name='[usr:Page CTR - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SQTDPY]' derivation='User' name='[usr:Pages Available - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SQTDPY]' derivation='User' name='[usr:Pages Served - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D SQTDPY]' derivation='User' name='[usr:Served Page eCPM - %D SQTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D SQTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D SQTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SQTDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - SQTDPY])/[Active Hotels - SQTDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SQTDPY' datatype='real' default-format='p0.0%' name='[Calculation_6380106162722912]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_2840106162136209])/[Calculation_2840106162136209]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SQTDPY]' derivation='User' name='[usr:Active Hotels - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6380106162722912]' derivation='User' name='[usr:Calculation_6380106162722912:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_6380106162722912:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D SQTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='SWPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week] - [Ads per Page - SWPY])/[Ads per Page - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Week] - [Available Page eCPM - SWPY])/[Available Page eCPM - SWPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week] - [CPC - SWPY])/[CPC - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week] - [CTR - SWPY])/[CTR - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - SWPY]))/sum([Clicks - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week] - [Fill Rate - SWPY])/[Fill Rate - SWPY]' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - SWPY]))/sum([Gross Media Revenue - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - SWPY]))/sum([Impressions Served - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week] - [Page CTR - SWPY])/[Page CTR - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - SWPY]))/sum([Pages Available - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - SWPY]))/sum([Pages Served - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Week] - [Served Page eCPM - SWPY])/[Served Page eCPM - SWPY]' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SWPY]' derivation='User' name='[usr:Ads per Page - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D SWPY]' derivation='User' name='[usr:Available Page eCPM - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SWPY]' derivation='User' name='[usr:CPC - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SWPY]' derivation='User' name='[usr:CTR - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SWPY]' derivation='User' name='[usr:Clicks - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SWPY]' derivation='User' name='[usr:Fill Rate - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SWPY]' derivation='User' name='[usr:Gross Media Revenue - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SWPY]' derivation='User' name='[usr:Impressions Served - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SWPY]' derivation='User' name='[usr:Net Media Revenue - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SWPY]' derivation='User' name='[usr:Page CTR - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SWPY]' derivation='User' name='[usr:Pages Available - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SWPY]' derivation='User' name='[usr:Pages Served - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D SWPY]' derivation='User' name='[usr:Served Page eCPM - %D SWPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Net Media Revenue - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D SWPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Net Media Revenue - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D SWPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <color column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SWPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - SWPY])/[Active Hotels - SWPY]' />
            </column>
            <column caption='Budget per Hotel - %D SWPY' datatype='real' default-format='p0.0%' name='[Calculation_6560106161837608]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_3610106161728278])/[Calculation_3610106161728278]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SWPY]' derivation='User' name='[usr:Active Hotels - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6560106161837608]' derivation='User' name='[usr:Calculation_6560106161837608:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_6560106161837608:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - \%D SWPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
              <color column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Spend and ROI by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Week Ending </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data].[Ref Day]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='market_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Clicked ROI - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue - Ref Week])/sum([Spend - Ref Week])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue - Ref Week])/sum([Spend - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - Ref Week]' derivation='Sum' name='[sum:Spend - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI - Ref Week]' derivation='User' name='[usr:Clicked ROI - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - Ref Week]' derivation='User' name='[usr:Exposed ROI - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Clicked ROI - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data].[usr:Exposed ROI - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[market_data].[none:Market Name:nk]' direction='DESC' using='[market_data].[sum:Impressions:qk]'>
          </sort>
          <slices>
            <column>[market_data].[none:Date:qk]</column>
            <column>[market_data].[none:Market Name:nk]</column>
            <column>[market_data].[:Measure Names]</column>
            <column>[market_data].[none:Filter for Publisher:nk]</column>
            <column>[market_data].[none:Type of Ad Unit:nk]</column>
            <column>[market_data].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data].[Multiple Values]' scope='rows' value='ROI' />
            <format attr='subtitle' class='0' field='[market_data].[Multiple Values]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[Multiple Values]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[market_data].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[market_data].[sum:Spend - Ref Week:qk]' scope='rows' value='Spend' />
            <format attr='subtitle' class='0' field='[market_data].[sum:Spend - Ref Week:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data].[sum:Spend - Ref Week:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[market_data].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[market_data].[sum:Spend - Ref Week:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data].[:Measure Names]' />
              <lod column='[market_data].[none:Ref Day:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([market_data].[sum:Spend - Ref Week:qk] + [market_data].[Multiple Values])</rows>
        <cols>[market_data].[none:Market Name:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current            vs. Previous               vs. &lt;[publisher_data].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - Ref Week]' derivation='User' name='[usr:Available Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - Ref Week]' derivation='User' name='[usr:Served Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='line-pattern' value='none' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Month Name:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;</run>
            <run bold='true' fontsize='8'>Æ   &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current              vs. Previous            vs. &lt;[publisher_data].[none:Previous Year:ok]&gt;    </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>.</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Current Month Name:nk]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title QTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Quarter:nk]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'> Current              vs. Previous               vs. &lt;[publisher_data].[none:Previous Year:ok]&gt;      </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'> .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Quarter]' derivation='None' name='[none:Current Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Current Quarter:nk]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Past 7 Days through &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current            vs. Previous               vs. &lt;[publisher_data].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='line-pattern' value='none' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title YTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data].[none:Current Year:ok]&gt; through &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current                      vs. &lt;[publisher_data].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Current Year:ok]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
            <run>&lt;</run>
            <run>[publisher_data].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:SDPW:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' name='[Tornado Measure - Day ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - Day])' />
            </column>
            <column datatype='real' name='[Tornado Measure - Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Day] - [Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Day] - [CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Day] - [CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Day] - [Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Day] - [CPC - SDPW])/[CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Day] - [CTR - SDPW])/[CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Day] - [Fill Rate - SDPW])/[Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - Day ABS]' derivation='User' name='[usr:Tornado Measure - Day ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - Day]' derivation='User' name='[usr:Tornado Measure - Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[publisher_data].[none:Market Name:nk]' direction='DESC' using='[publisher_data].[usr:Tornado Measure - Day ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data].[usr:Tornado Measure - Day:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data].[usr:Tornado Measure - Day:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data].[usr:Tornado Measure - Day:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data].[usr:Tornado Measure - Day:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data].[usr:Tornado Measure - Day:qk]' />
              <lod column='[publisher_data].[none:Ref Day:qk]' />
              <lod column='[publisher_data].[none:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='357' />
                <format attr='maxwidth' value='357' />
                <format attr='minheight' value='840' />
                <format attr='maxheight' value='840' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[none:Market Name:nk]</rows>
        <cols>[publisher_data].[usr:Tornado Measure - Day:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
            <run>&lt;</run>
            <run>[publisher_data].[none:Current Month Name:nk]</run>
            <run>&gt;</run>
            <run> through </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:Previous Month Name:nk]</run>
            <run>&gt;</run>
            <run> through </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:SDPM:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column datatype='real' name='[Tornado Measure - MTD ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - MTD])' />
            </column>
            <column datatype='real' name='[Tornado Measure - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - MTD] - [Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - MTD] - [CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - MTD] - [CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - MTD] - [Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - MTD]) - sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - MTD] - [Ads per Page - PMTD])/[Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - MTD] - [CPC - PMTD])/[CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - MTD] - [Fill Rate - PMTD])/[Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='None' name='[none:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - MTD ABS]' derivation='User' name='[usr:Tornado Measure - MTD ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - MTD]' derivation='User' name='[usr:Tornado Measure - MTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[publisher_data].[none:Market Name:nk]' direction='DESC' using='[publisher_data].[usr:Tornado Measure - MTD ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[publisher_data].[usr:Tornado Measure - MTD:qk]' max='1.0' min='-1.0' num-steps='2' palette='tableau-red-blue' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data].[usr:Tornado Measure - MTD:qk]' />
              <lod column='[publisher_data].[none:Ref Day:qk]' />
              <lod column='[publisher_data].[none:SDPM:qk]' />
              <lod column='[publisher_data].[none:Previous Month Name:nk]' />
              <lod column='[publisher_data].[none:Current Month Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[none:Market Name:nk]</rows>
        <cols>[publisher_data].[usr:Tornado Measure - MTD:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>&#10;WE </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. WE </run>
            <run>&lt;</run>
            <run>[publisher_data].[none:SDPW:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' name='[Tornado Measure - Week ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - Week])' />
            </column>
            <column datatype='real' name='[Tornado Measure - Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Week] - [Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Week] - [CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Week] - [CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Week] - [Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Week]) - sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Week] - [Ads per Page - PW])/[Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Week] - [CPC - PW])/[CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Week] - [CTR - PW])/[CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Week] - [Fill Rate - PW])/[Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Week]) - sum([Pages Available - PW]))/sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - Week ABS]' derivation='User' name='[usr:Tornado Measure - Week ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - Week]' derivation='User' name='[usr:Tornado Measure - Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[publisher_data].[none:Market Name:nk]' direction='DESC' using='[publisher_data].[usr:Tornado Measure - Week ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[publisher_data].[usr:Tornado Measure - Week:qk]' max='1.0' min='-1.0' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data].[usr:Tornado Measure - Week:qk]' />
              <lod column='[publisher_data].[none:Ref Day:qk]' />
              <lod column='[publisher_data].[none:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data].[none:Market Name:nk]</rows>
        <cols>[publisher_data].[usr:Tornado Measure - Week:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Budget'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Budget in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels].[Gross Media Revenue 7 Day Average]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' name='[Budget]' role='measure' type='quantitative'>
            </column>
            <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Calculation_6230419180048246]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([active_hotels_with_budget].[Spend])/sum([Budget])' scope-isolation='false' />
            </column>
            <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6230419180048246]' derivation='User' name='[usr:Calculation_6230419180048246:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[sum:Number of Records:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Percent of Hotels Active:qk:1]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='subtitle' class='0' field='[sold_hotels].[usr:Calculation_6230419180048246:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[sold_hotels].[usr:Calculation_6230419180048246:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[sold_hotels].[usr:Calculation_6230419180048246:qk]' field-type='quantitative' fold='true' max='1.0' min='0.0' range-type='fixed' scope='rows' type='space' />
            <format attr='width' field='[sold_hotels].[sum:Budget:qk]' value='58' />
            <format attr='width' field='[sold_hotels].[usr:Calculation_6230419180048246:qk]' value='58' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[sold_hotels].[sum:Budget:qk]' value='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='col-width' field='[active_hotels_with_budget].[:Measure Names]' value='160' />
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[active_hotels_with_budget].[none:Date:qk]' value='Date (top 4 graphs)'>
              <formatted-text>
                <run>Date (top 4 graphs)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[sold_hotels].[sum:Budget:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[sold_hotels].[usr:Calculation_6230419180048246:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([sold_hotels].[sum:Budget:qk] + [sold_hotels].[usr:Calculation_6230419180048246:qk])</rows>
        <cols>[active_hotels_with_budget].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Budget YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Budget Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='sold_hotels' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='real' name='[Budget]' role='measure' type='quantitative'>
            </column>
            <column caption='Date without Year' datatype='string' name='[Calculation_2940419174350427]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Calculation_2940419174350427]' derivation='None' name='[none:Calculation_2940419174350427:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[sold_hotels].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[sold_hotels].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[sold_hotels].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[sold_hotels].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[sold_hotels].[sum:Budget:qk]</rows>
        <cols>[sold_hotels].[none:Calculation_2940419174350427:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Week Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Week]-[Available Page eCPM - PW])/[Available Page eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Week]-[Served Page eCPM - PW])/[Served Page eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PW]' derivation='User' name='[usr:Available Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - Ref Week]' derivation='User' name='[usr:Available Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PW]' derivation='User' name='[usr:Served Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - Ref Week]' derivation='User' name='[usr:Served Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='text-align' value='right' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data].[none:Breakdown Color:nk]' value='54' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='font-weight' field='[publisher_data].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[tdy:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Week Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>                                         Week Ending &lt;[publisher_data].[tdy:Ref Day:qk]&gt; &#10;                                          vs. Week Ending &lt;[publisher_data].[tdy:SDPW:qk]&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - Ref Week]-[Available Page eCPM - PW])/[Available Page eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - Ref Week]-[Served Page eCPM - PW])/[Served Page eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PW]' derivation='User' name='[usr:Available Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - Ref Week]' derivation='User' name='[usr:Available Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PW]' derivation='User' name='[usr:Served Page eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - Ref Week]' derivation='User' name='[usr:Served Page eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[tdy:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - YTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - YTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - YTD]' derivation='Sum' name='[sum:Net Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - YTD]' derivation='User' name='[usr:Available Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - YTD]' derivation='User' name='[usr:Served Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Net Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Net Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='YTD Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - YTD]-[Available Page eCPM - PYTD])/[Available Page eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - YTD]-[Served Page eCPM - PYTD])/[Served Page eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PYTD]' derivation='User' name='[usr:Available Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - YTD]' derivation='User' name='[usr:Available Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PYTD]' derivation='User' name='[usr:Served Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - YTD]' derivation='User' name='[usr:Served Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data].[none:Breakdown Color:nk]' value='58' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='true' />
            <format attr='font-weight' field='[publisher_data].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Current Year:ok]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
              <lod column='[publisher_data].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data].[none:Current Year:ok]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> through </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data].[tdy:Ref Day:qk]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> &#10;  vs. </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data].[none:Previous Year:ok]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> through </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data].[tdy:SDPY:qk]</run>
            <run fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource name='publisher_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available Page eCPM - YTD]-[Available Page eCPM - PYTD])/[Available Page eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served Page eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served Page eCPM - YTD]-[Served Page eCPM - PYTD])/[Served Page eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served Page eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - %D PYTD]' derivation='User' name='[usr:Available Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available Page eCPM - YTD]' derivation='User' name='[usr:Available Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - %D PYTD]' derivation='User' name='[usr:Served Page eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Page eCPM - YTD]' derivation='User' name='[usr:Served Page eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Available Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Served Page eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data].[:Measure Names]</column>
            <column>[publisher_data].[none:Filter for Market:nk]</column>
            <column>[publisher_data].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data].[none:Ad Unit:nk]</column>
            <column>[publisher_data].[none:Type of Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data].[:Measure Names]' value='true' />
            <format attr='display' field='[publisher_data].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data].[Multiple Values]' />
              <lod column='[publisher_data].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data].[none:Current Year:ok]' />
              <lod column='[publisher_data].[none:Previous Year:ok]' />
              <lod column='[publisher_data].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data].[:Measure Names]</rows>
        <cols total='true'>([publisher_data].[none:Pub:nk] / [publisher_data].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource name='active_hotels_with_budget' />
            <datasource name='Parameters' />
            <datasource name='sold_hotels' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - YTD' datatype='real' default-format='C1033%' name='[Calculation_2790106162448809]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels].[Budget - YTD])/[Active Hotels - YTD]' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - YTD]' derivation='User' name='[usr:Active Hotels - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2790106162448809]' derivation='User' name='[usr:Calculation_2790106162448809:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels'>
            <column datatype='integer' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Active Hotels - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget].[usr:Calculation_2790106162448809:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Active Hotels - YTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget].[usr:Budget per Hotel - YTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget].[:Measure Names]</column>
            <column>[active_hotels_with_budget].[none:Date:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget].[tdy:Ref Day:ok]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Advertiser Metrics'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Advertiser Metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1300' minheight='1600' minwidth='1300' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='17' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='16' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97500' id='4' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97500' id='2' type='layout-basic' w='84692' x='0' y='2500'>
                <zone h='24375' id='9' name='Conversions per Click' show-title='true' w='42346' x='0' y='51250'>
                </zone>
                <zone h='24375' id='11' name='Conversions per Impression' show-title='true' w='42346' x='42346' y='51250'>
                </zone>
                <zone h='24375' id='14' name='Clicked ROI' show-title='true' w='42346' x='0' y='75625'>
                </zone>
                <zone h='24375' id='15' name='Exposed ROI' show-title='true' w='42346' x='42346' y='75625'>
                </zone>
                <zone h='20500' id='30' name='Total Budget' show-title='true' w='42346' x='42346' y='2500'>
                </zone>
                <zone h='26250' id='33' name='Average Budget per Hotel' show-title='true' w='42346' x='42346' y='25000'>
                </zone>
                <zone h='26250' id='37' name='Percent of Hotels Active' show-title='true' w='42346' x='0' y='25000'>
                </zone>
                <zone h='20500' id='39' name='Active and Sold Hotels' show-title='true' w='42346' x='0' y='2500'>
                </zone>
                <zone h='2000' id='43' name='Active and Sold Hotels' param='[active_hotels_with_budget].[:Measure Names]' type='color' w='42346' x='0' y='23000'>
                </zone>
                <zone h='2000' id='44' name='Total Budget' param='[active_hotels_with_budget].[:Measure Names]' type='color' w='42346' x='42346' y='23000'>
                </zone>
              </zone>
              <zone fixed-size='199' h='97500' id='20' is-fixed='true' type='layout-basic' w='15308' x='84692' y='2500'>
                <zone h='48750' id='3' param='vert' type='layout-flow' w='15308' x='84692' y='2500'>
                  <zone h='4063' id='45' name='Total Budget' param='[active_hotels_with_budget].[none:Date:qk]' type='filter' w='15308' x='84692' y='2500'>
                  </zone>
                  <zone h='44687' id='19' type='empty' w='15308' x='84692' y='6563'>
                  </zone>
                </zone>
                <zone h='48750' id='21' param='vert' type='layout-flow' w='15308' x='84692' y='51250'>
                  <zone h='3125' id='26' param='[Parameters].[Publisher]' type='paramctrl' w='15308' x='84692' y='51250'>
                  </zone>
                  <zone h='3125' id='25' param='[Parameters].[Market]' type='paramctrl' w='15308' x='84692' y='54375'>
                  </zone>
                  <zone h='3125' id='6' param='[Parameters].[Breakdown]' type='paramctrl' w='15308' x='84692' y='57500'>
                  </zone>
                  <zone h='3125' id='7' param='[Parameters].[Aggregated By]' type='paramctrl' w='15308' x='84692' y='60625'>
                  </zone>
                  <zone h='3125' id='40' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='15308' x='84692' y='63750'>
                  </zone>
                  <zone h='4063' id='41' name='Conversions per Impression' param='[market_data].[none:Date:qk]' type='filter' w='15308' x='84692' y='66875'>
                  </zone>
                  <zone h='1313' id='22' type='text' w='15308' x='84692' y='70938'>
                    <formatted-text>
                      <run bold='true' fontalignment='0'>&lt;</run>
                      <run bold='true' fontalignment='0'>[Parameters].[Breakdown]</run>
                      <run bold='true' fontalignment='0'>&gt;</run>
                    </formatted-text>
                  </zone>
                  <zone h='9499' id='10' name='Conversions per Click' param='[market_data].[none:Breakdown Color:nk]' type='color' w='15308' x='84692' y='72251'>
                  </zone>
                  <zone h='8500' id='46' name='Exposed ROI' param='[market_data].[none:Type of Ad Unit:nk]' type='filter' w='15308' x='84692' y='81750'>
                  </zone>
                  <zone h='9750' id='47' name='Exposed ROI' param='[market_data].[none:Ad Unit:nk]' type='filter' w='15308' x='84692' y='90250'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Advertiser Metrics Year over Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Advertiser Metrics Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1300' minheight='1600' minwidth='1300' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='19' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97500' id='4' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97500' id='2' type='layout-basic' w='87692' x='0' y='2500'>
                <zone h='24375' id='7' name='Conversions per Click YoY' show-title='true' w='43846' x='0' y='51250'>
                </zone>
                <zone h='24375' id='9' name='Conversions per Impression YoY' show-title='true' w='43846' x='43846' y='51250'>
                </zone>
                <zone h='24375' id='12' name='Clicked ROI YoY' show-title='true' w='43846' x='0' y='75625'>
                </zone>
                <zone h='24375' id='13' name='Exposed ROI YoY' show-title='true' w='43846' x='43846' y='75625'>
                </zone>
                <zone h='24375' id='23' name='Active Hotels YoY' show-title='true' w='43846' x='0' y='2500'>
                </zone>
                <zone h='24375' id='25' name='Budget per Hotel YoY' show-title='true' w='43846' x='0' y='26875'>
                </zone>
                <zone h='24375' id='27' name='Percent of Budget Used YoY' show-title='true' w='43846' x='43846' y='26875'>
                </zone>
                <zone h='24375' id='30' name='Total Budget YoY' show-title='true' w='43846' x='43846' y='2500'>
                </zone>
              </zone>
              <zone fixed-size='160' h='97500' id='21' is-fixed='true' type='layout-basic' w='12308' x='87692' y='2500'>
                <zone h='48750' id='3' param='vert' type='layout-flow' w='12308' x='87692' y='2500'>
                  <zone h='3125' id='17' param='[Parameters].[Aggregated By]' type='paramctrl' w='12308' x='87692' y='2500'>
                  </zone>
                  <zone h='3125' id='16' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='12308' x='87692' y='5625'>
                  </zone>
                  <zone h='4063' id='32' name='Total Budget YoY' param='[sold_hotels].[none:Date:qk]' type='filter' w='12308' x='87692' y='8750'>
                  </zone>
                  <zone h='4063' id='28' name='Active Hotels YoY' param='[active_hotels_with_budget].[none:Date:qk]' type='filter' w='12308' x='87692' y='12813'>
                  </zone>
                  <zone h='7625' id='8' name='Conversions per Click YoY' param='[market_data].[yr:Date:ok]' type='color' w='12308' x='87692' y='16876'>
                  </zone>
                  <zone h='26749' id='18' type='empty' w='12308' x='87692' y='24501'>
                  </zone>
                </zone>
                <zone h='48750' id='22' param='vert' type='layout-flow' w='12308' x='87692' y='51250'>
                  <zone h='3125' id='14' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='51250'>
                  </zone>
                  <zone h='4063' id='29' name='Conversions per Impression YoY' param='[market_data].[none:Date:qk]' type='filter' w='12308' x='87692' y='54375'>
                  </zone>
                  <zone h='7625' id='24' name='Active Hotels YoY' param='[active_hotels_with_budget].[yr:Date:ok]' type='color' w='12308' x='87692' y='58438'>
                  </zone>
                  <zone h='8500' id='33' name='Conversions per Impression YoY' param='[market_data].[none:Type of Ad Unit:nk]' type='filter' w='12308' x='87692' y='66063'>
                  </zone>
                  <zone h='24250' id='34' name='Conversions per Impression YoY' param='[market_data].[none:Ad Unit:nk]' type='filter' w='12308' x='87692' y='74563'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='CSV Download'>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1900' minheight='1200' minwidth='1900' />
      <zones>
        <zone h='100000' id='9' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='2' type='layout-basic' w='91579' x='0' y='0'>
              <zone h='100000' id='1' name='CSV' w='91579' x='0' y='0'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='3' is-fixed='true' param='vert' type='layout-flow' w='8421' x='91579' y='0'>
              <zone h='4499' id='6' param='[Parameters].[Publisher]' type='paramctrl' w='8421' x='91579' y='0'>
              </zone>
              <zone h='4166' id='7' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='8421' x='91579' y='4499'>
              </zone>
              <zone h='4166' id='8' param='[Parameters].[Market]' type='paramctrl' w='8421' x='91579' y='8665'>
              </zone>
              <zone h='5416' id='5' name='CSV' param='[publisher_data].[none:Date:qk]' type='filter' w='8421' x='91579' y='12831'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Gross Revenue Trend'>
      <style>
      </style>
      <size maxheight='1100' maxwidth='1900' minheight='1100' minwidth='1900' />
      <zones>
        <zone h='100000' id='9' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='2' type='layout-basic' w='87000' x='0' y='0'>
              <zone h='53600' id='1' name='Gross Revenue Graph' show-title='true' w='87000' x='0' y='0'>
              </zone>
              <zone h='30500' id='7' name='Ref Week' w='5919' x='26241' y='69500'>
              </zone>
              <zone h='30500' id='12' name='PW' w='4714' x='32160' y='69500'>
              </zone>
              <zone h='30500' id='14' name='SWPY' w='5028' x='36874' y='69500'>
              </zone>
              <zone h='30500' id='15' name='MTD' w='5867' x='41902' y='69500'>
              </zone>
              <zone h='30500' id='16' name='PMTD' w='5185' x='47769' y='69500'>
              </zone>
              <zone h='30500' id='17' name='SMTDPY' w='4923' x='52954' y='69500'>
              </zone>
              <zone h='30400' id='18' name='QTD' w='6286' x='57877' y='69600'>
              </zone>
              <zone h='30400' id='19' name='PQTD' w='5133' x='64163' y='69600'>
              </zone>
              <zone h='30400' id='20' name='SQTDPY' w='5448' x='69296' y='69600'>
              </zone>
              <zone h='30400' id='21' name='YTD' w='6755' x='74744' y='69600'>
              </zone>
              <zone h='30400' id='22' name='PYTD' w='5501' x='81499' y='69600'>
              </zone>
              <zone h='3200' id='6' name='Gross Revenue Graph' param='[publisher_data].[yr:Date:ok]' type='color' w='65891' x='21109' y='53600'>
              </zone>
              <zone h='6350' id='25' name='Title Week' show-title='true' w='15661' x='26241' y='56800'>
              </zone>
              <zone h='6382' id='35' name='Blank Title' show-title='true' w='10999' x='0' y='56800'>
              </zone>
              <zone h='6382' id='36' name='Title MTD' show-title='true' w='15975' x='41902' y='56800'>
              </zone>
              <zone h='6400' id='37' name='Title QTD' show-title='true' w='16867' x='57877' y='56800'>
              </zone>
              <zone h='6400' id='38' name='Title YTD' show-title='true' w='12256' x='74744' y='56800'>
              </zone>
              <zone h='30455' id='41' name='Ref Day' w='16812' x='0' y='69545'>
              </zone>
              <zone h='30455' id='45' name='SDPW' w='4348' x='16812' y='69545'>
              </zone>
              <zone h='30455' id='47' name='SDPY' w='5081' x='21160' y='69545'>
              </zone>
              <zone h='6382' id='48' name='Title Day' show-title='true' w='15242' x='10999' y='56800'>
              </zone>
              <zone h='3200' id='49' type='empty' w='21109' x='0' y='53600'>
              </zone>
              <zone h='6363' id='51' name='Ref Day Hotels' w='16812' x='0' y='63182'>
              </zone>
              <zone h='6363' id='52' name='SDPW Hotels' w='4348' x='16812' y='63182'>
              </zone>
              <zone h='6363' id='53' name='SDPY Hotels' w='5081' x='21160' y='63182'>
              </zone>
              <zone h='6350' id='54' name='Ref Week Hotels' w='5919' x='26241' y='63150'>
              </zone>
              <zone h='6350' id='55' name='PW Hotels' w='4714' x='32160' y='63150'>
              </zone>
              <zone h='6350' id='56' name='SWPY Hotels' w='5028' x='36874' y='63150'>
              </zone>
              <zone h='6318' id='57' name='MTD Hotels' w='5867' x='41902' y='63182'>
              </zone>
              <zone h='6318' id='58' name='PMTD Hotels' w='5185' x='47769' y='63182'>
              </zone>
              <zone h='6318' id='59' name='SMTDPY Hotels' w='4923' x='52954' y='63182'>
              </zone>
              <zone h='6400' id='60' name='QTD Hotels' w='6286' x='57877' y='63200'>
              </zone>
              <zone h='6400' id='61' name='PQTD Hotels' w='5133' x='64163' y='63200'>
              </zone>
              <zone h='6400' id='62' name='SQTDPY Hotels' w='5448' x='69296' y='63200'>
              </zone>
              <zone h='6400' id='63' name='YTD Hotels' w='6755' x='74744' y='63200'>
              </zone>
              <zone h='6400' id='64' name='PYTD Hotels' w='5501' x='81499' y='63200'>
              </zone>
            </zone>
            <zone fixed-size='247' h='100000' id='3' is-fixed='true' param='vert' type='layout-flow' w='13000' x='87000' y='0'>
              <zone h='4910' id='8' param='[Parameters].[Publisher]' type='paramctrl' w='13000' x='87000' y='0'>
              </zone>
              <zone h='4546' id='65' param='[Parameters].[Market]' type='paramctrl' w='13000' x='87000' y='4910'>
              </zone>
              <zone h='5637' id='66' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='13000' x='87000' y='9456'>
                <formatted-text>
                  <run>Yesterday &#10;or Reference Day</run>
                </formatted-text>
              </zone>
              <zone h='4273' id='67' param='[Parameters].[Reference Day]' type='paramctrl' w='13000' x='87000' y='15093'>
              </zone>
              <zone h='5910' id='5' name='Gross Revenue Graph' param='[publisher_data].[none:Date:qk]' type='filter' w='13000' x='87000' y='19366'>
              </zone>
              <zone h='12364' id='68' name='Gross Revenue Graph' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='13000' x='87000' y='25276'>
              </zone>
              <zone h='35273' id='69' name='Gross Revenue Graph' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='13000' x='87000' y='37640'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Key Performance Metrics by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics by Market</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1100' maxwidth='1100' minheight='1100' minwidth='1100' />
      <zones>
        <zone h='100000' id='13' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='3637' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='96363' id='4' param='horz' type='layout-flow' w='100000' x='0' y='3637'>
              <zone h='96363' id='2' type='layout-basic' w='85455' x='0' y='3637'>
                <zone h='96363' id='15' name='Performance by Market' w='85455' x='0' y='3637'>
                </zone>
              </zone>
              <zone fixed-size='160' h='96363' id='3' is-fixed='true' param='vert' type='layout-flow' w='14545' x='85455' y='3637'>
                <zone h='4546' id='5' param='[Parameters].[Publisher]' type='paramctrl' w='14545' x='85455' y='3637'>
                </zone>
                <zone h='4546' id='11' param='[Parameters].[Aggregated By]' type='paramctrl' w='14545' x='85455' y='8183'>
                </zone>
                <zone h='5637' id='7' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='14545' x='85455' y='12729'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='4273' id='8' param='[Parameters].[Reference Day]' type='paramctrl' w='14545' x='85455' y='18366'>
                </zone>
                <zone h='14001' id='16' name='Performance by Market' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='14545' x='85455' y='22639'>
                </zone>
                <zone h='36910' id='17' name='Performance by Market' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='14545' x='85455' y='36640'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Market Tornados'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Market Tornados</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1300' minheight='1200' minwidth='1300' />
      <zones>
        <zone h='100000' id='3' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='18' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='3332' id='17' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='96668' id='10' param='horz' type='layout-flow' w='100000' x='0' y='3332'>
              <zone h='96668' id='4' param='horz' type='layout-flow' w='87692' x='0' y='3332'>
                <zone h='96668' id='2' type='layout-basic' w='87692' x='0' y='3332'>
                  <zone h='96668' id='1' name='Tornado - Day' show-title='true' w='30516' x='0' y='3332'>
                  </zone>
                  <zone h='96668' id='6' name='Tornado - Week' show-title='true' w='28758' x='30516' y='3332'>
                  </zone>
                  <zone h='96668' id='8' name='Tornado - MTD' show-title='true' w='28418' x='59274' y='3332'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='96668' id='9' is-fixed='true' param='vert' type='layout-flow' w='12308' x='87692' y='3332'>
                <zone h='4166' id='11' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='3332'>
                </zone>
                <zone h='4166' id='13' param='[Parameters].[Metric]' type='paramctrl' w='12308' x='87692' y='7498'>
                </zone>
                <zone h='4166' id='14' param='[Parameters].[Difference Type]' type='paramctrl' w='12308' x='87692' y='11664'>
                </zone>
                <zone h='5166' id='15' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='12308' x='87692' y='15830'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='3916' id='16' param='[Parameters].[Reference Day]' type='paramctrl' w='12308' x='87692' y='20996'>
                </zone>
                <zone h='11333' id='19' name='Tornado - MTD' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='12308' x='87692' y='24912'>
                </zone>
                <zone h='32333' id='20' name='Tornado - MTD' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='12308' x='87692' y='36245'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Funnel by Page'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>Sheet Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='2700' maxwidth='2200' minheight='2700' minwidth='2200' />
      <zones>
        <zone h='100000' id='21' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='15' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1481' id='14' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98519' id='4' param='horz' type='layout-flow' w='100000' x='0' y='1481'>
              <zone h='98519' id='2' type='layout-basic' w='92727' x='0' y='1481'>
                <zone h='18149' id='1' name='Week Data' show-title='true' w='92727' x='0' y='1481'>
                </zone>
                <zone h='6296' id='7' name='Week Data 2' w='92727' x='0' y='19630'>
                </zone>
                <zone h='18333' id='8' name='28Days Data' show-title='true' w='92727' x='0' y='25926'>
                </zone>
                <zone h='5889' id='9' name='28Days Data 2' w='92727' x='0' y='44259'>
                </zone>
                <zone h='6481' id='11' name='QTD Data 2' w='92727' x='0' y='68630'>
                </zone>
                <zone h='6333' id='13' name='YTD Data 2' w='92727' x='0' y='93667'>
                </zone>
                <zone h='18556' id='12' name='YTD Data' show-title='true' w='92727' x='0' y='75111'>
                </zone>
                <zone h='18482' id='10' name='QTD Data' show-title='true' w='92727' x='0' y='50148'>
                </zone>
              </zone>
              <zone fixed-size='160' h='98519' id='3' is-fixed='true' param='vert' type='layout-flow' w='7273' x='92727' y='1481'>
                <zone h='1852' id='6' param='[Parameters].[Publisher]' type='paramctrl' w='7273' x='92727' y='1481'>
                </zone>
                <zone h='1852' id='19' param='[Parameters].[Market]' type='paramctrl' w='7273' x='92727' y='3333'>
                </zone>
                <zone h='1852' id='20' param='[Parameters].[Breakdown]' type='paramctrl' w='7273' x='92727' y='5185'>
                </zone>
                <zone h='2296' id='17' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='7273' x='92727' y='7037'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='1740' id='18' param='[Parameters].[Reference Day]' type='paramctrl' w='7273' x='92727' y='9333'>
                </zone>
                <zone h='2555' id='5' name='Week Data' param='[publisher_data].[none:Date:qk]' type='filter' w='7273' x='92727' y='11073'>
                </zone>
                <zone h='5185' id='22' name='Week Data' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='7273' x='92727' y='13628'>
                </zone>
                <zone h='14518' id='23' name='Week Data' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='7273' x='92727' y='18813'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Metrics'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='2000' maxwidth='1400' minheight='2000' minwidth='1400' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2000' id='19' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97800' id='6' param='horz' type='layout-flow' w='100000' x='0' y='2000'>
              <zone h='97800' id='2' param='vert' type='layout-flow' w='83571' x='0' y='2000'>
                <zone h='97800' id='3' type='layout-basic' w='83571' x='0' y='2000'>
                  <zone h='18994' id='4' name='Pages Available' show-title='true' w='41786' x='0' y='2000'>
                  </zone>
                  <zone h='18994' id='10' name='Page Fill Rate' show-title='true' w='41785' x='41786' y='2000'>
                  </zone>
                  <zone h='20075' id='11' name='Gross Media Revenue' show-title='true' w='41786' x='0' y='60268'>
                  </zone>
                  <zone h='20075' id='12' name='Gross Media Revenue %' show-title='true' w='41785' x='41786' y='60268'>
                  </zone>
                  <zone h='19354' id='13' name='Page CTR' show-title='true' w='41786' x='0' y='40914'>
                  </zone>
                  <zone h='19354' id='14' name='CPC' show-title='true' w='41785' x='41786' y='40914'>
                  </zone>
                  <zone h='19920' id='15' name='Ad CTR' show-title='true' w='41786' x='0' y='20994'>
                  </zone>
                  <zone h='19920' id='16' name='Ads per Page' show-title='true' w='41785' x='41786' y='20994'>
                  </zone>
                  <zone h='19457' id='17' name='Available Page eCPM' show-title='true' w='41785' x='0' y='80343'>
                  </zone>
                  <zone h='19457' id='18' type='empty' w='41786' x='41785' y='80343'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='230' h='97800' id='5' is-fixed='true' param='vert' type='layout-flow' w='16429' x='83571' y='2000'>
                <zone h='2500' id='24' param='[Parameters].[Publisher]' type='paramctrl' w='16429' x='83571' y='2000'>
                </zone>
                <zone h='2500' id='28' param='[Parameters].[Market]' type='paramctrl' w='16429' x='83571' y='4500'>
                </zone>
                <zone h='2500' id='8' param='[Parameters].[Breakdown]' type='paramctrl' w='16429' x='83571' y='7000'>
                </zone>
                <zone h='2500' id='23' param='[Parameters].[Aggregated By]' type='paramctrl' w='16429' x='83571' y='9500'>
                </zone>
                <zone h='2500' id='25' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='16429' x='83571' y='12000'>
                </zone>
                <zone h='3250' id='27' name='Pages Available' param='[publisher_data].[none:Date:qk]' type='filter' w='16429' x='83571' y='14500'>
                </zone>
                <zone h='1050' id='26' type='text' w='16429' x='83571' y='17750'>
                  <formatted-text>
                    <run bold='true' fontalignment='0'>&lt;</run>
                    <run bold='true' fontalignment='0'>[Parameters].[Breakdown]</run>
                    <run bold='true' fontalignment='0'>&gt;</run>
                  </formatted-text>
                </zone>
                <zone h='8400' id='21' name='Page Fill Rate' param='[publisher_data].[none:Breakdown Color:nk]' type='color' w='16429' x='83571' y='18800'>
                </zone>
                <zone h='6800' id='29' name='Page Fill Rate' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='16429' x='83571' y='27200'>
                </zone>
                <zone h='19400' id='30' name='Page Fill Rate' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='16429' x='83571' y='34000'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Metrics Year over Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1200' minheight='1600' minwidth='1200' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='23' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='22' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97250' id='6' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97250' id='2' param='vert' type='layout-flow' w='86667' x='0' y='2500'>
                <zone h='97250' id='3' type='layout-basic' w='86667' x='0' y='2500'>
                  <zone h='24323' id='4' name='Pages Available YoY' show-title='true' w='43334' x='0' y='2500'>
                  </zone>
                  <zone h='24323' id='10' name='Fill Rate YoY' show-title='true' w='43333' x='43334' y='2500'>
                  </zone>
                  <zone h='24323' id='11' name='Gross Media Revenue YoY' show-title='true' w='43334' x='0' y='75427'>
                  </zone>
                  <zone h='24323' id='12' name='Available Page eCPM YoY' show-title='true' w='43333' x='43334' y='75427'>
                  </zone>
                  <zone h='24322' id='13' name='CTR YoY' show-title='true' w='43334' x='0' y='26823'>
                  </zone>
                  <zone h='24322' id='14' name='Ads per Page YoY' show-title='true' w='43333' x='43334' y='26823'>
                  </zone>
                  <zone h='24282' id='15' name='Page CTR YoY' show-title='true' w='43334' x='0' y='51145'>
                  </zone>
                  <zone h='24282' id='16' name='CPC YoY' show-title='true' w='43333' x='43334' y='51145'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='97250' id='5' is-fixed='true' param='vert' type='layout-flow' w='13333' x='86667' y='2500'>
                <zone h='3125' id='9' param='[Parameters].[Publisher]' type='paramctrl' w='13333' x='86667' y='2500'>
                </zone>
                <zone h='3125' id='24' param='[Parameters].[Market]' type='paramctrl' w='13333' x='86667' y='5625'>
                </zone>
                <zone h='3125' id='19' param='[Parameters].[Aggregated By]' type='paramctrl' w='13333' x='86667' y='8750'>
                </zone>
                <zone h='3125' id='20' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13333' x='86667' y='11875'>
                </zone>
                <zone h='4063' id='21' name='Pages Available YoY' param='[publisher_data].[none:Date:qk]' type='filter' w='13333' x='86667' y='15000'>
                </zone>
                <zone h='7625' id='17' name='Fill Rate YoY' param='[publisher_data].[yr:Date:ok]' type='color' w='13333' x='86667' y='19063'>
                </zone>
                <zone h='8500' id='25' name='Fill Rate YoY' param='[publisher_data].[none:Type of Ad Unit:nk]' type='filter' w='13333' x='86667' y='26688'>
                </zone>
                <zone h='24250' id='26' name='Fill Rate YoY' param='[publisher_data].[none:Ad Unit:nk]' type='filter' w='13333' x='86667' y='35188'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Variance by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Variance by Market</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='3500' maxwidth='1300' minheight='3500' minwidth='1300' />
      <zones>
        <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1142' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98858' id='4' param='horz' type='layout-flow' w='100000' x='0' y='1142'>
              <zone h='98858' id='2' type='layout-basic' w='87692' x='0' y='1142'>
                <zone h='13629' id='1' name='Spend and ROI by Market' show-title='true' w='87692' x='0' y='1142'>
                </zone>
                <zone h='85229' id='7' name='Market Differences PW' show-title='true' w='43846' x='0' y='14771'>
                </zone>
                <zone h='85229' id='8' name='Market Differences PPW' show-title='true' w='43846' x='43846' y='14771'>
                </zone>
              </zone>
              <zone fixed-size='160' h='98858' id='3' is-fixed='true' param='vert' type='layout-flow' w='12308' x='87692' y='1142'>
                <zone h='1428' id='13' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='1142'>
                </zone>
                <zone h='1771' id='11' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='12308' x='87692' y='2570'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='1342' id='12' param='[Parameters].[Reference Day]' type='paramctrl' w='12308' x='87692' y='4341'>
                </zone>
                <zone h='1857' id='5' name='Spend and ROI by Market' param='[market_data].[none:Date:qk]' type='filter' w='12308' x='87692' y='5683'>
                </zone>
                <zone h='2342' id='6' name='Spend and ROI by Market' param='[market_data].[:Measure Names]' type='color' w='12308' x='87692' y='7540'>
                </zone>
                <zone h='3885' id='16' name='Spend and ROI by Market' param='[market_data].[none:Type of Ad Unit:nk]' type='filter' w='12308' x='87692' y='9882'>
                </zone>
                <zone h='11085' id='17' name='Spend and ROI by Market' param='[market_data].[none:Ad Unit:nk]' type='filter' w='12308' x='87692' y='13767'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Revenue Graph'>
      <cards>
        <edge name='left'>
          <strip size='202'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[publisher_data].[none:Ad Unit Filter:nk]</field>
          <field>[publisher_data].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date without Year by Day Only:nk]</field>
          <field>[publisher_data].[none:Date:qk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Ad Unit Type:nk]</field>
          <field>[publisher_data].[none:Filter for Graphs without Total:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
          <field>[publisher_data].[none:Filter for Market:nk]</field>
          <field>[publisher_data].[none:Filter for Publisher:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Blank Title'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title Day'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Day'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Day Hotels'>
      <cards>
        <edge name='left'>
          <strip size='253'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
            <card param='[active_hotels_with_budget].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
          <field>[sold_hotels].[attr:Market Name:nk]</field>
          <field>[vertica.41289.579273854164].[attr:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPW Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPY'>
      <cards>
        <edge name='left'>
          <strip size='284'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title Week'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Week'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Week Hotels'>
      <cards>
        <edge name='left'>
          <strip size='236'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PW'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PW Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SWPY'>
      <cards>
        <edge name='left'>
          <strip size='284'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SWPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title MTD'>
      <cards>
        <edge name='left'>
          <strip size='289'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='MTD'>
      <cards>
        <edge name='left'>
          <strip size='289'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
            <card size='331' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='MTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='265'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PMTD'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PMTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='283'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SMTDPY'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SMTDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title QTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='290'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PQTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PQTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='283'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SQTDPY'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SQTDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title YTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='62' type='filters' />
            <card size='257' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='62' type='filters' />
            <card size='257' type='marks' />
            <card size='357' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PYTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Ref Day:ok]</field>
          <field>[mysql.41193.431456574071].[yr:SDPY:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PYTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Gross Revenue Trend'>
      <zones>
        <zone name='Gross Revenue Graph'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Week'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PW'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SWPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='MTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PMTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SMTDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='QTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PQTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SQTDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='YTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PYTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Gross Revenue Graph' pane-specification-id='1' param='[publisher_data].[yr:Date:ok]' type='color' />
        <zone name='Title Week'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Blank Title'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title MTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title QTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title YTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Day'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPW'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                    </x-fields>
                    <y-fields>
                      <field>[publisher_data].[:Measure Names]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[publisher_data].[:Measure Names]</field>
                    <field>[publisher_data].[Multiple Values]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;[publisher_data].[usr:Pages Available - \%D SDPW:qk]&quot;</value>
                  <value>%null%</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </zone>
        <zone name='SDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Title Day'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Day Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPW Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Ref Week Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PW Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SWPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='MTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PMTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SMTDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='QTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PQTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SQTDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='YTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PYTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Gross Revenue Graph' param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Pages Available'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page Fill Rate'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ad CTR'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ads per Page'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page CTR'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPC'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue %'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Available Page eCPM'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Metrics'>
      <active id='21' />
      <zones>
        <zone name='Pages Available'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='Page Fill Rate'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Gross Media Revenue'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Gross Media Revenue %'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Page CTR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ad CTR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ads per Page'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Available Page eCPM'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Pages Available' param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Page Fill Rate' pane-specification-id='1' param='[publisher_data].[none:Breakdown Color:nk]' type='color' />
        <zone name='Page Fill Rate' param='[publisher_data].[none:Ad Unit:nk]' type='filter' values='relevant' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Active and Sold Hotels'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='3' param='[active_hotels_with_budget].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Budget'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[active_hotels_with_budget].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date:qk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Market:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
          <field>[vertica.41289.579273854164].[attr:Market:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Percent of Hotels Active'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[active_hotels_with_budget].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
          <field>[vertica.41289.579273854164].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average Budget per Hotel'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date:qk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Market:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Click'>
      <cards>
        <edge name='left'>
          <strip size='197'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Ad Unit:nk]</field>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Filter for Ad Unit Type:nk]</field>
          <field>[market_data].[none:Filter for Market:nk]</field>
          <field>[market_data].[none:Filter for Publisher:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[none:Type of Ad Unit:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Impression'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicked ROI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[none:Market:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Exposed ROI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
        <node-selection select-tuples='false'>
          <oriented-node-reference orientation='vertical'>
            <node-reference>
              <axis>[market_data].[usr:Exposed ROI:qk]</axis>
            </node-reference>
            <page-reference>
            </page-reference>
          </oriented-node-reference>
        </node-selection>
      </selection-collection>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Metrics'>
      <active id='15' />
      <zones>
        <zone name='Conversions per Click'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Conversions per Impression'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Clicked ROI'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Exposed ROI'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Total Budget'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Average Budget per Hotel'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Percent of Hotels Active'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active and Sold Hotels'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active and Sold Hotels' pane-specification-id='3' param='[active_hotels_with_budget].[:Measure Names]' type='color' />
        <zone name='Total Budget' pane-specification-id='2' param='[active_hotels_with_budget].[:Measure Names]' type='color' />
        <zone name='Total Budget' param='[active_hotels_with_budget].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Conversions per Impression' param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Conversions per Click' pane-specification-id='1' param='[market_data].[none:Breakdown Color:nk]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Pages Available YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Fill Rate YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CTR YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ads per Page YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page CTR YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPC YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Available Page eCPM YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Metrics Year over Year'>
      <active id='10' />
      <zones>
        <zone name='Pages Available YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Fill Rate YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='Gross Media Revenue YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Available Page eCPM YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CTR YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ads per Page YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Page CTR YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Pages Available YoY' param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Fill Rate YoY' pane-specification-id='0' param='[publisher_data].[yr:Date:ok]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Active Hotels YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[active_hotels_with_budget].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41289.579273854164].[none:Date without Year:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Budget YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[sold_hotels].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[sold_hotels].[none:Calculation_2940419174350427:nk]</field>
          <field>[sold_hotels].[none:DD:nk]</field>
          <field>[sold_hotels].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[sold_hotels].[none:Date:qk]</field>
          <field>[sold_hotels].[none:MM:nk]</field>
          <field>[sold_hotels].[none:Month Name:nk]</field>
          <field>[sold_hotels].[yr:Date Axis:ok]</field>
          <field>[sold_hotels].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Budget per Hotel YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[sold_hotels].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date without Year:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
          <field>[sold_hotels].[none:Calculation_2940419174350427:nk]</field>
          <field>[sold_hotels].[yr:Date:ok]</field>
          <field>[vertica.41289.579273854164].[none:Date without Year:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Percent of Budget Used YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[vertica.41289.579273854164].[none:Date without Year:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Click YoY'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Impression YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicked ROI YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Exposed ROI YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Metrics Year over Year'>
      <active id='9' />
      <zones>
        <zone name='Conversions per Click YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Conversions per Impression YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Clicked ROI YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Exposed ROI YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active Hotels YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Budget per Hotel YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Percent of Budget Used YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Total Budget YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Total Budget YoY' param='[sold_hotels].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Active Hotels YoY' param='[active_hotels_with_budget].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Conversions per Click YoY' pane-specification-id='0' param='[market_data].[yr:Date:ok]' type='color' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone name='Conversions per Impression YoY' param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Active Hotels YoY' pane-specification-id='0' param='[active_hotels_with_budget].[yr:Date:ok]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Performance by Market'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Calculation_4470422111851734:nk]</field>
          <field>[active_hotels_with_budget].[none:Filter for Publisher:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Filter for Ad Unit Type:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Key Performance Metrics by Market'>
      <active id='15' />
      <zones>
        <zone name='Performance by Market'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Performance by Market' param='[publisher_data].[none:Type of Ad Unit:nk]' show-domain='false' type='filter' />
        <zone name='Performance by Market' param='[publisher_data].[none:Ad Unit:nk]' show-domain='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Day'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[usr:Tornado Measure - Day:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Week'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[usr:Tornado Measure - Week:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - MTD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data].[usr:Tornado Measure - MTD:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Current Month Name:nk]</field>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
          <field>[vertica.41285.594435081017].[none:Previous Month Name:nk]</field>
          <field>[vertica.41285.594435081017].[yr:SDPM:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Market Tornados'>
      <active id='8' />
      <zones>
        <zone name='Tornado - Day'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Tornado - Week'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Tornado - MTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Metric]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Difference Type]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Spend and ROI by Market'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Market Differences PW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Market Differences PPW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
          <field>[market_data].[yr:SDPPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Variance by Market'>
      <active id='1' />
      <zones>
        <zone name='Spend and ROI by Market'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Spend and ROI by Market' param='[market_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Spend and ROI by Market' pane-specification-id='1' param='[market_data].[:Measure Names]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Week Data'>
      <cards>
        <edge name='left'>
          <strip size='235'>
            <card size='120' type='filters' />
            <card size='221' type='marks' />
            <card size='324' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Week Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='221' type='marks' />
            <card size='552' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='28Days Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
            <card size='331' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='28Days Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='0' type='filters' />
            <card size='269' type='marks' />
            <card size='412' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Data'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='167' type='filters' />
            <card size='269' type='marks' />
            <card size='296' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='221' type='marks' />
            <card size='552' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='95' type='filters' />
            <card size='269' type='marks' />
            <card size='301' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='269' type='marks' />
            <card size='504' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Funnel by Page'>
      <active id='1' />
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Week Data' param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSV'>
      <cards>
        <edge name='left'>
          <strip size='237'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data].[:Measure Names]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date:ok]</field>
          <field>[publisher_data].[none:Market Name:nk]</field>
          <field>[publisher_data].[none:Pages Available:qk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Segment:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
          <field>[publisher_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='CSV Download'>
      <active id='1' />
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone name='CSV' param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSV Data'>
      <cards>
        <edge name='left'>
          <strip size='237'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[publisher_data].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data].[:Measure Names]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date:ok]</field>
          <field>[publisher_data].[none:Market Name:nk]</field>
          <field>[publisher_data].[none:Pages Available:qk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Segment:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
          <field>[publisher_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Gross Revenue Graph' width='192'>
      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
    </thumbnail>
    <thumbnail height='24' name='Blank Title' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAIAAAAj02USAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAWUlEQVRoge3SwQ3AIBDAsNL9dz52IA+EZE+QR9bMfHDqvx3A
      2wxEYiASA5EYiMRAJAYiMRCJgUgMRGIgEgORGIjEQCQGIjEQiYFIDERiIBIDkRiIxEAkBiLZ
      8dADLTtsO04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='24' name='Title Day' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Ref Day' width='191'>
      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
      VFBCb6trAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='64' name='Ref Day Hotels' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='SDPW' width='64'>
      iVBORw0KGgoAAAANSUhEUgAAAEAAAADACAIAAAA7u/JRAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAABBElEQVR4nO3asQ2EMBQFQUDXfy/uzpmpgISTGFnaSUn+igg9
      zrXWsbNLH/CvArQCtAK0ArQCtAK0ArQCtAK0ArQCtAK0ArQCtAK0ArQCtAK0ArQCtAK0ArQC
      tN/TgzHGl3e8dvbDE1aAVoBWgFaAVoBWgFaAVoC2fcDjN/Gc88s7Xtv+DRSgFaAVoBWgFaAV
      oBWgFaAVoDWzagVoBWgFaAVoBWgFaAVoBWgFaO3EWgFaAVoBWgFaAVoBWgFaAVoBWjuxVoBW
      gFaAVoBWgFaAVoBWgFaA1k6sFaAVoBWgFaAVoBWgFaAVoBWgtRNrBWgFaAVoBWgFaAVoBWgF
      aAVo7cRaAdoN0wIeKkaqsSkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='64' name='SDPW Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABACAIAAADtZwxfAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAGk0lEQVRoge1Yf0xTVxT+iu0mD6hlWEr9gSigOOlAcAVclalM
      CSpqXIYC8dcMLtmYP5ibgotExW06gxtZMqOgEhCJOlaMbGwoKBWhKggoQ4EhCIIgthZpma/w
      9getpaW4ZQ7W+d6X/nPP+8555+u9795zD4uiKNAMVv91Av8BGM30AKOZHmA00wPswR5IpdLh
      zGM4wWJqElrAkjRrG53tWSwWy8Zp+uKEvHbtIKTsTfPM8hQX42Y52bBY9p5RmY0G5+aUhTP2
      VhrFoCwGNYkBabc7SYrsLNs/m8A7h5rMkzAhwgxPdTqCIMLS2khNyQ4RRAkVfXyyYLNnVI7K
      KIblaK5JDDAkUxo/BWEnVWZJs5PqzfAKtzohILGGoigqJwp655rEAJ2xHyxmbXdeL75iGImm
      z8TZwmKzJA9Xl7/i6ek/7U/2/+IjNxOzxWh+0NKIgGcjNocDdemtWnOkqe4ww/Pym0eUF5e0
      a7vlRVfwzlyJHSqTPm/aHBM44Dge9Hz+v8FueVJOaWiYCyfyFfFG6al1YxWZMcfmbq8aO5Bq
      MfP84rAPTChs7aIoRcnBUGeUfbsfu7dL2IqLcX72LKPd/CXS3B/NqTvOLv5suX3nmeiQlGkp
      baQmd1nxivUpzYAFaRYInWHYxLQkCYimmO4+AqEzrvxWg7/gaWXffGm39ePpbBTnZ6l9JDP5
      7JHimQH49XoFYEGa7Xz9DVsYKsuKEOLnY5ZUebv2+bzmlF0/r4kLs9c72RAmYf79g/afoiJB
      dKisk6TItqL42QQRkmyuJqlIEGHC0ufxVDlRhipEdTqCcFr7g65S0ZUvFqSZUpWO5wEAIfBe
      tKfgkd6cEwVE5RhIyevnmuX1wbQKeVQQKxEQAE+8UdpAUhRFUcy9ih5gNNMDdNQ8aL3d3d09
      nHkMJ+g4z4zmfxfaG9dWWl+S9Tcp29JXZwU7pEqsU4Pcz+0+0fH0Gfle/f7gVIl1WrBf7pEL
      GvPNMLLz4ifnQoWpEuvUOc5Zm75qUpB699vVsb4nJNZpwUtLbyqfOfSWxZ6K+5E0jjJkmrX3
      ane+V3XPOGXZjvNH7o9PuBku04RnfG139f1fvr3UCwBQZkYWFgojZaqwgyvI9IX50mYzMRu/
      z4/Ltt5waWWBJvLc2Uld+y7EpXYBADqORcrrQ4MuqJZH21VFb/5d3efQXH348uQNSznGYYZE
      s7ZJKlvjXVTUYRydvF+Q0bNg2wxfIRtg85cEfPguWSzrAIC6hjz5a+E7rcDheGz2WzH54dUr
      5ICwysLTyqlbZix057BhRXh5xcQQFQUtagBt7RU3Mc3f8RWOtUjMJUsfNQIAKfuiekzs686m
      cYZCc27RinUtY+KDk+K5RvZb7TfU3PEuz8acyT6jWvNbmwF1WXsNuON0jxw8/FEiazUN++Rh
      pRwTJhpiunnxkdNaMVgadVXJdz2iFnAGPBgKzSKvtMbl+6IduSb2B+pW8Ca4Ggwj2CzIFPXA
      wxY1xKP0E2I1ggOyrG+u+rt3PQBvYr+rMpvNgvpRXR3gyH/DE7eK256Smkq5irtA6AYyb88d
      r1gPRzP5DYXmMaNcbIb5PHBYkyaemJ03l3smuUe0L3YsbpQfV4rCZ5pN42XpAbKneOy97qEf
      /ZF7oFmyc7EjqZCuzjuYpQHfMeLMnPVvvgrgxedZmR6YKrHW/dYmKZ/HFRBOUDbUGQw9Wqpv
      SY8WEpA/1i/m3h4SEPFM9x6BjQDK+n7tX62WgvHHAgDoki77+W7M4g3eT06GnD3kIsnXrMrP
      F16enZuue/WLzjMv4uKqiL/Jncb3Jqrra3vh2vdPk3dKH3PfcnQGMJ3vjoaGOkhcAXRUF8Nn
      C9/U3Xa0SIy8O0os4PUZasvbEew51ZilvVSezBOd9NZNJmE7UOFwfnecMf6hOB8vl7VoAW1T
      RuF3p1+dv0gAAK7j3vJUZm7vBakp31tysslxXpBpEwvgiUNsa5LkZ8pJLXoVJdcOHOj2WTre
      wYijzPz8YdiOSQQAcH2DbFtzm2q7exXy9ruC0VN0K2dYv2dOUMKs6ujSPZ4nnqgxcpxD4PH5
      H+m2GYfww+KWbWkSrpXtG/yIrLeX6HrxyvTA7Lx3Q49G8wC4fzhra4M8OTgjUQkO387r0zm7
      Vtv0f4E6tyJb5HVUv9rdt8zZWpX/gX1lj5tw/SnfGbpja9DeEHOveqnAaKYH6KiZ6W/TA4xm
      eoDRTA8wmukBRjM9wGimBxjN9ACjmR6go+Y/AYeUik1dQiPQAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SDPY' width='84'>
      iVBORw0KGgoAAAANSUhEUgAAAFQAAADACAYAAACanESUAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAF1NJREFUeJztnXtYVNXexz8SeGBABQ0ZvKDlPUEkDW8klpWk
      5eWkx7xlpQcr9CR51F6sxFJLrahXO4mmhqFZggopiuL9ChoXIQVFvCAXRYUGZMgZWO8fMwjD
      DBdpn1eG9ud59vPI2uvmd9Zea8/s9d0/kJGRkZGpL02qJgghxMPoSGPB4mF3oLEhCyoxsqAS
      IwsqMbKgEiMLKjGyoBIjCyoxsqASIwsqMbKgEiMLKjGyoBIjCyoxsqASIwsqMbKgEiMLKjGy
      oBIjCyoxsqASIwsqMbKgEiMLKjGyoBIjCyoxsqASIwsqMbKgEiMLKjGyoBIjCyoxsqASIwsq
      MbKgEiMLKjGyoBIjCyoxsqASIwsqMbKgEiMLKjGyoBJjWVuGiIiI/49+NBpk86zEyJe8xDQY
      QbUJp+jVZD+7q57Iz+WriT+htF1DkyZrcHDZzj9Db1FiUFhNzJJfcHVYQ5Mm36H02MNXcSVV
      a6rCVWbq66x8DPwqv6La1N+Y6LpeV+fwOOLyK5cv49i8UCaH36u5GfEQ0FxNFZM6BAuIEVEG
      Z/4QUb4bhGLwSXE4WyuE0IrsbTGiAxuE/6FSfZ5SER/4o2BArEhW6/4uPHFcuCnCxcqLNTR6
      /rToS7hYebm6DHliiVuwcPsgR6g1xSJ0/FqhmHRBqMpPX08Szw/4VVRt4iGP0FIyth/Es8dh
      tueZ6Io2ix2hWt74oD+DnR8BHsF5zNMsG3+PqEN5+kw5/LhaxYB/dMHVGsACuwHdee2JW2ze
      mW9cZ3nVF/I5o3Skd8dqMty4wfFkGDBQibWlDf36t6D4zG3SAbjH7o9/47EPXelcpdjDFXT3
      ITpNzqLTkpEcXNLC+HzyDQ4Xt6DzY5UTm+LetwVpB3K48ieaTk64CS+2oX99Cqen8Mnlnnz0
      YlOjUw9XUPe+pN2YyNbZSlqaOp97lzRa0q3KMLC0tIAjtzkPgDMTZrUg6eeLpJQAlFGUmM62
      c48y8SWHahouJiHuLsr0FIa5rKdJkzXYKsMN52YnJwa5wckTuZRo1cSe+h3l8La4cY/wwHN4
      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
      vixOH04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='64' name='SDPY Hotels' width='81'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='24' name='Title Week' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAIAAAAj02USAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAWUlEQVRoge3SwQ3AIBDAsNL9dz52IA+EZE+QR9bMfHDqvx3A
      2wxEYiASA5EYiMRAJAYiMRCJgUgMRGIgEgORGIjEQCQGIjEQiYFIDERiIBIDkRiIxEAkBiLZ
      8dADLTtsO04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Ref Week' width='84'>
      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
    </thumbnail>
    <thumbnail height='64' name='Ref Week Hotels' width='93'>
      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
    </thumbnail>
    <thumbnail height='192' name='PW' width='64'>
      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
      KesAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='64' name='PW Hotels' width='81'>
      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
      ZS34G0psqh1tSGnsAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SWPY' width='84'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='64' name='SWPY Hotels' width='81'>
      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
      gg==
    </thumbnail>
    <thumbnail height='24' name='Title MTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='MTD' width='104'>
      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
    </thumbnail>
    <thumbnail height='64' name='MTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='PMTD' width='84'>
      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
    </thumbnail>
    <thumbnail height='64' name='PMTD Hotels' width='81'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='SMTDPY' width='84'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='64' name='SMTDPY Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='24' name='Title QTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='QTD' width='104'>
      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
    </thumbnail>
    <thumbnail height='64' name='QTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='PQTD' width='64'>
      iVBORw0KGgoAAAANSUhEUgAAAEAAAADACAIAAAA7u/JRAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAASVUlEQVR4nO1ceVwT19p+ocTPhC2ICFwBccENsGAQoiC2ct2w
      n0uhgnWhlVtsi7TSom3doCpYqRbvD25LoKAiWxUFVGhT0QpalB0UZFcWMSyyZWEikzDfH0nI
      RigFZeS78/z4gznve86cZ+ac90zmOe+oYRgGExnqeHdgrCAI4A2CAN4gCOANggDeIAjgDYIA
      3iAI4A2CAN4gCOANggDeIAjgDYIA3iAI4A2CAN4gCOANggDeIAjgDYIA3iAI4A2CAN4gCOAN
      ggDeIAjgDQ1VhvT09PHsx6ihRmx4whkqh9BIMNCVVXBob0V+hQCo2m8Hvn14r5EOQOOZS27+
      3UrOs3/AXJzli16UPwr+JO/GXRSlkBZ85Bx6araxBgCAsKria/e8PyoGdNYtOpNgv0hPfLqi
      /Ym/OGwJdZsk2wg2avRmZq22zs5p6hdgQl5JwU5K9M7wLmU3QWXRTkr0zrBOgXI5NT2xAuFj
      GP9ZbeAMxmrfBi6GYVhHpDVj8yEWH+1L94imb6vhiio8LfNeWtSg2PzoCXREWjO8GezB44qg
      eNq8exWKbuwU12i6c4nSiV8wt0Wv9G8aZMVNzqRBZiYbw1rLPwZGYCaGYVhD2EVJmy+yfRID
      M18odWPUQ6ik7vpDPfeV2oMFCwO3FQYqevF+zf8xU2t78aIZCgbOE2YCLM+c/oakQNNjXaEH
      AAD0DXW6unLGE8sf1k1SMox2EvNqulkwxXRSfYhL3HK1qKVGv+w708pW9OpOOVbf52G7w1bp
      NHXdNaA7U7/9/Pu/rNSMstOL27W3niUAAABDQxtreJDb+kKAlN3v1XWdPg/6fw96ZHPEynCo
      noxyADWEXaTBedc1OdnPBBiG8Z81n1mqNNDv5KyEsyduC4eon5lFg7Or7TOSS/oFGCbgdF7x
      OLva53EvhmEYJqgsD7CMoUG0q3tRWRcmKL63xbW8deiOjIlAUuQDaQk3OZNGycpGBwuEef5n
      h5oVgwSi96XIjOnie+/AxXO1yq5IpkdyRLEQQztT3C/QgUE3TI/MQyTW0Q4hDY03AAwWWEtL
      NHUmQV/Xk4bBAlZ2Ur/uBtOFQ9dXJ4Gu5ZsyY1p7kg50P6lVdBTeLYgAmx226jWhv59omRuH
      /CvjNOncxvx8gbihEXa4+/yyS+H3xAfzwt5LsNQjwcBwNapYha3qb62aPrTVQm8uPB/BeTlp
      J565HnfUAfY1JlvXabrFZHVwMJzVWl/ZAPZz/gYBPa9cHy+5lk2WU/7MzR5wXiG+iZ0sHhgZ
      Wc0R23llHfUw/QO6ivbMTZZZ59+5xfGaI4ljrbxWMHp3sZyXMLskSm/xFUkMoGgqd3fUjxLa
      sz8O1kn/pvARdwAAXrDqwo+2Lwm2oUnsbc1smKc3Q1tV/albT85uDrz/K0sIAEJue+zBao19
      tE1ygaY7/pu294MsNAEAdJas0WExG2v5A115bY+NDBeYi51GOYkxDMMwQdOV2x+axtCAQTdM
      Cb7Sw5exZfswaEMsnF3nlg6u1sLO3KIAm1g6MGjUxICwlk5UzpWbmbXZ5zF38BjtTNma6AQM
      ukXGOekkJp5G8QZBAG9MeAIq1wE+nz+e/Rg1JvwdIAgMDbQ5I2CthTGZTCbrmzm4nbzVgQ7h
      1HHrpBvNmEwm65u5fBpT0DNo6ckJdDHTJ5ONab4pzdKaLec3O54sHw8C9ZHb3a8aH815zkbY
      Tdc82aHrP4xrUex+6feu62OMjxR3I0jLr+/U7l/74XmRDzfNf3PEP05Wsbuvbsjf8e4P4i6j
      Of8On37E10qhHVWPCcgYUB5qD05hlYPH9w7PBfcLHXI+7DRvCqyNbJT1Ede56W8I9qHlCIIg
      ad4gqVkeai8ulMOruAPckvx8mDfTfLDA8k06ZN7Nk3MirYnoRFK9pkmO+7i9w7bJDDvvcOzj
      2UqGV0GgjdUE9vPmSAtIGiToK3lUr6oCn3U3JJDxwtPX0xwAYJH925Ty/PwOlF9wPw9c3lqq
      BeX/Odri97kzSbnumF5svQygGXsXHszgViO0I4GOmgAAoLUpLLXEbft8nV2T7HxTEndO70n5
      On7FvuIhfxvhHkZJ68/UltY2NcXZXF7luO8mFwAAqM7f3mzqRBDWnVPrTaH0xzAI3L+M1JMT
      uNyYrBCbcCcgAslg5ZGv3ZsZEZfbFU0tid9mrP9yI5Wb5r/5/MLIJlFs+kQS1V4CgfrwFeRB
      rAivB0NjM8ivrpN6oAIUwHqu8gyUhZa2LkAXmyNfiub+55SW/6c2JMi7fbXPdtlSA9LkJXQH
      uFlS/tIIzPbLlka1bL/ZoGVrbw8Pa6RztqLsPqxdYitXqyFyFVl/D1O6SnE5vUCxnmsm59US
      F3Jj+1fuVAlJTYri2V/JEJr9tqtVfvg3MWU8FNCOvJB9p5+u3fTPaXI+5p4B3vpJjLNP+AAA
      fNbd0+GZTsH+a2QDDZd54ifz4+Kly+GtDZQ7N25KYpOtZEF7FQsZgnTci/xwhQkVAIBisMg1
      iMmSWNK80wbXspoUX7ET1WSFb0oNW74RxaWLxdy/zIACQLWT8VX5m5h4nB4nEATwxoQnQLzY
      whsTngBeOnFd8TaLwmolp3cyfYLWTRCdWA5o5znnaLpzUT2KTRSdWA6tMel0yuV4kUA2MXRi
      WXCe/HSw1Xj/Rs85qn1eO51YBo0xhdfZph99ZigWvSeGTizF01AjhuyeA2xi6MSDfb2dvRLi
      I4qHcXk9dWIJSjMe9xqZ0W1VOryuOrEYXWV/9JPczGgqHV5bnVjcSEdFISwLMFZlf511YgAA
      aOE8Bc1Zc5WDowivu04s2vIx5AYPDCN04okCggDemPAECJ0YbxAE/go9GbvNySvCh9TH+BWJ
      n7qY6ZPJZGOLtQEZUkUYd514ED3MQ/5xbSpsKR85HxB+VtSKIMiTnG1tO13ECtPf0olfKQHu
      zSC/pE4lTUKE9vSElL533t1oQAKAycaenu7NjNQ/AQAe5P/RZ2VvL9ZiysuruAAA9ZGH87z8
      12gpNPMKCaC5IZ9ccGBEbH0ZjY2rTgwAAGhu4AcMyx++c5+iwmHaRi9P6vUr6R0oAPBZV68y
      TXdvdgR4PXRitPT7zxkzgvO9pgNTlQ91U0R69UY3Mx1PAICpjkGX0120AF4HnRitjvj8NDU4
      cog7LkUPc4/turwtt56zEQTpfpy0MmvjpvBqUcjBVydGqyN8DsChCO9hZdWG5FMx/bsDfCw0
      RZPYad/eDXf3H0/nKjqOv07c9HtaPuQfsNERlWyKAcjfb6W4FgjRfphhLPOmh6RBAmhiKcTc
      v9SJX8IcmO2XjfjJlcgdM/eQNz0MLc/2k78h2joKsxsVoECZZSr/8qolLuTG9u9CxlsnHgmm
      ue3ZzQo/HlvM4gMAyiuLOHN18f7P18vG+ZHoxONOgLlHHJa0XL7/88Li7E8cppPJZKMFPqUb
      rmZ8ZSMbKOvPhjyULl1am8JSver85uvobchakfLTTnFMInRivEEQwBsTngDxYgtv/HcTGOjK
      yvvUKtZOLcpOL0lOIxNwbu1NXa0XZacWu9ol+1bTkEqCsDY+a4fRz3ZqUcutrp25yhEOGqoq
      9lnF2qn9vNI1/4FUcR4o2h+//3K/QiujfzetWidGsn3O050LKjhCDBPyqiu+sM3KVlKQe5Mz
      6ZTLMSX9AkzYmZ61Gs6H3hGpabjrxA/yNsvLXhVB8Sv3PZWv3nVuKUOm8EWmB4Pu24Bhr4NO
      /JTTBNPk5DPdSb3XWY9h+ixpmYLkI+jjAExVfbpx14nVNRQuTWHvU1VtCdCGhDtRt3U/8DYF
      +Ls68WgJPGdxAVpO+zxzit92B/O5XeJocvG635kuIQAYaRrD87qqQd+BxkrVO9Orir0X/LLL
      p1HNbZHrAlFvpv7rouPs1ExHUgJDuDjssCmUFMd02+50Grqvo5wBw+rE7BTX6NU+tW0IhmGC
      pvjfXCnRNMjKHqY5pCPB9ayKLRU46MTabpc37eIUeepH2eldPNGwIPhbXTCapDlMc5Onvn98
      /tSc0ot3FS046cSTp3okenhIjor234LFU8yHP4P2JB3o5ylsncZHJ24o9ZpZODNzV9A6kYld
      lddvs81MX67BxmOazKrg9xL26kka7GeD3kwLOacR6MSjXweE9WGX6UvzKjhCTPxli+iPY0TL
      gmiPUEEFR4ih/U+uZG2ekVOIDlXdOju3XYgNfhRA/GGMQXSdWyoVYauDk2hL82oQYWd8Jt0o
      O0/c4CvSibtY57YmOgGDRol121pUJl2GZXVipCzsVzfDaBow6IbJAWGsXvnWCZ14YoAggDcm
      PAFCJ8Yb/+UEUOTWSSbNOI5MjjdzyYkpeDG0yeFmuKxJioHmjD/XWiSSyXHGFhkBGZxBSRit
      rvKiJZLJ8WabimXyjAdyD1z6ME0+NVnVKjuCVCXevcMJYMpMfsxBEE5hyCUKJTWyTsZkn1vY
      jSAI7/ntbCvKpTClVFpWGtOUcinkPpuNIOznrCj3JO+0HgRBEORpkBXD6uvGbnZXrHs0xbNC
      nMlbV+Rif1+hmTHcAbT559PctQftNhprAGhY+jt8adIef030q6ztYhTX3n2m5WQAUNd0sHh/
      QVdSZo98/U7GoQbylw7+b5JIACRN6o4vTe7sLskFgPaO++XgQJ82mUS2t9fpK+6qAwBAmSeq
      zA8sVBCuxqDQkGZEdO6UORYMnxGsBG5zOdCDZJ5RtUnUtpa8alimN5R7/aOQhvmJaxSV1pc0
      ifm8uyFFjBcmvp46AABguOUT3fKUJxV8ABjglTWkVU7Z6kpVrkfSUOhAb30DwDQDuhXk3W/n
      o0h+PttwjbEloGnHaxwPzFdWWl+CRoZm3F14sIVbLaQdWSzOCAZ1my9cYup/tdN7CAAA5B1J
      65RES8o/5kLmo25YI77gaF1vOYA1AID+F/H2j97P0vtuYM5m60sHpkNp4fc91heXDXW5xzCJ
      5cBuqvWzZJjurulAEIT9LNQp2uqz6seiSfygzNP0nGSCSlEXmUoRxwCk+1GZ55xoCjCkmYpS
      9FxwTz58j4ewn0VujqMAg2KQGpQjbu1l5lJ2XLgGkBrZiCDXb1BE/0hQGpIMc+/cU6zBKYy4
      vsggGiBmoeufGbfv20Os/02lS3PzjznuD1kIUhAkimy8pthrFMObTDaCIMjL3GqgpT0JoI/N
      ARAM9AHFSCZ9VUNDDWr6lPbdaFh6u+R5S45y7+8CvV2KWRC8xO/btgbaU4GdnMU1dDSynKwO
      9gZWbY1lTeA8eyyTuOHhKnL8Hqb0lz2X0w8U6lwzAO1JCu+gBAIMrLTkpyA7clWc/p7GwWWp
      4cHzNhczhaxdNKcsmGr9mY24n7paild8DATM5wZ4k5IYlZKM4Genw1udghetIQEsm/+109NT
      h5pqeQMAwGc9Dv+J53nQUn6vks7/bp8GSQ8jylAUBni1j0/9zPNXjDM9kYef+x2apQUAoOP0
      T60a5tMK/kBHfke54dQ3RbnTY5oD7PYU3xQTKgOAQTVJ8U1pl2YEd7cmqzCBd5Xk356c0OsL
      qQyAaINF10NzFGd5RxrT0rtK+kEN9rPILQlUYFDmXB10JnRivEEQwBsTngDxYgtvTHgCY3oW
      ajymyUyX+cbvvLD3Evbqjfi708La+D+OBjRUtg2QLY3dQt7y26AtSqccp3xirLJgC1yOf/IX
      XqryiV+STjyGISSs6a43MphvPrwXJ+3L4ho7u6N7p7whV96d+u9miq/DLhvSG6A+ZcPyvR78
      K8nNAABtbaUPYdEyo//RIL9J10ULOxsBAPpzjlaYHLZSSusdwxCqLmmHdXSbYX1U5xPjrRMD
      9FXm83Tryj8yi7VTi1pqdPlI/HOldz8jyicem048+jnQcJTCoDsX1CAYJtaIzo8mn7iyaNec
      C29TGGt2PGqSyC7jkU+sDEH676PIJxZj/HViZbxBUh9FPrEYo9eJR0qg+/yyKDs18d+2M8ph
      XsxCukViRPnEMhhGJ/7KQgfYBRKdeIqD4azWtsoGkcOodeKGUq+ZpVZ3PtjnJC7gsfvB2mSJ
      ueTwL/KJX5ZOPOohZD7f00PwW2xNOx8A4EVP6y8/dr5zctFcif2v8olNtwVPfRz78F7HAAAI
      uV2pJ6v6fe3d5d5JvOp8YpR98/Mrq6gMGjCcLK/+dKNPNgSNIJ+Y0IkB/h88jRIE8MaEJ0Do
      xHjjlRNAS0OWkPeoSueTfrmZbEzzCpcqqiNOyH21BNDmFJ8tx8pVmXuY/o5fde1Or2Mj7Oe/
      bX8WtPa9yHqAv5WQ+3/otCpppAIBiQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='64' name='PQTD Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABACAIAAADtZwxfAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAIrElEQVRoge1aa1hTVxbdl4I1QSC0KlAq8RsK+AgqEkNADK3U
      quhntYi0g4pYjVpkBB0YpSJoFR9UqYVaguIDcUoVH2lrbFBUQBGi8hZEjYKCQBGC4RHqTTjz
      g5AXCfg5Fe9Msv7tfdbeuSvn7H3PPfdiCCHQMxi96Qt4AzBo1g8YNOsHDJr1A8a6Brhc7mBe
      x2ACM+xJ9AKE0nwRU4HHdw+0cUSC5JXedpYYhmGWdt6hvzyWKkayv55mbYphljT2z0ov1B2e
      Q48tU8uBiIPKuIRHA1DuJ7DI1PmcojYcIcnTM2wqUIMzxQghJM4IIJP90/7AJQWbncF5R2lP
      AH41jMbmidWSEEgzzg3KHYBSGOME9LhKZQiPTQaflAaEUG64NbjH30cIIR4bwD9djBBC9+Pd
      5U4V6Ozbg4+yojzmvP4pLtF3UbSKbWz93igoE7cBWGmjt12IS2HuLPpAw02cem4sElTNtLPE
      MMzUetrKtPKul4hpu1dZBXY2VgAw0c2bXJJf0CTtEuTdgBnTPc2gLCGqNmyDV99p/StX53+F
      zGAylEkQQghvqzriT2XFV+L9R+CVce6Kekao5WqkpxUZgMJYx63BUUu6v0N4rrYUxNGsBpwb
      BGQ2rz/RPYrZvBbto4Uxrv7pLQi1XI1kUACAMn5lek1PPoJqRjw2QN/uowBekx5AJeteCrUp
      Pq4xhTgSZwSQrYPOyLv5DE4tQggRp577wsRYe4ftenhiGWt5xSLeudAxWhnSa/t3mYX/w8UY
      8q+c7Zzs6THCeCjDwx0u3i4FIFAPq070wmwUVpv4OTjP9BrdhyZ9/HPQBGf2k6ArWXu8LLWn
      qju87fdlX/v3jpqZkjUIr2dpvgJa0v3JTyUIISQR3YxjOWir1BYemwq6ixghhJCYx1buQrSu
      beJoRgivGUUBAKCMn7v94h+KSuWxAdg8hBBqSPHRNq89g3Jo7kI0ujlCCBmeq/QDBs36AX3U
      rPO5qqvrZTb5/5PQx3k2aH6zwJ842JBIJNK7dm6+uy834QPQW8+vGk3yShAq7Jxob7t3SSQb
      1+CMJ8rgumMLpu4uVw0kkGZh0uJtOc/EEvHjXz8X75kTlFrXH7uVvzkstVFpt58LW5D43u67
      YtEv8wRLPtsnV4nn7E+w3RJMUw0ljmYhL0PwhYOpCZiYTgyL2+CYdfVGu05ye1ZMyE/Nqs8O
      pYIrnTQGY4TJ0ClMNygvv9sOACBMiioIDJs5TC2YMJrbiwQCpTV+IhN41wp0cPG82DXH3TiJ
      XwyUkx9/zO2b1fYabsJobqx/DAyFZWJsAp1FFUJtTDwvehln/L5dC99R9U5gfEQuFwia8K6b
      +QXg/aH7MCj/YVtdyDqWiWYCAp17vhzw4rh1HOoOQaAt8FX9w+bHny3yXTzGfPkQenDGv5fa
      tmZsTPMKL7Ttm4Iw8/xywKsS1+2l7Ejqs14BgMLamvW4WSKpz/12zigoPhAP0REeJq050dNs
      SGrdnDCarWzsQFnQuBQHcHbUUCZM+HhSpKDzWhiNRCKRSPNTAAQRNNX7lTw6L3LyXsfzxxdS
      skLtZ5auKJFIJPWx2BLHMD4AgTQPc2EoyxnulOTDrCkuGhz7kGyJCs59CcDYUy7JDlH/b+pS
      Yy8u/tdCSm9mzbMhwmgG+498aCklHTjgTQWx4XtrZ83/eOSr5Gnn7/xx9Hb5Hdntw3nk3ItZ
      vZ3NhQZAJM1ACz64a9Zwc5L5GD+uecTZI4Hy9sNfSyKt5fcfq4TwSGyZ8o48bH782cAHIWPM
      Ledd8sr4caktQD/v3A3PVf9XMGjWD+ijZsP5tn7AoHkQ0XV5+VG6R2GNwiGV5O1IpmOHprv8
      fkww4N6g++G3p+hYVk6vLbt7J5x2mI4dmu4jKBUpabcj0iJOv9AIHoR3b1rwnHfpE+C4ut+u
      ljtkd2J+cnVHCMk68q4vIJ9O0/m6HSGEpJW3l5I5rnApW+5oSnLmLNhc34V3cv0PMgPutfe4
      a0u+VP6EAm9knttq9q95JFbb+defTxI7LQIAI7L7mLnjnvF+E+kIBgBR+qrCe6pLtLGxuAwm
      eFi/bUyayLTAbzXXAAC8yNl25/0oGlUz/A1o7r79TTaPOW3T4leMbzycmyiibdlqMQDvQTnn
      0fg1s4f0GRh0zbJr1yN/oPxzrxNFzW0zJ8Ti4UkA6O4sfpBVMdxnrq6PCO7EhLR+doAxTvWE
      x8pqkjOU5jX8KZWU5D+38LF1gheZMRWTttC0fTc2yJqljUlfVVnvnuareWRjNC7CZ6tTMh07
      xHK5Nzp1xueaH7L1oOvChhsPg7y+8tS47uErTk61P8ubanKCI5scHzUKigpTRC5LNWly/IWN
      aUDIhHEnmayinqaSzVbpYXjzUdbBBesRQrKOqopw6rFonqRv/HNu5nTq5etihBCqjj+p0sM0
      IOH5pycWyhDenLHwOBM4TCtuUoEi4SDOs+xuYVQ4rORM6NNUAK6UJOWMDIgAACOy49jVa9/+
      Lay4QoMjEu5eVcf83t3DbKAfunYzESYtcTG6tydzZ51jqmTF+b0mRz8VCOQf+77Gc0/RMY9T
      CTfkhlO8Xyw8qgJR1dhDB5ScW76YMOS+X6C0GwfTEb3F95axEVR1PNPIl1/Nb3gBn6aqHB+I
      1mPCuTx2zGxVXtu5nU99tk81B/GvfLGFp63DUCNws/pbg7CyGhgfwGvVbBmYxw5U8/jdClUa
      OauS15fRT+dNpgJAwxALUO4cZNJucDaz1sg32/sW8lZYNd+d8g17Zx/yZqmzZNlFyZaTz7jI
      FzDZtK9Cguw9PWnLWTUpG7sB4M/6B6mJHdOjJzi+SiJR2qbGv8c4mAIAmE+ZaV7Pr7nf1d1S
      0PjQ2mrs6B4OUc70LQP4viM3HqJjQBo1YnaiX9S8oQDQUyCZi/xOhOq4damj40Ih15l+vLfn
      O0Z8sqmcv5xULHV4fzWXwZCLNTxL6gf+A91oLVhR93E7AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SQTDPY' width='84'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='64' name='SQTDPY Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='24' name='Title YTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='YTD' width='104'>
      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
    </thumbnail>
    <thumbnail height='64' name='YTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='PYTD' width='84'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='64' name='PYTD Hotels' width='81'>
      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
      KjoAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Gross Revenue Trend' width='192'>
      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
      MhKf8UT8CyTs4oQL3ehiAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Pages Available' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Page Fill Rate' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Ad CTR' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Ads per Page' width='192'>
      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
      WF4I7IHoj50AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Page CTR' width='192'>
      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
      dp0UvRuh510Y3AZV8w+aEQeQ5WN2VJtFYTCSwWkzceH0MhwH8lgSgxBsg6kXHTRzZLNRxugK
      QGLAML98Rw/zWiwWotEojz32GNFolIaGhuOPBC4/qjPA3r1tWCwWrIdFz3R3JSs37uXpp5fz
      +c9/nptvvpny8vJxwpIkiQqfh/OcA9TOXsRV82u47rLzab7wKh555BHOvexyPE4n2XfXYKqp
      RbI7yG3bxIsrV1F9/oXceuutrFy5kttvv5131q1jRjbFc509/PqZP7D4iit48qmn+MQnPsGd
      d96J3++nra2NoaEhstkspaWl3HDDDVx33XW4XC7Ky8tZvHjxWCRM13TDfdVPYJvUM8m+jnYq
      Kvw43W4UReHue+7hiUce4Xvf/TuuvXYZjU1NY+dWVldz+2c/w9NPPMlHlizBOvqFrl61Co/H
      y5z588/8B5BNMPMGQIddz0O8H6zNE152AItJ5oq5AWRJGq+RWL9RAKIcIibFbIwCkS5jFPDW
      HPO+kiRx6623cv755/P000/zgx/8gC9/+cvU1By8JhKJIMuy0Ukkme07tvGtb32LpqYmli1b
      hqIoaJqG1WqlUCjw2ONP8MUvfpEFR6uNGGujlarKSqoaW6F/E3j9tFS3smjRIn75b//G/V/9
      KrZMhuzat7B99GribXvZMDjE33xxMXPmzOGHP/whJpOJrRs38sxLL7LfXcLUhkZ+8YtfMDw8
      zAUXXEBpaSkLFy5k4cKFx/38plFfo5DXaN84SC6VN45P+K2cIXRdZ+f27bTMmIEyGh5zud3c
      9fnPs+TKK6nw+49IYmudOYtUMsnI0BA1dXXksllefeVlll1/w5ggzjie0XyYsmYY3gPlTZzQ
      gk4A6CjZyOhGDqaxY0S7DQf08PuU1EHfaA695Rjx+FHMZjMtLS3cd999PP744/z4xz/mO9/5
      Dl6vl2w2yz/+4z8yMjLCTTfdxOzZs/ntb3/L3XffjSzLvPTSS9jtdmRZJp/PE4vFuPbaa5k/
      0UNGlo2SxlA7RHqgegGKovBXf/VX/PSnP+WfHn6YpZdcTP2ePVQ3t7JuwwbM/soxO90yGuRY
      snQpdz/2GH9z621cvmQJd999N5/+9KcpOYmajgN/yoGOCLl0npoW3wdLAIV8nva2Nm799G3j
      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
      99JbnGA5xQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='CPC' width='192'>
      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
      bwP+f56mYck//yQhAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue %' width='192'>
      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
      ttP4V1ee/6jJprbiAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Available Page eCPM' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Publisher Metrics' width='192'>
      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
      a7my6uAUhSwa6YptMelaj7Hyq9rPk7RTH8p49PVzf1kXv6HJ0Tjfvq4g7NA/Tr82K2ZesTH/
      rR/eBkxsdf3VxtrWxW/gBC5Hl232mA41Hbg1xzY1UkVGRn9S/t92V3uTo3Fj4g17a3eUmUtm
      hMxWUMqp2ukKumP9F2b5tiMNux3HglLIjJU3XJX5p6H/9uPKmAgoP+fMmjVXxERFHTp6tPPg
      siuuPPLV9rlr10Hd8QQ1U1tRlZzWM4jJpWt/7oH7VUnJ/9vxtR1JXnrj7VUlh7nX/kzPmE2n
      plHJqYTqfESLqZatrHCVNspvu7unEL/PhMUPgzIcBB4As5/du5P5TXH0/Bs8BQ1VrYdKrHct
      jDGVlSfAkXzNekMBXfTj8TXkjPCrbqaVat3UJ3mRhnTnUCL0Sdu/ZzVda9W7oODTtY6meCHR
      xbE3i67Pay2MV06NUqXQ8ZbmGn2yYY5SFHpIdSCjas1JyU51BPFeyb8IRJzT52jEmi3zX3rs
      iVW/1HyKk0Mb7PW/m7n55dwtElJyTp8TLNYebf6BQnShMc/kMT4+648AwDTaHQT87e2X5Qrx
      PY++iAYOafUDyMzMTB9PdTqdMpmsv0/dTudfX34586kn77z3vicff1ylkK+7av3qtWs7T0AI
      RU1K875qP70r36JYuqRnJMr/PfUkEZ9U6AqdfdWdj0Sd+WL/CWr1vXPv2OT+bq8zLw8Z9aLp
      Mzle8HDCjp0ngw7s9LAo30ZTWq1CSnW0K6wTsv8FMXOh8TS0FQFAnZVokabbXFyTU9TS1ETb
      GgW7Wlr1ebvJmfnJ8R/3bv+yoVGF4ufcfLdUIbLYJHY7UpuOMbEr68jSJRnziw62KLg98WYd
      r6ty1ZQk6E6koozo2PUcIyyYPIc5YhcaC0gibcWUy5NnRoirI5ZOS1XIQvMNufdO+eXCiKUq
      Tnzfb393WbL8y9DKVFDMpkLmJW4wM+bl2nkrS0+GOu3rl7xwsHFfva0GA3ackrjydaeqi1BL
      9s+mpQRfff/c1NAhPYWhnjZyRq0FOvT9959/9pnFbP5ux472lpY9+/dDf8H9ivCbV85c/dcP
      rr317rTormCUtqKC/+369ndvfLY2PS6WaJPvF7+bo7cyzMv7G2ZLEwmXLrygKv6Fze+lXCtX
      yK48uytqaRhOXt72ddZbZnmoWhyulsxM1KS7TkJwIpzYamZId/zKehd71Dx906qYYIXo86OU
      SiGJr/9qV4OZ4uaV5xdSpz+YP/WqO9av/+Klzb9R0QAgllPGFrtEQdMiNM0sNBCVZIycaDAJ
      vNDMJMerqkAVQ7jyhFNFVirFaLhh2ZSK2tzGrHPhDzx90/wF86ZJNSuhDW54d2H4UoQQNjdm
      ff1fViSva9dPQqvW1Jc3570vmboiiJwVyW+HsPSpDadBwNckbGpyNHxds32TbpLO5M5rLb3q
      2uvWbLjmy8ryrPzaJdPXjdYzGgtGrQV646+vbf7DZqlc9tyWLbv27g3SavtdVUmQipYT2U1o
      b1bptFmzQxXUxy9kTlu8+LZNmxbc+dRq8viimalBbKvM3rD1YPUD62cvIAsOiWa6ktJtCCwc
      c3n9qSmFB0SRln35OZUlxxdEJs2YGr+a38FKgo+dKgw6e1Kz+qbvSh0H4fJzzkgjQz2wYY66
      qUooylXrys1tFQ8//cycedN3/OP3oQ3FW5+7bebtfxBskj1Hvj56Omvbtm1z5sxlzGQQzt+Z
      VfJ/ma8EzYshw+hG8/RCT6KHlDYZDXF3vmnVLjuYFfbUa0++8/bfN2Sov8+p+eb496mzZiiq
      Du46fHSaoAo2ltKWXD7vcNGBM39+bWvQzFUKV/XSpOuDDY2vn2YX0sVS3RlOEV9DrCI9Omlw
      cFjotBT1pApLabRtsjYh6LOv/nvn/bcQEZFsfQ4lqUlMvCDc/ZJqgQrOns2YNcvbdxTk5c2a
      P58T+OTk5JiEhEGvffHll5/94x/vvmmTtSJXj9G+Y1n10rg5odEL1T+i1gJgXRC/SAP7Pn7r
      xVd+lvGzmEicsiaa+AS1FcGS1fZm99q/HN9w052nTp2qotvvrnnPobTMSivPmLyq4Z1KR15t
      GTdVD8GLhKLJmK//KOeBZ56zEqQ0PLmpoebT6za99vHzn968OCZ5peLG+wFAoZH8/vr7ylpP
      x6xfv+WFZx+/8y8n2tHv/vLqqis3vPPnf8ekpM2f9nB7WfOuHW9ER0aod67466uvthiag1Mm
      37xi2ZItb4eFhBvK8ovuWs6oll5925WPvfJP8+635sRrj1U32hlCGx539YI1tXt+WI73/rfM
      VnDw3PVZ8Nwzf5BbFoeqSSsfrmqvZuUpzRUmhYsPS1JExcprak5UWR4/1czGtAr3KnuNHP2M
      QcK2u6PX60NCQrofeeTBB1cuu+x3jz9+xbqrivPzj/i+SdGBLbDscUzLPnpvm06c7AJR1sFv
      rth480MxhWJNJJR9BzINzL0HZMHLV6yYEaO47Nqf//jjj4U/7mw1WOOCxa0Wz/N3r974/HbW
      1LTl/qv3lLrnIvzPTz4R5OrYKVPWJ8TesmCJiCLL6orfL2vQIeqlV19xtKDU6GkpU+mg2hN8
      zj7WHaTK/Bs6H3F8YH/e9PLD9QvXv/7GC5elXeUhqnKqmn55100f/OnBZuXi6jNZHoL+ct+e
      ciN5Or9s1z+fmBY7wxMTv37T7QY7szJvB0oNnx6X5FGo2yJSSZ1Lqia2vvnSfbdd6/CoglJT
      Pt519sstt7y9c1dm5paXb7258Zuv3zTZY5OSY2JibO2trkaLUjNz+cqp6U1//tw0ucIgNHy/
      //o39xicQpg+f1EMG7/61oGfgpdPtm+/ZdOm73Z9hRThV6xa0t9po86IBFSYm7tyxYqtW9/c
      tXMXRVHvfeyzd+f4m+CxwoqnAUAQMEJwvFSfHqPSHn8BVv4Bsv4BujK44V1ARHZ2tslkev75
      5+Vy+X+fuF4eEk03Zsuw3cTGVEtvmH1lIvndE2VsxMHc2g8+3T9v0WWsiGyqMhw6spsgiZ/f
      /Ws5H7ZyyVqOFVRa6cJrUwkC4cYzjq9/IMLjZdff3FkdncVt3PbvcHPTwcjU9z87kJSRsEoo
      WJ52OeUpYjwxtZxwJi//9iefFs2Z32LjTuaW3Lh20be/fRQvu2FeSrDlvTd2LvqFRCxys3x4
      kMTiYK+eGxUTIsMYn602HSvWLUtWiv73+kNHsxVN9b//6OASkdH9ze53TpySXrUB557R2ez1
      Fuv+7GwlgW69Yk2UUiGPnh21IB0HRUsdrQvXrBr0KXg5fOLEzClTsg8dIFURs6ansSwbGRnp
      6+MYAX0IiPfYd39/6LpV83ukd+mz6ozbTYvFVrO5pakpPSPD19s25kDBlzBlA8Qv6jhibgB5
      CBzYAutehNosOPsBXP925+lms7m1tTU9Qg5ihYOROQ5vc8ineuTJDosnQfcvEnuK0C3tNeW7
      Pv/Lbb95DxPEsVPfRMWnTUudHRavSpoVTpAIAAZdsctWlJ389Ju7//d+TGLaK7FoxiNPeY4d
      lq67htCG2t/+O9/Wgihafs9DVELS+w/ev2n9OqG0CNG07MrFzpRFiBSJaVJEETqL+5OjdXNT
      tHk1pvgw+eoZETYnw7z2gvK3T+Rv3txy65N1egdNoJn5300HAz11mnTtNZjnzf94NS9Dlm5V
      eoqqPghfOwfOUrRoxhXrIpJSe1TSx6Zl3FqgPmwgUqyI0CqtHeldri/8/svd33x39eXz+5yf
      E0kkAKDWaNQan9ZHdhAzB5QRcPQ1UEdDUBw4TXDoz4AFiJ3f8amlsfvpQUFBKqXq3KF6m6mN
      JImE6T9LSA4CgNoCnUwzX1q7e8nNCzE3d+2CYNGq+QjBzFVpTWXGmWsShrTMm06ZNEO9e7mU
      /+zEwUmPviCaPlM0vSNSQvX7P7IVpWRYhO3N16nklJtvukG67hquuZFQKAmVuvuyhlC15P41
      KSfK9DcuiQtRiQFAJqaOyJKXv7A5ND5x8eJYXsC8gN9GaMGVKRhjRJMIIPjJZ5vLttHU0vro
      KxfVWBtyKpShIb3V44eMqAsbKW3FkPM+qKJAEw8SNdQchdQ1nW2S1eAqyWpMnBEeFq8CgMqc
      VtbDx2eEyFS91irwDJCj43DDLJuTlb3v/57dvPe7Pp14XEOdfevf1M+/hGhf74gxfuPr8pUR
      2K3TzV9/mffgh4drWk1ugkBrZ0Wmx6hIAn1e/mllUdq6GQmTjJ7/vf77RT+/bfrqtb1L87cW
      aEIFBABtxZD3Cdh1sP5VAAy0FIiuRrGlylSa3ZwyOyI8UX18e9llN08mqfGIP8E8j/pf0YcF
      AQ0x79OxYl2zyXX51LDwoI6lfSwvMKxQr3fuOd2kVYoZXuDopskhaaumRzjzdTvf+NP6F/+g
      Dg3nbQypvECp/iagiV4FFj4F5t0HDj2IFb0/jEzWaCIUdYW6o5+XRiQGjY96AGAA9QDAUNUD
      AEun9HQo0yRBk8TkGFVCqOx0pTE1SvnqTuuaySIAIMTk6vn3qIJCObPH+Glp2EMzhnq78WSi
      BQQAmnjQxPf3oUROpy2ISlvga1jMRYdUTC2bGgYAcREEFrcDBItTNZIGm+Nsm2VPtWSKz1PI
      E0RgWY+/kD61kcVuAEAEki+McpxsBYqQTBrK0GQiCAjIX6AIujM8iFTQvMUjnx8hnxM+sbUa
      lICA/AUKURzuii8jgyWU2qfUmV5KCnLtbq6xuqy2WTcGtesXP7CBAgAAAEVQnNDlaaO0EnII
      AmJMZqvx7FnWqYtOmXVJBdUH8BG6WxcGANIpWjrS9+hm2mpuIcWqsJBwh90+nkH1gRbIX6AQ
      5RC6FqvIpvcc+Q8IWnvNz0a9Sr4QaIH8BYq4wAa6WAgIyF+gLuzCLhYCAvIXehjRFwt9CMhl
      bPn6wFHAzIE9u8/knivOzze6Arl/xwyBA4ceeg3jLxb6MKIrSuvDxbS1V3oXp9PpcPiUjs9v
      8e4jOdG1uAC6ar8o73+O69/HDBACOegv7G/170NAqWlxB85VpSG1u7XomrWrGsq1AkBISIhe
      r5fLx3XZ7FgwyOYB40/6lRA5WS5XJMtTk0MHDwByuVzjUCnfmehwjgBDpJ+nwH350fvR6Yus
      jaXjHBP9/8u3qpSUUwp7AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Active and Sold Hotels' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Budget' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJztvWlwnFd63/t71+63927sBECAoAguErWQkkaU
      ONJoGWs0kmLdmdyMp3I9yU3suXFVPHYq9v0Su/Ihdm7V9YfElfE4qbq2J04llsayM+OxfWc8
      mtHqGYoitVAiKZLiAhDE2kCj13d/Tz40CBEk0AAJEA0S76+KVUQv5z3dff7vec5znuc5EoAQ
      QiIkZBMizQ3+rwRB8GizOxMSst6oAEEQPGpZ1q+YpnlDjTiOg67ra9qxkJD1QL38H8MwiEaj
      Vz0t8DwfSapbSEEQIMsSQoCsKCAEsiwzMzNDOp1GluX17HtIyKqZF4AkSfMD/TKFyYu8+ta7
      ZJMGDjIEHsgSjuMRS6Xp6+1nYOsWAGRZDgUQcsuhNnpSVhTM8iymVUNIgpaWFqZnS+i4DE9M
      097eQ7lcwbbt9epvSMia0lAAkWicXXftJZ1OIskqtmWyY0DF8QQtra0QCFLpFJ7nrld/Q0LW
      lIYCiMbT7N+/b736EhKy7oRGe8imJhRAyKYmFEDIpiYUQMimJhRAyKYmFEDIpiYUQMimpuE+
      gFUtcubsMLquYLkBmqJgRDWqlksmmyGiRWlrza5XX0NC1pyGAqhVZnnvgw/ZNThAtWZRKs4i
      R3TMyiyX8jWeefoZYoYehkKE3LI0FICmR0nEDBTdYLC3j+ELZ6lZFjJZHhrYje9aqJqOqjZs
      JiRkw9Jw5CYybTz73LNomookSXS0tyFJEkIIFEVBzIVDK4qyXv0NCVlTGgpAkmQikU8TXa6+
      018dPh0ScqsReoFCNjWhAEI2NaEAQjY1oQBCNjWhAEI2NaEAQjY1Dd2gjlXj0ugEigKOD6os
      oWsqji9IpZLIkkImnVyvvoaErDkNBVCeneStvz/ErsF+xqam0XWFmVIVVbhMlR2eevwpIrqK
      64ZJ8SG3Jg1NIE2PoGkKHio7B+9ACiBpRNF0gx3bB7BNExapJxQScquwbCjEF7/4DIZhIMsS
      Pd29KIpMEIAe0RGBQNNUatXqevU3JGRNaVwYS1ZJpT618ePx+MIXhCFAIbc4oRcoZFMTCiBk
      UxMKIGRTEwogZFMTCiBkUxMKIGRT09ANKkSA47j1U2GQCHwPWVYQAlS17gMN0yFDbmUaCqAw
      OcKPXz9MIhElYiQwazXSqTjTs0X0WJI7BnYw0LcFIcR69TckZE1paAIpmopVLTI6PkHVstA0
      mYmZWWyrwtDIKJbtUq2EJ8SE3Lo0PiDDSHLP/s+QTieQFQ3Pc1BlCcsNyOVyiECQTKXCYLiQ
      W5bGRyQZSe6++6716ktIyLoTeoFCNjWhAEI2NaEAQjY1oQBCNjWhAEI2NaEAQjY1y9Q1FwTB
      4ru8l/OAw3zgkFuZhgIo5kd542fvk0oayFoEx6whqwq245HK5uhs72Lb1i3r1deQkDWnsQkk
      QWFqjFOffMLF0RE8Ibg0OU25mOed945RczxKpRKmaa5Td0NC1pbGJ8REYmwf3E06k0ZWVaxa
      jZ6uLmwv4KGODiQhkUyl8DxvvfobErKmNBRALJHlkYOPrFdfQkLWndALFLKpCQUQsqkJBRCy
      qQkFELKpCQUQsqkJBRCyqQkFELKpabgPYJsVhkfGiWgKkqrj2hYRXcN0fFKZFKqiksuk16uv
      ISFrTkMBVIp5Dh16m1TcIJpMY1bKaEaUanmG8Vmbn3vy54jqGo7jrFd/Q0LWlGVCIaJEdJVU
      SwuSomBEFGqWTSSaYO+dA7i2iay0IsuhJRVya9JQAMl0G88+9zyapoAkI4IAWZLwhUDTNIQQ
      qIpCVV0mqjokZIPScORKskI8Hrvmce2mdSckZH0JbZeQTU0ogJBNTSiAkE1NKICQTU1TBRBU
      q3j5fDO7ELLJaaoArBMnKH7vryA8XyCkSTR0g3qOxWR+Bk2VEZKK7zpomorrC+KJOBIyycS1
      btIVIwRBqVQXQFheJaQJNC6LMj3GT35yiHQ8ihJPIAUupZqJFLgUzYBHH3mMPlW+4aR4SdcR
      rosIAqRwNzmkCSwbCiFLAdFUCss2kZHRVBXhQ0d7GssyCYS44SOSJE1DeG5oAoU0jYYCiKda
      +bmnv0A0ooMs47suiqrgB2AYUUQg0CM6Zq12QxevzwBeKICQptFQAIqq0dractMuXp8BQgGE
      NI+mGt6SqoIQCN9vZjdCNjHNXXlejiINBRDSJJo7A8wdsh3OACHNovkmEKEAQprHxjCBvFAA
      Ic1hg5hAYXXpkObQ0A0qhMD3fRRFQQhBEARIkoQQICsyCLGqfGBJUUCW6q7QkJAm0FAAs1OX
      eP3QB9y5a4DRyQJWpUwqFWemWCaeytDTvZWBvi03vBOMJCGpKsJ1b+z9ISGrpKEAZEWmWpzh
      7UMTmGqKba0JRvMz+HaFc5cmaG3bQrlUwrKsG7v6ZQGEZVVCmkRDAejRGIO79tC7tQfLdnBt
      EwmwXJ9H21oRAaRS6Rs/IUaSkFQtnAFCmkZDARjxDA88sP+mXVyanwFCAYQ0h+a6QSUZNA3h
      hiZQSHNosgDCGSCkuSwwgWyzwsjYJBEjTldHO4p8k7O0JJB0LVwEhzSNBTOAWZ7hz/70T/nh
      qz/FXeKE+LVGikQQjr0u1woJuZoFAkikWxkc6EUmwHXXZ3NK1iMIOxRASHNYIIAg8IllWgjs
      IsPj61OuRIroBHZoAoU0hwUCKBbyTExMoMez9HTUM8Gu3OW9/P+1NI4kPTSBQprHgkVwpqWd
      zrZWfCODEdEpzYzz9rsn2Tm4jYl8AatSQlFVLNcjk2shl2mhr7drVR2QIjoinAFCmsQCASiK
      Rnf3FoanqwRCEAQeE6OXmJ4YZtwU3DXQzfj4JBHZ5f0TZ/jC55+mtJpQCEDW9boXKKwNFNIE
      FghgemqMkx+fIdHZhyJJaLpBV/cWtvZtpWKaWOUyu7dnsNyA+x7oQpFkEokE7ircmJKuf5oY
      HwogZJ1ZIICpqQkcG1zfxfUD4qkWnnjicaRlBuZyzzd871xlCCEE4fAPWW8WCKB/YBeJTCe6
      ESeq1dfHqxncK2G+OFYQwFyCTEjIerFAALFEiq2J1Lp2YIEJFBKyzjS9IKekaRBWhwtpEhtC
      AMLzEEHQ7K6EbEKaLgDmqsOFxbFCmkHTBSApCkggwtIoIU1gYwgAKSyNsl4IcXtX4QgCgmp1
      xWvKhimRrm0yOj6JrmnIqoZtmUR0Ddv1SaaSyJJCOpVYXYfnZoDQBFofrJMfU/rBD8j9k6+h
      tty8yt/NwpvKM/UHf0Dr//V1tO7uZV/fUAClwjhvvHmIwe19jI5NggTReJRyscB0xeOJxx4n
      oqu4q0hqn58Bbue7UpOwP/kEZJnIwAAAwvMov/IK7sWLzPzRH9PyS/8cJZdrci/XFnf0EubR
      o5RfeYXcL/4iLFO3quGzmh5FlaHmeCRzaTLZJL7no2pR+vu2Ylnm6iNDwzXATUH4PoWXXmL2
      z1+en13d0VHc8THaf+Nfo3Z0MPWtP8QZGrqtXNDO0BCJxx/HOnES5+LFZV/fcAZIpNt45otf
      JKJrIMsEvo8sS/gBRCI6Qgh0TaOmaTfc4foiWIZwBlhT/GIRd/giSBJ+sYiSzVL96U+J7t6D
      1tVF9he+QvnHPyb/rW/R9i//JVpvb7O7vHqCAGdomNiDD+KOjVL5yavk/snXGs4CDWcAWVHJ
      ZNIYsRhGNEo8HscwYiTiMTRVRV/FwJ9HkpA0lSCsDLGmOOcvoPV0o/f2Yp85g5fPYx07RuLg
      IyDLSJEIyaefJrJjkNrRo83u7poQ2Dbe9DR6bw/GvffhDA8vW3Oq4QywLkhSfTMsTIxfO4TA
      Ov4Rxt69SJEotaNHsU6cILJjcMGdXlIUjHvvpfzKK6Rct74rfysyZ8L5s7Pg+ygtLci2jXAc
      AtNEiUSWfGvT3aChANaewLJwzp0jumcP0TvvpPbOO1jHT5B67tn5Mxkuo/f3EZSK9cFziyF8
      H+f8eWb+23+jeuht3LExlFQKORZDTiRAUfCLxYZtNH0GkC6XRwxrA60Z3ugowvfRuruRNA1j
      3z5i99+P2tp6zWuVTAYlm8M5fx61ra0Jvb1BgoDKa69T/sEP0AcGKP7Pv0Tr7kHr6Z5bV0oo
      qRTe1BR6X9+SzYQzwO1GEFB56++J7t6DHIsh6TqtX/86sc98ZtGEI0lViezehXXixC3lDbI+
      PkX5R39Hyy//Ei1f/2USn/sc5R/9qD7YJQlJUVDbWnHHxxu20/QZAElCNgyCSqXZPblpCN+H
      IFgXG9sdHcX6+CRtv/qr8wNeamADA0R37qRw5AiBZSEbxk3v42rxSyUKL71I6tlniezYAZJE
      8oknEJ5HZOfO+ddpXV11N28Dmj8DAHp/P87QhVvqDnQ9mEeOMPvyy/Wkn5tJEFD+8U8w9t6N
      1tm54rdpXV0Iz8ebnLyJnbs+/FKJ8g9/SFAzr3nOGRpCUjViDz74qcijUdLPP7/AjFM7OvGm
      pxtusjYUgO855PN5ZgsFiqUy+Xye4myB/PQMNdOkZt54MvyV6Nv68cYnCMxrP+wtjxCYHxyj
      9Ld/i18u39RLWcePY508QeKJx5fdAb0SORZD6+zEOXfuJvbu+rA/+YSp//RNqm+8fs2N0T5z
      hsj27ci6vvBNV5l4amsLQaXSsPDasifE/PDVwwz0dTM6kceI6VQtG3yXmifz0AMPsa2nHX+V
      cTxqWxsCll2w3IoI38edGIdA4Jw7j3HfvTflOs7wMIU/e5HMCy+gdXRc35tlmciunVinTpF4
      7LF58QjXnTvGav0NBfvUKeKPfpbya68T2bMHfevWep98H+fcORKf+9yyRRTkZBIAv1xGjsfn
      H/cmJjA//IjEo59dJhQiEkUKfJwAZEUgAkDUY9cMw8CyLFzPW7UAZMNA7WjHOX9hVe1sRIJa
      DWHZJB57DPP992+KmSdcl9mXvkPsoYeIPfDgsgNjMSLbt+OOjhHMlbgRvk/hxRexTp9e6+4u
      i3AcnHPnST39BeIPH2D6P/8XKq+9RlCrEZTL+IXZFe1cy4aBbBj4MzMLHjePH2fq93+f8quv
      Np4BYskcn3vicQwjgiQruI6Dpip4AcTjcUQQYMQMrNWaLrJMZMcOrNOnSTz26G1VHsWfmQFF
      If7IwxRefImgWq37qNeQoFLBm5kh99BDoNzY3VptbwfAm5xE7+8nqNWovPoaalsb0V271rK7
      y+IXCgTVCnpvD9Hdu9B7eih+/69xhoYx9u9DikZRs9ll25FUFaWlFW98AvbsmX/cvThC6gtf
      oLKcAFQtwpYtq6v8tlIiAwPU/v6nt4wnYqW44+OouRx6fz+SquIMDRG98841vYY3NYUciaCk
      b7yggRyLoXV1Yp89h97fjz8zg3vpUn3wrDPO8DBKJoucSiGpKsa+fWi9vUz9x9/HHRlB7+1d
      mUdNktC3bcM6c5rE5+qmnfA8vIlxkp//PInYkxvDCwSgdXQgPBd3dLTZXVlT3OFhtO5u5FiM
      6F131uNurjSDhJj3DgnXpXroEH6pdF3XcEZGUDvaka5eFF4PkkR0507sj09CEOBeuoTa2oI3
      PX3zvVdXIgTWx6eI7NixYNdabW0l9dyzVA8dIjK4Y8VWgnHnHtzh4fnvVFgWfqmM2t5BdOfO
      jSMAOR4n9uCDFL/3vdvHGxQEOHN3LCSJ2P792KdPLxjg1okTFP78zxGOg3X8OBP//v/BOXt2
      5dcQAmdoCL2vf9Wmo75jB+6lS/jFIs75Cxj37SOoVtb1EEPhujhDQ/VBfiVz31/7b/wG0d27
      V9ye2t6OnEhif1L/Ti+HfFyeLTeMAJBlkk89hXBdKj959bbYEwgsC79QQO2q++S17m7kZAr7
      1Kn519SOHmX2pZco/d3fUfz+X6P1dOOMjKz4GsLz8EbH0Oa8JKtB6+xESWewTp7EGbmIcffd
      CNuZXxivB4FlIUxz0bAMSddJPPYoygrs/yvfY9xzN+Z779ZntslJlFQKac7M3jgCoD4LZL78
      ZSpvvXlLBmddjT8zA34w/4NJmkb8/v1U334bfB/hebijo2S/+lWK//O7IEmkf/7ncS9eXLHZ
      EVSrBLUqWkf7qvsraRrG/n1UXnsdf7aIvn07KPK67tIHlQooMnIstmZtGnv34lwYwi+VcEdG
      UDs75zIRN5gAAPS+PpR0GufChWZ3ZXUIgfn++2hbt6Jc4YOO7t2LOzqGl8/XB2+5TPzgQdp+
      /dfIfe1rRAYG8CYnCVYYG+VNTSFp+rzPe7VE79qLfeoUwrbROtqRDQOvUFjy9Q2r+gmB8P16
      KMgK8YtF5Eh02fCN60Ht7ETJZam8+SbO8EX03p755zacACRNI7prF+aHH93SZlBQqVA9/E7d
      rXtFzVOlpQWtqwvrxIn5watmsxh796Jv7UVtba3Hsa9w19i5eBG1rQ15jQaM2tpCZOcg2pYt
      yLEYSjaHP7X4aUFBpcLMt79dXyhf/Vy1SuHFF5n8vd9j5tv/dcXBjv70NHI6PX+HXgskTatb
      Fq+/jvnuu6hbtsw/t6wAhBDz/4IgWPC3uEkDNLpnD/bZs7f0Ytj84BhyIk5k+/YFj0uKQmz/
      PmrvvY9z4QJqR8cC740cjyMZMbypqWWv4RcKVN98i+ie3Wu2dyKpKtmvfpX0//YCyDJqWxve
      5OKuUPvceWZf/gvsqzbLhOdR/N5f4QwNE3/kEayTJ/EXmUUCy8IZHl5g7nlTU6itLWu++6z3
      9ZH58pdRUim0K8LCG+4DFPOj/P3hY7S3ZTFtF9u0SafjFMpV0tkc7a0d9K/yhJjF0Lq7IQjw
      xsfR5yoaQP0Ls0+dIrpnz4bOXhK2TeXNN0k8/rlFXZORnTsp/s3fUDtyBOOeexb82JKmoXV2
      4I5cInrF5s3V+KUS03/0x+j9/cQOHFjT/uvbts3/X21vwzp2jMA0Ccrl+uJUkuZNPH3rVqwT
      J4gfOABSvbpH5fXXsU6epO0bv1rPRf7ZoTlX7achGsL1KP7lX1J59TW6/v3v1tsVAi+fR982
      sFi3VockEXvwQSKDgwsW0Q1lJhDMTE/jCxlZAt+zuTgxRbEwwU8Pv0vN9iiVSphrfKeWYzH0
      /j6skycXPO4ODzP1H3//mq3tjYYzPExgmkTvumvR55VsFq2tjdqht9G3XhX7JEnofX04F4cb
      2taVH/+4PrX/o/8dORpd40/wKWprK97EJLMvvsT47/zu/Hcf1GrYn5wh/eUvzX/eoFJh9jvf
      ofLqa+S+9ouobW31fIOBbfUSLVf0v/rWm1gnTqJ1d2N99FH98SDAm55Bbbs2cWctkBSlXgvp
      ihtOQwHoUYO+vq34rkUy00L31q3s3NbHtoHdfOn5Z0jFdJKpFNG1/gEkCePuu7GOH1/gg3Yu
      XMAZGsKdWP/dyRUjBNW338bYu3fB4vdKJEXBuP9+5HgcdRHvjdbTgzs2tmQYr18oUDtylNTz
      z930XXMlncY6cwbr9Gm0LV1U3nqrvvcwMoIky8T27wfAHRlh9uWXccfHafvGr9bj9OeIbN+O
      c+HC/OcJqlVKP3qF7Fd/geTTT1M7chThugS2TWDWUNKZm/qZrqRxLFAix8HPfnZZ8/JmHKIR
      ueMOit/9Lt7UFNqWLSAE9iefoG/txR0exrj77jW/5lrgl0rYJz+m5Zd/qaFdbtx9N62/8i9Q
      Mtf+2FpXF6Jaw5ucXLS6WfXQIdSurvkIyZuJksmQfOpJkk8+ifA8Zv74TzDuvZfqG28S2bmz
      HubR28vsyy8TWDZtv/aNayrOad3dBKUSQbmMks3iTU8jKQp6fz/CdSl9//u44+PI8TjC9ZBT
      a+PRWgnLrjSaFZempNP16fH4cQAC08QdHyf+6GP1LJ8NWk7dOnECea7vjVDSaeIHD16TpH75
      Of2O7dTeeecaMygol6n+7BDJJx5f9L1rjRyLkfun/xS9vx+9vx9t61Ym/9/fw5ucJHHwIMhy
      PfH+yFHS/+AfLFpuUclkkA0Dd2wMAHdsDDWbRTYMlFQKffsA5tGjBKUSkqatayzYhnODziPL
      GPftw3z/A4TnzW8qxe67D29yasV+8vXkcgRl4uGHV7dIl2XiBx6m9u57BLXaAhFYJz9GjseI
      3HHHGvR4ZVx2SUqqSvYXvkL7b/4m7b/xr+dDkqN799L5W/8G4957Fn+/pqH19NbXAULgDg2j
      be2t2+KyTOLgQWqH38E+dw5lLo95vdi4AgAig4P4hQLeVL7u725tQe/bWhfE7Czme+9ds1Bu
      GkJQee11JE3F2L9v1c3pA9uQdI3KG28w+xd/gfXhhwjfp/r228QeeGBdB8mVKJkMen/fgo0q
      JZnE2Ldv6RlJkuqJ9ydPEjhOPT7qisQnfft29P4+Zl9+GSWbRVrHBJwNLQA1k0bb2kvxu9+l
      9s4R9O3bkZNJ5EQC68MPyf/hH1L4sxcbprytF87Fi1TeeJ3Ml7+8JlO4HI2SePgRSv//D3Au
      XKDw4ovYp0/jjo1u2PVPI6I7BgmKRdwLQ/izs2hdn7rPJVUl9cwzeJNTKC25dbW7N7QAUBQy
      //AfIkejWMePExkcrE+nXV3M/Nc/xdh/f31xfOZMPShscvK6tt3XjLm7v3HPPej9/WvWbPzg
      I3T9zr+j7RvfQO/rI//Nb6J3d9+SZc2VTBqtr5/KG68D4pqANq27m7Zf+wbGvTcnZXQpNrYA
      qPuhs1/7Rbp+93fm7V59+wBKLkfmy18i/sjDlP7uR8y+/BeM/fZvL7pwXC2BaeKcPw/+4gtv
      v1yu57AeOLCmO5iSrtcjF3Wd1PPPg6oRO/BwU3J0V40sE7t/P+VXfoycSCBd7TqfWwtcvXN+
      07u1rle7QSRFQW1tnbcxY/v30/lb/wa1pYX4Aw/gnD+Pc/5cParyu9/DPvPJMi1eH87584z9
      1m9Te/foouKyT51CTiTq7tqbhNbZSde//bcYexffXLsViNxxB1Ikgt7Ts3isTxNcjg39aJXZ
      PO9/dIp0Ko7jC1zbQtc1LNcnm2shmUjR07X6MNzrRY7F5sNllVyO9v/7N1Ezmbof2Q8ovPQS
      7f/q19cs99abmUHJZJj98/oibYEHJgioHj5cz1W9mQtTSULJrTwOfiOiJJNk/49/vC77Fyul
      4Qzguibnzw/h+pCfHKNcrXDi7HkuXTzL3/7oJ5RrDuVyGWsdEyauQZLQe3vr4cCyTOLgI8jR
      KNW3D197t54Lz71e/EKB2IMPknzqKWa/8536GVRzePk83sgljLsXdwGGXIEsk/r854leUb2t
      2Sx7QkxLLs3UxCiJdCu6qjHQ3UVLWw9feOpxVCnAiMXQm+SSWwwpEiH1xWeovPrqgsrAQa1G
      8a++z8y3v33dKX7+zAxqayuJRz+LFI1SeW2uWJMQVH/6M/T+vpsWv3LbIUkbqurHsifEfOGZ
      ZxaEOkiShKBeG+gy8gZblEUGB9G6uii/8gqZL30Jv1Ri5k/+BL9SxcvX9xQiAyuMOBQCvzBb
      90BFo6RfeIHp//xfiOzaiZrJUDt8mNw/+z/XNH49ZP1Ydi99scG9cfS7OJKmkX7h55n65h/U
      y60cOYoUi9H+9a9T/P73qf70Z0S2bVvRnUh4HkG1ipJOAxDp7yf51JNM/39/hNbVidbTs6au
      z5D1ZWPdutcQbcsW0s89y9R/+ibu+BjZr3wFOR4n/tBDWCdP4M82PjjhMvUoRQslNVdzR5ZJ
      PPkk6eefw704QvLpn1uXmJyQm8Pt+8vNJUAEtkN0xx3zUZfa3EZS+bVXSX/xi8vmngaWBX6w
      IElbUhTiBw5g3HPPbVXEazNy284AUDeFkk88vvBcLE0j/cILWB9+RP5b31o2uSaoVkFRrt24
      kaR6wdUNtv4JuT425a8XGRig/V/9OoFl1U9GaUBQqSBH9KYFn4XcXDalAKBeOjsyOIgzcqnh
      6/zZ2XqNyvBOf1uyqX9Vrbu7Xou0QXKNXyjUPUChAG5LGi6CPddmKl8gnUohEJRLJTRdw/UC
      Eok4IJGIr10Fr/VGa2/Hn50lsO0lF7NeoXBdpfhCbi2WLYvy458cZrC/F0/I5PMTROMGs8UZ
      yjYcPHCQ/m4Fr8EZTBsZJZtFeG69HJ8Q9VPGe3o+3R8QAn+mQCT089+2NJzX1UgUWRJE4imS
      ySTpdBzTtpFllVwuh2Wa+HPFsm5F5FgMORLFm5mhduQIU//hP9RTEKlvgNUrtJXWrUqBXasy
      +vFxCqMj+OtYkXkz0zgUItXCU089SSaTQYgA0+xGVWRcXxCLGYhAEIlGMOcGza2GpGkorS14
      ly5RO/ouzvkLeOPjaP39FP77/8CdGMcZGUFOru2JLotRm53lwvvvUJ2ZQVZkErlWWrb2kd3S
      i3JFfrEQAt9x8FwHPWogr9MmnAgC7FoVWVHQolEk6cbWRCII6uf4boB4IMc0GwtAUXXa2z8t
      Ux1Zw4KlGwJZRt+yBfPDj/Cmp4ndvx/r9BnkeALzww+JH3gIra19XTKwipNjVKfzIEkEvk9p
      aoLy9BS14izde/YiSTKlyQkKYyPUCjO4tk37wB10De5eEw+V77l4toMQAaquo2r6vCkY+D6T
      584w/skpZEVly649tPT2Lz6IL1sDVz0ngoBqYYapC+cwkklyPVvrYp4zn1VNR4tG6+JY5P2X
      2/A9D7taxnMcookkqq5zOThHiACnVsMslxBBQDSRJJbOzN8khBCIIECWZexalaH3j97GO8Er
      ROvuZua//w/iDz9M7P79mEffRVJk9P4+0i+8UB9cN/luJYTArlxbDFcEAVPnzyLLCoHvkx86
      j+99ahpNnD1NPJsj3dG1oC3fcZBVBVmp/7yOWcOuVAh8n0gigW7EkK8I3rMqZYaPvYtZLCJE
      gG7E6BrcTaarG99zmTx3lvHTJ+YH69jHJ4ils8RS6XrfqxUqM3nsShXPtZFkhXg2i5FMI8ky
      jmkyMzLM7Pgonm0hyTKT588igoDA9xACVF3HSKXRogayoqAbBpF4Ai0aJfA8ytN5zOIsTq2G
      Va0Q+B5aNIpLb77ZAAAMMklEQVSqRxZ8dtc08VwHhEDRdBItLcSzLWh6BLNcwq6WiaWzVArT
      lKcmQwGo7e0IyyK2fx+RHTso/fXf4OXzpJ5/bt0iPEUQYFeriwot8H3Gz3y86DrLs20uHT+G
      quvEMjkcs8bkuU8oTYyRaGmla+edWJUSIx99gFkqIoRAi0SJZTKkO7pI5FqRVZWLx96jOD42
      365rWVx4/wgt03lqxQKV6XzddJnDqpQZev8I8WwLnm1Tnp7EmSvfcjlSWJJlFFWbm9E8givy
      MOqfd+GZA77rYFcrCCHmZwBJkpEVuV6YeZE8DqdWq193CXzXoTg+RnFsdMF3Wxwfm/970wtA
      aWkh9dyzGHfdVU+qkSTc0UvrmrThey6uvXRSUSMnQ3W2wNnDP6Wlt5/ixDjVQr1UuVkqUi3M
      4FoWjvnpIHHMGo5ZY3ZsFFWPoGgadq16TbuebTPxyalrHr9MZTpPOT+10Ay6bL7M9dlzr792
      05XtCRHge2tQAO3qG8sVf4cCSCRo+Wf/HElT6zVJ77sPvzg7H/68HviOg+fceGkXu1r3Hl2J
      EIJqoXGck+fYq7ruRljIrpZNLwAkCUn/1MuSfv65+kJuHXd+XdsK3Z5NIhTAVchLVHS+mThm
      jWCD1jq93WkogMD3KFeqGLEYiADTNFGV+knx0WgEBEQiYZTkarErlXo80m1gUtxqNBRAYXKE
      H772DoPbtmJ7AaXyDKbrEXguvhzh3rvvY6C3A78Z1dhuE4QQiy5CQ9aHxlUhIhEIPGQ1gjS3
      geC4HiLwcFwPy7KxbeeWjQXaCIjArwsgvPs3hYYzgBFPc+Dhh+noaEcEPsViEU1TcX1BKpUi
      CALiiTh2Axfe7cnVdTFuHN/1cJtZV2mT01AAWiTGtm2flrGOr1GltfXCdx1qxVni2ZYFO5+N
      CHyfwPdRVPXaEAMhqJWKFEZHyPVsxUimVt3H1boiQ1bHbesFsiplRo4fozI9xcD9D5Fq7wQ+
      jUlRNI1oMlWvcxQEBL6PWS4yefYMZqlINJmirX87idZWZFkBIShOjDF87D2sSpni+Cg9d91D
      sqXtGqHUdy49ZEVt6CsXQVCP/NyAh31sFm5LAfiey6XjxyhcugjAxNkzxHMtICA/dI6xUyeR
      VYVMVw+SVN9Icswadq2KN3fWQK04S2lynGx3L+0DO/Bdd37wA1QLM5w9/DNae/vI9WytB3IB
      rm0zO3aJcn6SaCJFa/8Aidy1wXSB7zMzMsT4J6du2XDy2wFJCCEFQfAHsiz/yo02Mj09TTab
      3TAV4qYvXuDCu+/Mx4/Iikrnjp1UZwuUJicQwRVeKyGWXYDqRgwkCWcJb42i6fMhy77r4l8R
      AmCk0my7/zMYyTTVwgx2pYznOlTyU5TyUwteG7L+3HYzgF2tMH761ILgqcD3rgkVmGcF3pcr
      Y2kWw3edJQeyWSoy9N4RIokkxfGxcMBvMG4rAVyOnKyVZpvdlQVUCzPLxuWENIeNYbMshhAE
      Qd0jI+YqMbu2Ra1YIFhs30EICpcukh++sOYnxITcvmzIGSDwfaYvXqBwaQQQ82G7lZlpHLNG
      sqWN9oEdCzw0pfwkl05+tLg4QkKWYHkBiIBj7x3GDDRc0ySRMChWTDItLWTTWXq7O1fdiVpx
      FrM4i6rreK5LOT/JzMWh+QykuY5wefOpMDpCeWqSzJZukq3tCCEYP33ymiSLkJDlWIEABNVy
      gQtTNmlDI18s4lpFjnx4kmee/gKlUmlVJ8SIIGD8zMdMD19AkuV5c+daFi5WPdchP3Se/ND5
      ui8/NHtCboDlBSBJZLKtbNEESUNF+D41J8c9+7pQZYlEIoG7io0c1zKpTOcBFqTdXQ/h4A+5
      UVYgAJlde+9nF9KSHsPVZAZdtutDQprBihbBNyv1TQQBxfHRG77zh4Sslqa6QV3LpDxn/oSE
      NIOmCsAxa2EocEhTaaoA6ovXcAEb0jw27k5wSMg6sOKd4CDwKJcqqKqCFwii0WiYFB9yy7Ni
      AZSmx/nbV96gpaWVSqWEI2nsv3c/g9t6bmb/QkJuKisWgKZHUPAolKsowsdHwbKc0IIPuaWZ
      F4BlWdj20rmpnhuw+857iRkGXiBIppKIQFAsFrEsi1KpNL9fcLnI01IJMsFchQnLspHjyYVn
      dAlBIMSS7xVBgGjUtu8vnf+7TNuB7yNJMpK8+L5HEATIkrRkDsHlz7XYdf25POOl+iWEWLLM
      +XLX9T3vhtu+vIu+1F5P4PtIsrxkKfSGv9VcWMtS116u3zfcthD4QYCyxDi48r3zV9c0bck3
      1ImRSucWf8YwFnxBl2ODolefrTt38csDxTAMsu0d13S+0Qe3bZsgCDCWONMr8P36e5f6wYJg
      SYHUajU0VUVb4kjUG21bBAHlcpnUEvVGxdwgbSjqJa4rRP3sthtt+/Im5FKDtFqpEIlGURcZ
      qMu2LQIQS7ddKhZJplJLi6vBb9Xo2oHvU63VSCaTy753/lMpirKMABoTeB5eINB1bf7LCnwP
      1xdEIzq+5+K4HrVqlVgyjX5FPc6lMKtlqpZHLpep3wGpC9W2TBRFRVFkbNvC8zxMyyGXyyKv
      4DxfIQJm8nkkLUI2nZ4fV6qqYlk2mqYhSWCaFp5r4wmFTDq5okIoIvAxbQdFAknR0DV1vm3H
      9TCMKCLwsWwXRZGQZBVdXfn3HgQ+jhcQveL7UzJpPF8QjUYIfB/b9VAkgaxoqCttWwiKswWE
      opNOJeY/q5pJY1sOmqYjITAtC1VVCIKVH5gS+B75fB7dSCxoO5fLYjsuUcMAEWBZFqqiEiCt
      2LniOjaBkPA8FyMWmx8nsiyBJKNrKp7r4Loe1VqNdCa74Pteo3wAQWl6imMnztDekmFkcpKB
      XXuJegVGSvDg3buYGjnPiQtjeK5DV98gewf7lmky4PRHx5io2GhSgBwxkCWFvXvv4tQH77Ht
      zn20pSN88P4RarUAx/V44MABssnFZ4Yr8Zwax46dQFV9qqZDMpkm09bFHb2tHH77fT7zyAE0
      XA4d/hmyC75q8MhnP0NEWd5r7NSKvPr6W0h+gCvrRKNROjq76e9M8sHHo3z24P3UZqd45+QF
      coZEsmMbA93tK/2iqZZmePv9U/R05BgbGaNj+yBtusvZiSqf2b+XYn6ME6fHMVSX9m276Olc
      2QmXvmvx3juHIZbENWvEYjE0I8WeHb0c/dmHPPTkI8ieyeFDR2hvz2EKg3133bGitu1akQ9P
      fozi+VieRyaTJdveRW+rwdvHTnPwwAECq8zhI+/QlssRGFnuumPbitq+9MkpzlyaYWbmIrlc
      F4qus33Hbmr5CyjpHgb7Ohk68yGzro5bLdG9fTe9HZ9aMmsiAM+xOXnqDNOFScZHhpATaarl
      Km2dWaLmLDXTIpnJEo9OU3TtFRdBi6eS2BOTnJ+YRo9GiMaTDAzuorW1BdcycRMRWttaGbk4
      WT+UYYXFqi6/ynMtLl68RCpeQommUfUouWyaWrVGJhWjpSXLzHjhOmOhJIRnMj5jErgOJdOn
      tbOPeDJFMj5DuVojHk+QTidpSUYJViCqywSew8enPqY4M0Vh6hKSHyHSWWVbazuxgk2tahJL
      pEjFK6SSMuoSa5nFuy2TSqc4NzxCoVRFl2WyXb3s3n0HuXSSarlKOmmQy2VJZ3JQu95ymALH
      qnJxNE+lUkWNZ4j0tJFJxalWqyTjMXLZJNmWFqreyvutaTqTl4ZwJZtz588hNINde/eRa22j
      5HiYtkumpYXqZIGi7RI3Fprla1IVAiEoFmeRZAXHcYhEo+h6BE2RMc0anpBIxg0cx6VaqRBP
      pRdM4UtRrZQwbQ9VhkJhBk+OMrB1C4HnUjNNItE4iixwHAfTcheYSo27O2cCqRFkfJBkJFkl
      lYrjWDY10ySZStfNNtvEEwrZ9OL25DVtBz61Wg0vEPiuSyAkEskkEV3BMk1qtkcuk8R2XFRZ
      Rkgy2nWYKaVSESQZx3WI6FFUXSeqKZimieMJ0sk4juMhyyDJyopNICGCugkkqQjfZWpsklRH
      F52tmfp3UquRymbwXBdFUfADQWQFvyHUTaDp6Wm0iIHwPWRFQVJUkvEYtm1RMy3S6Qyea6Eo
      KoEAXVtZ257jUDNNkET9c6saqVQSKfAxTRMha8Qiat1RU66Sa20lon16378sgG/atv0vVnTF
      kJDbiP8FdvxSyWU1oU4AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Percent of Hotels Active' width='192'>
      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
      W9aDwST4/z5g10L3YsUyAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average Budget per Hotel' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Conversions per Click' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAG10lEQVR4nO3dS29U5xnA8ffc5+IZjy/QOAFDgJg2IFkEKSlS
      lEWUZaKuK3XZRT9LFvkk+QRkkSiClLSK0gaITNNiCsEeX8bjmfFczvXtIkEHbJ2E4TFndKb/
      38aS8eJZ/PWeozPPHAyttQJelK2UoiG8MPunH61W61f/VGvd6/Xq9fpLHglFYjz/8ZMkSbvd
      XlhYeKkDoVjMSQ+AYiMgiBAQRAgIIgQEEQKCCAFBhIAgQkAQISCIEBBECAgiBAQRO+sf1m5/
      45v1SxeW1h409x6uXbj6/iuNUp6ToRAyT6DOYNjvbQWhbu782yudXL/zw/PsDOH/TWZAjWq1
      Vm0EpvfG2ctBsPvG6kU2gXAUC2UQ4SYaIgQEEQKCCAFBhIAgQkAQISCIEBBECAgiBAQRAoII
      AUGEgCBCQBAhIIgQEEQICCKZS/U/3r+XlBfnvGh9q2cGByuXV20jz8FQDFkB6UfN3STZ2jCt
      MOxuPd7Z69m/u/gb0+TEwjMyg7B0YNsly3UHUWXp1ZPnV15nGxpHsVQPES5JECEgiBAQRAgI
      IgQEEQKCCAFBhIAgQkAQISCIEBBECAgiBAQRAoIIAUGEgCBCQBDJXKp/+J81XV6Y86L1rQM7
      7L7+5pWSledgKIbMpfqNrVacbG9aVhQON9bXRu6ry4s2S/U4JHupXoWOW7ZdbxBZJ145f6Je
      YhsaR7FUDxEuSRAhIIgQEEQICCIEBBECgggBQYSAIEJAECEgiBAQRAgIIgQEEQKCCAFBhIAg
      QkAQyVyqHw4OlOU6ph6MgnA0qs7OuTa14bDMpfpbN7+M7WrdU5utjj3ovvn+H5ZqTq6joQiy
      D5UkNpJoEMSxdhbPXjg9V/Z9P8fBUAws1UOE2xqIEBBECAgiBAQRAoIIAUGEgCBCQBAhIIgQ
      EEQICCIEBBECgggBQYSAIEJAECEgiGQu1fd7HWWXXDPpDUMzCWuNeSPPuVAQmUv1f//6r7FV
      rnmqufN4/d7mh3/681KDpXocln0J05Ghk2Goo8Q5c2552D2I4zjHwVAMLNVDhJtoiBAQRAgI
      ImlAnVbz+vXrnUE4wWlQOE8C0vqrLz5b+/72dj+a6DwomCfPgQzj6jvvOvV/NcqZjxaBo9IT
      6OaNz2/cvNX3OYEwhvS8Wbn8+6tvvVOruBOcBoWT3kS3th/dX3/Q4wTCONJ7oOVzF08vn7FM
      PjPFGNITyPbbH3/8SbMbTHAaFE4akB+bdSfqB8kEp0HhpAEZhjq/ssIlDGNJA6rVa4ZT3tl4
      OMFpUDhpQLut9t7mev3kqQlOg8JJA2pUnM39oOZZE5wGhZMGtLW7f2l1teJwD4QxpE+i5xfm
      //n9rd5b1xoVpZS6f++2Li/O2sGjPT/qNleuXONwwlFPAtI6CEf7/bDi/nQm6e29XpK0dxIn
      1mGvu9tu7QeeMk32h/CMJ0EYRrszqKrOxv7P+0CelZRKNafqhpY7W294rsc2NI5KL2GuGVeX
      fvvaz9/dMa68/e6hP00SnjHisPSSNDMzH+1utlgowzieepBYq0TVudNzpQlOg8JJA3LL1XrJ
      YqEMY0kD2nz8uL54wuIxEMbx1CWsZN288ZUfP+8XVQH1zDpHYr69utIPCAhjSB8kNveHl84t
      ay5hGMdTlzBPPdgZzFd5hwvGwNs5IMJnWxAhIIgQEEQICCIEBBECgggBQYSAIJL5Oqluezey
      yjOObvX8hVrZ9Cq0hqMyA/rHd99G2q26Rrs3HD784eof/zKnh3lOhkLIPFYsnSgdB4nyw0gb
      1qA3sCy+1oPD+CwMItzYQISAIEJAECEgiBAQRAgIIgQEEQKCCAFBhIAgQkAQISCIEBBECAgi
      BAQRAoIIAUEkcye6vdPUbq1qx9vdkRGOlk4v8+YgHJUVkL5z925i2CXH7PQHbn97T310ZpaE
      cFjmJcxIQsMwI61GoXZmT3iR73lenpOhEFiqhwg30RAhIIgQEEQICCIEBBECgggBQYSAIEJA
      ECEgiBBQXiJf7a1PeojjR0B56W2q259OeojjR0B5GXVVOJj0EMePgPIy6qhwCt9SSkB5GXVV
      wAmEF+Z3VDRUz719VRQElJdRV8WhSqJJz3HMspfqtzdCu1p3dXN/qPyDpTPnHWKT8HvKm1FJ
      pKyp+l9pMwO6e28t0lbZNg+Go7NLje/u/vfCciPPyaZN5Cu3On0n0C+/qV7HyhwEydd/u3Pq
      1GKlUslzsmkTB8qZwoAyT6Br731w6DdJkrzkYaaXTlQSqnJDRf6kRzlm3NfkIvKV5SqnMn2P
      gggoF9FI2WXlVqbvYXTmJQzHKRwqp6ycynQ8Swz96Me1vdKMu/DazP8ARvxAhN19k1YAAAAA
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Conversions per Impression' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Clicked ROI' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Exposed ROI' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Advertiser Metrics' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Pages Available YoY' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvWd7pMd5qHnXmzpHdCMDA2By5gSSoiiSiiYt
      2ZJt+bKPj7279nW+7If9Bfvl/JA9e/ZYku0j27KOSDHnLHKGQ07OEYNBRqNz95tqP7yNNAMM
      gEae6ZvXcK4But+qrq6n6qmnngANGjzGCAAp5Y9c131+ozvToMF6owG4rvtdRVH+75U+zHEc
      crncynvVoME6oa3mwyzLwnVdIpHIaj62QYM1Y1UFAEDTNAzDWO3HNmiwJigb3YEGDTaShgA0
      eKxpCECDx5qGADR4rGkIQIPHmlW3Aj12SIm0bahWcUsFZKmE2taO8Pk3umcNlkBDAJaD6yLN
      KjKfxxkbwR0dxc2M4+aySNMEBDKfw/fcCxjHnt7o3jZYAg0BmA8pZyZ7oYA7MY4zMowzMoSb
      nQQpUYJBlGQKtWsbeiKJEokigiHsm9cwT51EP/gEwvBt9CdpsAh1CYCULqND98iXTcLROD7h
      oAdjqGK1u7e+uONj2P23cUdHcMbHkKUiuC7C8KG2tKDv2IWSbkGJxRB+PygqiLkfWuvdTvWL
      z3AHB1G39WzMB2mwZOreAXITI3z+9VmKpiAiTPZ964/oa48hpVzN/q0bztAg5d//FiUaQ21t
      xzh8FCWRRIlEwPAhNO2ByT4fIhBE79uBdeEsave2Jb2nwcZRlwAIoaCoBnv27ufcma8pmCqG
      IrAsC1VVV7uPa447PkbljVfQ9x/E9+QzoK1AMxQCbc9+yq/8FjeXRYnFV6+jDVadur/ptu4+
      WoWgr6cXKSESiSKlQ7VaXc3+rTluLkv5jVdQt/WufPLXUFNplFgM+8Y1jCPHV6GXDdaKur/t
      QDAIQDAQmP5ZpeKsvEfriCwWqLz5Kkoyhe/Z51dl8gOgaej7DmKeOYV+4BBCbzgHblYe24sw
      WSlTeecNhG7g/+4PV91io/X0QrmMOzy0qs9tsLo8lgIgTZPK++8gq1X8P3oJMWsXWy1EKIza
      04d14ZxnVm2wKXksBcC+dhn33gD+F3+CCIXXphEh0PcewL5zC1nIr00bDVbM4ycAto11/iz6
      kWNrbqFRm5tRwhHsG9fWtJ0GHpZrkjOzuNJd8ns2XgBcF7v/Ntbli+Cs/SHaGR/Dncygbd+5
      5m2h6ej7DmBeOAeWtfbtPcZYrskHA2/zy8v/jfcH3maiMo5kcdVz4wRAStzJDJV336Dy6u+o
      vP065skv1lwI7CsXUTs6UaLRNW1nCrV3O7JYwBkZXpf2HkccafOHoU8YKg3yYvefUrHL/Ob6
      v/DRvfeYrGYeKggb4gskq1Wsi+cwT36B2tpG8C//BlmtUn7jFSTgO/40rMGFmiyXsa9fxffd
      H4JYH9lXwhG07l7Mr09gSOn5F1XKyHIZWamg7dyF2ty6Ln15FHGly9ejJ7mavcyf9vwF6UAL
      vdHtDJcGOTHyOf92/Z/YnzjEkfSTBLQHjR3rKwBS4gzcpfrph0iziv+7P0Tr7QPV60bgxz+l
      /NrLIF18T35r+uerhXP3DigKalvHqj73oQiBfvAQ5Vd/R+Wd10HVEH4/wu/HGbgLjt0QgDqR
      SC5mzvH16En+eNtPSQdaAFCFSnuokz/p+XMGind5/+5bSCTfbnsewX2+W+va4XKZ8uuvoO/Z
      i3HsaUTtMm0Kta2DwI9/Rvn1l0HKVbuZBcBxsM6fRdu1B+FbXy9NtbWd0N/9AygKQq35FAlB
      9bOPkOWSZyZt+AwtC4nkRvYqnw5+yA86X6Ij3PXAa1Sh0R3u4YWOH/D+3bc4kj5OUAvNec26
      ngFkpeytiE8ce2DyT6G2tRP48U+xLp6n+sWnYNur0rY7mcEZHUbfuWdVnrcshED4A95lm6qC
      ong/M3y1OIIGy2Wg0M97d9/i2bbn6YvteGBln017qAuf6udm7voDv1tfAahWEKqyqGuA2tpO
      4Cc/wzp3BvvWg52uB/vqZdR0M0o8sSrPWxV8UwLQuChbDmW7zLt33+Bw6ih7EwcfOvkBDMVg
      f/Iw58ZPY7lzrXHrKwDlMui651q8CGpzK9qOXdh3bq+83WoV68pF9H0H1+RwXS/CMMA0G/N/
      mYxWhnGly8GmIyhLNGb0xXZSsPIMlwbn/Hx9BaBQQARDngqwGEKgtrbhjo6s2DTq3BsAx0Ht
      6l7Rc1YbofuQjfuBZXM7f5O2UAd+delx12E9TF9sB+cmTs+5KFtXAXCLBU/3X+KBT2lK4xby
      yJW4WLsu1oWzaNt3Ifyr7/OzInQNXAfpbi0v2o3Eci3687fojWxHLMNwIBDsSxykv3CbnDk5
      /fP1EwApkcUCSii8dAGoXVa5K/ClcfM5nHt30Xbv3XSWFqFp4LrgLP3q/nEnZ2Yp2SVag+3L
      fm8q0EyTL83lyYtM6Z3rrwKFl545Wvj8KOEI7vhY3W3a16+ixBOoqVTdz1gzNB1cCY0dYMnc
      K/YTNWKEjeVnIFeFysGmJ7iUOU/FqQDrKQCui1sqooSX4X2pqiipNE6dPvXStrEunkffe2DV
      L9VWA6FpSNnYAZaKK11u5q7TE+lDFfUZM7oj2xAI7uRvAesoANKxwTQRgfnt/wuhtrbhjgx5
      qsJyKZeQZS9R1aakpgI1zgBLo+yUGauM0BXZVvczfKqfvckDnB3/Blva67gDWBbSsZd9EFWS
      qdpBuLLsJt1Cwbt9DYUWf/EGMG0OthsCsBTGyiOoQiPpa1rRc3bF9pKpjjNWHqnTFUK63Lhy
      gdFMHuGPEBZV4u07SEYWdjGQpunpu/7lpQxUolFwJTKfX/bu4WYnUULhzRuTKxRQVaTdMIUu
      hdv5G7SFOjDUlbmyRI0Y3ZFezo+frk8AXKvClydOkikVKZsQRHL8+SSaDKHr+rzvkZUyaCpC
      m//3CyH8AZRQCGdiDKW5ZXn9HB/zbn430eXXHBQFoaiNWIElYLkW/YXbPNX87UVvfhdDCMGB
      5GF+f+u3deYF0nR6urqQw2O0+f3gaqQTYQIBP84Cl1ayXEYYxpJugeegqijpZpyhQfQ9+5f+
      Pilxx0dROx50kto0KAqoSmMHWAJZc5KyXaYl2LYqz2sOtJIONNcpAIrOk995gWMuKIpAAqqi
      UK1WcRc4rMpi0cuYrC7/2KG2tGJduuCZC5WlrebStnFzOfSDK9MX1xKhKN7naewAizJQ6Cdu
      xAnpqxPDrSkaR9JP1u8OrarasjQLt5D3AtDrCERRUmncXA5ZrS79HFCtIqsVlGhs2e2tG0Ig
      VLXhDrEIrnS5lb/Otmj95s/56Ah1raMZtJBHWcYl2GyUaAyku6zsCm4xD0JZ0O16UyAE6Ppj
      5RItpcu17GVu5q5jOktzcSnbJcbKo3SFe1a1L7qir1NAjJS4xQJaKl3X24XfjxIK44yPo6SX
      dhB2s5OIgH/TpygXPh+YWyud5EoYrYzwxu1X8Kk+AlqQPYn97IjtJmrEFvTsHCkPoSs6CV9y
      1fuzPgLgOlAp15+DR9U8NWh4CPbsW1qT42OoieTSPE83iqmgmC2WT7VeXOlyauRL9iT380zL
      c/QXbnN+4gzfjH1FR6iL/cmDtIc60ZS5lsJb+Zu0hzox1NU3Z6+LAEjHRVaqKMH6L6TU1rba
      QdhdfFJLiTs+jtrcsukc4O7Hiwp7PARgqDTI3WI/f9H314T0MHsS+9kZ381YeYyLmbO8eef3
      JPxNHEs/TWe4G13RsVyTu4U7PNP63IrNn/OxPjuAZSFtyysqUSdKKo2bnzoIL3Kb7Di4kxn0
      vcswm24UhgHZ4kb3Ys1xpMPJkc/ZFd9DYtZNrio0WoKtNAdbOJp+iouZc7w/8BYRPcqx5qfw
      qwGqToWW4NokDlifHcCseivxCoLRlUjM85sp5BcVAFmteBag2Ca2ANUQhoH7GByCBwr9jJaH
      eb79h/P68QsEUSPGUy3fZn/yEBcmzvLBwDsUrQLtoc4HgtlXi/URgGrF03dX4JIgAgGUYO1G
      ON380Ne6RW9FFcE1yvu5igjD8KpMLkW126JYrsWJkc/ZlzxEzPfwRUkgCOsRnmx5hn3Jg1yZ
      vEg60LKq5s/ZrMuIy1Kpvlvg2SgKSrp5SenGZXYSEQh6MbebHV33Ml88whmk7+RvkjUnOdD0
      xJL1+ClBOJp+iq5w/d6fSBdGL0Pu3ry/Xh8BKBYRgSXGAi+EEKgtrV6KwUVco92JMS/x7Wrl
      FFpDhG54rhCPqACYrsmJkT9wOHWU8Crd4i6Lsatw6hfw1f+A8WsPjPM67QC1WGBlZad4JdXs
      1eRdxGzojI2i1HnnsN4IwwDb9gJjHkFuZK9SdSrsTRxYEyvOQymOwsVXYPePoe+7cPbfYOS8
      tyvUWPslUkrcQi0WeIUDoES9g7BbyKMucBCWto2bnUTftXdFba0bul47Azx6O0DFrnBy5A8c
      TT+5ZofYBbHKcOFlSPZB99OeC44egAuvgFWBjqMglHU6BBcKKN0r0ONqCL8fEQzhToyjLnQQ
      Nque52l8a1RnFKpWK8z96AXFXMtdRiLZGV/nxch14Pp74Fiw60VQatO87QnQ/HDhd56AbHtm
      nXaAUhF9ObHAC6FpqKk0zvAg+u75B1UWiwgEyhawAAHT5xRp2+utIKwptmtxYfwMh5qOLit/
      z8qRMHQGhs7Dsf8djFk7jxDQvMcTgrP/DlZx7c8A0rbAWn4s8EIorW24DzkIu9lJhN+37glw
      62bKpXYdioOsJyPlYfJ2nr7YjvVtODsAV96EPT+GyHx+YwKSvfDEf4ah8+twCLZsb3VbpaRU
      aiqNO5nBrZTn/b07PobYzFFg9yFUDRCrlgR4MyCRXJg4y7ZIL2G9Pg/guqjm4fxvPf2+ZS8P
      PXPGOuDo/7YOO4Blguuu2oqsNKUQPh/O7ZvzNCa9i7JkatP7AE2jKiBAPkI7QMHMczt/k31L
      SFy7KKVxKGeW9tqBr0DRofd5WMrFWbh5HQSgUvZWuQVihZeL8PnRDx3B+ubUg370roubyaA2
      bcIkWAuhqgihwCMUFnkjd42wEZkuWFE31Tyc/O9w/n+Bu8gOaZXh3mnoedbT8ZfI2gtAuQy6
      trJb4PvQd+zGLZe8ii+z26p65YfEGld/XE2EUEDXHpmgGMu1uJA5y/7EIXRlBYuedOHmh95K
      nhuA/CIeAJlb3nuati+rmboFIDM2xMDAPUYnMmQnxihV5v8CZakWC7zEWN6lIEIhr/riN1/N
      0Z1lqQiuu7zscxuNEF6mDOvREICh0j3Kdome6PIm4gOMX4Ohc3Dor6F5L9w9ufBtuXS837ce
      BH15xpa6lmXpWpz85CMyjiCTqxARVfY+/SJ97VHkfZ1081OxwKurk+t7D2CdPYMzNIja6WV+
      8CxAga1jAYJHKixSSu/w2xvdTkhfwcVXNQ+X34Ce5yDWDvJJOP0/vbNAcJ6osOKY5+uz68Vl
      N1XnDiBo7uxkcmIUaZfIVxR0AaZpPiAA07HAqywASjSGvmMX5umvpk2i7sS45wK9CfOALogQ
      CF1HmpvrDJCpTnBm7BSOXPrhPGdl6S/cXpnbg+vAjQ/BF4bO44CAaDuEUp59/wEkDJ72rDqh
      5WcAqS8tilDp6tlOunM7hqYiJUSiMZAO1dl+OlIiS0WUxOrHcnrVFw9T+o9f446PoqRbPB+g
      pvTWsQDB9A6wmVQgieSb0ZN8NvQRrcF2mpcYjHI9e4W4L0HK/3B39Ycyfg2Gz8Gx/wO02k6u
      aND1FFx9x/t7tppjljxVafePl2b5uY/6dgAhSKZaaG9tIZVKkU6n8PvmOfC4LrJcqj8WeBGU
      ZBNq1zbMM98gLQuZzaBsJQtQDaEbm0oFKloFbuSu0Rps50Lm3JIqrptulYuZ8+xPHkJT6tyB
      q3m4/Lqn+oTvE7qm7Z4/z9i1uT+fuOGdL5P1udqsqRVIug6yXEFZq+S0ioJx+Cj2jWu4YyO4
      xRLKFvEBms1MXPDmcIi7kbtGSA/xvc4/4kbuKiVr8ZDNweI9TKfKtkhvfY26Dlx/H/wxT/W5
      fxfXAt4FV/8Xno/P1HvuflXz8anvonVtzaC1jNCsYWkitaUVNdWMeeILkO6a7TZrifBtnmJ5
      lmtyfvwM+5OH6Qp3E9RC3Mhde+h7XOlyYeIM22O7CGh1urxk+2uqzEszqs/9tBzwDsK5Ae/f
      xREoDkPrgfraZK13gKq3ra+pVUZV0Y8cwzz3DQiBsoLA+w1jE2WGGCrdo+yU6I1uR1cM9icP
      cn7iwfKisxmrjNQOv/vrO/xKF+6egNb9D6o+s/HHPJNo/5ee6fPeNxDfBoH6S9+usQBUALHm
      yanUji60zm3eDfBWsgDV2CwFs13pcm78DNujO6dzcPZGd1CySwyV5g8ptFyTTwc/Ymd8D03+
      OoOQyhkYvwEdxx5uwBDCe83EDcjcgeELtffUP43XVgDKJW97X2PHNKHr+F/8CcbTz24tC1AN
      YRheftANDovMmpPcLd5hb3LGjBnSw/RFd3Ju/Js55UU9JJcyF8iZkzzZ/MySa/Y+wNA5CKch
      sgRrU7gFoh2e05tmQHxlpW/XVgCKRe9iah08M9WW1s1bCmkxNN070NVTBmoVuTp5iZQ/PWcl
      Fwj2JQ9wt3iX7KzyogCZaoYvhz/j2bYX6vf6tMow+A10PjkTuPIwFBW6nvZifduPLHxeWCJr
      LAAFLw7gEU33sVoIXQNnY2uFVZwKlyfPc6Dp8AMpSJr8aVL+NFcmL07/zJY2nw99TEeoi97o
      Cnz+J2544aDL8eFJ9nj3BG2H62+3xprOTLeY31p+ORvF1A6wgdUi7xZuIyXzpiDxyoserpUX
      9eIwbmSvMVgc4Fut36k/Z4/reIfftkPL8+FRDej+FvhWHmuwdgIgJTJfQETWMSBiiyJ0Dem6
      G6YCOdLh3PhpdiX24lfnN1l3hbchhFdeNG/l+WzoQ55ueZa4bwX3LoVhz8uz7VD9z1ghayoA
      bqmICDUEYFE0fUPLpY5XxhitjLD7IcHrPtXP3sQBTo+d4g9Dn5DwJdmd2EfdmT6khIGvIdEz
      v4PbOrFmAiBtuxYLvHaXYI8KQlU969UGhEVKJBcnztIR6iRmPNyevjO2h3vFu1zKnOPbrS+s
      zN+/moeRC97hdwVmzJWydkZz20JaFsoqBcM/0igqKIq3aKwzJavItexlftj140XNmLFa8tqg
      FiIVWGHisdFLXsaG+MYWMVwzAZCm6W1zvi14M7veKIpXMG8DwiJv5W8Q0EK0hToWfa0QCk+3
      PIuo/Vc3jukFsHQe9w60G8jaCUClglBVxCrFAj/S1KpFSmt9dwDbtTk/cYZ9yQMYytImYt2X
      XbOZvANm0cvRs8Gs3RmgUgZN82zcDR6KUBVPCNZ5BxgpD5M3c/RFd61fo44Ftz+Dln2rYsZc
      KQ8IwPDdW5z6+iy5UmVFD/ZugVc3FviRRSieu8g6lkuVUnIxc5buSA+RZd3iSup2W3VtL9qr
      MOrl69wEufDmCoCU3L15jc8++5LxFZbtcQt5lNDqh0JuBA/6wKwyQnj+QOvoEVqw89zK32Bf
      8uC8FVsewKp4efbP/BuMXFz89fcjHW/lv/c1HP5rCG6OwKU5+km1XKDsSJqak4QDK/TgtEwv
      Q9sWFgCJ5G7hDn8Y/oQDycPsjO2pP9ppERYrlpc1JynbZVqCrauSZvxG7hphLUxz4CEOaK7j
      JaYaPgdDZ8GxvVjdq+94WZeXmn9HunDnS7j9uTf5Y50r7v9qMefb1HQf0nFwbIt8qUI6Xr8b
      g3H46Jb2AXKly9XsJT4ceJeu8DY+H/qYa9krfLv1eZL+plXPdS8MYzp+YjZSSu4UbvFW/6vY
      rsXf7fovRIzoitqyXIuLE2c5kHxiYVt+OePl1s/dg0gbbP++N+mR8MX/44UmLiUQRbowcMpT
      fQ79HBIrzxK+mswRAMsscfHcN5y8fI9dTzxFX/vC21QxO8a5y9dR/WFCwiTe1kciPLNriMjK
      vqSNxJE2p8dO8dXol7zQ8QN2xvZQsPJ8Mfwpv73xa46ln2J/8hCGukpxDkKA8WDBbNu1OTv+
      NSdqOfZv5q5zfuI0T7d+Z0UCOFwapPTQ3D0S+k94lprj/+CpK7PPcp3H4M7nkN4N6kOsfFLC
      4Fm4+jbs/zNo2sFm0PtnM0cA/MEoT337WfT4TeKRhS+wpGvz9Rcf8/apaySiIfyuy/EX4qgt
      IfQtbvY0HZM/DHur/Uvdf0pnuHu6guH3O1/kTv4mnw5+yNXsFb7T9gJtwY6l6dCLIAwDWcxP
      /7tkF/lk8AMGCv281P0ndIV7SAdaePfu6+xLHiJq1FcB0wtfPEtv5CG5e6wyDJ/3whPD86Q3
      bDsEd/4Ak7drk3oBxi7Dpd/Dvp9Ceg+bbfLDfQJQKmQZHs2gGX6CvofZhQWtHT3syNhEAjqu
      o5GKh/H7fbgb7NNeD1JKXByKVpGPB99nsprhpz0/JxWYm95DFSq90R20BNv4auRLXrn1Gw43
      HeOJ9PEV58AXhoE76QXFjFZGePfumxiKwZ/1/RUJn+cr0xHuIu5Lcn7iDN+qcxfIWznuFG7x
      Jz1/vvD7M7e8vxdSV/wxaD3k6fSJ3vktfeUMXHoNtn/Pi+XdpGfB+84ABho2t2/fWTDVIYBQ
      VHbse4Ke3Qenf6aoKma1Ojcv0AYjkeTMLBW7jItEShdXujjSoepUKFh5cmaWrJmlYOUpWnnS
      gRZ+2vPzh+rZQS3Es20v0BfdwceD73E7f4Pn2r8/725guSbjlTHKdpnuSM/CrsO6AZbFaGmY
      393+DTtiu/hW63NzBEsTGsfST/NO/+vsr3MXuJ69QsyIPyDcM4NW09lb9z/ERVl4t7gn/hvk
      70HsPncGx4Krb3kRXp1PbtrJD/cJgOELEAj4iUXDOIuF5wmBtomrMEokd/K3ePPOKyhCnb7B
      FAgUoaAKlagRI2JE6Q5vI2rECOlhkr6mJen2ilDoCHfxZ71/xamxE/z+1m851HSEJ1LHUBSV
      icoYN3PXuZG7RskqUnHKfKftexxOHZ33NlUYBoXyJG/3v8bO2G6ebf8umnhwfDtCXSTq3AW8
      3D3nOJp6ct5nA1CagOxd2PGDhz8smITUbrjzBRzomOXQVsvUNtnvnR8edkbYBNw3CoLm5mZC
      d8aJBLa2D89gcYC3+1/jyeZn2J3YjyoUhFCmJ4xATP9sJfi1AM+0fIdtkV4+vvcelzLnURUV
      0zFpCbZxvPlp2oOdTFTHeOvOa4T0EDvjex6YuLZf5xNxhaB+nG+1fmfBCaopGsea69sF7hXu
      1nL39C38opELEGqG0CLObkKB7qfgq196uTnDtR0lPwLX3vUqtASXn6pwvXlglEPRJHv37Cbk
      39yS+zBGykO8cecVDjcdra24axyULxQ6Qt5ucHnyIn4tQEeok6AWml7tw0aE5zu+z4cD7+DX
      AnSHe6bf70qXr9V+su0x/qLjj/Atcp7oCHWR8C9vF6g6Vb4c+Zxd8X0EFlJt7Kq3evd8Z2nx
      uZFWz5vz7gkvNaFThUuveqlLmvct/v5NwJzlr1LKceH8BYYnsvi2QpX1eRivjPH67ZfZHd/H
      0fSTaz75Z+PXAhxOHWV3fC9hPTJH1REIdsb2cLz5W7zd/xojZS/fvURyZfIiZ+9+xvO3Q0SU
      +SwzEgojMH4VXBtN0TiefpqLmXPkzfw8r7//3ZLzE6epOlWOpI8vLDDZu2BXHm7ZmY1QYdsz
      XlaH8oRnGTKL3p3BFnGBmSMAhj/EvgMH6UgnMdfRL2W1mKxmeP32y2yL9PF0y7Ooa3RrWy+K
      UDiUOsqe+D7evPN7JqsZBov3+Pje+zyffp605fduW2fj2l7k1Mn/Dl//k1fis5KjffoscHrR
      3J1j5VG+Gv2S59q+t3C9Xik9N4XUbu+2d6nEuzx16eKrnlVo758s7/0bzBwBUFQVIVwsy8TZ
      QoWbJZJMdYI37rxMc7CVZ1ufXzOXhZWiCpWnWp6lJdjGK7f+gzfuvMzB1BF2Nu1DSDE3ML6S
      9coDXXsX9vwEnv4/vUiqr/4H2uQdjqaOc2HiLNnq5ILtWa7FZ0Mfsj26k+5Iz8Idq+a8DA3t
      T7Ase72ie7vAwEkvUH2T3fQuxgPOcLevX+H8petkC6U1adBdRr75xZ/lMlYZ5ZN77/Pv1/+Z
      mJHghfbvo29wkMVi6IrO8+3fJ2bE6Qh1cSz9FIpmANLLpSpdGLsCJ/8/71Lq+D941U8irXD4
      b7x0IKd/TcfoLZqNOG/1v0qmOvFAOxLJ5cx5JqsZnmr59sN9+UeveO7JS0lOdT9NO+Db/xds
      +/aGhjfWwwNWIEPV0YSGpq2uDielS3/xDieGP+do+il6on11X+dbrsm94gBnx79mqHSP1mAH
      L3b9hLZQ58riVNcRvxrgj7f9FIFAUzTkVPIwq+pVOe8/AX0vPBg1pfmg9zmId6Fd/D0/0DQ+
      jYX4Xzf+lR90vkRXZNv0uE5WM3wx/BnPt3//4YmrHAvunfKyLNezeKg6pNYxpmAVeUBPcF2L
      oeF75AslZHNiVS6vLdfi9NhXfDX6Ja3BNt7uf5UX2n/IzvieJUUYSelScSqMV8a4U7jFjew1
      TLfKztgenml9joSvaXUildaZOcI6VTG+mPFs64f+yltZ57tEEornmHbs7wlefo3vDd3idEsX
      b9z+Hc+0Pc++5CGQks+HPqIj1ElfbOfDO1IYhvLkpojQWm/uEwCJ5Sp0tiU5dfo0O7rb8Gkr
      m1g5M8tH995lojLOj7t/Rnu4k2vZy3w48C4VpzJvJjLw1JuJ6jgDhX5u528yVhlBIGgOtPBE
      +hg9NV+W1fbK3DCm4oJzw7Vg8e7Fb1D9UTjwc7T+Lzly4wMSqQ7eH/yI8co4SX8TQ6VBft73
      nx6euEq63uE32eO5ODxmzBUAIQgFDMYzBb79xLfR1fonvytd+gu3+WDgbdKBZv6876+n3Qt2
      xffiU/280/86FafMsfTT04dWy7UYLN7lzPjXDBTvkvAl6Yn0cbz5aZK+Jnyqf1WczzYdQgFN
      R070QyS59BtCLEAwAAAgAElEQVRU1TuEKpEW+s7/jqg/wNtc4oSV4SfbfkbM95BUJ2bRM13e
      +waO/O2W099Xg7kCICVl0yIQ9BONx1BWMM+u567ywd23ON78LQ40zfU7Fwh6In38eNvPePPO
      7ynbZY6kj3O3cIez419TskvsiO3mWy3PkfAn60+9t4UQQiA0FcZvQfvTy5uMQvHUpWN/T+ri
      y/wsM8Zwz3N0xRbQy10LRi7D9Xe9yipH/tZLUPUYMkcACtkJxnMVnnnuuw+NBVgKTb4UP+39
      S5ofEsHUHurkT3t/zhu3X+bCxBlivjgHkk+wPeblp39k1JuloAhQFWT2nlcVsR5CTXD4PxG8
      8T69Vz6Ge5e96Kt4t+fW7It4XprX34P8IPQ+XysvtIXKyq4yc92hizkKpRK37/TT292JsQJL
      UNK/ND+QlD/Nn/X9FZPVDM2BltULMtlqCAXFUFCqrCxeVg/Azhe9iZ0f9FKQ3PgIrAKgeO4K
      rQe9e4VAnM3oo7+ezBGAZHMnzz8XxJUCYx3TmYT1SP355R8VhEAJaQglCf4VjoWiertItN0r
      LOfaUC1CacyL4422P5b6/nw8EA/Q0lLHRUiDVUENawh/69KDzZeE8G5rA/Hait9gNpvTX+Ax
      RTFMpNb0aFq5NimNfXCz4NpQHMU19U1RLvVxoSEAmwW7ipy4h5Pbel64W5m6VSDLrOJKgaIo
      COS6FMJ7pKlkcSczuKGNL5f6OFGfALgOF745wYVr/ajhGDFRYduBZ9nWunVzAW04hRGk8CEt
      1/PNb5wD1oX6BEAImtIpJk+epDI+xrCrkNpWJONz8G/FSu2bgfwgItGJzOPVCtvCWfW2EnWr
      QI4reOqZFzA0DVcqdHe3EPCrmyotypZBul4KwqZtMFlAuu5jfj21ftS5Ayhs276b+2N/KpWV
      pVR/bLGrUJ5EpPaAe37DC2Y/TjT22c1ANQ+ujYg0I52Nrxj/ONEQgM1AaczLwhaMeZN/AyvG
      P240BGAzkLsH4TToPhBiQ6pFPq40BGCjkS7kBiHa4d2lKMqG1At+XGkIwEbjWF4VlkgrKCpC
      bEy94MeVhgBsNGbBswIFk16hvA2qF/y40vAG3WhKE15ElhFGoIDSOAOsJ40dYKPJD9VWf93L
      DKFqYDX8gerBcSVl01mWM21DADYUCbmBuRFahoE0GwKwXFxXcur6BL/+5A7nbk9StZZ2l9JQ
      gTYSx4sBoPWQ9+/pesGPnwBICRXLwXZcHFdiOxLTdjFtl0TYIBZcOE2MBK4NFbg0kOeJ3jiX
      BvJcHSzw5I4k7ckA6kPSmzQEYCOxSl7uz9CsIHjDgMdMAFxXcnEgx6nrmTlOsJoicCUgJd8/
      3EprfH5Hy5HJCn+4PMaze9P0tYbZ0xHl4t0cH5wboT0Z4GhfgnjImNfBtiEAG0l50gtg99WC
      4IVYtGD2o4bjSL65NcmF/izP7G4iHfWjqQJVFShCICWcuzPJ298M8b0DzXSkgnMcBfNlmw/O
      jbC/K0ZvSwgB+A2VJ/oS9LaEOHU9w8snBnhmd4qdbZEHhKAhABtJYQj88Tl5eYSuPzYqkGW7
      nLg2wa2RIj96YuEV/khvAkNTeO/sMM/tb6YnHUIIMG2XTy6OkIwYHOqNo8ya3QKIhwy+e6CZ
      a0MFPr88hqEpbGsOzRGghgBsFK4Do5e9AhOzK8kYPmSx+MgHxVRMh08vjTGRr/LikVaaIgvn
      g1IUwf7uGIam8tH5EazdKfpawpy6nqFUdXjpaPOCaTwVRbCzLYLjSj66MMqPdIW2RGD69w0B
      WAqu7ZUOMotQykBpFPK1JLZdT0KgafmTdeKG5wKx+4/n/twwkJaJd7R7NAWgWLH58PwIliN5
      8Ugb0YcccKdQhGBXewRdFXx8cZQbQwVGc1X++GgbId/Dp7EQsLsjQsV0eO/sMC8eaSNVE7iG
      ADwM1/YKR9z8yHNZlq6XeS0Q98oCFUbhy/8XOo5A51MQiLGkSWtXvKov3d+aewAGhG4gLeuR
      nf8TBZP3zgwT9mv86HAzwUUm72yEgN6WMLqm8MnFUb6zN0UqurRMgooQHOqJU7Ec3j0zzEtH
      2ogF9cdZAB42w6RX+vPae17V9O5vecln/REvaZWie9+Ga0PmNtz4AO6d9l7XcQSMh9XIkt5r
      HdMrfnFfH4RheBdhi9Vp3mJICf3jJT6+MEJ3KsRTO5P49OUnUhACulJB/vKZLrRlZi9XFcHx
      7UnKtZ3gjw63PoYC4FgwdhnGrnmJY6PtEEh4E1sIb3UeOAU3P/Zy5j/5X7yks/MJi6JB03Yv
      +ez4NbjxIfR/6RWKS+2aXy0qZ+HWx7DrJU+Fuh/DQJoWj1JyIMeVXOjPcupGhmPbk+ztjD7U
      Nr8U9DrrVuiawrN7Urx3doT3z408RgIgXa96+fX3vACURI9XFuj6e95EDqch0uYJhmPCvp9C
      aufS6uWqulcbN9nn1cw99xvY9zOvVu5sIZAu3PrUK0Sd3j3vo4RugON4ccGPQKaZiuXw5dUJ
      +keLfP9gC51NwQ0/2/t0lRf2p3nnzHCdAiBdRoeHKJk2hj+IIRx8oTgrLCazNkjpuRvf/Miz
      urQ/AQf+wquu4rpgFT11Z7LfU3dSu6D76flX58XQfF6hOD0IF172VKTWgzNWntwADJ2Fo3+3
      cAEMVfX67LiwNcqdLUi+bPP+uWFcV/LHx9pJhjdP8cKgT+OHh+pUgaSU5HMTfPzJx+ScAHHF
      ZP8zL9HXvoF5gWQtlNAxvRtWs+hdNGXvwvA5iG+D438P4daZVVlRwRf1/iT7QD5f03RWsEQJ
      BdqPeDvHpVc9lavjqNe3a+9B26GH5v8XmgZIcLZ2WKSUcOrGBIoQ/OhIKwFj821nQZ9arwok
      GR8ZJtbciTM6TMU28GsKtm2jrkuGOOlNKLO2eufueat3adybcEhvchth76LpwM+9Cb5Y9fLV
      2puF8FZ+Vffq/DoWGEGvr/v/7OGpyTUNKSXScba0EShbsrgzWuLFTTr5p6g7LUr39t20oxH0
      +wBBMBRGuvba5gVybcj2ezWtcvegWvAmWSjlHWg7jnoHWj0Iut9bhRWVDbEnCuFVXVT+Es7+
      u1eIev+fL1qITmhaTQXaujuAlHB5IEdT1PfQC67NQF0CIIRCS1vnAz+vVNYokMOuwsR1uP25
      t4o2bYee5yDS4k0o1dikBR8EpHbAE3/jnT/aDi3+Fl1HSTSxogJtG0ypanNtMM/z+5tXbO1Z
      azavFci1wSx5FdP7vwCr4q3wB/7CU2s22pSwZIRncUpsYyk7kTB8BF76E8QWTjF5fbhA0KfR
      mtj8n2FzCIDreCpCOQOFEU+9KYx4h1gj5FllWvbVLDNbZeLfzxL7LQQiGFzbrqwhVcvlYn+O
      o32JFZXZXS82XgAc07OO3D3pTfBAzLPHT7kJhFKrXDKowVpyZ7QIQFd6awjxxgqAVYbLr3s2
      +KN/56UG2bT6fIPFsByXc3ey7OuK4q/DzWEj2DgBMAtw/nee6nP0b1dWGrTBpmAoU6FUtelr
      fZgv1OZiYwSgMglnf+Ot9E/850VNgw02P44rOXt7kp3tkWV5eG40669rFEfh63/2bPWH/qox
      +R8RxnJVxvNVdrdHt5SZYn1F1a7AmX/1Drl7ftw43D4iuBIu9GfpToeWFNyymVjfHaCS9W5v
      t3+/MfkfEaSEG0N5bo8W2dcV2zrXMzXWdwcoZ7yIqno8LRtsOlxXcvFujpPXJ3h2T3o6zHAr
      sb4CUBiBYNPiTmkNNj22Izl9K8OF/hzfO9BCV2rj/fzrYR0FQHqB5OHmhp1/i2PZLl9eHef2
      aIk/eqKVlgXSmWwF1k8AXMezADXPHwnVYGswnc6kYPLS0bZNFeRSD+snAHbVC1QJJNetyQar
      i5TwxdVxskWLl460EglsLYvPfKyfLlIteFFbDbv/lqVQsbkzWuLZvalHYvLDegpAecKzADXM
      n1uWO6NFIgFt0we5LIf1E4DCiKf+qFvnmrzBDLYruTqYZ2dbBE3dguaeBVg/AcgPed6eW+qi
      vMEUE/kqhbJN9xZxc14q6yMAru0FrIeb16W5BqvP9aECrQk/Yf+jtYPX/WlG7l7n9uA4tjAI
      iSrJrt2kogvo91YtsWywqd7mGmwgFdPh1kiRZ/ekEVvxtush1J0WJZ8Z5vz56+RLeTTH5ckX
      mtFlEMOYxy5s5r2/pwpBNNhSDGbKKEJs6QuvhahTAASplk56exzKlRyWrdLcFCEY9OHMl85j
      ygeoYQHacrgSrtzL09sSwqc/ejf4datA0XQXzz3vpUaR0itEUK1Wcd15qvNN+wA9Wvrj40C+
      bDGSrXJ8x6N5gVn3jBRCLE0flBIKw14On0dMf3wcuD1SJBbUiYe2tsvDQqz9niYdKDYsQFsR
      23G5NlRgV3tk0ye4qpe1FwC70vAB2qKM5U3KVZuu1KNl+5/N2gtANe+pQQ0L0JZCAtcG87Qn
      A1sqyH25rL0AlGoWID2w+GsbbBoqVYfbo0V2tj9YW/dRYu0FoDDciALbgtwZK6EpCs2xR9t0
      vcYCMMsC1PAB2jJYjsuFfi/Dm7Epy/6sHmv76Ro+QFuSwUyFkunQ17J1MrzVy9oKgFX1UpwH
      Gj5AWwXHlZy7nWVnW5jgI+b4Nh9rKwDVhg/QVmM872V427XFMrzVy9oKQHncq42lPToRRI8y
      UsL5Ozm6UkFiWyzDW72srQA0osC2FNmSyd3xIvu6oo+06XM2aygAtTxAjSiwLYEELg/kSUX9
      WzLDW72snQA4UxagljVrosHqUarYXB/Kc7A7hvKI+v3Mx9oJwJQPUDCxZk00WD22UmG71WTt
      BKCaB0TDArQFmCpst787hrYFCtutJmt3Oi1NWYAerxVlKyFr/5sqbNedevyydq+dABRGvAqP
      4vH0AZqaXBKJlN6/FQHKMs0rUoIrJY7r/TEtl6rtULVcSlWbQsXGceVcq02tPVXxgpZmt+tI
      ieNITNud/tM/VuLJHclHMuRxMeoTANfhmxN/4N74JKFEC1GlSmrbPtLxWR6f0XaIdz9WUWBS
      woW7WW6PFHGlxHWp/S1xJPg0BV0VGLqKT1fwaQqaqqAoAoE3VEIIpJSUTYdi1aFUsanaLqbl
      YDneRFeEQFUFgdpzdFV5wNAmpQQErpQzQlR7v09XMTSFgKESC+p0p4P0Nj/6bg/zUZcASKfK
      vdEMt25epMRNgsBz8d65AtC8Z5W6uIUQEAvodDYFUVWBKgSqIlAUMS0Ipu1SsVyqlkO2ZGG7
      EvCER0qJN23Bb6iE/BrpqI+AoRIwvMluaCq6JtAUBUUBgVjYyizv/6f0XipEwzBdoy4BEJqP
      1qYIpruXgF/HdVSSUT+u607/mUEu+JxHkfakn/bkw889cko/WgILx13LaRVrOUMsax14vL6V
      halPBRIqTzz9HIeZWXxM02RiYgLLsh5IjVKtVtE0DVWdOQ9IKalUKgQCcwNlLMsCQNfnXsWX
      y2X8fv+cCeE4DrZt4/PNvbgxTRNVVee0B1AqlQgG54b32baN67oP5DOqVCoYhoGizOjFruti
      miZ+/9wJbpomiqKgaXOHs1wuP/D5FurzWo6RZVnz9nk9x8iyLIQQ847RUr/XtRijug/Bsz80
      gN/vJ51OY1kWPkOnaloIRcXv81EulzAMnWI+j6L7UDSNgKFTLBYJBnyMjY0jFY10qgm71nFF
      EVTKFVB1IqEA+XyegN9HxTQpl8pE4wlU4X2RuqZSKBSwpUJTMk61UkFTFcqVKsFQGE1VkFJi
      GAbhUJCJiQkcKUg2NSEd78tVhWRkdIxQLEksEqJYKOAzNO7evk22VKGtq4dUIky5XCYYCFCt
      VkEo+Pw+zGoVRQgmRoeoShXd56cl3YSvUCDg07hy5SpVV7B9x04CuoplWUjHZHBoBFf1sb2n
      m2qljK4KRiYmKeezRNPtpOMRCoUChiYYGByiYjr09Pah4oJ0GRsfxR9KkIiFUYSgUCjgNzRu
      3bxF0bTp2tZLPOijWq2i4nDlylWMSBM7eruxzCqaqjAyOMBoJkuypZOu1pQ3RuEQ1aqJBHw+
      H45t47oO5fwk43mTcDhAMpnCXynhM3Ru37xBtlSlu3c7TZEg5bL3We4NDlE2JTt29OLaFgqS
      TC5LIZfDF07S0ZKiUMjjNzQGBocolsp0buslZmhYlkWpMIkl/DQ3xVEVhVKphK6rDN7tJ5Mv
      0dzeTWsq5n1un8b1K1cwhZ/du7aD6yClpJAd5+7gCOF4mr5tHZSKRYKBAJZl4rgSFeC//tf/
      +gMhxHP1CsMUqqqi6zqDNy/z8RenqNou6VQKv89A2lU+/+IkpWKWSwMT7Oxux+fzMTZ4h0+/
      PMVEZoJgPE0iEkJTVS6f/pLfvvwak5bGjm0d+P0+yoVx3v3oUyYzGWw1QEsyhq7rDNy6wsef
      /YHh8Uma2zqJBP0orsl7n35GPpdHqgbRcBCfz8fk+BBvvfMetweHiSZbaIqF0TSV65fPcfLk
      1wxNFujq6iIU8OGaJU5+fZZquUjB1ehuS2MYBtmxAd794FPyFZOmphRBvw9VgfPnL6IocObq
      bXZs6yYY8FPKZzh3+RaqcJB6kHTC6/PkyAAffPAhmarKru3d+H0GOCYff/oJFdOm4iq0Nzfh
      8/nITozw6aefMpEvk2pp98ZIEZy7eJ7JTJZssUpTIo7f58Ms5/nks88ZHJsgEEvSlkpgGAZD
      A7c4f+ka49ksrR1dREMBFFy++uoUpVKJ0UKVvq52/H4/1cIkb7/1DuO5ItFEE5FgAE3TuHH1
      EmVLcvnqFdo7e4iGAkirwqkzF9A0QdFW6GhuwjAMyvkJPvrgfW4M5ti3dxcBn4GqCL468RmD
      43mqjkt7azMBv49qKcfHH3/E8NgkkUQzzckouq5z49pF7g1PMJHNkUwmCfh9CNfi888+58bA
      IMIXoqst7Y3R+DBfnz7PyMQEieY2klFv4bt49jSjmTwjmUm6u7d536td5f133uLO8MTamEFb
      t+3kR229GLo2fbGiaD72799HMBQgVahOvzaWbOY733kOVVoEwrVtTAh2HzpOpKmNQDQ1nZIj
      EEpweO9eVMNPNB6ffkZzayc7+4r4Y2kifm/LE6rB0SPHiPh1LHdmtwpF4hw+dAgHlVR8yvIh
      aG5tZ5/wE47FMWrpvzUjQFd7M+O5CtvaZoJ6/KEou3btJBSNoWu17VhR6exoI1+xOLBr+3QK
      cX8wwrbONhCCVDw6049YkqPHn0INRKdNlIruZ9/OnUyWTFpSM1k0wtEYvT29uFqQWCgw3V5v
      VzeFkokvNFOgTvcH2bl9O4WqQ0tyZoxi8SStbW2EY0lCvtoYCQVduOQsCBoz6objugTCUeKx
      KIVyhaaodz+gqwpj+SLx+Ew5VKGo6Arohg9XzpwsLNumqbWblkCAfKlC0AiDUIgEgjiKwHFd
      pl6uKAq67iMYiuLImfNj0O9noljBsb0AHZ+ueruuodPWHJk2NVOzjNlS0NySwpk+gwp0VXDt
      6lX69h9Bq80jV7q4EqqV8trcBJvlIp++/yavvfcJVduZHqigX+PihYvYzsxAGT4/1fw4V272
      Y9szZwfHtshkJrg3PIxTs5QomkY07Ofu3X5KFXPmGf4AoVCQfD6H5dQ+vKIR9alcuniR4fHs
      9KFP9/lJRIMUCgUs055+RjgSBbvCRCZbMyF6lEpFwrE4Pn1mrbDNCiOjY5imNee15WKWyVwR
      v8/PtJ1FSsZGh7FRUGepjeXCJGNZT82aeoYACrlJJAr6LF1Z2halqkU8HmXGTUdglvKMjGdq
      7xTTzygWC4Qi0RnhBBy7SsW0Cfj9cyzT0VQ7h/fvRrozYyGlpKW9G1VWqFSt6Z/r/iDbOttx
      bWfOfUa8qZV0PDxnPF1H0tbVQ1CTs75XSSCcYNf2bixz5vuTQFffHno7UtjWzDMMI0BHexvV
      cmlmnAUkWzrZu7MHx555LUJl194DRAMarjNLiKJJfvTiS3SkYzMHfylJtW/j4O6+1VWBpihk
      x/n6q68xlQB7dm9HVxWkY3HumxO8+dYHJLq2s60tBUApl+GDd97k60v9HDh4kHDAACnpv3GJ
      V199nYoWZd/OHk/CzQonPv+Y9z4+Qe+e/TQnPDeLydFB3nrjNW6MFDh0YK+3UrgOl89/zeuv
      v0Mg3cX2zlaEgGopxyfvv8Pn31xh34GDxEJ+QDJ45zqvvfoaGctg/54daIpAKCpNqTQBvw/D
      58NneCun4Q+STCYwdJ2AP1Cb2IJYvIlIKIhh6Ph9Ps9mr+mkU54q4/P5pydlIBQlEYui6waB
      QMCbUEIh2ZQiEPBjGIanFgGa4SfVlPSe6/dP76qRWIJoJIRhGNMTWygaqXS61p4Poya4vmCY
      ZE39CgQCnsObUEgmYrgotKTTBAN+BGD4goQDBj5/mFQyUeuzIBaLI4BksoloOIQiBIqqk4yH
      kYpOS7ppus+BcASfrhKKxEjGo16fhUIiHkdKaE6lCQcDCAG64Sca8qP5AqSTiek+h6MxVAUS
      iSbikbB3X6JoJONTffbUTwB/IEjQrxEIRmlKxL0+C0EsHkdTFUKhCOGgd/hVNYNkLAKKtjY7
      QCQWx2f4cKwqU8IoVJ32jnYSoTiOM7OqhKIxUskUsVAIc0r6hSDd0kZTrAkVd/oZmhGgvb2V
      eCCGOesZsWQTiViKsE/DtKd2AJXW9nYS4QSua01Lvz8YoTmVJh4MY1pTzxCkmltJxlL4FDm9
      40jH4uqFb/jHf/wF1wZGp9srF7J89M5r/Pp3b1CcWiGlZLD/Br/+51/y+ekrTBkabbPC6a8+
      4x9/9S8MZ/LTz8hNjPD6y7/h9+9+ilXrs3Qdbl69wK9+8Qsu3Lw3/dpqucDnH73FP/3by+RK
      U+qjZGyon//49T/zwZdncGorpGObXDx9gn/8xa/oH56cfkYxO867r/+O/3jtPcpTK7V0uXvr
      Kv/yq19w+vLtaXOqVS1z6ouP+OX//A8y+fL0MzLjQ7zy21/zzqdfzRojm2uXzvDLX/6Sm/fG
      p19bKeb45N3X+beX36RUnWpPMjxwi3/9l1/xxdmrs8aoytlTn/OLX/2akcni9DPyk2O8+cpv
      ePXdzzCdmTG6df0Cv/rlL7h4a3DWGBX54uN3+ed/f4V8eWaMxocG+O2//jMfnThLrcu4tsml
      s1/xi1/909oIgFAU/D6DQCDIbM/aQCCEP+QnGp7tc6IQi0XxBwIE/DNmNt3nJxTyE4lEmO2f
      FQ5F8If8RGaZvYSqEY+FCATD3upfw+8PEgj6iYVn5bYRgmgsij/on149AFTdIBoJEIpEZxzC
      hHdTqzoapm3Neq2Ga0kMoWBate1dgK5rCEfFsa0Z/VZVUSRoUp8lcKDpOq4tUFwHq6azemZC
      FcVR57anaUgbDEXFnFYzhKcmOQrStqe/XEXxbpZVR5/zDE3XcS3QhJxRExHouoqwVSx7ZpFQ
      VBVcia5oVGf1Wdd1pK0gXGdaAKbGSLE1THtGrdE0DceS6Io6a2EDTdfA9sbInTVGAtDQqVrm
      rPY0XEug4E6rzUJ4n1uxtTl9VjUN1/baq84aI03XkI6KtO3pPgtFRVVAdfS1EYBCNkM2X8C0
      7Rn7rnQZHx8ln82TL5amX2tbVYZHRikUClTNmcHOZzNMTObI5/PTAyVdh5HREQq5AsXKzEHa
      LBcZHp2gWMjPfLlSkpkYJ5fLkysUplc3xzIZHh6hkC9SmaWHlvJZRieyFPI5HGdmoOKJBEJI
      9Fm2Z8MXJB4N4UqJOi2dgkg0jmEIFEWdviBRVJ1EMo6ULtosndwfDBMJ+aF2W1xrkHg8gaKA
      Nqs9TfeRiEVwpYs66xmhSAy/T0MoyvR9jFA0EokE4Mx5hs8fIhYJIiUzZxEhiMUS6JpArU1C
      8BaDRCKGdOf2ORiKEAoYIBRErc9CUWpj5KLNivzTfQHisRCu687qhyASjeEzFBRFnV6UFFUn
      mUggpTPnnsAfCBMJ+4EHx0hV5Jw+a7qPZDzqtTdnjKIEa2M0dW4RilobI3dtrECO65Jqaaaq
      zewAUrrYDsTSUUKzLklsy8QfDhEM2dM6NkhMyyKWiBIIBZmqyeY6NlJoRJtCBGZdylRNk2g8
      gmUaGNMfXmI5DtGmKKFAYHpCOraFHggSivrxz7J8mKZFLBFBBENzisCZZhXB3BVZSody1UJV
      BNasg7ttm0hXmdkBhNePaqWKKmathHjCXDVdhOHOMQpYVhUhlTntgaRcMVEVFWvWMxzbwnG8
      cXFnHoFZraAwd9eSrkOlaqMKDXvWIdGyTKRUpldTr8uSSrmKqszts+PYmJZEuA7urAZNs4qQ
      c8cI6VKpWGiKgjXrsGpbFq4rcJz7xqhaQRXa9AUWgOs6VKsuQpdzxsi0vPYsa1afkZQrVVT1
      /jGysR3QHBtHSvTaq6tmFQV1bXaAUiFHoeLQ1to8bXrCdRkcHKKlq4+O5hkTX7VcYDxXYe/e
      vYSmVCAJ46PD6JEUO3u6piXXtU2Ghsfo3bGbVGzGeauYy1CwVfbu2TmTyEm6DA8NkWzrpru9
      eXqlsKplRiby7N6zl0hwSgAkmfERpC/K7h090yqXa5uMZ3LoQY2QPzCrvRy2dFF1ncCU0EqX
      8fEJhKESDIWm+2xVSmSLFfSANkflyk5OIFXQ/YHpPkvXZmxiEi2oEQ7M3MaWi3kqjo1maDNq
      opRMZMYRukIgGJrus2NVmMgV0UPanIUmn5vEEaD6fDNqouswNjGB6tcIB2dMqdVykULVRPOp
      c/ucmQBNYAQC02ri9BiFdMKzxyifxZQuqqFPH4yRLhMTEyiGSjA4e4zKTBbK6AGV4Kw+56bH
      yD93jMYnUWtjNPW9lot5yvaDY5TJjIOuEAgGp+eiY1XIZAvoIW16B5Dlcnme0i71ITQfHW3N
      SOlSKlfQ1f+/TTPZURsIAuhrbFYHM2AbcDfL//9NDpEyo+QUM0OCkkMMptt2u52DEUykuZZK
      tTypSkcJj8YAAAFhSURBVKpFgGtIpOLl6zd+no7MP3WJOnzSZM73Q8ZutycKO4jBdMZInMhe
      j6hVhCfAWYdSKZ+/ZKTqD+Pb+643GBOHY7IsY7/dEAx9aB2zSHL6/czx9IvlUzd32Fag1gnP
      bwe2uz3eotskjYKQ6eCNH4dXtumSvidwtsLokpWS9EV3RgcoihzX66Nkgq0rtHZAy9UYwkVM
      FPYxRiPoCqCsLHIjwTV3G5c8xx8FLFYJVVnSWkHrLEYb4nXKxBN33WvRXbmVTGnq+iZvyQvD
      ZLYgiaaUxlALaCqNMRXpRtHDPfydc0R/iIyX1FWJbm3XpbXhKVkyH/qYm255LaisQ20kbWPv
      NvK/V4bBlFUSURlN0xO0zY2RlPi99sHocsEJHyVjmneMCmOYLmLi2eADRgrxjtH5nOONApJV
      Ql0ZaHrgLEZr4nVK4P/PqHYCpVKcrR8xXwyTcE4SzR6MaoM2FalS/AM+7V0zzj4ZRwAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Fill Rate YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CTR YoY' width='192'>
      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
      wfEfoIoq6xLrrpxBXArbgt7dc3hLpGVyZPsuYouWoolp9u45jCGYGCWBZStWsrS9DbCxLGtO
      RuimzsGRg/zk9E/wyl4+v/rzLI4uJm2keeXsK3z14Fe5veZ2Pli1jvDub3IyN8g3w0GWVC3j
      44s/Pvcc+hJc6MB+dvlnWV+7npJVYnX16hs2yXLdhBrg3t+9uNwyYNv/cYaCH/hDUOY+jGmY
      Fgd7k9zTUXVTF53NJ6IgsqFuA7qp851j30EWZVZVr5p7imkZcPIV2P8dZ3fLl7/85fuAhy99
      tUB2fAJBCeBTYTKp09reQG/vOXoGRmlpacU0iqRSKTRNu+y+YMu26En38P3j32db/zYebXmU
      Tyz5xHSK4JW9LIsvY1mkk+6j/0Bg+1fZb0zww0iM+zs+xMc6P4ZPmZ814qIgUuOroc5fNy/L
      CS7FRE7Hth1POO8IEsTanMO2VD9UdTDXoeCRdJGXDg/wsXUNNzQC3GgEQaAp1IQsyvzjiX+k
      NdxKlbdqdhEYeTj093D0J3D3F2ePAIIgkGhqxLAlJkYHsRSReHUdt99xJ+MTKVRZxu/xIgjC
      JbdE2rbNSH6EV8+9yq7BXaxNrOVLS79Eta/6ImNFI09b9w5aJybou+2z/NRK8onmh9hQv+Hd
      66UvgW3Di4cGKJYsPntXK7I0f57WtqcWzvkTCOt+xYkCtavmvIvs5FCasE8lMcspC7cCkiDx
      UNNDGKbBM4ee4QtrvkBntPPyHygkYdfXnXOeHvqPUL3sxnaCU8UUm/s2s7FnIw3BBj7Y/kHa
      I+2XaMy2c97Ozr+F7LBzulrNSkq2hSRK87b25WZydizLf3vpLT53XxvrW2PX9B26adE3kWci
      q5PMG0zkdJI5g/GsTkPEyy+siBPa/RfOLPh9v3/lA74Ay4a/fO0k1UEPn76z+ZpsuhjbOXzA
      njo1TxCm/r6KyGfbUJwEo+AcNiarXM3kpmEZvHDmBbb1b+O31v0WraHWiy9K9cPWv3TSn3t/
      b9ph3JCJMN3U2TW4i5e6X8IjefjM8k+zItiK2rMTTr0Ossc5g0fxg+pzljYcedY5Ve2eP5k+
      N1N+Bw+Kul5aYn4+vLaeH+zsYVFVgHjg6jqEpmXz3P4+fnpkkHhAI+iRCWoyUb9KZyLA3nMT
      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
    </thumbnail>
    <thumbnail height='192' name='Ads per Page YoY' width='192'>
      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
      bHtP07V6Hg4eazdvprO7qxkueB7IEhu3baG7K9diu4sU0tiy/R46c806HM+DatVg4733kG4Z
      XJ7rUjNctty3dclGmGtbGJ7KPdvXEVabHe4YBp6WYMum9ahy09tZ9Tpqsp0NG/uXeDWjWiPR
      2c/aga4l4UK9XKFjcAN93bkl+xWVUo3+TVvobEs2wwXPo1LR2XDvNjLJlnob16VWd9ly3z0k
      oq222xiOzNbtG4i0JCUc08RVomzZeLntSjzHuk0DS0Ido1oj3t7L+rXdtERv1CtV2taspb93
      qe3VcpW+jVvoam+1HarlOuu23UMuHVtie7Vus3n7VhItA91zHOq2yNb7thANNceSa5rYUpSt
      mzYSUppjydZ1pGiW9ZsH/TQtTQF49Xr9A59wtXbzPc0Lri9upshs3Hpv48oa7UqYzfcstLs2
      9brvNZRoii3bUgvNJgvNRNPtbE37u4iWabA4f6c6e0n5WwuYRtMttvevZXHPUdebGzu96zY1
      /q7Xm+2Dm7ZeZrtjmWTbU7x94DRr+geIagsLbMsm25bg4PGTDAwOooi+aCzXI5MKc+rIeQbX
      DpBbELwjiiSjIieODrN2sI/44mykKIStMueHRhns70ZTRMBDCkeQSjNcuDBOX/dCyOe5qJkM
      pWOnGB3rp7MtgYgfpiXaMxzbtZ+JNb2kEyGEhu1pdu87wUDfGmIhaYntB46foH9gEFVKLdju
      kslEOHn0BGvXDtKW8gXvCALJmMLJI8OsG+xf2H8BT1GIqFWOD11k7UD3wj6AhxgKIVfmGB6+
      RF9PG8qi7ckUlaMnuDg6TVdbCr/ZIdqWYWbHXsb7e8km/XWAa5tk2jOc2nuU6b41xMP+8LQt
      m2x7kn1HTtE3MEhI9h/UaDoO2UyUY0dPMDg4gJjxRWMjkI4rnDgyzNq1/aQWBO9JEjGtxolz
      I6wd6Caiyvz/gr7Mge9K1skAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Page CTR YoY' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJztvXd8Xed55/k9/faKXohCgAUkRYmimtWjYku2
      LMV2xvbGLXHsZBJPkkk22Ul2J+Pd2cxsMjPJJ/EkcZzITiRlFLfIslViq5CS2HsFSbCADb1d
      3H5P3T8OCFyIpACSIEXqnu/ngw+A955773POeX/v87zPWw54eFQwAoDjOB8CHnh/TfHwuPbI
      U78fAP74Sj7IMAxyuRyCIFyxUR4e1wp57kPmh67r2LZNIBBYqI/08LjqLJgAAFRVxefzLeRH
      enhcVcT32wAPj/cTTwAeFY0nAI+KxhOAR0XjCcCjovEE4FHReALwqGg8AXhUNJ4APCoaTwAe
      Fc28pkJMToxSRCUkmvSeGcAfULBRiMdiVCXiV9tGD4+rxpwCsPQCG95eh9q8inZ/gZGJDINH
      ByllC7QvWcmdt96MbRrk83lvHpDHDcecIZBlWSiahlEsYJsChUyBNavW0thYR+/J46TzRURR
      9KZBe9yQnFsQ84e8x3oAyzIxDAvBsckVioTDIUzLpFQqEQ5HkUSBXC6H4ziEQqFrZryHx5Uy
      rz6AJMlIknuo5vcDoCgKfp//6lnm4XEN8LJAHhWNJwCPisYTgEdF4wnAo6LxBOBR0XgC8Kho
      PAF4VDSeADwqGk8AHhWNJwCPisYTgEdF4wnAo2KxHccTgEflcnQou7Cb43q8C8cG2wDLBLMI
      ehaMIuCcf6wagkgDCF6bdC3IFE2e2XzKE8BVwcjBgR/ByCEoZd3/LR0QQVJAVmcfb5lg5OGx
      P4Fw/fticiVh2Q4v7+9HEOazJNLU6TlyiHhNCxHNoufEaQJBP4gq8XiM6kTiWth842CbsO97
      cGoTLPsoBJLgj4MWBsUPSgDEd112S4fX/gj6dsKyj70/dlcQhwbTrDs8wr9/ZMl8PIBAKTdJ
      z/FTNIct9h3soao6yNDgOO1LV3LXrVFvTfA5HAdOvAXH3oSf+7+geun83if7oPU+OPE2dD4K
      kjr3ezwui8mCwbObT/HoilqW1IbmsybYoGiZmHYJS1IJhjUWtS6luamOkydPkM6XEEURUbyB
      YlfbcCvqjm/DyGEwSwvzuSOHYOd34LYvQ9WSS3tv822Q6YfJswtji8d5WLbDj/f041MkPryi
      DlEQ5vYAiupj2bLVyGoAWXSI1dQTCUdYvKiZUkknHPIjiQI+nw/HuUDn7npDz8G+78LxdRBv
      hRPrIVwHHQ9D463gT8DlLPDPDsGmb0Dnh6H1nkv/jHA9xFvgzFZItF/693vMyf6+STYcG+X3
      PryUkOZW/TkFIAgisXhy+n+ff+oZYDfimuDsEGz5G8iPwUP/0a1ouRE4vRkO/QT2Pg9Nt7nh
      SLwF1OD8sjJ6DrZ+EyKNsOqT58f480GUoe0B6H4Rup5y+wseC8Z4Tue5Lad4fFU97dXB6fLK
      yAI5Dgwfgs3fgOgieOg/QbDKfS1cDys+AUs+AiNH4Ngb8M5/B1GB2i5ouh2ql7gd2QtV7HOd
      3uwIPPyf3E7u5VK/GnY/C+MnoHbF5X9OGQ4O6VIaSZQIKZW5Y4dpO7ywu4+IX+GRrlrEMu/8
      wReAbbphzs5/hKUfcSv7hVpXJQANt7iVsJiCseNwZhvseRb0PMQWQbQZ1ADIftc7KAFI98Hx
      qU5vsPrKbA0koaYLTm5wf1/hXku6pbN1cCs/Ovoj/LKfpzqf4qbqm1DFC3eybcdmOD/M3pG9
      NIWb6Ih1oEnaFdlwPbDv7CTbe8f5Px5bRkCVZr32wRaAbcKhH8OBF+D2r0DL3SBK7/0eQXT7
      AU0JaFwLZsHtmA7shcwApFPuYJaRB6MAOHDHr116p/dCiBK03Q87vw36Z0GLXNbHODj0Z/v5
      Yc8POZk+ycfaP4Zu6zx/6Hk292/myY4naQo1IU6Fd7ZjM5QfYv2Z9Wwb2EbMFyN7Oktci/Nz
      i36OlVUrCSpBBG68zc/SRYPvbjvNY6vqaU0Gz3v9gysAx3Zb5v0/hPt+F+pvufQWVRDcVr5q
      ifvjOEyP4pb/LUqwUJWjZjnYlhuONd12yW8vmkU29G3gpRMvsSyxjN+/7fepDdYCcEv1Lbx0
      4iX+bMef8UDzAzzQ/AAFs8C6M+vYNrCNlkgLX139VRZHF5M1suwY3MFLJ17ipRMvcW/jvdxe
      dzsxX+yGEYLtwGsHhxBFgYeW11zw9s9rZ7j5cF3tDOc4bsd28zfgzl+HlsvIyrxfOA5s+Wt3
      6sQ9/37eUyMcHPoyfTx/+HmGC8N8qvNTrKldgyIqs44zbZMjE0f4l6P/wnhxHNuxaY208pHW
      j9AR7zjv+JyRY//oft48/SYZPcNv3/rb1AZqF+x0ryanxvL8l1cO8esPLGZ1c+yCx3wAPYAD
      g/tg81/BLV9ww54bpfKDa2vrPfDOn0Fhwu0XzIGDw5HxIzx94GmWxpfySyt/iSp/1QWPlUWZ
      FckVtEZaOTB6gJgWoz3Wfl7FP0dQCXJn/Z2srl7Nn+/8c7YPbudj7df/aLVu2nxvxxluWRRj
      RUP0osfdQKNX82T0GGz4c+h6EjofuTEnlyU73NBrcP+ch9qOze6h3Xxz7ze5r/E+vtD1hYtW
      /nKCSpA76u9gaWLpRSt/OX7Zz72N97JtYBtFsziv03i/cIDtJ8c5OZbj529pRJYu3gDegLXj
      PZg846YwW++FFU9dXj7+ekAJQMudbvbKNi96mOVYbOzbyD8c/Aee7HiSx9oeQ72K0yhWVK0g
      a2Q5lT511b5jIZjI6fxg51meurmRmvB7T8/5gAjAcTM1b/03qF4GN/9vN9R8GgcH3dZxznWq
      BQEWfQjGjkF2+ILvMWyDn578KT84+gM+3/V57m+6H/kqCz6mxViWWMbWwa3v+6j/WFZnKF2k
      ZNqzyi3H4eX9A8QCCvd0VM0Z/d6gTWQZtgV9O2Dr37qDR7d95YpGUYfzw4wURohrcUJqCL/s
      RxKk6ZTh1eDg6EF+ePSHdMQ6uLX2VloiLfhizQjBaneGaKRh+ljLscgZOV7pfYXtg9v56k1f
      pSvZdU0yM6IgcmfDnTx78FnSi9NEtYvH1leTibzBf331EKm8QXVYZUltmK6GKC2JAGO5Eu8c
      HeV3HlmCX50j5c2NLgA9BwdfgMMvw02fdge65MufkXo6c5q/3vPXmLaJ4zhIokRADlAdqKYh
      1MDa2rU0hZsWtLL1Z/t5pvsZVlatJG/meXr/0/hkHzfXrGZNsoXG3c+gGAVGwjXsLg1xIHOK
      wcIIPsnH127+Gq3R1muallwcXYwiKvRM9HBb3aWnaa8U23H41wOD+BSJP3h8MX0TBQ4OpPne
      jjPkSibZksmjXXV01swvG3mDCsCBdL/b6meH4cE/gNqVV9Th7c/2882932RV1SqeWPwEpm2S
      KqUYK4wxmBvkaOooG/s28pWbvsKS+JIFqXQZPcMz3c+wPLGczyz9DLIok9bT9Iz3sHVwK5sz
      h2kwBrlv73doR6U+e5aAL0JV+4M0LvkUkWgrCzb+ME+CSpBbam9hU/8m1tSuQRLmbmUXktNj
      edYfGebf/VwHi6tDLK4OcW9nNUXTYjRbYiyr01ETQhLnd11uvHGAspDHqerEWPMF0orGSGGE
      odwQuq3POlxAoNpfzdLEUvzyhUOjofwQf73nr2mNtPLZZZ/FdwEvYtgGr554lXVn1/HllV9m
      RXLFFT0WSrd0/tfh/0V/tp+v3fI1IursUV/LsUgVU0zqk8SVMDFBQpjsh+FuOLvNHYV+9I/B
      f+H89tWkN93LX+78S/7DHf/hmo4J6KbNN948RkCT+Mq97cjzrOTvxY3lASwd59BPGNjylxxs
      WEFvJMTZA39LVs+iiApRLXpeFsRxHIbzw8R9cZ5Y/ATLEstmpf1GC6N8a9+3aAg18Olln75g
      5QdQRIXH2x9HlVT+fv/f88UVX+Tm6psvSwS2Y/PW2bc4OHqQ3771t8+r/ACSIJH0J0n6y8YB
      /AmoWwlLH4PX/iMc/Rms+oVrPs7RGGykKlDF3uG9PNr66DX73r1nUxwbzvBHT6xYkMoPN5IA
      9CzOzn9kz86/5YWaZsLVLbQEa7ml4U7qg/XEfXF8su+CndVUKcVbZ97i2we+TXu0nY+1f4xF
      kUWkS2n+bv/fEdfi/OLyXyQgv/dMTlmUeaT1EVRJ5TsHvsPnuj7H2tq1l9xBPjh2kJdOvMSX
      V36ZxlDjJb0XcJdX3vQZd2p3273XfB2xKqncWX8nm/o3cX/z/ddkwlymaPL9HWd5fFU9dZGF
      W3k4pwAc22J0dBh/OIFPchibmETTFGwkfJpKwH/l89Yt20IU3uNJk7lR7C1/xY5jL/ODxk5+
      8Z4/YmVyJdJcE9umiGtxnlz8JHfU38HPTv6Mv9j1F6yqWsVwfhhN1vjCii/Me6qwJEjc33w/
      qqjyXPdz6JbOXQ13zTsW7s/282z3szze9jgrq1bO6z0XpHENJNqg+0dw+1fhGsfiN1XdxEvH
      X+Js5iyLY4vPe123dHJGjpgWu+IniDoOvHl4GEGAB5ZeeE7P5SIBfP3rX78XeOhCB1hGiX27
      tzOWtnHyoxzoOc7Bnm6OHj2OoPqprUpiWRbFovu4VFWdf/7ddmx6Jnp47tBzTOqTNIYa3zUq
      6cDEKZy3/j/2jR/mmapa/s1tv+N2vuZZ+c8hCAJhNcyq6lUsSyyje6wbRVL40oovXXI6TxRE
      msJNVPmr+O6R7zJaGCWmxQgpoYt6g5JV4ljqGM90P8Pi2GKeXPzknHn70WyJt3tGUSSRkCYj
      lrt9UYJQLex5DupuhsDCbE6Q1y3OTBQQENBk6aKVzS/7OZ46zqQ+yYqqFdNJAQeHodwQz3Q/
      ww+P/pCYL0ZDqOGK0sgDkwW+veEkn7urhbaq82d0XglzCsC2bTKTY4zkSgRlh2zRpL6xmXx2
      gpNnBljU2o7oWGSzWVRVRdPm5w7TepqfnPgJ3+/5Po3hRvaP7Ofg2EEWRRYRVsMItg0De3De
      +lN6VJWnQypPrPwi9zTec0UXUxRE4r44a2vXclvdbQQucwGLIAjUh+pZmljKkYkjvHziZU5M
      niCkhIhoEWRRxnZsxovjbBnYwvOHn2dD/wa6kl18svOTc36v48CLe/r53o4zbD81zsGBNLIk
      EPUrqNJUxfQn3HXE/btg0V1zT/W+CJbtMJQuse7wMP+4+SSvdw+x8dgY2ZJJMqgS0KTzWnFB
      EJBEiTdOvcFdDXehSiqGbbBjcAdP73+amkANd9TfwQvHXsCyLdqibZfcaIG7mOWftpwmGlD4
      +OqGeWd35su8lkQGwglW1CUIKSKCNkFjUwOLGupIZ3KE/RqaIuE4zrxGBy3Honusm+8d+R6S
      KPEbN/8GnfFO0qU0Lxx7gb/Y8Wd8qfEBlg8dQzi7jTPNa3m6dIoHWp7g/qb7F2xA6nJuxrsR
      BZH2aDu/supXGMwN8k7fO3znwHdI+pPcVncbp9KnODB6gIga4e7Gu7ml5hYSvsS8ziFbMtjW
      O86/e6iTRYkAm4+P8f0dZ/mu43Bne4J7O6ppiPkRVnwCfvoH7gTAxlsvyf6CYdEzmGF9zwjd
      /WlqIz4eX1VPV32EsxMFfnZwkHVHhlmzKMaDy2poSQRnzatZEl+Cg8OxiWO0RFt48diL7B/Z
      z1OdT3FH3R0ookJTuIlv7/82Y8UxPrXkU5e0Ks3B4WB/it1nxvjDx7tQpIUfjLxmaVDbtsjn
      R3nt5KusH9zKgy2P8nDrIzMXxLYwxo9xdON/Qzi7k8FoLfW3/zrPDW2mq2oVn1ryqas6z2Uh
      cByH8dI42we3s21gG42hRu5uvJvWaCs+6dI6btt7x3l26yn+36dWEvEpOECuZHJoIM26w8Mc
      H8nx6duaubcjibL/n2FgNzzy/8x7SeZYVuebbx2nL1VgbWucezuqaUkGUOWZSmZYNr2jOV4/
      NMyBvkkWVwf51K3NLEoEEAS3gj5/6Hm6x7pxcEj6knx62adpCDXMGifpy/bx9P6nCSgBvrTi
      SxedrOfgoFs6E8UJt/EYOsVru4KYvm7uWiLREKqnIdRAtb/azZD5klc8/eOqCMAuFrGwyQsG
      Q7kBxkcPEzyzndrBboaz/UTDjTQ2rEWMtrjD/FoYTr4DZ7dD/WomFz/Is0Ob2DGyh7sb7uZz
      XZ+7aA7/esTBme7YX47HsmyHP3+9h9qIj8/d0XJeHG5YNltOjPPcllPc2hLn0ysCRNf/R1j9
      Gei4YCQ7i1Te4BtvHkWRRL58TxvJkMZ7RRaW7TA4WeTFvf3sO5vi83e2cEd7ElkU6J3s5X/u
      /p881PIQDzY/eNH7NFGc4LlDzzGcH+aTnZ/EJ/somkWKVpGSVaJoFhnMDXI8dZyMkUG0/ezu
      qeeB5nt47BaRcX2QgdwAA7kBMnqGtJ7mifYneLTl0SvqZC+4AAKSxIm/+0t+Eu9lIpph8cgx
      7jAF2prvQVn+cYRAFUJ+1J25mTrj7spQTEHVUncKc3IxiDJFq8ip9CmaQ82XHaffqAxMFvm/
      f3KQ3//wslk7GJTjOHBqPMfTG3oxLZtfqemhffg1hMf+5D0Hx9JFg79ZfxzDsvnag53EAnNP
      hT6HYdm8fXSU7247zd0dVXxiTRNBTaRgFvDL/jnFnjfz/OT4T9g2uA1ZkFEl1f0R3d9Jf5Jl
      8WXUBZt4eXeaU2M6v/fhZSSDrud3cLAdm5JV4uDYQf6p+5/43bW/S3O4ed7nMPuECldBALLM
      2W/+KSfS36OjoZq6jkeRlz/hLil8dwjjOO4mVbblvrYAcfkHgZ/s7WfnqQn+8KPLUeeIe9NF
      gx/u7GPz4VN8Nvssdy+tR229E+JtEK5x1xWLCggC2ZLJt94+wWTe4Dcf6iQZuvSQ0nHg+EiW
      v99wAk2S+OV72qZDovlwrgILCAiC4Ka/Eaa9peU4/Ov+QV7ZP8Dvf2QpLRdYxwvuyrZnu58l
      raf5tdW/duljEdkh2PZ3c2eB5othGABogQCRri7aGjqI3PFriEsfdzeeulDlFgS3XFJuzIUr
      V4GCYfHM5lP83LLaeU3o0mSJVY0REpEQz59JcPjkGaS+7YROr0M78RrCyXdgtIe8JfIP+/IM
      pnV+8+FOqsOXN3glCJAIqqxtiXNqPM8Pdp6lKqTRGPfPKxQRBAFFVJBFGVmUp2faCo6NY1vs
      PD3JP209za/ev5il9ZGLznQ6l4p+pfcVYlps/pMUHdtdaPT2n4IaujojwUKkGlb+/NX46A88
      J0ZyZIomNzfPf2xClkTu6aimreo+Nhxdzr/0jlDMZ1gmlbgrlKM5f4of/fhfOWlU8zsf7qLG
      Z8/9oXMQC6h8+Z421h8Z4R82naQp7qc5cZmhqp6F3c9xYmCMbw/dyi+sbWF108Ur/zmq/FV8
      fPHHefHYiyyNL509beRCmCXoeRX2fheWfwxW/PzCe4BLGQjzmI3tOPxodz81YY17OqsuqXMn
      CBDxK6xojHLPklo6G6sYNgP8bCDAq+NNpKOd/PZqi8YT/+zud6SFIVDlet/LRBIFWpJBToxk
      GcqUuKkpeukd0sIEbPoGI6cP8ReDq1gbGOCJ7A+QM32ghaZCONltuR3bDZdtE2wTwTKo8yU5
      NLqPkWw/XfFOBNuaOrYsJS8I7m6AW78Jve/AXV9zt7CUtRtoLlAFMJEz2Hs2xa8/sHjW7mWX
      ggAEVImu+gjL6yJkSyZnxvMkQyq14bWw6l44+hps+SaEa2HNl6Bm2WWHoHJxgoeFbXyru46P
      Lo2QjEfmPy0jOwgb/hzDgn8OfZGqRBWfvL8JZfJeOPY6rP8Td4Q7XO9uIW/p7p5MZtH92yyi
      AV8sjtOf7aew/2WCWsxdE6L4p3773P7laI+7G+Cj/xmiTZybRu4J4DpiX1+KoCazeJ6LOeZC
      ECDsk+lqKJttGqyG1Z+Fzofh0Euw/r/Ami9A+4OX7g3MImz7FkvGj5LQH2DLD/+Cx9tFhObb
      3fUZwWq38p0nZneKC+/8dwg3sK/+s3TvGOf//GgLgYAfAquhbpWbIezb5a75kDW3MiuBssod
      AAQSOBwd3Mrf9m3iqyt/iRCiu5ufWXCnjRsFd7Vg233uk3jK8ARwnaBbNm/3jHJPRxK/cpWz
      YYIAwRpY80U3O7ft7yB12h1HUOcpPsd2NxQeP472kf/MI4MSL769nfuDY4R6fgq7n3Nb3MRi
      9zviLRCqcT9/7Bi88z+g4RbSKz7Hd392msdW1tMYKxtDEER3rtPSx+ZlTld8Ea/kTrHenOCj
      bR+ddyjmCeA6oW+iwMBkga/c23btvlSUoPVuN0u36RvuuMyd/9b9/z1x3PlHB1+A+34PIg2s
      Vk1+FG1mX/WdfGjtZ9w049gxN/Q49rrbmjsO+KPua8s+hr3yF3h9/yiSKPDgsiub5RlWw3yy
      85N85+B3uLn6ZprCTfN6nyeA6wAH2Hx8jMXVIWoWcK77/BDcfYge+iPXE7z+dfjQ16Y2571I
      v2Cy312LsOoX3M2EgZBP5v4l1bzePcStLQm02CJ3Q+HFD7rPQNOzkBt1PY0WhoZbOJMy+OnB
      If7tA4sJ+668KnYlu+iMdfLG6Tf4fNfn5zUK7yXfrwNSeYMtvWPc11m1YCudLplAEu7+LTdO
      XvdfYdczkBmcnU2BqWch/I27/czSx6ZFIgB3ticZzugcH86WvUFw+xb+OFR1ulM1mm9HdyR+
      sOssNzVFWdlweZsAvxtZlHmk5RH2DO9hKD80r/d4AngfcYD+VIG/WneM6FQK831F8bu7a9z3
      v8PoEXj192DXP04JwXbTj/u/D8VJWPvL5+3AkQxprG2N8/qhISz7vWcG7zo9wfHhLJ9Y04i8
      gLM826JttEZbefvs2/OanewJ4H3Csh12nhznj185RNgn81sPdU4/tud9RZTc5yQ89HX40G+5
      u1S/+vuuRzjyihvP3/UbF9yzVBTgwaU1HB7M0J8qXPQrJgsG3995lo/dVE9dZGEnOcqizMOL
      HmbbwDbGimNzH7+g3+4xL/K6xU/29vNa9xCfWNPIQ8tr0eTrrC2SNWha66YjB/fDgR+6DxS8
      89fdiYsXoSnup7MmxPqekQvOZD23r49fkbh/SfVVWc/fGe+kJlDDxr6NfLzj4+85RWJOAdi2
      ycjQEIFoEp/kMDw6hs/nQ5BkfJq2IGuCKwUHGEgV+M6mk4xndX7nkSUsqw9f9qDXNaFcCMWU
      2/K/h72SKPBwVy3feusEj6+sJxlScQDDtJnI63QPZHj90BC/+VAnwavk8VRJ5dHWR3n+8PPc
      13QfcV/8osfO/aBsQ+fkiWPIoTw1/gIbd/cQiSmkUiWWr1rN6uVLsC0LwzCQZc+hvBepvM6f
      vdZDU9zPrz6+jKrQDfT4IVlz8/LzYEltmERI5WfdgyyuDnGwP03PUIZUXiegyjx1cyNd9QvT
      8b0YyxPLCathtg1u49HWRy/qBeausY5DKW1S1RRGzxdAsqmqW0SxeJzde/fS3NRMQIZisUgw
      uLALlj9oHOxPA/Ar97ZfH/H+VUKTRR5bWcc33zpOMqTRUR3iIyvraK8OUhXS8L3HYvuFwif7
      eHjRw/z4+I/5UMOHCKvhCx43r7uQaKjCr8n4gnWsvkmjsaGRloYGMpexJrhSsW2HrSfGWNua
      +EBX/nOsbU3wP2rDBFTpmlT4C7G6ejWv9L7CzqGdPND8wAWPmftB2b4gK1evnv4/UVUDQCQU
      ovYKH4pYSUzkdU6M5vj46svYCOsGRBaF6ZVc7xcBJcBDix7izdNvclvdbQSV8yOU6yz18MHl
      8GCGkCbTlPCSBteSNbVrMGyDfSP7Lvi6J4BrgGU7bO0dZ82iOL6rPdHNYxZhNcwDzQ/w2qnX
      yJv5816fLQDHwTRNbMvCsq981ZCHy0TenR6wZlH8BnnA6AcHAYG7Gu6iZJXYNrDtvNdnCSA7
      Psgbr77CG2+sZ3Asfc2M/KBzZDBD0At/3jciaoSPtn+UV0++ykRxYtZrswSQm8iiFwwKgkI8
      7KU0FwLLdthyYow1LfGrP8/f46KsqV1DwpfgzdNvYjsz0c0sAciqgqz6CKsS+WLpmhv5QWQi
      r3N8JMetiy4+Gulx9fFJPj6++ONs7N9If7Z/unyWAExdp6RbiIJw3ixYj8vjiJf9uW7ojHWy
      PLmcl3tfxpx6/OwsAUTrarn9ntvp6moj4Pd2d7hSrKnBrzUtMS/7cx0gizKPtz3OkfEj9Ez0
      AO8SQCGTZmBohOEzZ+jvn3sqqcd7k8obHB91wx8v+3N9UB+s596me/nx8R9TNIuzBRBOVqPJ
      FkVUGuoX5oELlcyhwTQhVaYpXll7m17PiILIg80PMlmaZOfQznd3gn3UxSMokow9x4oej/fG
      dtzBr5sXxfHN44HNHteOqBbl8bbHeaX3lXePBNucOryXt995h/7hyffHug8IEzmdE8NZbm3x
      wp/rDQFhem7QeVMhbCSMks6hw8fQTW80+HI5NDX4tcjL/lyX+GQfT3U89W4BCPiDIWrqanHM
      AqblCeBysB2HnacmvOzPdc6yxLJ3C8ChkMnTe6aPlsUd+Ctg3vrV4r7Oah5cWvN+m+HxHoiC
      OHs9gG2aOP4QK1d2UR0/tz21Q6lUQpZVRAF0w0CSRBwERFFYkIfNfdAQBYFbFl38KS0e1w+z
      BJAaHGQyo7N0+U001blD93oxx9bNm4jWdlIbNNl7pBcbA8tRWLp0GR2tixDAWw3mcUNyXgiU
      S6c4sHsPwxPu7l6SrJIMVRMK+klnMwQjEWR/mGxqhB179pHOlchkMqRSKU8EHjccszxAvHER
      T3yqEQcBaWq3LqOY5cxgP23xKkL+KNZoP6u7uhipTjI8OuFu4hsIXdGT+jw83i+u2XOCPTyu
      R7wlkR4VjScAj4rGE4BHReMJwKOi8QTgUdF4AvCoaDwBeFQ0ngA8KhpPAB4VjScAj4rGE4BH
      ReMJwKOi8QTgUdF4AvCoaDwBeFQ081r17ti2+2xYx6ZYKiFJMoIgumuCJW9NsMeNy5wCcGyL
      Q9v3EGvtQNaDlz7hAAAXwElEQVSH2bSrm1BYo6iLLFm2jE5vTbDHDczcIZAgoEgSRtEkm86R
      L+mogTCZyRF27dlHOlf01gR73LDM6QEEQaS6qQHDESiFItQ31LC4rZOqeIzh0RSiKHhrgj1u
      WLw1wR4VjZcF8qhoPAF4VDSeADwqGk8AHhWNJwCPisYTgEdF4wnAo6LxBOBR0XgC8KhoPAF4
      VDSeADwqGk8AHhWNJwCPisYTgEdF4wnAo6LxBOBR0cy9JtixGeg9hT9Zi6hPcvDoSfwBBQuF
      uro6Gutq8daCedyozL0rhOMw1jdIWIpg5gewBTh+9izZiUnG050kE0kcUyeTyRAMBq+ByR4e
      C8ecIZAgStQ01qNgIdgK6Yk0a29aS0dHG+Njw+4ieVVF0zRvXbDHDce89gWqblmE4zg4JGho
      70DTNJoa6jBNE03zIQigqqq3K4THDce8BCBKM45Clt23iKI4/beHx42KlwXyqGg8AXhUNJ4A
      PCoaTwAeFY0nAI+KxhOAR0XjCcCjovEE4FHReALwqGg8AXhUNJ4APCoaTwAeFY0nAI+KxhOA
      R0XjCcCjoplzQr+pF9izazfJpsUkfDb7unsIhAPYqNTXe2uCPW5s5hRAIZui5AicHRnGVgxO
      nO6nriHGwNlhJjLemmCPG5s5BaBqAUrpNCE1CopEoipMW/tygv4gfUMj5Es6Ub+3JtjjxmQe
      zwl2KBVLiJKMgINummiahmPbmJaFpmoIgvecYI8bk3ks6hXQfL6ZNyiK+4e3JtjjA4CXBfKo
      aDwBeFQ0ngA8KhpPAB4VjScAj4rGE4BHReMJwKOi8QTgUdF4AvCoaDwBeFQ0ngA8KhpPAB4V
      jScAj4pmzumctmVw8kQvkao6gorD6f4hAn4VC5lIJEwiGr0Wdnp4XBXmFEA+Pcbp/n7knE6d
      ZtA3PMng2BB6Tqez6yZuv3kViuQ5Eo8bkzlrrijKmMUSlCwsw6GU17l5xRrqahP09BxmMlu4
      FnZ6eFwV5vQA/kiCW9bcguILoogQq20iHo+xqKmeQqFILOxH13WKxSKO4yBJ0qz3n3ty5LuX
      S75X+YWWVl5K+eV859Uu92y/Pm2fUwCCIJKsrpn+3z+18F1VVUJBd/lj0bYxTRNg+vc5crkc
      siyjadqs8kwmg8/nQzm3wmyKyclJQqHQLCE5jsPk5CTRaHTWCdm2TTqdJhaLzfoM0zTJ5/NE
      IpFZ5bquo+v6ecs2C4UCjuMQCARmlefzeURRxFe2Ig4gm82iqiqqqs4qT6fTBIPB8xqBVCpF
      JBJBFGcc7sVstyyLXC43b9uLxSK2bc/b9lwuh6IoF7Q9EAict8rvQrY7jkMqlSIej59nezab
      JfqufuF72W5Z1nmbKRQKblTh9/uv2PZwOHxeXUqlUsRiMQRBmN9jUuei/CK/+4JLkoQkCuTz
      BfyBIJIooagygiCgyBKZTBYHiUQyjiQKOI5DMBDAsi1M0566CA7g4FM1dKOIYYvEomGYUrJP
      UcgV8iBpRCNBbMtCliUkQUALBJFEVzSGYaDrJbAsCkWDQCRCwKeiKAqOY2OWimSLBlVVVSiy
      hCy766Cz2QyGBclkFaoiIYoiqqqeJ14ATZHJFkoE/QEkWUaWRRzHQVMk0pkckuIjHosAru3B
      QADDMLAR8Ps0LMtCkkRUWaFQyiOpAcIB37TtkiCSyxfwBUME/RqqqmKZBg4igUCAc+2DLMsI
      ApTyBQzTIRKPoSoSkiQhyxLZdAoThWQiPn19VEViIjWJKKkkk4np+xEOh2c1PI7j4DgOqiyS
      122CmoqsqjiOjSiKSIJDNlfEFwgRCQembNfxaRqGoSNICprqVmTTMJAlmWw+RzAcxafK7nV1
      HGzLIl8sEYnO2C5ggyDj98/UM0EQUBWZXCaHjUgsEZu23e9TmRifQPaHiEfCwIzt46k0EsDX
      v/71e4GHrkQEsiyDpbN94yZO9g0iaUEiIT+KopCfGGbnrgMMnx4mVxKpqY2iqioTfafYtHEb
      wyMpgpEEkZAPTdMYOX2UH37/X9h/5DSLly7Bp8pomsrR7bvZ0XOcybEMyeoaNFVGUxWO7tnF
      jv1HGB/P09BUhypLKJLNppffYSSfRpQ1QqEAkiQhOibb122gu7sX3Zapb6hCkWUcvciubVvY
      u/8wgi9GXVUURVEopIbYtHknYyOjWEKQ6mQYVVUpZibYvHELgyPjBKNx/JqCpmkM9R7hwJGT
      9B89ixKMEo340TSVk9372LnrAGNjWarqavFpMpqmcGTXZl548WX6x4p0dLSgSBKKDDte30TP
      yCCZ0QJ1jTUosoQk2OzetJnu4yfJ5aGxsRpZljGyk2x4YwsZPY/mC+KfEnUpM8mGN96mt3cA
      JRAhmQijKAq5sRG2bdlC99FTRJO1xMJ+NE1j+OQRdu3vYbhviGC8mnBQQ9NURs/2snXHHsZT
      OeLJBIos4fOp9OzaTu/AOGe6T5NorMPvU1AVib0bN3Dk+GkmUjoNzbWosowsCWx+7VVe/tmb
      GFKERU01KLKMXcyxcf1mzo6PUsoL1NbGUWQZI59hy4ZNHDt5FkkNUzVle+rsabZs3kfJ0gkE
      w6iKjKqqjPed5p3XN9I/OEGsuprQlO1DvcfZun07J8+MUNfYhF9T8PlUjuzawtEzgwvjAc4h
      ySrJmlqCySri0Rl35wtGWLJsGT4RisKMcoOxBGvvugcRk2Boxt1VN7fz6IdFMoZM2H/O3YnU
      tDWS6/NRlUigqVOmCyLJhhqC4ylqmmpRpzJSgqiw9Jab8MVUirrjOhEBJFmhqrkeKVygqiY+
      vamXpKokktVEqpqoScyEH1ooSk0yRt4QiMVmXLWq+UjU1FNbV0PQN+OSw4kalgarMdIZ/KFz
      YZ9AoraeO2paKBby+M7Zjkj7yjWghdFidbNsb+xoQMtbVMUTSFNGipJCVV2c8TMmNfXJadsV
      X5BVt96MpJpYtjVjo89PVWMdJR2i5bYHAiSSNdSHYkQCM/dD8/mYGBslkWiY9gog4DgWeVOg
      PRYF25ku9wX8hGw/jp1HmDpeEEQC4SDNNc2IJRCmrBRFiab2dnKin6aactt9CBTxKXECZR5V
      VhVyuTEKQgxNnSnXgkHi1TGwTLKZAqGAe40lRSTvmCRVFWk6XBMQJYeSIdBSV1W2gZuApqmc
      OX54YQfCBEmmvrGO3PgE6Ux+ulwNhIiGNFKZPKHQzAUPROP4VchmC5T3VQRRQtWCyLZNUTem
      y2PVtTTUxDEMk/Lt6BI1jSxfuoyAKGJPf4ZMVWOczEQavWgwfdskhbbODuobqmelbyVFo7Wj
      g6Bfm2WLbRoM9A1R0HXs6U+BYi5Nz8ED7N13kHSuOF1eymfY+PY79A6NoCgzsWcuNc6Gd97h
      7MAIlnPucxx6D+7jQM9JhgaG0C17unxssJ+TJ08wmsrMfKtjMXB6AF23yOcKM+ckw8HdW9i+
      u5vJzEy5bRsM9fWTKeXRy/pmpl7g9Jl+BoZHMGx7urxU1GltX4LPssllzp2TQzaVJhkJc3TX
      IVKTM+dayBWwdJ2xoQksy5k62qaUL2GVivQd68eYOifLLDFwZoiqRJLj+05gTl0Dy9RR/GEC
      gk3f6ZFp2/VCnmiymdZ4jOG+8elyy9Ip6iXGz4wyPDQ5bYteKLCofTGqaTCZmql7hVyB5pY2
      MkPj5HL6zPElm7b2jvnsCzR/TL3A9rfX8bO3dvPk577IzUub3AubT7Ph9Z+yYdcpfvFXvkRH
      UxUAuclR3nzlZfb1ZvjlX/0i9ckwAJMj/bzy4o/pz/n45S9/hnjIBziMnOnlxy/8GD3YzBc+
      9yRBTQYczhzt5sUXXiLWdgv/5hMPo0oijmNxbN9uXvzxv9Jx28M88eE7kAQB2zI4sH0zL736
      Fnd+5JM8eFcXAmDpRXZsWM9P1+3go5/5PLeuaHFvqGMxPjZJKBpBlaXpWNixTEYnMsRiEWRJ
      nC63jBLj6QLxWBhJlKbFpBcLZIoGsXAQUZKm9VvMZymYApGgH6lMkLlMGktQCAa0shYN0qkU
      ouYnoCllHVOH1PgEWjCMpsiIU62x49iMj6cIRSIosoRYZvvYRIbou2zXCznyug2mjuwPTbeu
      hWwaw5EwCnm30dLkqfs3AbKPfCZLtCqJKouAQ3p8HNkfIJPKUlVb5XoTxyY1Po4WCJKezFNd
      l0QEHNtiYnwCf8BPJmtQXRNDwB2ATU2k8WkqBQOSifBUHSuSzhZQRQFDUIlHA1PXN0e+aCFY
      JqIvSDjo2l7MpdFtEbNQxBeNEtBcb5JLp3BEZWE9gKRoxGNB6hsiOKY1rVrVFyAW0mhojGDp
      My2RLxgmEpBpaIxhlJUHwhFiIYXa6gCGfs6lC4RjUWJRjWRMwzSn23pi8RiJhI+wX8Kyz6XE
      ROKJGNVVPjRZ5FyjK4oyiUSU2toAEs60jaKiEo+FqKsL4Vjlbb2AkZtk8/qN9A2lZk5WECiM
      D7Nx3WZGU7mZYlEkNXCGjW9tI50vTZeLosBQ7zE2b9hFoTRzrqIgcOrQAbZt249uzrTGIg5H
      9uxiz+6eMo8BgmOyf+tWDh46zczRYJtFdryzieMnB8tsBzOfdm0fGJ8pFAUKqRE2rNvE8Hh2
      ulhWVcb6TrF3zxFMa+bTVU2j73gP3Yd6sctsUTSN4wf3c+xE36zrpagy3bt2c7pvdKZcEJEl
      gb3bdjA0MtNyC6KI4Bjs3LyDifTMdXTHn3Js37KLbGHmOkqKSj41yo7t+ygZM9dRVjXGB86w
      e8+haa9zzsb+E8c42H0c256xUtU0eg91L3AIJIhEolH0gomsKdOtnCBKRGJRinkTRZuJ5yRZ
      IRKNUMgbs8plVSMUDFAsOSjqTDdF8QXwqyq6KSDLM6b7giEUJCzkWbFrIBwBS0BQ5JkshiAQ
      ikSxSjaSWmajIBKJRdFL1izb9XyWvTs2s37DFnKlmXAsn55g59Z32LB9JyVjJu5Ojw2xdcN6
      tu89OOtGjA+eZcP6N9jbc2JWCDR4+jhvvfk6Paf6pyu049icPnqIdW++xqmhselK5FgGx7r3
      8cabbzA4kZ7+bEsvcXjPLt5cv57xsoFJo5hj386tvLVhE5ky2wvpFLu2bmDD1p2UzBnbM+Mj
      bN34Flv37MewZirL+FAfG996gz2Hjs2yfejMCd5a9zqHes/MCMOxOXv8COvefI3e/pmQxrFN
      ThzazxtvvE7/+IwALKPEkX27eXP9OsYys20/sGsr697ZQKYwE7oUs5Ps3raRtzdvp1DWaGYn
      Rtm+6W227Nw367pPDA2w6e032dXdM904gsPw2ZO8ve71he0Eg0M+m0PRBPSCfq7fCY5DPpNB
      84mUijMn49g2+UwWzSehl5XblkkhX0BVAuglA6Y6k5ahUzJ0JJ+FYdgw1cc0SkUsLCTLwLQc
      1KnQu1TII0g2ZlHHdhykKREU83kkFYximY04FLJZFJVZtmvBMI21CerrJzHLLngwGqehKsyY
      LmGU9VMiiWrqkmHMom+WV0vU1FJXHSEnKxiGBT4FEKiur6euJoykiViWDbKIIIjUNzdSXxNC
      ERy33ym4/ZfGpgYaagNQVkEl1UdTUx31dSGcMi+i+kM01SWpqx3GLPM6gWichqooQwXc6ztF
      OFFFfTJMSZXQy84pXl1DbTJMWtJcj+ynzPYIgl9yPYYigSBS19hAfU0ITWJKGAKCKNPY3EhD
      XQjRBudcUkLx0dRYR31NALtMjIo/SGN9FfV1g5hlLb0/HKWxOsZA2sAotz2epD4ZJiszqzxe
      XUNdVRgVH7oxE01U1dVRVx1eWA9glgoMD6fRdYVg2D8T5+YyjE2U0HV5VrYnN5liMmdh6BKB
      4EznOD02TibvYNka/ukskMPEyAj5goAg+dE0abp8dGCEfEFE9gVRpjyD41iMDIxQKCkEQsHp
      ym9bOkP9oxRLKsFwYNpGUy8yNJxG17VZtoNAKBpDQCZYZiOCSCgWR0DGH5gZ5BMkmXA0giiq
      +HwzXk1UVAKBAJLin8lgAYrmx6f6UQOBadsBVH8ARfIRCIems0DgejtJ8BGKBsrzAARCYURB
      Pc/2YDSKIKgEQ+XjMwKhWAwRmUC57aJEKBpFFJSy6w6irBIKh5BkH1qZp1ZUH37Nh+ILoMoz
      HX7VH0CVffjLrjvgjskIGsFIALHMeH84gihohMKB2dc9EkVAIRgsHxCbuR/ldUYQJEKxKCIK
      /kC57QqhUBhR1PC9K8rw+wMLHAKJEqIkUdvURFCbMUKSJERZo765EZ8il5WLiGqQ+qaZFOC5
      45VglLqGGmRpJqSRRAlfJEFNTWLWhZUkkVCylqpkhJkEmIAoikRrGohHZ1KAgiAiSiLJhiYi
      ZRdQFCREUaKmuZlQ2c23LZOx4WF0o0imLLywDJ2xoWFKRpF8WaxvlgqMjYxRKuUpFGdaolIu
      Syo1SbGQpVTmGfLpFJlchlwmi2HOZIEy4xMUSjnSk5mZxt5xmBwbo6hnmUzlZsILx2Z8dBTd
      yJNO58uyQCbjQyPoRp5sme22aUzbniu3XS8yPjJKySiQLws79HyWifEJisXcrKxcPjNJOpsl
      n82iT7feDtmJCfKF7JTt50Ijh/TYOCU9x2QqO51NdRyb1MgoupEjPZmfFTKNDY+gG4VZ1922
      DPd+mEVyZdk30ygyNjzq3o9y2wt5xscnKJXyFMvDwEyadDq98OsBVFXFKumz0m4IAoqqYBSK
      mGVpN0EQUVUZPV+YTouB2zFSZZFirkBZvwVRklAkgWK+WNZ9BVGWkXAoFkqzOoCyoiDaFsWS
      XlYquBv8GgalspuJAIqqYJdK6EZ5yrBIoSRgmSrh8Mx0A71YoGgpOJZKqKyFKuZyGLYKjo9g
      WUuUz+YwLBVRDpW1RA65TB7TUtF8oaksCuA4ZDM5dMNHMDTjARzHIpspYJhBIpHgdGtpmwbZ
      rI5h+olEZlpRSy+RLzlYpu8CtsvYpkK4zCOXcnl0S8WxfQTLPEMhl8ewNQQxMJ1FAYdcOodh
      qihaCE2Z8cjZTB7d9BEMhZGnM1IWmXQe3fQTiQSnPYBjmWSzpalzKvPIhk6+YGOZGpHwjI1G
      sUjBkLBNlXBZeSmfR7fd+xEsG9soZLMYtoogBPD7ZmzPZ/MYlrqwfQDHtlBCQVbcVENVfGYg
      zDJNgok4KxtaiZa1uqZpEKutpT6UJFjmnkzToLq5iXCstsy1OpiWSWN7G/GqBuSy1KBl27Qu
      7aS6tmnmwuJgC9DRtZz6xtrpdKTjWAiqwtJVXTTUJmYqkWWhBAJ0rVpB9VTKbeoNZPMmy25a
      QbQsjHBMk6Ihsnz1cgJloY5lGJiSn65VnbO8nVksIgUTdCxvQy2LaUr5PIFkA50dTWUdeChm
      cySa22hdVDudvgTIpXM0di6lsW72PJxcJk971wqqy647jkM2p7P0phXEyiqLY1kUdIGu1V2z
      BvFs08AQNLpWLcFfFqaZpRKiP8by5YtnhWl6oYA/UUdnZ/N5tscbW2lvrUUsC2rymRx1i5fQ
      WJ+cZXs2k6e1q4uaqndd95xO56oVxCMz4nUsi3wJlt+0gpB/RqS2aVByNFbctHi27XoJtAjL
      li2eFabphQJarHZaAE6hUJjpgVw2Ah3LV07/d25SE5LK0hWrpkqt6XLJF2L5ylVTJ2ZQKLgt
      si+SoGtlwj3aKDFVTLiqnq6qevcESjPuL9nYQrLR/btUnCmvb+ukfurvYmHGjbZ0Lj/fRmDx
      BWw3dYOqmijb9x2iubUVn+zePN2ySSRDHNjfTVtbG1LCrXiWA7GIyqF9vbS3txCbykc7skxI
      y9N99BTtrY0Epm6SqKqohQl6T5xlUVPNVCjooISi5McPcPr0IA21cSTBFa+/OsH44a30NS6i
      Oh6czpknahJ0b93LUEsz0aA6bXuyJsa2PYdpXtSGX5nK95sWyWSIfQe6aW1rQxbcimc4EI/5
      OLT/BO3tLSTCruBtUSTsF+jef5L2tqap8RfXdq04Se+Js7Quqpu2XQ6EKaT2c/LkII11brjq
      ODZadYLUoc309bdQmwwh4HqAWE2Cg5t3M9jaTHw64WGQrI2xddcRWha1ElBd4RmmRbIqzN6D
      3bS0taKI7sQ7w4ZEzMfh/b20t7eSjLiCtwWRSECke99JFrc1E5pqrARFwW+k+f8BwOaAvFsY
      44MAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='CPC YoY' width='192'>
      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
      xLKVD7IERhcsAtA0q23sV861u53f5RZjQjOAIIqcv8fmdnWX2wE3FcJlRuMKwGVG4wrAZUbj
      CsBlRuMKwGVG4wrAZUbjCsBlRuMKwGVG4wrAZUbjCsBlRuMKwGVG4wrAZUbjCsBlRuMKwGVG
      4wrAZUbjCsBlRuMKwGVGM6ETYYZewbAFRNtGlGUkAcrVKoosY5g2Hs2tCOFyazKhsiibNr5B
      RtfwYRNpaqc14WXbtl34fQHKtsB9991P0Ku4FSFcbjkmVBYlFAwy3NuNpfrI5vMoio9YIIEp
      mHh9GplSmWw265ZFcbnlmIALJKBICnUNs/BLNqFAiP6znQwVC7Q21zGUq5AI+vAoblkUl1uP
      CZRFEVm84n4WM75zz116kV91O7/LLcbEyqK4HdvlNsUNg7rMaFwBuMxoXAG4zGhcAbjMaFwB
      uMxoXAG4zGhcAbjMaFwBuMxoXAG4zGhcAbjMaFwBuMxoXAG4zGhcAbjMaFwBuMxoXAG4zGhc
      AbjMaFwBuMxoJnAizGawr4uCIaLYBp5glEjQRz6Tx8YgU6jQ2JBCEt1TYy63HhMqi7Jz9zsM
      FwXCvgDeeJK757ewbfW7eFMa+aqFGggR9SpUq1UURbkBZru4TA4TKIsiUBeLkRkeoqKbGBUd
      JI1ELIpg29imjW2Druvoun4DTHZxmTwmVBUi1dDKo7F2fDKo3hCiIDHnjgWYdpV0vkxdyIck
      CpimeQNMdnGZPCZUFyjZ2EbyvFbN45RDDEUm3ygXlxuFGwVymdG4AnCZ0bgCcJnRuAJwmdG4
      AnCZ0bgCcJnRuAJwmdG4AnCZ0bgCcJnRuAJwmdG4AnCZ0bgCcJnRuAJwmdG4AnCZ0bgCcJnR
      uAJwmdFc+UCMbdN15gQ5XUS1DHzROsIeiY4z3YSCfvIlnfa2WciSqyWXW48JCMDk0JF9DGRN
      ouEoaqZIS1DibHc/u/YPUVdXTyCeoCESuAHmurhMLlcctm0EoqEQuWyWUrEMVQtTt6gUy3gk
      hUpJRxalG2Gri8ukc8UZQBBF2mYvor5lKR7ZRlZ9qJJIKJHE5/VSqurEgx4qlQrlcvmiB+Nt
      23audd4b523bvuhb6K+m/XLXvlntru3T2/ba9gkdio/GU0TPa/X6fQAER/7fsixM00QQBAzD
      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
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue YoY' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Available Page eCPM YoY' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Publisher Metrics Year over Year' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Active Hotels YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Budget YoY' width='192'>
      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
      67sFYl9rAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Budget per Hotel YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Percent of Budget Used YoY' width='192'>
      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
      Xx9EL5X4/wHfC04woorBbwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Conversions per Click YoY' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvVeUHOeV5/kLH5HelclyAKrgPQEQIOidKKnV
      MhQp190zvfuy87Bvu3vmuV/nfffsy86e2enpnh61HFsSRYqiJ0gQhHeEK2+yXHqfGWYfogAC
      rCqUrwKI/J1TghgVGRlZ+d0v7ne/e/8XGjR4hBEAHMc5Cjy/sbfSoMH6I8/8+zzwn+Y6wbbq
      ZDI5fIEgWDUK5Rp+nxfHcSgVC2iGD11TKBQK2La9bjfeoMFqIC90wnRigM/PXmXzzgMI+WH6
      Ezn8AQ+KN4JSTlNTwuzf3U0+lyMSiazDLTdosHosaAC1ahmf30epXESqVvB5dQyvD1tR8Ig+
      fL4QlmUhSRKGYazHPTdosGosaACR5k68U2VaYxHwKzjpEj3dXRRLRQZvTdIW68Tv92OZ5nrc
      b4MGq8rtRfB/ZJ41wGKwLIt0Ok0sFlu1G2vQYD0QN/oGGjTYSBoG0OCRpmEADR5pGgbQ4JGm
      YQANHmkaBtDgkaZhAA0eaRoG0OCRpmEADR5pFkyFALBtG0EQAHAcB0EUwYGZQw0aPLQsaACV
      fJpPPv2M5s17iChlLlwfZEtnB47iwbCKyOE47c2h9bjXBg1WnQUNIJ/LYnjD5KfTWJ4qgYCP
      6ekUsmohqhVydg5DtjEbyXANHkIWXAN4fT7y2WkkXUKTZDKZHF2bN9HcFKYpHica9hMIBJDl
      RXlTDRo8UCw4aj3BKC+/8h0EUUIQHLbtcpBl6Z5z7l4jNGjwMLGIaVtAVpQ7/yU24kYNvkE0
      hnODR5qGAawXjoNTq2Inp7FzOWgICKyYbDXNldRFTHv5AZjGynWtcByceg0nl8OaSGAODmBP
      JLCLBQRJRmrrQN6xC7m9E8HrbfiWS8R2bE5OnODk+Cf8dNvfsSu8h5kCxyXRMIDVxjSxpiao
      X76IOTIElQqCz4fU1oH21LOI0RhOqYzZe5PaZx9TrdWQ4u3I23YgNbcgGAaCqrkG0TCKeZmu
      TNKXu8nx1mf4ZOx94p42QtrSVUkaBrBKOOUy1lA/tYvnsKemkNo70Z58Fqm5FcHnQ5Dlr7bO
      oyB1dKIefwp7apL6zetUT3yIU6shyDKCpiEGQwihMGI4grJ9J4Lh2dgP+ABhOzZnp76gw7eJ
      Z9tf4u2hEp8kPuA7XT9AFpc2pBsGsELsXJb65YvUv7wCjoOyazf6i99GDEfuP4MLAoKmI3V0
      IbV34jz5DE65jFMsYudz2JkUdjqNmbrlukkNA7jDdHmS/lwvP9ryE3RJ55n4i/yq95+4nrnK
      7sg+hCW4Qg0DWAFOoUD5jV8BoB1/GnlzN4JhLD1JasYYBE2HUJg7uyyOA44NQsMVuo3t2Jyd
      /oIu/2ZaPK0AhPUIT8af40TiA+KediJ6dNHXa/xll4tZp/Lxewiqiue1n6Ps3ovg8axuhqAg
      gCg1sg7vYqo8QX+ul8NNRxEFd6oQENgZ2k3c28HHifep2/VFX69hAMvBcahdPI81PIT+8ncQ
      PN6NvqNHAtuxODt1ii7/ZpqNlnt+J4sKT8efZ7I0zrX0ZRycRV1z4WzQUp5soUI0GiGfSYFs
      YGgSjm2TzRWIxGJID8IE5TjuzzpETszhQaqffYLxyl8hRpvW/P0auEyWJxnI9/Fq98/uzP53
      E9bCPN32PB+NvUuLp42AEqBiVSiZJfL1LNlqBtOuE9FjhLUIXsW3kAE43PzyHIPjBfbt38et
      Ly9hoWFTw6v7yGay7DhwhM6WEI6zOItbK8zem9Rv3UB//iUEfe00Su1shspf3kI9eBi5Z9ua
      vU+De7k9+2/yd9NstM5zlsC24E76c738y83/D0P2YDs2AgK6bOCRPYiI3MrdpGyWEBAWMAAH
      TLOOrisUCwUESUERRLzBCPlUCUPXqZQrFAqFjU2Htm1qF89Rv3IJHBv9pe8gqOqqv41Tq1F9
      /x3EcAT1yLFGnH4G0zZJlEZpNlrRJG1N3mOyPMFgvp8fd/8M8T5BAVmUea79ZbYGt+ORvXhk
      L4ZsIIsKsiCD4N5v1apQqBcWMABBoGvzDsSJLM1NzUiOheyNEgmq1NprJCam2NwVx6PJpNPp
      1f7Mi8YplbCnJjF+8GNqZ05RPfEh+jMvwGqmaNs2tTOfYyenMV77OYK2Nl/0w0iyMsV/u/6f
      2Rt9jJc7vo0hr27I1nYszkyeYrO/m6av+f5z4ZW9bA/tmvf3iqigiAo+xb/wGiDa0kG0pQOA
      WOze8FJLaxxwxXE3EmtyHEQRZftOpNY45Td+TVXX0Y4+CdJsX3E5mP291M5+gfHXryKGwqty
      zW8KE+UEUb2JbDXFn4b+jVc6v4dP8a/a9YcLQwzke3m952/uO/svh4f/Ge44mP23kNo6EHQD
      qSWO8d3vUz9/ltrFc6uTdGZZ1M6cQt13ELlr08qv9w3CwWG0MMz20E5+sOV1bNvmDwO/IVtd
      HY8gXU3x7shbHIwdWdTsv1QeegNw6jWsoSHk7p478XKpowv9le9S/exj6tevutGhFWDnstjJ
      aeSduxubUl+jbteZLE/Q5u0goAb5q80/xCP7eGPgV0xXplZ07bJZ4p3hN2kxWnm85fiqz/7w
      DdgJttNpnEoZKd7+1UFBQO7ehv7cy1TeewdsG7lnO4KuL+s9zKEBBJ8PMbz4HcZHhWK9QNks
      E9XdcLBH9vJK1/f4cPQvvNH3r3y7668JamFqVpWqVZkJSxYREOgObJ13vWDadT4eex/TNnm+
      /Vuo4uoHNeAbYADW8CBiJILoD9z7C0FA2bUHp16j+vEH1E59hrxtJ/L2HUiR2OIXyJaFeeOa
      a0B3VcZ9M3CgXgZRdn+WMcNOl6fQJA3/XT6/Lum80PEKnyY+4te9/x1V0hAREAUJSRRRRI2S
      WeT89GmebXuJdm/nPbO7m+x2msFCP692/wyv4luVTzsXD7cBWBZm3y3kzT1zL3ZFEfXAIZSt
      2zGHBql/eZn6pfOIoQjy7j0oW7cjeO//x7XzOezpKbRnnl+bz7BhOJDshcu/AUECfwsE2sAf
      B28MND/IGgvl2I+VRmgyWlC+NkOrosrT8efZFd6DKEiokooiKsiigiRIVKwKZyc/5w/9v2FP
      9ABHmo/hkb04ONzKXufM5Em+u/mHxPS13Wh8qA3ALhawU0mkZ16Y/yRBQPD5UXbvRdmxCzuT
      dnPxT32G1deL8f1X7/s0sIYHEbxexOg3qP2T48DUdbj0K+g47A78XAJSAzByBqyaO/h3fR+a
      tjOfEViOxXhplG3BXXOKIsiiTIsnPudrvbKXp+LPsyXQw4dj7zKQ6+XZ9pdQRZX3R/7MU/Hn
      2OTbsoofem4eagOwEmOgqoiRRfrmkoQYjaFGY0hbeij/6p+xxhNIHZ1zn2/b1G9cn3F/1sYH
      XXccByYuwZU3oOcF6DruJtzFD7iZp1YNqnlIXICLv4R9r0PTzjkT8ipmmWw1S+s8g3whREGk
      w7eJH3f/gnPTX/DmwO+oWVUeaz7KnuiBdVEaeXgNwHFc96eja1m7vlI0hty9jdr5Mxht7XPu
      6tr5HPbUONqTT6/GHW88jg1j5+HaH2D7d9zZ/+6cGkEEWXd/ul9w/730K9j7Y2jePcsIMjU3
      1BnSVrYvYsgGx1ueZrO/m0RxlL3Rg0hz5PqsBQ9tTM+pVrBGh5G7ty4vXVgUUQ4cwhwawJqe
      O1xnjQwhGJ5vhvtjWzB8yh38u34AHUfuHfxfR5Rg03HY+jJc/jVMXJ4VTp4oJQhpYXRpedG1
      uxEEkTZvB4ebj61ZOsVcPLQGYKemwTSRWuZLjFoYqakZqa2d+sVzs/cKbJv6jWvI3VvXJK9o
      XXFsGPwUbr7jzubxA4uL+AgSdB2Fba/Ald/C+EX3WsxsgBWHafO2z5mZ+bCwoAs0MdJL32ia
      fft2M3DjCnV0auU8htdP3bTZsWsXhrr+fwBzcACxqXnBKM59kSTUxx6n8uYb2EeOIoa+Kqq2
      C3ns8QTa0eMsR23ggaKah74PYPcPoXnP0p6YggSdR91/r7zhGkD8ADW7znR5it3h/Wt22+vB
      AtmgDmOjA1TKAmOjoyQzBaZGLuBv3cKtG9dQVB+yEWRTPLS+2aCmidnfh7Jrz4ozMqX2dsRI
      lPqVS2hPPntncFijwwi6gRhrXo073ljyCTeqE1umuyiIM+sF4MrvwNdCXlWoWlWi+hLcQ8cB
      qwrlDFh1CLZv+M76AtmgoCoahcksluNQq5RQjDDlYoFwrIVKtU4w4EOWZcR1TA228zmcbAa5
      o2vF1xJkBeXQEaof/AX1wCEEnx9sG/PGdeTunm9A1qcDqT4ItIO8gjoJQYS2x2D8EoydZbpl
      M4ZsLLBJ5UC1AKUkZEcgPeCGW2sF99fP/G+gB5d/T6vAAi6QwLY9h2nrrmEYOh0tzSApWPUa
      iqZhmhZ+vw/HtqlUKsu7A9PEqVZdcahFYo2OIHi8CKHV6Usgd22hphnUr3+JevgodrGINT6G
      evjxVbn+hmKbkOyDzsdXXlssytB5DL78PaNKhRZP/P4yJPkJOPNfXLfJE4VQF7QdAtUD5/7J
      dc0ebAMAVTNQNXfm0O/MhvcO1pUkQ9d7b1I78SHG63+DGAgs/ALHxuy7hbRp86rF5gVNQzl4
      mPqZkyi792GNDYOiIjatrvvjOO4upywqdPk3r0+or5KDSsYdfKtBZAu2IJId+4Jtu38xvwTJ
      7YW3rwX2vQaK140sgbvXoHjc+wp2rM59LZONdcBsG/PGl9QH+qmdPbWo1GWnXMYaH3PTH1YR
      Zes2HNvB7L2Jef0a8pZuV6FtFZkoJ3hz8A1+3/9r3ht5m3wtt6rXn5PcmOv6GEtXTZsTxUBo
      O8i2QoG4fp8JopSEyavQ/Rxoga8GP7hPEiMMxenVuacVsKEG4JTLWIkxjG9/D/PqZbewZQGs
      xBg4DtIqz86Cx4O67zGqn36IOTTg1vuu4k5kza7xSeIDdkX28pOtf0OmmuZfe/+JG5lrWM4a
      BhCStyDUCfJqhXIFcpEu4pZIuD6P/IjjwMhp8LVCcI5ddkEEbxSKU7BI9Ya1YkMN4E4l18FD
      yFu3U/30Y5jvj4orRFU98RHyjl2uBs+qIqDs3I1TKIAgIDWvXvGFg8O19BUy1RRPtDxN3NvB
      D7e8zsHYYd4beZs/D71JtpZetJTHorFqkB6E2DZWM5R7s57kplBCSlyau9aiknV3nLc8BdI8
      GbTeJiilNlwle+MMwHEw+3qR2toRPV7Ux59wdTL7b819er1O5cN3ETQN7dhTayIWJfj9aM++
      iHb0uKvStkpkqxlOjn/C8dZnCajuok+VNB5repzXen5B2SrxP27+I1dTl5Yk6rQg5QzUiqvq
      Z9uOzXBpBKHjqLs7fDuicwfHzSPSAxDunv9Cnqi7PlnNz7sMNswAnFoNa2gAuWc7CAJiKIx6
      +Ci1Tz/BKZXuPdm2qZ87jTU24gpRGWskeyIIqIceRz18dNUMzHIsTk58QpPRPKtQW0CgyWjm
      +5t/zOPNT/JJ4n3+OPBbpsuTq/M0yI6A5lvVSEvNrpKqTBPvfNr15ae/NmFVi27KxaanZtKp
      50EPuIO/Xl61e1sOG2YAdiqJU60gxdvcA4KAsmc/iOKs1ARzoI/qFyfRX/7O2uflrLIs+WCu
      j/5cL0/Fn0cR53YHFFHlYNNhfrr136FKGr/q/WdOT5ykYi0ztAy4+f63ILx5fjdkGeRqOUzH
      JOzrgLaDMPKFG2q9zcQVd8HbtP3+F1K9gODuE2wgG2YA5mA/YqwJ0fdVJZFgGGhPPUPt3Gns
      VBIAOzlF5S9voR17Ennz2ueHryYls8jHifc51PQ4TfeLmOA+DcJahG93fY+XO7/LldRFftP7
      3xkuDGA7y/CTzSpkhyHSw2r6/1OlcXyKH4/shdZ9UJiA/Ezwol6Goc/cFGtlgTWapLlGUEqt
      2r0thw0xAMc0MftuupGWr8228qZupPYOqqc+xSnkqbzzFlLnJtQDhzZ823wpOI7NuanTyILM
      /tihRee2S4LM1uAOfrL1b+nwbeKN/l9xPXN16TdQSrkDMtC29NfOg4PDSHGEFmNmA8wTc/cX
      xs4BDkzfcBferXsXvpgou25QaWNDoRtjALksdjaL3DmHxIgsox5/Gqu/j9LvfoVjmejPvggP
      WT3ueCnBxeRZnm57AUNa+prFq/h4Ov48T7U+z4nEh0vfM8gMgR52B9kqYdp1JkpjtPtmQpui
      5KZVT1xxDW7wU+h43F13LIQguJGg4tSKVTtWwoIGYJl1SuUyjuNQrZSpVmuUSyVq9Trlchl7
      GTdvjQwh+v2IwblTGaRYM8qBx7CzafRvfXdJaRIPAqZd55PEB/QEt9PpW/4OrCiI7Insw68E
      OD15cvGukGO7/n9kizvTrgIODv25XnL13L3anJFuEBW48Wcop911wWJdLm+zuxm2HBdvlVhQ
      HPfW1TNcH0zx+LEjXLtwmkLJxMZBVSXyxSrPvPAKTcElzHC2Tb33JvKWrfPP6oKA+vhxlH0H
      Z6s9PAQM5vtJVaZ5ufO7K86VVyWNp9qe59/6/pXt4d20excR0jQrkB11Z+NVwMFhKN/PuyNv
      81Trc4Tv7sWlGNB2AM79M+x9DfQl5Gd5wlAvuRmi4sZ0wLn/E8CBUrlEJOwjk04haz7MwiTe
      YJj05ASO7ZDOZEkmk9RqtUW9oVMqYk9OIG++T4wYEFQVMRB86JpDVK0qn0+cYH/s8IpLBW/T
      5mlnZ3gPJxIfULMW8XcuToNjgX/5xUJ3M1YY4a3B33O46Rj7Y4/NFqiKH4TNT0LXsaV9X3rQ
      XTNsYCj0/gYgCMRiLVSqDrrHiyLaNG/Zi2BW2bpzP23xOC2xMNFoFHWRVVPWeAJBUb4ZZYZz
      cCt7nbJZYl/0wJJ6Vd0PURB5vPk4uVqW65krC78gPeguUNWV6+lMlBK8OfQGe6MHOdx8dO4E
      Pm8UDv1799+loHhc96myzJyoWhEygytyoRZ0EDt79tA5k3e2pXNu9YRFi+M6brKZ1NH1Dciz
      n03JLPHFxGccbjq2quKwAH41wBMtT/HZ+Mds8m8hoM7jatz2/6M99yagLYPpyhR/HPgd24I7
      ONby5H2yVwWQlpFrJGszWaFpYKkhbsfdg7j+Fjz7f7haRstg9aNAjoMzT3WYU61gDg+teqLZ
      g4HDl+lLCILAjvCeNXmH7eHdhLQIX9xvQVwvubH5yMIDyrRNrqevcjV1ieHCIMnKNMV6gbpd
      I1WZ5s2B39Hh6+Kp+HPI82zirQhBAk8ECssIhZpVGD3j/ps4z3KT6lZdFsXOZ6n8+S2UHbvc
      pLW7XCN7agqslRWyP6jka3nOTn3BM/EXMFZSeXUfVFHlqfjz/K7/l+wI7aZjrghTYdINK/ru
      v/Hm4HA9c5W/DP+JiB6jalWwHMvtmiLKlMwSWwI9PNf+0izVt1VDEMDX5N4zDkvasEsPuIN/
      z49g+HN3801derRw1Q1A8PiQt22nevIT6lcuoh5/2i1dlCTMgV6klvg3rqmcg8PF5Fn8ip/u
      wNY1fa9WT5zd4b18knifV7t/hvZ1SZJUn7v4Ve5vhKlKkhOJD3ip4zvsDO/GdCyqVoWyWaJY
      L1C1qnQHt86+/mrjicLUDVe2ZbEhW8d2Feyad0H7YRg55W7CtT225LdfdReo6JT5JDLJ2HeP
      Um+JUv7jG5Tf+gNWYgyzvxd56+zd34eddCXFpeR5jrU8hbrGmjaiIHK4+Ri5Wo4bmWv3/tI2
      3eS0SM99NX9qdo2Pxt6lw7eJneE9yKKCLukE1RCtnjZ6gtvZHdmHvowNvCXjiboZpYuJbt2m
      lIJUv1teqXldIxj63C20XyKrPhIVUUGRVD7KneK3LUNceqaLVHmKwv/4R6ypKaT2eWQIH1Jc
      JeNTNBtxOn2b1+U9/UqAoy3HOTP1OWXzrszZ4hQUJ90F8Dw4OFxOnidVSc749hssDqi5IgTU
      iot/zcQVN+IUiAMCtO53UyqyI0t++1U3AE3SebrtBX6x7X/iaOtTDOsF/m1blvcPSkwf34Ww
      mLrfh4ip8gQ3s9d4ovWpdR1MO0LuQvtG5ks3ddpx3EVhqOu+8f+J0jifT5zgubaXCM4XSVpP
      FI8brarmF3e+WYGxs+6sfzvy5IlAbLubhr3EkOia+CICAl7Fy+7IPl7r+QU/3Ppz9O4d/Mnf
      R6q+cc30VhMHh4nSOG8P/YEtga3LFohdLoZscLjpKGemTrlPgWoOEpeg64l5w58Vq8IHo++w
      PbSLLcG1XassGklxnwKl5OLOTw+6G2dNO746Joiu6sX0jcVfZ4Y1d8ZlUaHN287LHd+lw9d1
      /xDeQ4Jp17mUPMdv+/6FuLedZ9pe3BB5wG2hnUiizJfpy65ej+qF8Nzhz9uuWs2q8kTr0+sm
      Prsgd0Khi2in5NhurXHTTrfQ/m4CHW7ka+wCSwmJrttqVBZljrU8SV/2JonS6Hq9LflalmRl
      etUaeWdrGd4e+gMnx0/wfPu3eLHj23jljYlq6ZLB401PcDFxgnL/h24qwjxVWCOFIc5PneH5
      9m/hldeu48qSEQR313oxSXGltLv4bT80ex9JUtyn39g5qJXmfr1ju6HTWtGtWy6l1lcevdlo
      ZXtoF5+Pn+AHW15fU5/Zcix6szf4cPQvVKwKh5uP8VjsyLJ72NqORX+ujw/G3iGsRnm95xeE
      9eiqpTssl57gdqYH3qduljCa5+6NO12Z4s/Df+RA7LG59w42Gm+TW19sWyDdZ06euOI+Lear
      cYhuA+Edt/lH+6G7fuG49dEDn8Dkl64hOA449mwDqJYLJNNZFMNHUzhILj3FRLJAV1c7U4kR
      LFHDrBSRVY18Lk/H5h78nsVtlNwO4f3y5j8ymO+jJ7hA2dwyKdTzfDb+Mb3ZGxxteZKgGubT
      8Q/py97kmbYX6fRtWlLHwapV4eTECS4nL3C05TgHoofWPNzp4kBmBHT/vFmWGiLHqiJnNZG9
      goP/nlc7JIpj/GnwDTp9mzjS/MSadFpcMUYI6hV3dp6vfPP24nfT8fnTLlTDXRwPf+4W5Uiq
      O9uPnnUHvycG27/tuk+SCpJyrwHYZo3L5z7nj+98xJPf+QkvHQ3Qf/MSiXQdUYLB3pskJxIY
      4WZ03aCSzxOKd6GINvYi5S1CWpj9sUOcnPiEDt+mVdWCtx2bocIAH4y8g6F4eLX75zR7WhAQ
      iHvbOTf1BX8c/B07Q7t5vOU4fmXhiFS6muTdkbcp1PL8YMtrdHi71qVzCeAOirP/6BaYHP77
      uYvb82NIxWmGYiFIXeSJ1qcREHBwGMz18/bQ79kZ2cux5qdRxQc0/0r3u9mr9eL8xTSZITfN
      4+7F7ywEiO+HgRPuhqBZg9533dl+51+5G2dfM557pgNBlJBlhb37D1Krle9c1LZtKtUqlmUj
      ChK27SAKDrGOzTQHPdRqtUUbgIDAvuhBKmaZG5kvF/WahbAci0w1zceJ93hz8A12hvfwoy0/
      ocXTesdF8cgejrc+w6tbfspUeZJf3vxvXJg+S7FemFOBwXZs+nK3+HXvv6BLBq9t/QWdvk3r
      N/jBjWhYVfcLvPTr2bFyx4ahU8hNOzm0+a+4lDxPrpbFdmyup6/yp8E3ONR8lKOxZ/jocorB
      qSXE2tcT2XAHZiU79+/vLH53gLaAwoURds879Z/h2h+h/Qgc+w9uT4Q5nhz3ukCCQGt7J0Pj
      aTpamhEEgZ4d+wmki0SiYcJeA2SdWqWEPxhC03RURUYKBEinFx/e9Cl+jjQf54vJz+gObl3S
      oszBwbItSmaR6coUo4UhRovDpKsp/EqAH2x+jXZvB8Icj3pREIl72/lR90+5nLrA6cmTnJr4
      lO5gDzvDe2me6XZYs2ucm/qCM5Of83jzcQ42HZlX0WFNSQ+4Mf39P4UL/wJX/w32vuq2LgJ3
      R3TqOhz6WzYHOghOn+bC9Bn8aoDPEh/zTNuL7InsZypX4/JglpFkmR8d6yDie8AafsjqTCh0
      ngL5UtLtaHno7xZOohRE6H7ezTFq3e8W3dxnnXaPAVi1MleuXGVkdAx/mxsn9gWj+IJunnfQ
      v3opvjvCu7mUPDfjVz95z2LSdmzKZol8PUfZLFEyS5TMIqV6kXw9R7qaolgvoogKzZ5Wdob3
      0uqJE9Yii8pd0SSNQ02Psyeyj0RxlKvpS/y+/zf4FD/bQjtIFEdJVqb5q00/osu/eWP8ZseG
      6ZsQ3eqmC+z/mesOXf8T7Pye6yuPnXNDf4EOFFHh8ebj/PLWf8Ov+Pl211/TE9iOIAiMpcps
      avYS8Ch8dGWS7zwWR9+ApibzIkjuZ5xLK/SOyG6zK/G+GHxN4Ht+UafeYwCCKBGNxXkm3oHs
      XVvZal3SOdbyNO+Nvs2O0G68io9cLcNoYZj+fC8TpQS246BJ2syPjkf24FeDdPo20eppI6iF
      0URtWW6JgIAuGWwJbGWTv5t8PUdf9hZXUhfwKn5e6/k5IW2VBGWXQ73kyo1secb9b28MDswY
      geJxZcrHzrnN7mYWjl2+TbzY8W3aPO20+zoRELBth+GpEluavezsCPDH02OcvpXi+M4YkvgA
      paT7miHV67p7d3+fmWFIXIRD/255NQcLcO8ToF5hOlOgKx5iLJlix5aONU3b3xzoJpqM8bu+
      f0UWJQr1PH41yCb/Fg41HSWiRVFEZabDuLRmIUdREAmqIR5rOsK+6EGAjc+Rub0x5LtLozTQ
      5hrBuX9yXQJRntH9dJFFhaPNx++5TKlmkS7UOLo9ikeTeW5vC2+eGSMa0NjZHnhwyjI8Edeg
      7fpXA92swo23Xf99teTdv8Y937JiBNja1cRUrsbe7T1r/sdRRIVn4i9wduoLOnxdtHk7CKrB
      tSm+WCQbPvBvk+53/X/1a/sW4U1u794z/8V1hRZIe57KVpEkgbDXHVRNQY3jO2N8+uUUYZ9K
      a2iN050XixF2UxzM6owBOG5TvnIK9v9kzTSh7nWBBBFsk1K1Rn2den61eOJ8Z9P3N3xD6YHC
      ttwZvmnHHGnTUCXWAAAgAElEQVTNgpv49cz/7i4cF2A4WaIlpKMq4u1Xs7XVRzJX5cPLk/z1
      kTa8+gNg9JoPcNzUaM0P5Szceg96XnL3CdaIWWalyAIXT57ixlBizd706zQG/9eoFdzU5vDm
      uX8vCO6a4H7is0DdtBlLlelq8tzzF5ZEgcM9YQxV4sS1aerWA5CbJRuuXGIl6y58Bz52nwrx
      /axll87ZzxVBwKyUqdXNjRTserTJj4MgL7vQ+za5skmlZtIyh26Tpkg8vbuJkekSE+mViPCu
      EndnhWaG3fXAtlcWNPKVMssARFGmdVMbHu3hkiL85uC40ZBAfGVdHYHxdBmfruCbx8UJe1Xa
      owZD06UN7tMCMFMfnBmGm392F77htc9bmmUA9VoNQRTou3GNdGFjtdsfSayZro6xlSlnOA4M
      TZfoiBrI0tzXEQTY1ORleLqEudFu0O2s0KHPoZiELc+uixjyrHcINbWyrXszR448Tsj3gEQI
      HiWqq9PVsVK3mMpV6YjdP/u1NaxTqprkShvbqQVwyxxrBdj64poufO9mlgEkJ4b5/NRZBhKT
      jcXpRnC7q6NnZZtwqXwNHGfBtAefruA3FBIPwjog2AFH/mfX/VmnsTfLOVRkDW8gQDTobpKk
      JkcZncyxdVs3icFeTEGnXilg+AJUymU2dW9FVx7AFNuHleQtN9a/wsXfSLJENKAtmPIgSwKd
      MQ8Dk0V2dwYQN3JnTAvApifX9S1n1wNUK8iagc/QwXEY6r/GVN5GN1RGhkeZTgzjjbUz3Ps+
      3nAHvkgLYa+yeHnEBvNzu6tj93OsZAa0bIfhZIkdbf5FDejOmIdroznKNQuv9gDsCawjs6Zu
      VdNw6hXGp1M4gCjJVKs16mader2GJOvUalW8gRA+j0q1uvhU6AYLcLurY2BlXR0LFZN8qU48
      vLgoUsSnIgkC09nqit73YeRr5u6gah78fh8BnwdBENi28zFi7WUCQT/N4RBIGma1jO7xUq1W
      icRiiDjU79Pft8EiyQ67sXBjZYmIk9kKhioR9CwulK0pEi1hnaHpEl1N3gcnP2gduDcZzqwz
      PpHgxpeXsQPtHN7dg+ELYPjcyinfnebU9+reN9yflWPZNsLUTcQVdnV0gKGpEm0RA1le3Nrs
      djj0bF8K07JRFvm6bwL3fFJJVlFlUD1hPIba2AleJ2zb4cTVKT7qt8j6t+GswP+v1S3G02U6
      Y94lXaUlpFOuWWQehHDoOjLL1GVJJhiN0d4UeaQehRtJrlznet8w42WV312XuNCfplJb3lM1
      U6xTtxxigaVFkXy6TMBQGEs9WpufswzAMDzkEpNMprOP5hPAttyfdWRwqkSkMsiPOqd5ancz
      10ZyvHFqlN7xAqa1tC9hLFUm5FXwaEur+JJEgU1NXganistqfPgg4cCiP8PsXCBJRtUUDE17
      9J4AZgWuvjGjJLA+kS3Tcrg1lqNHHEZv6WZrW4gfHutgW5uPj69O8da5BPny4twSy3YYnCrS
      GfMsq9qrI+ohna9Rqj7ca7rxdJm3z40zmixj2fc3hFkG4PEGaIqHUZVlxoNty22XaT9kvqRZ
      gS9/P6Mh86kbklwHMsUauXSKTVoGYm4dtqFKPLYlwo+OtVOsmFwdXlwPrWLFJFWo0R5ZnvhX
      2KciSwJT2QdgV3iZOA5cGcqSSJV5+3yC9y5NkMzX5vVmZhlArVoBUUWVl2kAlSyc+a+uLMXg
      Z2566zq7FEvm9uDPDLsSGt6Yq7W5DgxMFomY4wT8HvB/pXgmCBDyqhzYHGJgskjdXPiJlEiX
      8WgSEf/yamdVWaQ1bDA4NY+04ENAqWoymirz8oEWfvB4O7bt8G+nRvj8RpJCZXaR16xRnsum
      EWQNTV2mARghOPhzmLzmynX3vutW88cPuH2r9OC6ZPktGrMCX/7BVWB77O/c4uyuY9D/EXQe
      XbDkcCXUTZu+8Tx7xQGk5h2gzE4+bIsYnLyRJFWo0XKf8kXbgd7xApubvKjLDGO64VAPp26l
      qJn2sq+zkYylyyiSQEtIR1MkXj7QyliqzBe3ktxM5Nne5icW0PBoEh5Vnm0AhmEwMTpIc1cP
      27qWIfktiG4ht6/FlbErTLiajr3vuwOtdZ+r2xhoW1G8e1W4M/iHvhr84KoP33rPzctp3bdm
      b58q1CjlM3SIk9D8EnOlP/gMmahfZXCqeF8DKFZMJrNVDnWvrDdxc0inVrfJFGs0Bx+ubGDb
      cbiVKLC52YequEEASXRznVpCOr3jBW6M5uifLFCr21iOM9sALNumpbWFWq06S6FiyUgqBDvd
      LL8tz7kDbfSMK+3hjbqdzJt2uP1s13vFXa/AtduD/2/vbSqn+aDtoJub3rxr8b2rlkjfRIFm
      ZwqfR5tX80YUBHpafVweyvJYdxhlHvHYsXQZTRaJ+FeWROfVZEJehdFk+aEzgELFZCJT5rEt
      4VlTiSqL7OoIsLM9gGXb1C2Hat2+dw1g1avkig6dbS2E/X4EARzbxjRdH96yTCzLwjRNbNum
      bpqLlB0XXFeiaQcc+Dk88R/cWbb/Q/j0/4S+D9Z3nVDJwqV/dZXXHvvbe6VHbt9v20HIJ9z0
      5DWgatr0T+TZJg4iNm27r6vVHvFQrJikC3MHFmwHehN5NjV7V7yLK4kCXTEvQ1OlBSMoDxqj
      02UM1X1izocggCyJGKpEyKt8PRWiwkQqTXPYR7pUxHEc+q6d49pAkqNPHOHa+S8oVMCyanj9
      PnLFOs89/yx+fQmujCC6ctg9L7h67pNfupJ/0a0QWuP+YY7j5ttc/s1XgrPeprnP9cYg2u1q
      UgY7lrxusW0HBObNxpzKVqiXCrSRgJan7/sEdN0gjaHpIs3B2TN8qeq6PwfnmPmWQ3vU4MJA
      mlLVwm88HNmhlu1wM5Gnu9W3pEngnjNVPcDBvTvQ/WEe27UNAYdcIUs45CE5NYWgeilODuL1
      R8mnM6iiQzqVJZlMLi8ZTjHcmbZlFwyecBWC1wrbdEOcZ/6rW2548G/nH/zgypF0HnMNdD7R
      1vtwZTjL6VupOTeyHNwFa5uUxNBk18DugyQKdLf66J8ozlm6mEiXUWXxvjPfUgh6FCRRIFta
      QufGDSZXqpPMV9ncvLRmJfeaiiAQaWpla0+365cKIgF/iHSmiKSqmJUC/tYtFApJmuLt6LqO
      x2MQCoWQlxs2FUS3CGL6pquGsBbUS66m5o0/wa7vuXKCi4nuhLrcqFbi4vzn3G628DWaQzrX
      RnKc7k3OMoJKzWJ4qshWcQgx2j1b/GoOOqIGhXKdTPHeicZxoG+8QFeT587Cb6WoiojfUMjM
      43I9iAxNlwh4lDsCYItlwVHbvfMgm7c7iKJIT1cXCAKO4yDM/CtJEpZlrUw23N/mhkgHP4O9
      P15emDSfgIkv3R7EojzzI7nT7egZt9jk0N9DqINFF5tIqhsKnTMk6rhqxn0fQGgTdBy+57ot
      QZ1XDrby5/PjCAgc3hpBntmdnchUcOolWp0RaPnRou7HbyiEfSpD06V78nxKVZPxTIWX97es
      WhGhKAhEfCrT+YejPsC0HHoTebbG/fMKAMzHggYgCCLSzMQiSGukKCxKsPlpNzpUnATf/G0+
      56Qw4b5W1mf6zlquO2VbbvPkYDtsf2V2Y7XF0LQTbr17b0jUqsHYefe4KLmGF948S8enNWzw
      rdtGIMDhngiiIHArUaBTSaPbLHrdc9sNujGaZ/+m0J0vejxTQZaEJSe/LUQ0oHFjLOf2gniQ
      RHTnIFOskSubdC0gADAXD84KJ9jhuhxDn8Ou7y/+KVBOu9r5kS3u6yT1LpfEcX8Eafmbb3dC
      oifdKFZhCm685Sq3bfuWGya9+Ev3SbDn1VktSuNhg28daOWd8+MIwI72AKPJIi/JQwihLW5n
      x0XSGfVw5laabKlG1K/hONA7nqcz5kVbJffnNmGvSqliUbNs9Hnari4Xy3YoVy28urwq0e+B
      ySIRn0pgkQVAd/PgbPWJMmx+yk1BWGyv12oeLv6r2z9r5/fcJ4AguoNQlGbcIGWFO88CtB2C
      XMKNHp3+f93d7KP/i+v2qF7Y+jJMXIXM4JxXaIu4T4IrwzneuTCObFdpqg25T5Ql3FvAoxDy
      KQxPu6kK5ZpJIl2he4kLv8XgM2RM26G8zLTs+ajWbT69Ns0/fzzAwGRhxYJcddOmd6LA1rhv
      WQmAD44BgKuG4Gud6fi9wJ+mXoYrv3UXoXtfdTXz1wpvDFr2QHYE9v3Enek9Ee747sF2aH8M
      bv7FbWk0B/GI+ySYzlXp8eTRJHvJymeSKNDd4qNvooBpO4xnKkji6rs/4CbkKZKwqnpB+XKd
      dy4kGE2V2d0R5IPLU4ynV1Z/kMzXKFetBfWP5uPBMgBRgS1Pu/51+T4tl6waXH/TXYTu/+ny
      fPulIIhu9Oj4/wrNO2d3YhdEdw1TSsH45bkvAbRFDX7+dBcHfQnX3VOX3q+3M+ohW6yTLdbp
      Gy/QGfWsuvsDrlyK31BIF1YeCnWAyUyFP54eQ0Dge4fbOL4zxs4OP+9emCC1gvfomyjQHNTm
      lX9ciAfLAAAi3W6axOhp5uz4bdXcxef0LXdXeYUCUotG1u8fOjVCrpzJrXdddbc5EICgaqNn
      bi3Z/blNwKMQ8CjcHMszlqqwpdW3JlkkoiAQ9WtM51YWCbIdh77xAm+eTdAR8/DygVb8howk
      ChzpiRCPGrx7YZxCeely/NW6xcBkkW2LlH+ZiwfPACQVNj8DI2dmpLId193JDEHfh3Dq/3F3
      Zw/8zG0g8cAwkz6heNxw7nwuXD7hJuGFNy3rXWTJdYNO9yZBcGhaA/fnNhG/SqZYx1xmSoRl
      O1zoz/DB5UkO90Q4viOGdpeImiKLPLUjhq5KfHB5gkp98esNZyb7tWbatEWWn7H74ESB7ia6
      1Q1nXv29axCZQTec6WuClt1uaNL/9fydBwDFcCNDF3/p6tr778qmdSx30T70uRvxWoHb1hnz
      UKpa7O4Moq+B+3ObkFelWDWpmzbyMprqTeeqnO5N8fL+VjY3zy23oqsSL+xt4U9nx/j0y2me
      2dM0b8LfbWzH4cZons+uJ3lqZwzPclP3eVANQNZcgdQbf3bj6zv/2k2f1vyz/e8HjWiP+3Pr
      Pdj3GlQLbrujiSuQHXNTwPf8aEWRqZBX5cmdMXrWyP25jU+XcBw31dpYhgEMTpWIhw02zTP4
      77yPIfPSgVb+eHqMUzeSHNkavedJcTe243BtJMfJG0me2d3EtvjK/gYPpgEANO2C6DaQZNZL
      KHVVEGXoeRFO/t/w6f/lum+a3108d7/gpl3PUfiyFGRJ4MmdsTUXL9ZVCU0RyZXqS440mZbD
      0FSRnR0BFhOdjPhUXj7QwrsXJxhLV3h8a4SOqOeenV3bcbgylOOLW0me3dNMT8vKJ4AFDaBU
      yJLOlWlpjpFJTmFLKma1jC8URbTqaF7f2iwkBGHjC2aWi6/FDZVWMm7inbdp5rOs3oBdDxFb
      SRQIehRShRrdS3xtvlwnX6kvyT+Phw1efaKDq8M5Prg8SVNQ43BPhOagu+l3eSjL2d4UL+xt
      ZnPz6jz97m8AjsOta+cYniyzZ+8eeq9fIT2dQvUF8QcCJMfGePKV7xH2yA190LsRZhbEDzmi
      IBDxayTzSy+OGkuV8c9oDS0FryZzpCfCtriPC/0Z3jwzxpZmd6f7+liOF/e3uPKNS/ws87Hg
      5G1bNooiUSoWAQnsGpIiMzk6wMjIGOlsnlKp1JBH/IYSnYkELaU4xnYcBiaLdDV5l5ycBl8J
      Ajyzp4nvHW6jVLO4OZbn5f2tqzr4YaEngCCwqWcX6lSe1pYmNFlg89Yd1MoFoo8/geLUMQJh
      FEkgnb7PxlWDh5agR6VSt6jWLWRpcUvGctViOl/lUM/K6pNFwS1u//bBOHXLRlelVV/1LPiJ
      wrE44ZgbzotE5v5Ajdn/m4tXd1PKi1Vz0f2EJ7MVZFFYsDvNYpElAXmNMpEfvI2wBg8Umixh
      aBLZ4uJyghzc8GdbxECVH/CQNQ0DaLAAkiQQ8CgkF5mvU6tbjKXK8258PWg0DKDBfRGAppmc
      oMUIgKQKNWqmTdNDIqnSMIAGCxL2q+TL9UX1Eh6eKdlcqjr1RtEwgAYLEvQoVOsWlfr9DcDd
      /S2xudm7sd0ml0DDABosiKHKiIJAoXL/hXCuXKdQMWlfQXbmetMwgAYLoikihibPkmT5OolU
      GZ8u41/i7u9G0jCABgtyWyYleZ/iGNt2GJgq0tXkWdbu70bRMIAGCyIIEPVrpIo1V/JxDko1
      i+lslc5l1uZuFA0DaLAoIj6VfGn+6rDJrKtPFPGtXYXaWrDg3nZi8Aa3RlIcOLCX/muXqaJS
      LxfwBkKUSiX2HngMr/bglhU0WB38hkzdcmVSvt44w3FgcLJIPGKgzlPI8qBy/7t1HMbHh3Gs
      ColEgmyxyvC1s5TqNql0ktzUBImpDLlcDtNcelFzg4cHjyYhiQKFORr2laomw8mZ3d8NuLeV
      cH8DEEDXDLLZEg5QqxRQvDFK+Sy26aB4fOiKhKqqiOLDZfkNloYsifgMmfRdkSAHSOWrvHNh
      HI8qEQ8/POHP2yzguwhs232Yjp46mq7RFY+DJGOZNRRFxTRNPF4vjm1TLj9aDZYfNSRRIOxV
      7xTH2I5D30SBT7+cpiPm4Ynt0WXVDW80CzrvsqrhV92Fjarcju/em+fRSIZ+NIj5NW4kchSr
      Jmf70vSO5zm2Lcr29sAd5euHjcbqtcGiCfkUJrNVfv/FKIok8r3DbTQF9Ici63M+GgbQYNEE
      PQqaItIeMXh828Pp8nydhgE0WDQ+XeEnT3ZhqNKylJgfRBoG0GDRCALLFqF9UGnELhs80jQM
      oMEjTcMAGjzSNAygwSNNwwAaPNIsuKQ361UqVROP10OtXMIWJGyrjiwr1OtuKkSDBg8rCxiA
      w82rZ7g1nOHI0SNcv3SGdKaIICl4/X6oV+nZe4Su1pVJ4DVosFEskA4NlUqZYNBDLpsBRcOu
      ZtH9AWRZJBptQpVFkskktdrKm6k1aLDeLJAOLdDS0gFo+Lx+AoZBe88+PLKIoapMJjNouk4s
      FkNVV0cHskGD9WTBNUDb5h20bXb/f3tbfM5zGuK4DR5WGlGgBo80DQNo8EjTMIAGjzQNA2jw
      SNMwgAaPNA0DaPBI0zCABo80DQNo8EjTMIAGjzQNA2jwSLNgKoRVr9DX20+guQ2PWGc4MY1H
      V6g7MrGgD0n34NUbeUANHk4WNIBscpKBwWGMdI2AXmFkbIKJbIV4LMCQJRLbvIOezmgjH6jB
      Q8mCBiCKIpZZx7JMLMvCsmxkUcARJNo62hEkEdM0cRbTQ7NBgweMBQ0gEG1h/8H96J4AimgT
      a92ErkqYjkwk6ANBQpbFhjx6g4eShZ8AkkJbe+ed//YHZ1d/NdyfBg8rjShQg0eahgE0eKRp
      GECDR5qGATR4pGkYQINHmoYBNHikaRhAg0eahgE0eKRZcCNsfLiX/tE0+/btYuDmVWqORr1S
      QPf4KBSL7Np7kKC3kQzX4OFkwU7xibEBqtU8o2NjJDMF+q+cIlOqcO7UKerlChNTyXW61QYN
      Vp8FO8VrqkY+XwbHoVYpIRthKoU8gVCIbKGAruv3vUSDBg8yi+oU39Zdx9B12lpbECQFq15D
      UVVqtTqarpNMJsnn87Ne7TgOlmUhy/KaHLdtG8dxkCRpTY7fznGa67ggCIiiuCbHTdNEkiSE
      rzXgXa3j9XodWZbnPK7caYa+Pscdx8E0zTmPr+XYcRwH27YXXgMomkFIMwDQtNu+vsf9X497
      ITEYRBAEQqHQPa81TZN8Pk8oGMSy7TtftGVZFAoFgsEgtm0DIIoSplmnVCoRDAbv3KQgCNRq
      NSqVCn6/H8dx3PeUJGrVKtVqddbxaqVCvV7H5/MB3Pmiy+UylmXh9XrvvK8kSZTLZWzbxuPx
      uINSFJFEkVKp5P4NJJF0JoOseQgF/ZRLJURRxDCMez5voVBAkiREHCqmja4qyIpKuVR0vwDb
      JF8so+oeAn4vhXweVVWRZRmzXscRRDRNJZ/LoWsaluNQr1YQFQ2vxyCfy2EYOpZpUqlUkFQD
      v9cgm83i8RjUaiaGYSDOtDDNZDL4fD6q5RKVWh3d48NraKRSKQKBANVykVyxQjgcQVNl97jf
      T7GQo1iuEQiF8ejqnfPvNlTHcUin0wQCfgr5PIpmIIgCmqLcOZ7PZqlZNoFgCEUSyWQyBINB
      LMukVqujajoCDtlsFr/PR61ep1wu4w8EEQXI5XIEAn5KpRLVWp1AIIiAQ6FQwOc1qFlg6BrC
      zFgrFov4fR6yuTy2IxAMBnFsi3K5jM/nJZNK4ogq4XAQs153/4YA//AP//AU8K2FjGEuBEFA
      lmV0XceqFTl96jSJqWl0X5CAz4Ou65RySU6dPk+xXKJgCjRHgui6TjE9yV/ee5/e4THCsVZC
      fq97fnaaTz/9lPOXbtLa2UXAa6DrOpPjw1y7foP+oVGC0WaCM9dPTY5w7sIFegdHiTS1EvR5
      0DSNod6r9CXSeD0eDF1H01Q0TWNytI8PPznJ2GSK5ngbfq+BqqokJ4b56IMPGU3maWtvw2vo
      qKrCjSvn6BuZZHh4iKa2TYR8HjRVZWK4l/OXr5ErVonGonh0HU1VuHz+NBPpPLf6e4m2dhLy
      eVAViYunT3L+y16yxQJt7Z34PDqqInH+8w954w9vMZ632bVtCx5DRxFtPjn5GWNj46TyJdri
      7XgNHUV0OHXyU67d6iddrNLV0YHH0JHsKu98fIJKpYqoaAR8XnRdQ6LOxx99yKUbvZQtkU0d
      cTyGgeDUOXP6NBcvXqIiGXTFWzAMHccsceLEKfK5FKOZMt2dbRiGjojFhbOnGRpN4CgG0ZAf
      Xdcxyzk+++I8pUKGW5N5tnW1oes6tWKa9z78mMTEJKbsoaMleuf8N377a97/+BTRjm7isRC6
      rpNNJThx6jTpdApL9dIaDaPrOoX0BB+f+IzRsQSyN0xL1D1/crSPkxeugePg9fkxdA1d10lO
      jvCX9z5kZGIaf6SZppn7TE2OcurzL7jRP0y0tZ1I0Ieu66vXJ1iSJJA1guEw0ZY4Aa+BIAhI
      koRtWYRirUh2jlK59tVxx6Ft03YCukPdNBEEAUEQUHUPHk0mWQBDU+4cl7CZms7Q0dlGrf7V
      +QIwmUhgROI4DneOI8l4dYXhoUGUrdvxezQEQaBeq1Gt1VEtE8t27pxfLZeRDR+SY1KtW3g1
      BXCIxppJ5obxxZrxqPKdmVD3eGhqidPa3IQsijMzr0NrWyeKN8jE+Ci6LM6cL9DW1U3Xdh+F
      Yg5Vuu36iOw99ASaL4qvqRNFEgABBJUt7W1kyhbBUBBZdIuTEBQ62uNki0O0trQgiQKiIGDL
      Krt27yHi0ajc9XRzUIm3xpGNIk2RMCICgiRhoxAOBpGNAJFwAEEAUZJAUsAskczKtEb0O9ex
      HZNiIUcwvgVJEu4clxQVQ1MJhYJUCs6d47KiEY420xZvoi5LX40R3cuuXbsItZYJBzx3jns8
      PqxKBW9TC/LM31eSJHTdoFrIInibUFXlztjRDR+xcBDHqpMtlvEZ7neryjKO7aCpKrIk3vlu
      FUmkWDFp6WjHvmuMrGrXY0nV6exoYzqdQ9M96Krr14Virez0BqmbFrKq3Tk/1BRnjy9MvV5D
      M75qtaR5fBw6+hQ7yxXkuzqSt7Rv4YVgM3XTxOPz3Dkei3fxyneC1EyboPer62/esp1qrY5p
      mujaVz5mZ/cOgk0dmKaF3/gqhNuxZRuBWBu24xC463itXGA6laFJ8931aR3S05N8eX2YVKaT
      I4cOIIkSOFDITHL57EVa2rtQZr58HMglE1wbmqa1YxOdt0ssHJubV85zK5GlzVHpaI3dMYJs
      cpKhqQLt9LCp86v3TU5OYDkO5XLZrcQTBARRIjV4nS9zdTq7txNvjuJODZDPpiiWbOp1070R
      BHAcklMTZOsi3nDTncOWWQM1QE+zn75kGgcHAYFapUjJUgiU05y9lqWjJea6HrUK5ZpJLpMi
      U/0qIFKvlqnWTbLpKVJOlT3d7gcoZpOMZ6qEvBJf9g3TFt0DQLVcwgjGsKt5xqYzbOtsBaBU
      yBOKd+OR6ySm03THYwBY9SrFYpl6KU3O0WiPue53uVwm3tWNaBWZyuTpanbrVwqFAs0dXTjV
      LOl8ka5m93wBwHGc/wj8J1ZItZTjk/ff4dMLffzk7/6enV3N7h+jUuKLzz7k1JUhfvja62yJ
      RwF3YH3+yfucvTnOq6//5M5NVUt5Pv3oXS4NJHn99Z/QFgsAUClm+eSDv3BtNM/rP3md1rA7
      IMuFDB+992duTdX42es/JhZ0jaOUS/H+X95mKAc/e+1HRPyuz17MTPPuO28xXlb56Ws/JDRj
      NPn0JO+8/SfStp//v7Uza3Lbyg7wh30nSDbZC9mSqqYmiaXKT8lDXvJDo5YlzxInLs+MPfbE
      jm1J3VJLai2WrFF3EyR2EMBFHtgiADlvER8/ngLqnnvOPRtB/Nu//gsDe+MEeRoR5RXDgYeq
      qLyvHbMkJCkE/sDdFJVXekjjFVkJvuegdHgSLSlqmYFr94qyOAwoGxXPsVHVtuCOVgsqScez
      rR4Pl5cIxcC1LdRtgd6wCi5Bs3Ass8eXiwtk3cG2jB4PLs9RTQ/bNFCUzanbiIrz8wWuZ7EI
      c+b7UyRA1BXnFwGea7CI1xzubQxR1CXnF0tcR2eZVsx3N3tbV2suLkNcWyXMBQfT8YaXBRdB
      hGMpxIXE/pXhVuucxTLBMiWySmF3vKkDyyIjCDNMraFoNKajjS2s85RlXGAoNaVkMBl6G9vJ
      EsK0RJVKGtVmPHCu9jAmzmvkpkDSXUbexkY+6iRYMywc28K3fdZl+8qkphHkaQYCys7TY03T
      kKU5CImqqnvyWZIjCakvLwRpkiM1fXkhatK4QG761xeiJksKpKahqkWHV6RJAR/yuiJP1yAE
      tWi5pvwefdgAAAjtSURBVOkEf3/ND/dPyMv20U9d17l4+5KfHj5iXdY9/u71c348PqWsRI//
      8uoZ90+eUnbua+g6r1884cHjZ1R10+Ear84ec/zkObVoua5pvHjyiJOnLztcQtc0zh4f8/js
      Z0TT5SpPHz3g9MWbzrPbErqqcHp8n6evfuE9lmQVy5A5fnhMvm7XKisqltbw8OFJb62yomGq
      NQ+PH/XWqqgaurzmwfHj3poUVUdtch4cn/bWpGoGcp3y8OQJHdWg6SaUEcePn9ERRzdMRL7k
      +PQ5DW2WYJgW6+SSx09f0H1K3TQtsvCc02evoCP/UR1AVlSGQ5+qXqN32lrvux6irCk7hmtY
      Np5rI6qKsm6VbdoOrmNRl1XP0C3Hw7EsRFlSdQzddjxsy6Auy55BO+4A0zCu5Dvc8zF1g7pc
      9wzdHfgYmn7F36uv4e3PZ/zxs7v8+W8/UtYtf/PiKb+/e5evvntI9V6+afj57JTffXqHb344
      aa/TCF4+fcRnd4742/3TdpMbwbPTh9w7OuL742et4TY1Tx494N7RET8+ftFuvqg4PfmJu0e3
      efD01XaTG1Hx6MH/cOf2bU7O3mzX1NQlxz99z53bR5y+fEt7mYL7P37H0e0jnr0+38qLMuen
      77/l6N/v8PxtO+Ss1xk/fPcNt2/f4dW7YMurIuW7b7/m6PZd3lyutrzMEv77m684unOPt0Hb
      Ii+yiG+//jN3Pv0d56tky/M05K9ffcmdu3/gMkq3PIuXfP2nL/j0s/8giPMtT8IFf/nyv7j3
      +89ZpcWWx8sL/vLF59z7wxfEWXsIh8E5f/rPP/LZ51+S5C3/qDUANGRZjqboFL2X5kkYhoHt
      OBia2ue6gW076P8Xdz7gkoRpGNiu2+bWgCTJmIaB40poqtyTtwwD29F7KYQkyZimjiNpqIrc
      4QqmaWA39jYlAInp3gEjf0Jh6KyrGtA2fP+AsT9BGArrSuAYm3vu7h8wHk6RdZmyFlgoIMns
      HcwYD3cxNIlKCEAGSeZgNmdnOMVUGioBOoCkMJvN2fGn6LKgbho0JJDVK76Litg6hiSrzA/n
      TPxdZKlGCJAVkBSN+eGcncEUqak3J70EsmpweDhj4k1pmmqb68uayfxwxo43RYhqWxsousl8
      fsDEmVKJ6j1GNSwO5wdM3J+p6nKrS810mM/2mLhvKTvcsDxmB3tM3EvKurUR0/Y42Ntl4oas
      qw53Buzv7jJ9k/eyCtsbsjeZMrmoe7bm+CMm4wnTUKFYt/f1hmMmowlBEff4R40ARRqzjFPQ
      wLXbHvm6SHl3sSBJ015YWucJ54sFSZbS/aLIYi6CBWnWl8+TkIsgIElTumEsjVdcBMurvv0H
      fLUkyzO6I584WrJYhmR5TvcThwGLVUj+AVc1g5FvoZoWlt46pKZb+AMT3XIwtdbBNhHPwLAc
      9I7jGaaN5+qYtoPWcTzDcnBsHcvxrgrgzce0XWxbw3a8XjPAclwsS8V1PTri2I6HYSq4jred
      BQA4V9xz3d7wy3UHaKbCwPV63PMGaIaM77q0WMLzfFRTxnedjj4lBgMfxZAZOJ0mgSTh+0NU
      Q8bvvktakhj6QxRDxrPtDpcZDocousygwyVZZjgaImsynmN1uMJoNERRFTy7z3fGQ2RNwbXM
      DlfZGfvIqorT4R/VASRpk7NNp2OU3tBE4AyGjHccFKnlQgi84ZjR0O4NWYQQDMYTfN/ubaQQ
      DcPJDp5n/YqPp1Nc1+zdtxYNk91dbNv4lfx0f4plGb+S393f3fTPOwZRrjMuFjF5HJEVbaq2
      zhMug4Q0Dsk7eXGRJQSrlCQKKTopXJ4lLFcZSbRi3cmXsyQmjDKicMm6ky+ncUgU5YThspdH
      J1FIHOesVqtevhxHK9KkYBmuEJ0ULopWpPGGtzVAQxguyeKC4AO+Wi3Jk4JFGNHihtUqII8L
      gjBqD6amYblcUCQFQefXAJtB2YI8WRPEcYcLFsElRbJmFScdXrNYXFKkH3AhuLx8z9MOr7m4
      vKTICsKkw+ua84sF66wgTLMOL3l3sWCd58RZyz9qCiTqiihKsGy3d/IVacTLN+f85h8+YTJs
      T4M8CXn19pLf/tNNxoPW67N4xet3Af/4yU1GbuvdaRTwy3nEJzdv4jutFyerS94uYj65ebPX
      1oyDC94tM27evInb+fvG1eIdF1HJrVu3sI1WBavLv7NIa27d+mesLW9YBgGGYyCZg458w3K5
      xHINGm/QRoCmYbkMMB0DdeD3eBAEWK6BNRhibLkgWAaYronnD9HfH+mNIFgusTzjapIqvVcy
      wWqF5Zn4Qx9le5mKYBlheSYj3986fFNXBKsIy7cYDYbIV44tqpJglWCPLEYDfxsBRLlmFabY
      I4vxwNtGgLoqWMUZ9thi7A22EaAqc8JkvZH3vK0uqyIlykrsocnIbSNDmaekRY09NBl2+DpL
      yMoGe2jid3iRxRQCrIHB0G1tJ0siKmRMz8B3WttJkxChKJiOyaDDkzgETcO0zV7k2e5mlmX/
      7z/3KYo1e7MZSVZRrguyK08TqNw43Ofh6Uv2Zodoe5vebCNrXJ/t8ujRC/Znh6jTq59AyDrX
      9iecvnzOwfyQg/GVYlWD+d6YR8/PmM3n7A43ipJ1i9l0yMnzM+bzOTvvByyGzcFkwMnzMw7n
      c0buxml0y2Vv5PD87IzD+Qzf3rRBdXvAdGBydnbG4Wx/60zhKkXSHa7N9lkXOZJQgIZVlFCY
      Hr852GNd5FDLQMMySdBsn9n+lCLPEIoMjSBKYwx3xGxvQpFn1LIEjSCNYyx/zMHukCLPqGQJ
      mpokjrGHU/YnLnmebYxX1CRRhLezx+7IJM82vBEVcRzh7x4w9XTyLEOSoKnXxFHMeG/Gjq2R
      XXFRFcRRxM7+jKGubjibIjiKYqazQ1xN2e5hvc6Io4T9w2uYqrTlVZEQxQn7166jK2x5mSdE
      Ucr8+nU0qdnyIo2Jkpz59RsoiC3Pk5g4LTi8cR2FesuzJCJJS67duIEkWp7GIUlecv3Gdejw
      JArJCsH1G9do6nLL4ygkL+HGjWuIek2WbSL//wKATPx1vY5wlgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Conversions per Impression YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Clicked ROI YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Exposed ROI YoY' width='192'>
      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
      /AeJRJy+5KPMdQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Advertiser Metrics Year over Year' width='192'>
      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
      P3ThkxEX7AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Performance by Market' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Key Performance Metrics by Market' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nOy9eZxcV3kmfPa71dar1OrW0lpt2TI23jE2XmMc
      E2BYMpDJQpKZMCTABwkThpBJ/A0QfsBM+JKQjy/klwSTBEKAxEBsYoxtYrwvsiwvshZLanW3
      eu9a7nr274/SrrZUt6s8OFDPX13VdU+dU/e9577nuc95XmitBV10sVygH3cHuvj3jW4AddEW
      fkoD6JF7vvMHH/vIe37jt/73F7987M1kdu/dD+049nJ8xwP3PLYHANAY3/HdB3bEC+O//Tsf
      C7lessHG+I7f+K0P3XbbbX/0+b8wp/33y3/2mW/f83CnOj+39/GPfOJPAQAyPPyhj33ixH99
      4447mn/MH9y1c+/UkofveOC7j+2ZPf398Wce/P3PfgkAkC4c/MgffO60//O//qsvn/LWfd+4
      g+Tv/08CrrzpzReeO/KZOw/8znvfvuuJ+27/5/tWjp67xZv+q4cWV5jpf773MRgMvPvSlTNp
      AQAgk9qB/bMf+pvvfezTn3d1/VO3fZ4D99d+6c1P7one+vo1X79n1396240yqV18/Vvf+/Zr
      v/SJj740u/iP/+/nOXA/8Dsf+eInf7tnZMs3vn7XJz57zW2//zEB3A9/9L9/8ZO/veaSG196
      9H4NyfDGc/fv2fXB3/vkA//0F3sOTL32xnfU9z48uRAqp/+j/+Wtn/rMnxRXbfnwr73ls589
      0uBA0eHhwo6H7z9Y+6977vlBPa7KZLH533e//dY//8IX+hxy14+eeN15G4obr/jyn//d84eq
      H/n4x//+Tz8zl9gP/94fDBZobX7qb7/1/9xRoP/113/+id2NY0NIqrOPP/DAzPt//bG7749r
      1Whu7H/92V814ux3b/vklz754TWXXHfgwMF7v/O1VRfeuP3ur+4Zn7/pbb/y1a984ad0BjoR
      f/eNuz/1qU+y6WeGtl580403oaByyYXn/9t931cnfOYfvvqPCuLeSvH+f779xek4m9v7zYfH
      d2+/74ff/fbotgubn/mXf/zybbf937WeLfvvOfKZ2++4r2bIBz7wwWuuuiZ96eE3vPtDH/qF
      NzTffM873xhp53/+t18bi91ff9OVDz65a9XqTeecs+7Ob3/74P6J933096Pqofu/89Wbfvm/
      vePWN9z3z8cbbH7Xz/7sdf965w8P1cXqEj3WpTt3TF17ww3Dnthy6U3nDRdmxnftqZX+8KP/
      F0yqTz+/r7+/L035kcPf8SsffNc1dzw6ecoQ3nTz6+68+5HZRPd7SGh74cWX2PrBx5+bqBny
      nnfe+tzDd/3wxWhjofaXX/8BROiLf/H/XXbxDd0AAgyphUY8sxh7BCit/v7Ltw+tHS0RLE/4
      zK+89/2f+u/v/ejH/6hYKt3w5nd/8IMfvOHyC7YOlf7h6dkrNvU3P/Omn3/Pbbf94e++/9dK
      xz+zzXfd5n/L5fLExOTkxESxWGy+WSgEhFC/4GOEbTx9+7d+sGXzJiUVYJ5LIMK4UCjMzs4e
      eHG3WzzeYLO1YNW2xV3fcfs2AABO6NI2pRQAwHN9AAAgXtJYqC9OTc5W3/Wr79s6CL5190PN
      w2dmpg+NjfX19Z0yhN6Nl008/DfF4QsAAA/d9bV5XRhZOSC5bHb43MtvJgvPz3Ny3muv+Njv
      /vYvvePNACh82223vaKn59UM7BTWrRq46DVb/+ZLX7riTe9+7XnnPvTAg2+79dp/ve+xn7n+
      utHNWyo9Ayv6igAA6le2nHNexS6OXHLr3M57Ht8zf/ONV48OkKfG5E2vO3L5Ur+yaqACAFi9
      6YK9j9zV/AxFcHR0AwDgmje+ZdeD39kXBv/5P/4sgmB0dD0AeHR0HaD+ulUD/sC6PjQ/1nCu
      uvTcjevXrxsdRRZce/Obn7j7H0DvultuedOJDQIAnELfSE/x8utu9Bm85mfeeuy/cvaALq5Z
      u3bNir6i37f23BX2rodefOMtbzy444fPTav//EvvdCkGABw+tPdQ5L/n7Tet6ccnDsGvDA6U
      Cq+/4XoXw6uuvf6Bu//l/Etfv3rNmqG+0ujoeojI237uxucnxRUbi1/5+nev+5lb1o/2ANvF
      MpF9+uMfO7SQ/Li70Q46MARou0RiF22gmwN10Ra6AdRFW/gp5YF+qqHib/zTXWs2bsQGlTzQ
      t3L48FydqnD1pm1f+8Kn+jefnyr/om1bgZx68v6dl91yM6Xu6Mjg6c0c2PHAg2O6G0A/dZCN
      6cj4T27/IeQVF/MXnnkiLm9cB8e23vIBTeldd9yxb3/1Lb9wS0lmTz301CQKHFn70Ad+8/R2
      nELvS7t+0MkkemHfo7d95fHffMdV01OHHn14+/ClN79mxJk6OHHpz/zc1/7yf8/UwRuvvjCs
      To1FvWtX983ufxZ7g+9899sYPN7CF7/wuUj5F28apL1rZuarayokFSghhVvecNnHfvM9b/+N
      D0WJdlEcz03d89ziz79hywtPPjFfPKeAki3DhTXb3rB2Ren0Xk1s/97vf+Wxt9x8zfwz/9p7
      xa/PP/evixn42WsueunFnYveprUryjddc8UZBvU/P/xf3vbB//Hkt2+PVl5y2ebVgx5/Ys/i
      +uEgDSPuDYl927dPHLrsmpsDk0xOTA2u2ej7/qUXnnfW3+qbX729sHL9+BP31AzzS/4lt/zq
      5et78v7gj95353QCZiYOLsw3+tesWjOy/ubrr4ZnPw7sf/FZ61c84ka1wwNDqw9NzXsgXTl6
      XlSdg5anqZTQsaJGLLGUGuJsGV1zeiM8rr2wf7qTM9Bd9z4xRGv3PvrMxecPp4sz9akDP5qM
      Hrr/4c1X3VxZMez42c7ndtqk+vyEfGFs+LWD9pv/8NWb/8Pb+r2TGvm5W6//y09+POy/aLjP
      fWJy58imS3ccWnz9Rs9fvW379h07n9t/zkp9aHy6UXnND++9c/eLk5VRWVyx4ukf3PHLv3fR
      kgEEAHjP+z4w8cQ9x15aKe+//+6ZmYWandg/tOYMAZQu7IP9m7/zN3/KDVXxs3dNHb52rd6+
      s/bwj6bX9rhbbnkfAODiG35u7LHvP7fjudLg8PRjz1522eWtBBAAAAKwcdPWyVS9NDZedpeZ
      jEIIgbVX3XLr3O6nWwmdJtafsw0A8NQjDxyu8g1bX/Oant7m+yVv6IRPLRE0J8IJKhdtq7xK
      l/H7Xtixbzp64/Wv/3F35FQc3PVUYe3F/f6p72e1ye/c8/gb3/yWkvPvZl1y+198YbomgJgl
      kI3L/gF7kBo8npWG1q7oF+OPPHP49z73p5tWBGdu5FUaQF38H8BzO3damS3Gce+K1YvTUy7i
      gmtSHMxkbJWsz85e9+Z3VFx85ka6AdRFWziSA83Pz/94+9HFv1OcNAPt3r27VCxFWbpp/XoA
      QG1yyhke8l7+4DYhRZZwRRF0gyBX4hA2agBigHDBY9V6XCkHGdfWqCA4yw37FERhAyKktC0G
      Xr3ewAQjzHzfQ62noydD8CzhshR49XqjWOkhORvSSkgNMdCZMkYKx/Ncx8nbhzQOlYFSyHJv
      TxrWlEXW2p5KuaWDrV5YrLmuCxG2RkNgLcQUw0woYJRfKBF86ok6vgqrTzz311/5l63nb7S1
      Q388kV0zOnBg36Gh12xJOPmt97wr7zBaAWWuChcAQk7OE+95XiOMpcqKgU+hnplbRFZFqVi3
      NjhtgGeCUqoRJZVyCWGCMCYI1uo1hJHv5j5tTTDH4UIeay338dCIzDgMKCmR1bVatad3wKFn
      yUJOhVVJnPlBIZPGAlgsBlGUtnws0EolaYahrdbD3t5ejIzkykKMrJFSEcxO7fKxGWhycnLV
      ivK9D+wsOHIhAVvWrY4WDy9K5PuFK157Qb4xtAYpeMqlywhx8q1ia4sLhDkWIgINF7pULkuR
      AQAcx83VgahRhxgrDQLfVUoxgpJMIkKWHUA8jVNpC76rlHLdfJ0BAACgeaaM0cpYhxKpBGF+
      3gBKozo3yChVKBaNVoxABSgjLf3A1qiFhZrruQgTDIHW0gKEEFLaWC29oERPa6ebRHfRFo7c
      wrIs+/H2o4t/pziJid6zZ0+xWIrTdOP6UQBA/fB07DqrensAALt2PhUD16dk67lbOtuDOAqp
      47M8EzVPU4CRUibwWCNMPJcZAHnGi6VirrwjiSOIkJC6FHiNKCEEQURc1112Ei0FT4Uq+m6j
      EQalcv4kWioDEdCZUMBo5joOy30zzdJYGaCkKpXLadSgrqe18Vq8KVtdq4V+4FsLeJZhiiEk
      FAOprVHC9QtnSqIbk8/f/tXvnXvuelsf/5NJfvW6voMvTfResNWJ0S/+6tsX4uzczSs+95k/
      uenWW4t+72WXdiwrchyWCs7oaeTuy0MJYRnN0syjkHPBKOLSCCF8A1q71x9tR2urDYIIYuJQ
      rIyNwgZCyHVOTRVbBGVMSAURXn4SzQ2EGgJgrW40wnKZ5Lq0AADA6izhrudl0jCHppmAwIBW
      AwhorYxRSZQCQrQyFEptYZJyhyKl9JkCKII9n/z9993/4LPB6oH+DWDz2uFzzpuOUEnU5w0A
      vZ6zf2LxzbfeMjc/f8EtV+cb0hnBuXCcfFyB43kaWOh5UhvXZYw5EBkEYd5ThhGilALMpMgy
      oQoFH6KcZ+tkiCzVFiqlGFtOCGJMGVPWAKmN6/mEqrMfswSg4/lKqcA1IlOu61mz9F6202EB
      gAgRyoIiEZxjgiBEFgDf94ySGC/x4xxJors5UBfLQ3cV1kVbOCmJ3r1795YtR3LkqalDLuvp
      6Su+0j2IwjrETuDnYE2yOAYEC6mLvlOtho7LgLVS23I5XxL9CjHRlVIxjuO8tDg4xkRDHSYc
      A9s+Ex03qhBRC0CpWGjpYKsXFmvFYkFrm2UZpYRQhoCJU46hbYmJvuyay1aimW/et/+Ki/qf
      fnDsNa+7/N3vekveMeSFk5O4k0K4QY+MFjTWlJGFWlTyiJQyC4peHoHTK8REG8WnZ2bXrVuH
      80YiNCIzpZKLoQBGtc9Ee54/v1h13ZZTTAu0UlpLoYlDsTTGSlkM3JRLq2VLTPQPf/hkoezO
      z6cja0szE/GWzaOr163ON4CcyLIsL2krOdfASqkpBkkqHIdBAIQyuWegV4yJ1ko5y2WiEQIG
      EmhU+0x0HNaZ4xoLioWWpsMmE13pKUuhkixzGMUYYwQBZlnc6DLRXXQeXSa6i7ZwPGWYOrjv
      +X0HL7vm+hJDAIDpqamVQ0Mvf2AHYK3JMmG0QMT13BzESRw1LEAWwILvhmFMGEGIWKM9Lx+f
      lMQRYY5W2nVoGKcEAdAhJjqM00KhkLedJhONoUm57AgTbWTGlQUABH5rv4zVtVpIHYYglEIG
      hUBIjaGR2lgliRu47NQc8/jr6fGJpD791W99e6WXPfTUocvO61PS2X+wft4lm956y815h9FS
      b42VSmIImUNzHeg4bq0RuQ6TWaKsVZkgRFtj8waQ0prHMcHYUqhFprAjRQeYaGuUFlkmfZ/l
      1EdDI7ixVliAUCeY6HhhzimvMDwBrQYQ0Fr5NKgvzGPXX6zWMMa9PeWkWicEO3SJFcrxt1au
      Hqkqe1lvL7TS81YNr+mrTh7eeMHlK/teKUkZwthhDACAYb5LNUkSz3WMBRYhigCmGCECQe5k
      DiPk+b7RyliIqRsETsbb2qbSZKKbrXk0t7q+yUQD60htHMraZ6L7BlemXOGWuYAmEy2FKJQr
      SqpKX5/kaZpm1HEIRkuepS4T3UVb6K7CumgLx2dsHi089NgOr2fgyqP6w7379zfF0SqeW9CV
      FaV8mcpZYa1JU65kxryCy3I0fhITXY9dB2sDEQTL0EQjjJW2pYJfqzUIRQDS9pnocsGv18Ni
      pYJzJ9EdZqLTqG4BhggVgtbEDlYvLNYcx0EICqkJQRBi32UpF0pyPzgjE/3UjhevvuG6b3zl
      S2N7DsyNPTQbD27Y0vflP/+LDVvPyaoTcWnD6j5Y27/rolvff/nWJbbaLwPWWCFl4PnK5JsF
      jzHRsBBQqI3BENrp2fllaKJrC4vlSo812hitNEziDjDRIo2kMdpYnDeCOsxE6yTOEMHagJYD
      CGilaLEU1avWmkx6PjPGMim5USqO0nL51Ev0eABdfOGWB35w37rzrlzdVzm00k+tv3bNwOjA
      kNc7SME5DQ4JJZedfx4pLfPHPR0IY89hURQFxdb2DByF6/uaZ8xx0yTSADNMfM+lq06/PM4C
      gvHg4KA2VmmNMC0ELsFtJdE8TbSFmLpUZsvQA2FMHUdJKV0/gEYRJpbVC+T4BSlVwbV+4AEA
      AWp1UBZYhLAQ3AsCIbRHIQDIAug4rrCZX1hiOdXNgbpoC10muou2cHxyE9HCw0/s9HoGLr/w
      /Gp1seeoY8Mrh6NMtGSuT0mOO30ShwgRZUHgsjBOKUFwuUy0BdBYUAzcRphgDDuiiS4FbiNM
      CsXi8phoBDSX2mrVESbaQKK1zqWJZq4DgFVSE4IxoQ6jaZpiCBDzTlcMHw+g7Tt3X3XdG771
      9391aO/BsYOP/8ytP3/P3/813HTl+kJST9Brr75122iHQ6rJRCNglVK5AsgYK5UAEFmDtMhS
      jh2cNqJsZGQ41zkTQhDmImiNkpwLx2Vp3AEmutmaG1i2jCSam2LRi5MahrYjTDQtDmArc2mi
      o1i7FHJhLXQsUEaktZgDkZZXDBN2ameOB9BrL9jy4H0/XLf1ipHenrXDvrX20utvPjyzMC/c
      jSt7RlYubb3TDppMtJKCLCW2PdOBCCGMrIVSaUzdEkUQEd/P/eyJMaa1tJgagFyXeZ6L20ui
      jzDRALkuW14SzZjK0pRQ5lDcESZaWWx1qz1pMtGB6yIIIVIYI4QgcQq91CGobLua6C46ju4q
      rIu2cDwpmjqw9957fzDX4ACA++79vnz5YzoFa02SpI16NRP5vi2LYy54I4qB0bVqPYqjOImr
      1UbeSyEKG0mSNKLYGl2r1sKwEcVpTlLzJAie1RohACCO42UcrpXIuGz+LPVaLeN8GY2kcRiG
      0eJCVVsQhXUuVY7OWL2wsBBGYZykcRynSZykmcjSehg1GjWlTy9kdaIe6PDClTdcc/v/+nQV
      rkoWdh86uHu2LpA3+JH3/dIyhtFSb9tgorXRSijjoIxzAhxqpbFI59xYaIxJ0ghhIqCSxgAD
      k/DHr4lmBEkpQCfcOTjnURRLi1t9yGOBVooVSyKLZ+erhSDwg0AZDYHRZ2Wih1b1PXLvA5ff
      +JYwljpd6xeCdVxgJx9HnAvtMNEGAg6wkMZzHUwQAI7VNu/5QggFQaANwJRQmRUCryNMtAF4
      ZNVQ7ug5ykQbAB3HQdBtm4k21nELJR/YVpPxJhOdJJHjeCOrhozRACKLoNIGY9BlorvoPLpM
      dBdt4SRN9IsHDm275Kr+ogMAmJqaHhpaeeJHdzz5cGL811124bF39h3Yv3F0/bK/u8nbMoyY
      5+V6DMrT1CIopS4WgjRNIbCgDSbaAhh4Tr0RUYo75s4RJqWce4wAAFmaGICOWsp1QBOdJaEF
      WGldLrW2QfSYJhoAIRWhGEJCkBXKAKPO4s4xPbVwxXVX/+3nP1sD/VsG3EPSHy4mL+yb2rhh
      S/XQkxe84b3VyYmGsA/+y9dWbT7/8HxtqLzKLWR794zdcvN1eQfZRJO3lULQvFpmIVippFVi
      tJibXygVC8Aun4lWUmhsCMFc2o5ooiHCBGqlLc3JRDuOk2SCC9Uhdw6dpDwIAmRbvjyPaqLT
      NHMo5tpiIFkhkCox1izpznGcSJw6uO/Fg4cqPf1RLGenx7Zt3VqtTmewtGG4b/zAvhVrtzXm
      9qXWh9k8diqZsjqNV61f4xM6snqZOw9FlmQKeAxjls+dWwkhtVQGMoIhAMZogAgCluWUXx2b
      gVxGojgtFvxMKIzxsgOoOSLfwUkqlvEsLI5ChAkEQGrjMqKUwtTNG0BZEkqDtFJBIZA8wxgj
      6rYYytboaq3uOA4EQEhFKUEIGa0tQkArxyu87MbCbg7UxfLQXYV10RZOSKIP7H1h/9gFl149
      0DnN4ZnRjiYaUsKFKhWCOI4RBFoboXSlUsl114jDhoXIANh0+aAMQ/Tj10Qjq1KhgVGd0kQr
      rXP5RDuOgzCxRiMILCIEWi61VdwJyqezmqcy0X/+hx9nwxf68sVYnnfOSP0HT01v2LLuF9/1
      i8Wz1UxYBjrARLtkema2SZg6JPfGMC44F4oyp+nykUkjs1eDJtrjMjIdYKJ1EmdBqYBsyy0c
      00Q3arVGVCmXMKEGWq4EIy5PM4eeykQfv4U1Z6DBlUNRqlf0AlOHWeBO7D+4asOGCzYtf61+
      ZvAsS5I4KJbZUrseXw6ScwMB54rRI0m01ppL09OzrBnIQt8ljTAplYKsI+4cLo2SrFQu55/J
      NM+UlFwD7LEO+ESLLCGEIOrm8ol2PBdjgiEwRlsAIYRKG6u4G5RPz+i7OVAXbaHLRHfRFk6Q
      cxzcd//9982HHACw/8A+AAAAulqtvdI9iKOQ55RzNJGmqTW6XqvFSRJFYaMRLWMuVZI3wsga
      XavVkyROkrbkHD85sLpWrcVJkqSZFDyM4iisC7mE2+upTPTnP/3pG666+dkXHvi+gDErvXbT
      OdfdcM0r21UApcicPKswAABPo8VaPDy0AmHsYMgBNkrklXMAADIuEbRapE0mWmQhRKhVCfpP
      MCzQWlmJCTZGAwgMgFhkKaOnei2eykT3D6yshVyH444/aAheNTA4un7tK9rVOAoJc/MGEACA
      n6C3ogTHSRbkt+RRgidC+Q6N4rRYDLJMIIy7AdSkpJnjIIQQAFIbaBVzCy+bRHdzoC6Wh+4q
      rIu2cDITPTa5cmj4vC2bAADVhaoOI3/dah+A8fGDMkmHN57j5GXGWkAUNpgb5HpkGDZqAGAD
      QLkY1GqNIHC1hUmcVnoruVKgKKxrDRClBY/Vw4QgADrBRFdKhThOluETnSaRtsihOOXS6g4w
      0U2faABhiy6tTSaaOQwCKKR2HQIgJgjEKfcZwW5wpo2FU4cmFCu89Ng/Pf7IyrnMVKpz2uv3
      hixBIyOVeKpOxfe/a/x+f2jD5BPffcv7P7mhbxk2tkvAGCOlYDSHosPzvIVqw3OdI64aUkaJ
      dF3CFcjlEw0AIIwKIS1DiieSeB1hogGwQsj88QNc14vTLI5jC3FHKhZ6nl+rNyAmRZBPEy2l
      pFDUQ14IAt91Uy5mp6d7R9adaWPh0OimbWtGDvXgPWMLl2zY4MQLe/YvDqwtu05Pb9nZpMTY
      TF/RLxw4PHflNTcEnXuwgRAiJN9pj8Io8D1tQMY5wtRxXUhYEqdBa3bsx0CogyAwhBgLCfOL
      BTc9zUQyF5qaaKWM5y3n6oqiCBPquJ7SxqEd0ERHYeT7fuvExDFNNKNMAVwqOAghIaTnF4IR
      Byy1e7ibA3XRFrpMdBdt4SQm+ocPPJBIAACYn5qWAIxNTJz40Ymx4y8nJsba/24peCOKszRd
      Yr/aGZHEYZokYRRbrer1RpIkPMsajTDvXJrEYSMM640QWN1ohHEcJWnWDhPdHBEANk1bLpR8
      ArSSXCgleJSkYaPBxXI2FmZpHMVxrVY3FiiRJWmWpC3PDkcJ6CzLGmEkBRdKS8GTNA0bdaWX
      +GlO8omWrPjQ9+546ZnnxMDwO//TL4xNTiYzB/7ph89feXHProcbvaOF/V98prh6/cqBkoPl
      F//48ffe9mdr2vBcWLYm2hib8tRznWalQWmMEhlXNm/FQmCBHwRpnHTWnQMAIITMq/AH4Ig7
      h8OgVqpTPtGAFSEwfos5mQVaK6SxUUJLxSGwGFGrkpSXfIdLRfCpfO8JPtHrNp6/emTfMyYo
      9q0cHSHAgqRedQtXXXGRB+JLrhvNNFg71EdKq3p9u1irXX9zPw+rdYvL5WUGUdPLwvPcvKtm
      hJDvucaCLIkyoRmj0PEg1rkrFlKGrXY831jVQXcOpbS7rHVc053DWEMwYZ3ziYYt23A33Tkw
      wggRC0jguUJbo5Hve0JJx+u6c3TRaXRXYV20hVOZ6CuvutanYO7wVGXV0IvPP1+wsm/LhZ02
      iD4JcdjAzHPzlMsIGzUIsMW4GPhNTbRFxGodtGhmexRRWJfKIkxKBa9eDzFBbWqimypvz6X1
      MCmVSnnbaTLRjKBMaqtk+0x00qhBTLW15TwVC5nDECLAGggsIqzJjCuenE0TfWhCscKP7vzW
      vqefFQMj7/qVX7z33ntLWVSZWZh+/tmq9VdW0PizL37gk5/tc3NXgTgD4iQJMAUgRwB5nhfF
      qTWm6YNRKZcwIdbYvAEEACiWy2kcNVXM7btzNFXeLoWKJ6ksBDmLrTSZaOa4YbRAEGifiXZd
      NrMQlpYyRXiZY09y5+jr7dFc0nJJygQiuqQm+lQmeu8OWyj2rxxdQwC45brLD8+I+er0LW/9
      D2OTc8ODpYnBVTh/TZMzI/D9ZTDRhDkWQKFs00TCouWUaSfUUVlsAMKUdcSdA2HsOY6xgDB/
      GcVWmkx0miTMcR1K2meis0xWir4BrSfRJ7lzaK0QJhZAxwlEGrvBEls7ujlQF22hy0R30RZO
      yIHGJ/pX982MJSNr+4692ZgaX1TGLw4MVnKnFy1ieYpEJXgqdTHw0jSDwAoprYXF/HmrkjzJ
      ZDHw6o2IMQIAcr3lJ9E/OThq0wHhEbeQl1MknsBEH9z33IEdLzw6vWrTYGNme5ysW7l+xevW
      Fr7+5MQbtgw9WJuc3T6WrT93uNd/55s6WcBweZpowhydVAHwhJCBS43jQyWWcTPuaqKXRsua
      6FOY6L5e/JxgzooLR1987IU987XS5ef/+jvO2bNr//DI5otGL9y+d/f0YtjZrkJgCcstflCC
      E+pwLlzX0QA42IaZXsZpdxlNhAKYqiwtFYMsryj/JxRNSpoSdFQTDZsz0Omf7DLRXbSF7iqs
      i7ZwEpHYv6Z3+mCyel3/0ffk/v2T69ev279/7/r1mzr+3U0FMcPIDYKcBlNpKqwFthR4tVqD
      MoIxTlNZ6cXw8hoAACAASURBVCnlSn/jsAEgMhAVPadWjwiBHdFElwO31ohL+d05jmuiheoI
      E21EwhUAEBbOVrVZiixKuEOJGwQ8jpQ2UhtGMUSUIptw6RDMgiWEqCc9yti5P3zu4anhLSvC
      6aeSeP2qTcXHn3jm7be+8a4777j25269/spr8w7mzGgqiKUQTk798OLcLCkNWpFajxmjMwGs
      jCGmeTcWcsG1gYRSw2DGuYOctBM+0RBTh2JrQcsE3hE0mWjBuRCKIts+Ex3OTkOv16EIgLOR
      0RYIKZE1ThBIbQAADsGO63EuKSNQqNnp6cG167zTVK2nMNG9ffhZ7jhDF62fOxTborO6tzex
      9C233jwvlimROQOaCmLf9/Je8IMrV4WpBI7b1EQTgpDDhFR5Zw6HORYiC6CxyHOdIPBoJ3yi
      BU9ToZz8vEeTiUaEMoBd1gEmenBoJOGqlSTFAkAw9nxPZhnGSGudSSN1xBiTUvtBwXcY6mqi
      u+g4ukx0F23hjEw0rx9O2Kqe/NLM1tCsWAiBXYZPNMBIKRN4rBEmlGJtAEYwv090qA2ACBcC
      P01TYLTtTMVCr9GIC+ViXk7pWMXCTvlEp3EDYgYhzFWxkDIKIVRKey6ziECjkkxgaM/mE30C
      E93Xk+76tym3Tx1GAxtX9iSz28+/+Ncuv3RN3sGcpbfGSiWhMcvwibaMZmnmUci5wMQllPE0
      zS1DtgAAIKRs+k339pTjsAOaaGuMsVpri5ZVsRBC3SGfaAMApJRmaZKrYqHPCiKNONeMIqlR
      0SVIKGvkkj7RSzPRSMy/5tqRQpltjDSmbNVFowzl32h5NjQrFiKYd7ECHM/TwELPk9q4LkOI
      uIxCm3dzB8CUMQShUMailYMDhCDYcoXsJdHURGujEcLLK7bCmLIGSG1cz29fE20oowQb1ur1
      0CSg0zRh1HGhYsyB2kqpXM/jicbdioVddBzdVVgXbeH4jD1/cNxft9rntcnYGe49IZlQ8a6X
      5jdvWXts/prau7+8aX2b8o4sjgHBUhmoFfMD1lrVZi14LDQ0EhOmtC54rBYmDqMAWKFMpZyP
      iY7COkQMQuA6tF5vYIIRZj92JroQ+HEcK9kBJrrpEw0RKpxR7NuoV5njG2Motha7iifWAqE0
      IwgRx3NpHKda8qBUOf2+fDyAFg5OfOuJB8uLB3bW/Z5CeZAcmp3AxQ0bkvk9EwuVqy4dnn1m
      1+LqjWvk9IH9yW999uNtBpAUwkKWxolDsYojVm7JCVsbo5Qk0NTrNdfzEWEO4ZxzLbmG1FiQ
      95xRRtMk9n0PYUwQrNV//Ex0GtUXakk5YB3xiUYEawPOHEBKaYSV1qqxsOD2jiBtNE+4Rn5f
      T5KkMg0joX2GhdSec2qOePx137qRK9es6LHnrpiIiecPVy6QmXM4Sr3zRhfn+MpBZ1XPimDt
      unT64PA60f7K3vV9DSwMAqCl67dqqwERIhhDC0qlkrEgiRqZNK7jAMakNnlnDkIdRolxHKWU
      4ziMoBJoy3akI0w0dYuDxEEQts1EWz/wAIDgbCsDhCChlBBcHBqJuCYYIq8AtZE8cxllTtER
      GeecLPWcqJsDddEWukx0F23hpMltbGJi7cgIAKAxtU9WNvadfKNKatVDE3tJ3zkbh9pwVDgB
      TSZaK0Ed38np7KSk4FIHvpemKYJAaa2UyauJTuJQKoswLvhuBysWlgpBugxW8ygTjaHJhLJa
      daRiobEIIhScTc5xBFbXaqEf+MYCniaEUkIZAkZqY6QgbuCedpqOv643amMT+775xT82G6+4
      coDvMVPhs3dWznl9D1zc99zhnosuJ7setcPFPQceWb1m5L2//Pa8A1uit8ZKJX3XVSY3B6i1
      SpLUc/Dc/ELge47rMQJz34wtCIpFnibHNNEdqVjY5LWHh4eXU/abG4y0kJpC05mKhYUCTzPQ
      agABrZUxSmqMMAZGJ0niu0wpjSBylqpncpxInJk4MLnYiOamDSv3eAZW1iaTz6NggBBVwH6G
      AcygIVEtRr7nX3rh1nyjehlwzrM09YJCrmIrAAAleKYMxQgCYK1RSktt8u4m5pwDo4SBXmcr
      FrrMaJ23fCIAAADDuQLWSG0cijtSsdACCGCrM1DTHrpULmkNgNWmubHQWm0swchZakRdJrqL
      ttBdhS2B2RTMduKCOr+nA428ynGCxd2hiUNje2vJKXVP9NNPbd+zd/8r14MobDRdvXJBCr5Y
      rQFratVaHEdxHFWrjbyXQhQ2hBBJklqjavVGFDaiuK1iKwtTBx5/7DHD648/+JDMndcBrUTG
      pbUmSdJ6rZbx5VjcpXEYhtHiQlVbEDVqcZLmsrhbWFgQgmdCNH/YNOOCZ40w4kmslhrRiZro
      PY9PzPWxJ5FYDGUA/QIT0l3R9/S9P9q4uvhXt8vf+4OPlzuvawVKKRnHrMWajEdBGcMpb/pE
      E1YQaWSMyauJVkpxERGCm34ax3yiAVgmE903tG56ZkGltcbUCwfnL7uoL6cvDjQiM4wgKQXo
      hE+0BdBhLEli0LrFnVJaSyGAMRrTIE0SaLWFaHZu4aw+0Zv/47kbnxkLN/TDF3aPr9m0pUD0
      fC0q33jdyoHS4HTktqV0eFkQjJmXXytitOP5Gc8QplkSEUKwzc9EY+wXAqNVp3yip/c9U89A
      pnAwuHV0ILerEsbUcZQB0HEcBDvgE22YQwleMvldEk13DkodCHVmjRK8uZ5Q2gyNjHR9oltF
      NwdqHd1VWBdt4RRN9MixaXdyYnJ4eMXk4YXh4RWv0Hc3mWijBWGtMtFNqpdAAyC2APourTcS
      xyHWGGlAq0ZuR5HEodIAExL4bppmndJEF323ESalcjFvM8c00VzqjjDRRmZCA2PMmZ/GAwCU
      4HEmCLTUCzDQyiCjJQQWYgqtVgYYJd2gcLqN1wma6InJyuqRL//pJyTqJ71D77rxokceeXLv
      S7uN4hSAaeGWUbT7UPjpT3y0U7lQk4lGEAmROaylc9+keoUQ2kALAAWaEFSP0oLvQS10XjmH
      BZjgNE0D3xVCMoLCTmiiIcIEaqUtXZYmulj04qSGoe2IT7SAbsE/ewZtAZBS+kWPc+kxK6Qx
      SlKCrFUEAaWk1SpNRLFwakCfoIke6nvsocfPu/gqqxEtDZYG1w6GaqivWMv49/7xq9tueueK
      wKxesxwLlZdDUxOtBKctSx+aomPGHACghchCo5QuFzxrrcG5Xe4wZQgC4HlNZ2dKUAG2Jec4
      4hMtuQbL10RnaUoocyjuiE90JnSLaS4mWAgFIYbYYdQCAq3RAAALICbUWOD7S1xX3Ryoi7bQ
      XYV10RZOYqJPJqGT8YPz/wd6EDXqKc9HeGRxzAVvRLHVslqtaa2iKF5cXNT5yV8pslo9tEYt
      LlSjKIzjZKmKIj99sHphYSGKojhJBc/qjbBRr3KxxC31pFVYec3Id77+18/uPbxp03omk4lJ
      PbSxVNu/66Jb33/51sFXqKsGQMMzL0/eKoXQRiuhYCFwKF5YWISYMIJP2/V2dqSZQBBonlBG
      MmlFWocItVqa5CcYFmilMkQYNlodsbjjWeqw4ikfPH4Lmzqw94WJRR/FGSpvGu6fOLTb2LJ1
      8FCZkdLaNUP5HjW0jrBRp46Xa+EjOTcQcK4oMglXlUqPkpm1wHVzn3gpsjiTBY81wqRcLqSp
      QBh3A8gatbBQc1wHIdTcegmtdLySc9qjjG4O1EVb6Gqiu2gLJyTR46ck0WDPnj0nvU4X9k01
      OvjdSvAwTuKwIZTOdWASh/V6I4xiAECaplmaJElSr4d5lRhJHCXNyodG1+th0qGKhdboeq2m
      8jfUrFgIAEjTzlQsTOKQC5FmZ29HCV5vhM3qkdbqOI7rtZoQXCgteBbFycvVYDyVib7zm7cv
      LNR1cc273rDp9q9+74Jz11FbS1Ozb1Fu6UfbDyZb1g3s3TV22x/9j/YrrjS9nl3f5Vy2uDP1
      CI5qmZvq48DzgNGIOcaCXOydECLNhB8ER7hjgztSsRAi3NymmPt4aAQ3VqbVMCt6pCOaaA9g
      Y/RZ3TmaTDSyhnpeWKsrgBjB2KpEIqgVAFYIs+Q2geNE4tTBfbsnFz2UYFIw1B8ZrAwNlh98
      bM+6Yefv/vKvX3vLL6wqqPkIlAKyMFO95qYb3LYrfyvBM6mh1dTxcmmij2mZGcEQAGO0BUAq
      UygUcu7KiABExgKX4SQVge92ShOttW5dRHECDOcKE6KVRBB0RBNNmGvN2TsjBY/SrOC5xgLq
      OJJzAIBDMVfWaKWNZQQvqfLuMtFdtIXuKqyLtnD8xjFzaB+qjEy8+MTo+VdU/COyjoVqta/n
      lZJFNev7GcUh9QMvx10jChvMcZXSnkur1ZC5FEGYcVmpVHLdwuKwYQHUFpQKXrUaUobbrFjY
      dOeoFINarVHqqeS3uBNSQ2RVKjQwqjMVCwmTUva0qBi2emGx5rouRNga7XtOyjWBhitjFT9L
      xcLJ8blDj/3o4IGXvvvw7j6nVh+PzOi5F4/233LjDXnH0CKa9f0whJ6bs1TPUS0zg5IyEqWS
      IuBSkncu5YKnXBULwVEm2jQ10W26czSV2kpbtgw5R2ZKJY/LyHRCE+26LBUGoZZbsEArlaQZ
      hrZaD4tBAAkZ6OsJF+Yo9c5WsXD1au6QrZs27K+TimcKl3q8NFgipyztO4lmfT8LLG65LnUT
      x7TMymopRcGlEIKMq7x7iR3mUOYaCwGhMk16SkHWnia66c6htEaYLmMV1tRER1FoAPb8Qkcq
      FjJKEW2VWG9qol3XQZiMBAXHdXmaJEnKnMAq3q1Y2EXn0WWiu2gLJyTR4y/h8vDE7qfWnXfZ
      sST6FOzf+2xl5ebeYifrsSVxRB2X5qm7y9PUIiilbrpqFEsFITSwOr9P9BEeKPCcRiPEBCNM
      29FEN+soFjyn3ohK5XLedpqaaEZRlgklRSd8okOIsDagWGhN83m0UCECQEhFKYEIEwSkthDY
      JX/e46ft8MTcxBMPHTzw0tfuff7KzWT/c7Oyp7x6Rc/zjz40cvE1A3YmsRXJ56fDh0dH1//C
      W2/KO7CXg9JaJmm5dKpO4EyHCMFKJa2OuGrMzlUpMkkmR0aGc50zpbUF1hoNAx9hjCFstKeJ
      bnLrGhtCcCaNn7Psd5OJppgpJUEnfKK11lEYlwot7zVo+kTTIE0zh+IoTV3Xg8YmKacEnyWA
      Vo6MCEbP2bB+kvduGLRbN4HZlBcds6Jcnk3k5g1XT0/PjwxtnqmDnt5KviGdERgh5uazg3M8
      T2aJAdAirBRfMdgvBS+V8j3HaH41RNhYrJRijLWviW7WUQSYqCwt5SthBcBRTbQBkDGGIGtf
      E20xrpRLrT+Ua/pESyEoRplQvuchhKy1vu+/3JrgSBLNl7UNu4suuquwLtrC8VvYvueegj2r
      Xtj+1Nq16/rLzvzM4Zit7C06Vgip+Jq1a6CFpXJnzO1ORFhftMQvBflEgFLwaj0c7K/ML4TF
      AlWGCpG1yrceRb1atdYixy06eG6xQQi0kPVUctcOPwbBszBO+3p7FhcXe3t78x+eCIUJVEJb
      nsRuoVDMWYoPABDVF5XFQoie/gEV11KNMIKtpphaTs9VyyVfW5wmCXMIIYwiEGeSAOWUek9P
      6o4HUKMun3nkmyKdBQDcVTOX4ANP1nrWDDildGbntF5/3tZ1K1dfcXFnjMlOhAW42MLOt1NA
      KXEc12gDgbLIU8qi/KfdApMJSSzQmDLGLMJZFMYUFwvLLAyCMXYcxyjeCONypSfv1jDm0CyT
      meFSW89zorCBEfO9fDQ9xrBRC/1CUSoTRw2FCwjoFgPIQgitBAhpYRgBQhmpMqdUsDqJ4hD5
      ZXYGSWtYb0RZ6lI0PjEzvHqYGLFQCyUgg72lifEJk4ajr31diS732nx5KKVInjX8ERitLFSS
      K20C39MGAGvytpOlCaFUSM0oTlMe+K7SBkCU12/vGKTgKZdNSfVyBgWMktpaILVmlBitMHXy
      RqHkqbJYSeF5LkZQamOMbXVdaW0jDIvFgtaW84wSDBFuWtw5FAO0RCZ9JIBMfpvLLroAx25h
      QizvsUsXP+04Ps2+9PzTsGdox49+dO3Nb5ybGd+9/YFVr7l5RV85mz6459D4uRdeTJm3eHh8
      oL88O7agBsuXbO5MIfCwUSfMbbWkHgAAgDhqWIAsgAXPqTdCgDFGyBibi408+tWO4KJUDKrV
      GsbIQloq5ZM1nggpeJTynnKpXq+XW6v+cfLhqdSIYpBkQgvu+H7g5y6YEIc1bbGUstzTm8UN
      KbXjea1uVDJqbrFeDFwDmeRJwfdSoQmyylgtpV8o0dMc4PBtt90GAFBKjb106MlH7zMufub5
      Q4ALmxy8d+c0MZlrZL0xc+fDu2B179Pbn5o0rjgwvuiirWvX5h3bkkiTBCLMWI5U0RpDmauk
      YI5jjAUAQAAgBHlVpGmS8CyV2hYKgdLadVkUxwghRnObizXRDDyM7OJiIygUUE6VAcYwyzRl
      RHDuMJIkCcKM5lKLA2AUj+LEcV2AKQYGYSyE9FrbMWetTeOIeZ4UMopiY63W2hotpVDKIExO
      zw6PS1rDeiPOMmqzvRP1LetHwuoUZEVA/QpTO/dMnLN+ZaJJODfF/KLvl50C7St1Zqshz1LC
      3FypYhJHhLkIAiWFVJpSijBBMHfe2vzqpgcFAABBqI0BEOU9Z8egpMiEch0GAcDLSaKtUtpa
      q7RhBBujEWG5k2iRaYu0Uo7DeJYSyiyArSfRURwHga8NgNZgQpQUFkBtLDCaue7pl0SXie6i
      LXSZ6C7awvFpds/Tj6re/nQs8oYqNgtnF2eGBtcODQ3ufOh7M8HGc3udc7ZtyyvRPDOMlmGc
      Qasw9YI8XGLYqHGhICa9pWCxWieOA60WEvb1lXN1sF6tMs9Lk7S3Upidr1MKDGiLiZYiC+Os
      p+jNLTZ6+gdozsepHWeis3BRaOS4TqHFWhlaTs9Vg4JvtFJSEeZACB2K45RDI5ygxz9NfHw8
      gKIEpGLPIw+MlVb4LB6fq5x/udj+vfuzSvW5+lC075Ga6Vm7bXUnH2UgTKFNKaUkTwYNACCE
      CmUJggBh5jiM0SjMgIXSgFwCCgtMdX7eEmaUtNZgGqSNRjtMNETEWq2VYIxJZWhOOUfHmWhC
      WSpSntoWA6jJRFuAjLHMcSglAGKMgOMQLYEUEpwWQCcx0Z5PxsemUottWusbXusRKIVUSUN5
      PbXpiXO3XdDZGQgAoJRKk9jxglzkbxQ2mqZryGqhtOM4zbXGWa0kT0GWJtTxrNEAWM6F5zpt
      MtFWq1SoJq9dKBby/1odZqKl4IQypU2rLIm1jTB0HWYs4JxjjDFuMtEAAe36hdM702Wiu2gL
      XSa6i7ZwfK7eu+Nx3duXTab+oFdkDPrFQEePPv9Sb7E0OT1z4Ws2u1758NRsmRlaqCTcbF6/
      us3vNlrFKYdWYlY4vRzwGSDSSCNXZEm56C9UG01NtFYiL/kbNuoWQGNBueAu1iKMIegEE10p
      BtVqrdTTm3dnT5OJ9l1Wb4RaivaZaJU2JKBS8N6e1kSkRs0t1l2HYUKl4A4jXFqHIqG01XpJ
      JvqEJDq12czeu+/Yce7lWxfHdip/402Xjp530cX/dvtnGivesHDvfaaeTLHgstXD+8fvLQyM
      th9ACBNgU0KoUhLkCaAkjrjhAIKiVtbaRhgDLbnUhWI5l8ud1hphwhgzSlJKLcJZEqUpbrVA
      5GnAGDuMQoQpY8vYF0YZzUKZpXEmZNFjcRwhRPPuusQIRmHs+YHUJo0j4lcoa31fGIRGxal1
      qYgTQcoFPyiINNKKKwWIkJScmkudxET7Pp2drYZcV4oOsHBwsP/Zp58aWbs208Ski5D6s3P1
      1SMrrIxn63Lr5tFcA1sSSiklJXXyMdHAGmUAsEZrrbXxfE8rtQzyl2epBVBp4zqsmUR3iokG
      y5RzWKU0gAhY03QdaZOJxghqYyFq2bTa2iiOHYdZgDAEFgCCkVS6y0R38Uqhy0R30RZOZaL5
      ROqv8EqMAb+I08U61xAySHF88Pl63/lXnTfSti/ZcTR5WwQ0dYIWmegmeW21AJBIpforhbnF
      qFIpxEkqhewfGMg139drVa0tYaxUcOcXQkq0sh3QRPeU/GojKVcqedOgJhPNiI1SrnnWNhPd
      H9erzHGVNqWzlaHJkjjmkiKLqUeREgqlWeZ71FiEoRVKG8H9Sp97BneOJhP9vX96eusVWxfH
      npH+5g//5ruf/t73HMdXej7aN7+TpFefN5J3PGdAk7dFhCgpAGgpgJrkNcTEGs2Yq5WyVtfD
      CALoOCz3TlCt4iRzrTUeg0BB4vP2mOimJhoCoHgmtM0bQE0mGjkM6LgjTDTnAhHH2rOTfAjj
      LA39SoEwSiFMuKLIAkQVFwBZrQ1hzunRA05nomdnjibRAK4YHKzX69jwmZBXCMmQs2JFL+kc
      Gd3kbaFR1PVJy8snpZTkGXVcgLASmdbWD3ytJABwGZpoTKhUmlGcceG3zUQf1UQ7XMhlrMCb
      TLRpyjk6wUQrIajrWaPP+ss0KRVgFEAkCDyjLeecEgQgAgBoYynBSzbSZaK7aAtdJrqLtnB8
      UlqcGnt694H+3v5y76AK53oGBuYbqajNb9z22t1PP1IVGNXGi+e+buNAUOqQFrGJZWiiwTH1
      cdFfqDY83+VZBgAsVXpyPe4NG3UAkVC6r6dSr9cxNMp2gIkuB24jSgul0quBic40AtZWyjnU
      4nFYM8g1insuVZY6BKRcYiuRWz6d7j2eeYxPHr7w4ku+/y/fl7p+3w/u/NpX73jokX+bPLBz
      +/OH67FaNzy4b/eememJ53e9lHdIZ4bWWut8RuPgKOdrtLLWamX8QpkxJ38SrSEEjDKjRRQl
      mLqcv6yjduu9ghAoyXOapwMAAGVUK9Nkol2XJXGUZrkd4jCCaRJTSqU2zRby1qDBCGZJHEUJ
      xlhrgwm1RsdRKNUSZg8n2Pxa88zT2zds3jRXTVU0XyiXw8wOlB3EKoAvTtVlrw8O7t03cuHV
      q0rL1JwviWVoosFRzpcSrLVhjCII4iQLcvpE8yzFhDYNJSEAsHOaaCllXrMiAMArwUQrbXLI
      OY63gCmGGKPmqgJYgxE0YIl6SF0muou20GWiu2gLJyTRhw8+9eL+YqFnsNePFYHp/MrV62cX
      Yywb687Z9uLTj8xGdvNIn3V7ykVnevzA/Gx1aMsFgwW2bMuOJq3MoAZOycuj/mxqoglzKkVv
      fiFkDAFrpIaVnkquJLperQKEtLG9lcKrh4ku+HSxWtdStK+JjuuLCBOlbW9Pa+seLafnqq7n
      OI6XJhElyEJCMZTaapG4xT7vNHOF4wF0aGLyoksu+8onPnfOW649tGt8zSrxnW/vuOzKlS8+
      /cLlpiduZJvWrd19cOyRe7926U2vV4kYe+5Z66jFwvrLXrPMAGrSylHcoMj3WA5XOUKosTBN
      M+M7ECiuiJWZMUCZCs5Xs8UoaTzfb7p8vEqY6DTmqZBlvwNMNEIwjOLWlb5NTbQyjonrjSgr
      l0sIaq60MgYYq6UCZyo4Z82Op54cXr2RMDkxG40MFqb37X9k7/zrLlg7eu42UZ8dm09KiHuV
      vqnZ2vBQv4oXn3l+7Oobr/facIVTSmEEDUC5UsUobDT3y0FgmnvwICZCiLyL3ixNAERSac9l
      rx4mGiAMrAEAdEQTjQlV2rS6tfmoJtoigiEwSlqIIEJaG2uU6/kvK+foMtFdLA9dJrqLtnAq
      E10o9EzNT120ca12yzxOXGyrjTm3sHLr5vWvwLfber0BgfWCYovUyzEZtTIYY1TwWa2ROQwZ
      C7WSy9BENwV75aJXrcUEG/0qYKIxNEIZmaXtM9FJWEOYWADPmtXxNEmEoshgVoBGSCmVNpQx
      ABEGRhtrlGR+yT0tBzqViX7sW9+JCN2585kv/skXxmbHxyb23f2v/3Zw/GDeYbQCniYJlwhB
      3nLdeIQJsIYQqqTIOLfGAiMBIgjoKMldrVJrLYTQWltjodWQOK8GJpoLIWVnmGiEYJZlrZB8
      CGPBOSFUK4kxNhYw5jBKjFIAWC4Epex0RT04nYkeHlmvKQxnZ6Dj9fWWq7OzQSmYr/FXZgZa
      jia6eQihVGkDgdHaImgBIgSjZbhzNOUclGAhpOuwVwUTba3skDuHkpIQoi1wzrb312iVcokh
      ABAhBKwBQkrGKIQQQmiMkUK4fnC66qbLRHfRFrpMdBdt4VQmOpma5UHp4osuzOoL5YpX6F/7
      coVXOoV6rUpYPneOYxBpnGpoZaoNRBjn9omuLTpekMRJT8nviE90k1sv+qzaSPPS4gCANIml
      tqWC3ykmOgsXNaDW2p5KTrL3BEoaGMmVsUoUyj30tFvY8ddNJnpm94RAcHLXD757591/+/1n
      yl5bBdha6qpWWi+vKASwEEmeIkx4lqr8mhDORW1xIRWy6acBicvTOI7j5XUGHOHWreJcKSF1
      7qmdEKKUSuMoFdLznDhsJGn+JBrDJAqb9iCEMmONzf/zHqWkQZalwNoszRCCWbpETbBTmej1
      mzZOz6cr+gvjY2MrRlYP9L5SBVOPIUsTwtzWNdEnwmiVCQWNIsyRSrfKt5781cAaAGxHfKIB
      AEopAADn/P9v70x+mwaiOPxm8XhL4rRpg2gBURBFgFgEAiHBDS78vSBOnBAHEAWBKAhK6cJa
      0qauHcfxeDYOBlQgB6bNqcr3F4ztkefppzffC8LQ9kcmSq4BEUJHmETb2Tl+8zuSRhgBKG2M
      kq4fjO0cY0bMOIkesy922TlePl/f/N5sH59mxbsumWmg1uFj8aelzgDmpmraa3z6+nkmCuqt
      Q53txNX8+Olz1lOJh7GHnugsSYjn8qKMakGS9ihjgnNtUHPSuidaG8CE1gO3G6eUIgOj8ETX
      g26cNicnbV/PqDzRGrtaiihq9JKEMKcs1f/2RGu5uZ00o3qe58ZgQoC5vlFCKKOVHBr077pY
      mKYagVS4WgAAAgRJREFUu2try8sbiwud9p2bcztJNjvd6K6vD+Lu0qMnrVs386341b27F69c
      7X15m9H25fm27eP9i1IKWda/lBBECGMMMHYYw2Cw60gFUoNdO4cxvV4/CEOtiDGGOH4/6+3f
      zvGzU1sbYrmDKjsHcxyjleft3c4x4MJ1ULUeKdX/l5eVnWMn7WueE9cDzDjnDkGcc88dvow/
      7RxRo/NxpURUGdZq+mAQUvnqRm/rw5uT56/6kc8MpJur9x+/v33t7OzJc9YjHYexh55orZRU
      shSKYhBSuZ7PKO7nRRAGVl+MF4Nq2MrIk+iyFH7g2//IRuWJJpQgAEAIwJhSWijusn4/DGtK
      SVEK+utioTZAMRoqPxkn0WP2xTiJHrMvdtk5Xjxb63ybaJ+Ybobfu8mJ2WYvl+lAhIyoIjs6
      f37l9cK3mLfQThqdvXyqHTVGo/zdibcp82uhRdmRxrFXrw3yIqp5na2EuQ7FeMDF1NSk7alR
      5P2sKFtVEs0IaBzZJ8gHkF9JNEKYUZxzgY1gfiP0/z4KdxXRSaqxt7K69H7jVe4dfr48wz4/
      zOilIxcm5Nrix67PTHZmbm7hweNiZuJpsXX7xvWRLBVjoqQAsNhAlBBEHTB55XcWSleDhm09
      0QBQSukQXCXRQGiepzRzGvU99kQfGKokmgvmOVpIQzEAMClK+GcD/QBb9RzehrKKugAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Tornado - Day' width='192'>
      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
      BeznAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Tornado - Week' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Tornado - MTD' width='192'>
      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
      6oWcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Market Tornados' width='192'>
      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
      NcoHPLPlGC0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Spend and ROI by Market' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Market Differences PW' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Market Differences PPW' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Variance by Market' width='192'>
      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
      /P8ySk6XHNyiTQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Week Data' width='192'>
      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
    </thumbnail>
    <thumbnail height='164' name='Week Data 2' width='192'>
      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
      x8dw9ASTAfH/pTePsKTh5zgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='28Days Data' width='192'>
      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
    </thumbnail>
    <thumbnail height='164' name='28Days Data 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='QTD Data' width='192'>
      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
      rmO4u4ORmQitu/fSXFWIKOj4F8e5eKUbXBU8trcd/1gvnX1T2Aor2L9/C9Odlxie81Ncv5k9
      O5oxSf12VAcAACAASURBVAJKMkrnxZPMJqwcOnAQa3KJk2c7UQQLm7dtwTczxNJqiHg8Sd3u
      Ixxs/v4JLGoqSueVi0wvp9i+/yB1pTkIQHBpgrOXr2IuauGJna0YRY2pG51I+c24tDXOXOom
      mUoRw8pzzz9HictMPLTMpfMXCAlu9u3fc/fSiCsjl7jYs0ZDfREhfwCfdwUFCHiXCadUTAYI
      +nys+PwIRjOikmR1ZZVIUsNAgvn5RTKaEbMs4F2cx+uPYLJYSYR8zC+toBpkJDWDZLajpYLM
      L/mQzFaETAz/mh+f14duNCOpCWbn5omkNOxWC6IAvslOPrgwyf4DO8msjDMaNFBflsPK0iyr
      wSQWq4VEwI93NUA6lUTDgGyAYDCAIIr4lufwh1JY7VaURJiF2Rl6zpwnbC2ltuzRyGO/k+9S
      GlGJLPN+Rx/bd+ymuqyIlLefdy/eoK0mn+7ucRpampCFBMf++DaUNKPO9zCzpjLY109l2xa8
      fSeZXo0xPOWjbUs93Wc/wVXdToHTxPzAec4MBCizJRlYUJFTU4wlXBzc3kJBvge324XLCp3n
      r1LetpuqfMf3vHKducGzfNa7RHORhZ6hZZqaazGQ4uz7fyLprsY/0oeYX0lo4gq//q//DUfd
      ARor8nC43OjBKbpHo+zduxWbUafr+EeMJ3MokXz0jK59m3mFxsy1E7zz+RS1dTJ9Y0E2t1Sx
      uORnz856vnj7LKWtNeiuYrblpfm0Y4n9j+8ksDRAUpUJRXSaavK4NjhNnstITfUmhq53I3uc
      uFzFeKKziOXtLE10kBSt6JZi2nOjfHpykZp6mSBFlFtjTEUVbJKJ5155jTKPFcloYs07TM9Q
      EVsad9BaXMjQ5S+4PL6AIa7gbGomdOYMiZp2mvJizOnlvLLNw7sfXaS8Io/ZlTWEWAZPSzvy
      8iC+mMpI5xB725/5ng9s/YmFVojMjXAxqdGybQ823xhqQGFsdJKK5gNYjALoAgaDRDKdQM2o
      uJ0F/ORX27AZM6z2O7AWN/Lck5UY0qtcO2/LpqrrGiszS5RVtbO1Oslbn4+zGF5iaRZO+4Mc
      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
    </thumbnail>
    <thumbnail height='164' name='QTD Data 2' width='192'>
      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
      x8dw9ASTAfH/pTePsKTh5zgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='YTD Data' width='192'>
      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
    </thumbnail>
    <thumbnail height='164' name='YTD Data 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAACkCAYAAADBuSFLAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAD/1JREFUeJztnc9r3Fa/xh9fLvkbsjCRg0OTC+6ui+CU1xqa
      Ac078C5cQ0wWfSEejB1CF0bTCTeLkkVf4tfCixIaYzSFexfBAdfQwtQD4yC5tMGL7mJ4096Y
      zBgvcv+F3IXuQpJH0mj0Y0b2zPg8HxDY0jlH5xyd5+h7jvUkACGEEEIIIUQkxoInLMuyBlER
      QgbBvw26AoQMEgqACA0FQISGAiBCQwEQoaEAiNBQAERoKAAiNBQAERoKgAgNBUCEhgIgQkMB
      EKGhAIjQUABEaCgAIjQUABEaCoAIDQVAhIYCIEJDARChoQCI0FAARGgoACI0FAARGgqACA0F
      QISGAiBCQwEQoaEAiNBQAERoKAAiNBQAERoKgAgNBUCEhgIgQkMBEKGhAIjQUABEaCgAIjQU
      ABEaCoAIDQVAhObf4xL8+OOP51EPQgbCWPCEZVnWICpCyCBgCESEJkMBtFAtjGGsUEUru0Id
      TJTHxlA2gz+nydfL9WxoVQsYGxvzHGX4b2nXYyz08KZ10wXzd97rrNt0UchOAOZTlKBAqW9j
      L3MFyFizLKzJWZd71tgDdmJ7Dk3LguUcTf0QubECqoF+Uo12Gn/a4IDXsBrMDABoYW+7fmat
      uYhkJgCzpkGZ20BFraP01Myq2JHGLOegKTqauwuQPOelhV0Yah2lpfi3pbRQgQoNNbN9TlVV
      1Lf3OvO29rANBUomtReDbATQqmJVUzB3W4JcVAGt5p+xWlUUQl7LZtkbMoWEAacZokKVqHwO
      R/b93etR4YFZ9pbVOUsnT2+ipgFqxT/4XeQ1C9Zu+LVYikWoIW9a82kJU5UKpnopU1AyEUBr
      bxt1ZQ63JQDyA+hK4BUtLaCiApp3GvMNkBaqhRw01Wi//g0V0HIxsWyyfFppG3NN53pTx2Eu
      TAT2GiYHb1lTKE10E0FM+tYRDqHgxtXE3RiKWc5Bg4qi7D0ro6jWse1TgImaFkxHUmOlxrBU
      wFKN9pmmrlhQdKvpS6ZagGoZ3X6PLLfbz8nyKbqvJp76edI2dUsJqY+hwkLYzeLSd7keVWeE
      Ht4yPPU1VH8fG6pTz7j+IV76fwOYtY4ZSro9B6Vegm8pIBd9saxZ0wC1CE+2wG5JDlrCKkTn
      s0MzL9LkFFB/g3fek+/eoA4NuUA4letWiUTpD3GUYkMgbBFsWWu+PjpF9odBZk2Dyuk/NX0K
      oIXqqgYEB8JECXUEQx4ZD3TFOeeEP6cPzA4nJkqA7oYqlgE1yf17yhdS0tEhABVGxwC0YIVs
      P8WmlyYxhTrevOvI6hRQRSFiOzMebxjE8KdX+hNAaw/bdcUz+KxALL7qi5+l23NQtBpMswZN
      0fFADpaziwV3sm4d4TDx/aPydQ7C1tEhoNyANzyXJqeQZsaOT+8IfjV8p8d8WkI9UIe0yEVn
      N8isQQu8TUmPpImfDBWdsX77akj83bR0xY5t/eeDadvpotcAyfJ1rj3CynLy+toTvobw3Ssy
      vXP/QB81dcUCFKtdbNK4PZjOsFQolqIEz3ENkJTeBdDULSWmo+0H7V8Idj58B2dguodqOAOs
      Y2EXeMBJ8ul2XdtpTm8aGCxtAblH+OBPl95Qoxa2YfXoRmc6u+wuC2USCz+GI0LDj+GI0FAA
      RGgoACI0FAARGgqACA0FQISGAiBCQwEQoaEnWDhPcMS9UndEsP9MmGmLGDD0BJ8pw+sJ7rxX
      E/phro8JzER5LIdaT3kHBz3BZ8hoeYIlLOwaUIM+jgsOPcHB0oT2BId/wh3fJ/bsrwHQcp3P
      rb8w62yhJ9hXFj3Bfrdc0j6RseYYkVTDNRD1+kwHTPoPSukJDk0/tJ7gmOve5xLbJ2meS9I0
      5ws9wS70BLdxnWpp+ySEXp/peUFPsFsSPcEAnIlpahIS0veJn+yezVlCT7BbN3qCEZyY0vaJ
      j16f6aBJEz/REzyKnuBu18PaE9fGzv4L1qP7sxkOehcAPcGJ0w+XJ7j7gjtS6KHp/Peyn61H
      MJHPZjigJ5gIDT+GI0JDARChoQCI0FAARGgoACI0sf9P8PH//t951IOQgcA3ABEaCoAITTYC
      ePUQ0uVLvuObV5mUnC0n3+OLy0VsnfRZzPNioL0PceBLsY9vAv0RntZNF8zfea+h7M8LQN8C
      OHlehDQLvHj/AS33+H0Df8xewhfPj7Oo4xBhD9hbP32O3zzt/W39Ne6ECGtxx9MnvrTBAb+O
      70L76hi//tQ4u+aQfgVgP6CZ9fu46T09fg//WM9j/6c99DnZDhUHj/PYlDfw29Y9jHvOj9+t
      4cVyAxX1+9j2jt/9CotYx0vPjL64vBLeVyd7+Bl5zGRTfRJCJiHQ/v90fvQ+freGVmCgHDz2
      hgLeGXMf31wuYuv5w3aYcPI9vgh59R88vgRpvj3QupfplusJy36Jb0tUHV8+Axa/9LfJ5ebX
      Hzram5h8AYvmD/g1oICD6hKuf/kVrvdSJklEnwK4gvkvV4BneUiXo0KeY2zNX8IdNNrhwM7H
      qHziHWANVH76yAktnuDm+D3cXwY2G/uecryDMK7MY2zN5/HH+lvnegNYWcJ+R90S1vHkCH8g
      j8kr/fXYweM8NrGCz6a9Z2fw2XIDP//i7b99vHwWTEeypv83wPQTtN6/xaoM7K9ca8+ejz1D
      7WQPP5srePH1jC/fi+UGKtV2upm/3fbNoDfzK8Cz3Xa8/Gq3PXjiynz1HSrmCu7fdUfsDB7t
      rHRvR6I6foyJFFP85mznIvjOsxW8eP/EHzI6bfWFQa92sblc6EhHsiWjbdArmN/yLPZ2nLeC
      G6oc/4l9rONOx2Dwl3J9IjC9Thd88fJBYx1wB0VMmSfN14D8kT8kufJR93g6UR1fo5liURO2
      CG6FDP7TtnrCoIPGOhbzjP7Pmti/BPfE9BO0dgBp9gf8enIPnzZfAwif+Wy6BSYz+Pt6Hrca
      +3g0DTv82bEHxUlMmSfP/5mqynHlAcB1NHB0DIQG+iff44tP/sT9iPzRzOCz5Ty+++UY83ff
      2eHP1z0VRFLQ3xvg1cOQhaeDZ7Ydn/gYaWdPl/G/fI6ZZ7s4eLWLTXkDf59OVub4xMeA+ad/
      Z+X4z65Si6+jLcbNb8N3eg6qS9gPvnFSchoGMfw5N/oTwPR9rMoNVD7p/EPOQXUJ+8tfYX7c
      k863TWjv0MT+rWD8Nv4qr+PO7Lp/jRBX5vR9rMrruHO6FjnG1rfr8W2JqOP43a+waC7h1rxf
      BCfPi7jzLI9VrcddoNM62GHQf37L8Oe86DMEsmP/T58XcevyJd+VmfW3aJ0uQK9gfustMH8N
      ty4v+dL8990rADq3Ub33+PRvecAE/vqXK77z0WXi9Lp02b62uL6BGfOHiLZElwfM4NH7D/js
      8SVfmrjQKTl2GLT5bAX3t/oujCQg1hPMr0HJRYYfwxGhoQCI0FAARGgoACI0FAARGgqACA0F
      QISGAiBCQ09wL8UMlSc44l6Pu7sfospq32sfB8P4HDOEnuBUDK8nuPNeb7H6r7zPPZe+rXm8
      7Cnv6EBPcApGyxN8BfNbDSyaS/ivCz6L9wM9wQEulic4/BPu6D4D3Nl/E46r7TSUCgm3UodZ
      wwU9wUnrOKKeYL8vIslzsOvz6H0Di3BCq69n4Pbn5nKjw/k3lOu9hNATnKqOI+4JTvgcwnFs
      r768BSxmWb8BkJEl0u6ceffXVw8hzeYh/cuJlx2/7f7lEEPKcvvHcE9wHi9fPcHNadcT3PB5
      gruVaXuCPw/xBL8Ob0KiOtqOsZsJRbC48wGPks7g0wUszv4Tv57cw/y46wl+gu520RS4TrWE
      zyGKk+dF3FrxL8xHWQT0BLvpL6gn+KCxDvxHA+NI0sYosR1ja/4aKmYeq79/sJ1+zlphlKEn
      OHEdR9ET7KyZHHtlP8/BDp/yWP295gx+OOui0Yae4KTlYdQ8wc6i1TNppHsOVzEpe34dn8R1
      eBfqx9hSozYVRgN6glOUN8ye4M3ZS9gMluZ7BkC652D3e2X20unfPh7trECavQbJ2UtY3HmL
      VVxDpbGPR9OjaeKnJ5gIDT+GI0JDARChoQCI0FAARGgoACI0sbtAhFxk+AYgQkMBEKHpUwAm
      ymNjGAs9yjAzqWJ/tKqFyHp1Xg8chSpaI9BO0huZvAFUw4Jl+Y+mfojcQAeHPWgntufQ7KhX
      AdWWnUpa2PXU24AabM/uAiSnxLB2GqqGXKGK1qCaSfrizEIgaaECFRpq5lndIRqznIOm6Gh6
      BrBdr10Yah2lpWwGrfxAh1Lfxh4VMJKc4xogJIwom12vl6tVFDwzNQCYZW9+/7XgvWoaoFb8
      g99FXvPP7ERczkwAZjkHDSqKMgC0UC3koKlGO3wwVEDLwdZA8LoBlEqon5bWQrUwhhy8+adQ
      mugigtYRDqHgxtWzap2nnU9LqCtzuE01XQysVBiWClgIPVTLSJBXNSzLMtTO9IZqAYqlNy3L
      auqWElKeocKCGnKXLumTtqezyIh2KrrVTH0fMiyc2SLYstYgB9L5d1xy0NzzR4eAcgO+Cfvq
      DSjuz+/eoA4NuUAIldMQwSGOMo7Lve1s6goABfoGQ6lR5pzWAHYIM1EC9KZ/xyVR7qNDACqM
      DpFZsNbkzgzSJKZQx5tuPptWFYU+d6ikhQ3oSh2lCW6DjjLnI4DWHrbrCvTmLhbc6bJ1hEPn
      R2lyCqi/8fvC3r05XQNIk1NIN6PLeKAr0FbDd3rsuD3wxkmNhIUNHQo05HyLeTLSpIugusXM
      4ekU3Y2Wm5au2DG0ndf5/bQgN+Z21gDudV+8HSwz/J7BGL2pK55yk7anezujyyPDzjkJwHIW
      te3Fo2p0G/TOdV23FN/AaovGPboPfu9t0yzO0wugXe9eFt1k0Azv16BmGWM5wAhZTBOSFcPx
      MZxZDvxhq4XqqgaoRQ5+cqYMzRugVS1gotT+0xdUI3yHh5AMGRoBEDIIhiMEImRAUABEaCgA
      IjQUABEaCoAIDT3BZ+4Jjsib+hsiu6x2NhNm2iKID3qCz8kT3Jm3Cf0w5wis1/blUOspL3Gh
      J7hPevcES1jYNaDWS3hqZlAR0hP0BA+U8M+249tpz/4aAC3n7ce4PiZB6Anut519eoL9Xoik
      7ZSx5g3X1mTE9zEJIxMBaLnOBV5OUz1fckpY2A24t+Ri2xFmPkWprsI4vS5jzfD4xVp72PZd
      ByCv2aFM1/hhCpMZT/Gh7TzsDLN6pqd2usT0MQmFnuAUnJkn2G17T+30062PSTj0BPdIVp5g
      s6YBU5OQ0EM7ffTXx6JCT3DPZOEJdhbr9kKph3Z6iOljEs75CMCZkbdP9wpbqC55FrnyA+iK
      dyCZKHvf+/IDe7b1bV3aOx6FLltB0kIFar2EicA+e6taQE7LKHSRFrChK4C2GrEj1Q1n0aro
      eCA7p1K18ypuKJ5f4/qYJCOdo5Ke4HhPcPd/VCu8/lHt9NfDNuR7jP+xfUyCDK8hhp5gcg4M
      x8dw9ASTAfH/pTePsKTh5zgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Publisher Funnel by Page' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='CSV' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='CSV Download' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CSV Data' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
