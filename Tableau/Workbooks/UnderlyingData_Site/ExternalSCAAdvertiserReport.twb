<?xml version='1.0' encoding='utf-8' ?>

<workbook locale='en_US' version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.0914.1345                -->
  <repository-location derived-from='http://production-tableau-server-1.internal.intentmedia.net/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing?rev=2.2' id='ExternalSCAAdvertiserReport' path='/t/UnderlyingData/workbooks' revision='1.2' site='UnderlyingData' />
  <preferences>
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
        <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
        <members>
          <member value='&quot;Hotels.com-Ads&quot;' />
          <member value='&quot;Hotels.com-Ads - UK&quot;' />
        </members>
      </column>
      <column caption='Time Frame' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Month&quot;'>
        <calculation class='tableau' formula='&quot;Month&quot;' />
        <members>
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
          <member value='&quot;Year&quot;' />
          <member value='&quot;All Time&quot;' />
        </members>
      </column>
      <column caption='Max Date' datatype='date' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='#2020-06-05#'>
        <calculation class='tableau' formula='#2020-06-05#' />
      </column>
    </datasource>
    <datasource caption='impression_share' inline='true' name='vertica.41466.555094895833' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acisra.impression_count) as Impressions,&#13;&#10;&#9;sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count) + sum(impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;left join intent_media_production.entities on acisra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acisra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;entities.name,&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;acisra.aggregation_level_date_in_et&#13;&#10;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acisra.aggregation_level_date_in_et as Date,&#13;&#10;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acisra.impression_count) as Impressions,&#13;&#10;&#9;sum(acisra.filtered_ad_for_budget_count) as &quot;Filtered Ad for Budget&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_for_bid_count) as &quot;Filtered Ad for Bid Count&quot;,&#13;&#10;&#9;sum(acisra.filtered_ad_count) + sum(impression_count) as &quot;Eligible Ad Count&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_to_participate) as &quot;Max Bid Increment Needed to Participate&quot;,&#13;&#10;&#9;sum(daily_budget_needed_to_participate) as &quot;Daily Budget Needed to Participate&quot;,&#13;&#10;&#9;max(max_bid_increment_needed_for_position_one) as &quot;Max Bid Increment Needed for Position One&quot;,&#13;&#10;&#9;sum(daily_budget_needed_for_position_one) as &quot;Daily Budget Needed for Position One&quot;&#13;&#10;from intent_media_production.hotel_ct_impression_share_report_aggregations acisra&#13;&#10;left join intent_media_production.entities on acisra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acisra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;entities.name,&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;acisra.aggregation_level_date_in_et</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_8900711133408888]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Product Category' datatype='string' name='[Product Category Type]' role='dimension' type='nominal'>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='E:\YB_Tableau_Repository\Data_Extracts\aft_advertiser_report_external__impression_share.tde' schema='Extract' tablename='Extract' update-time='2/26/2015 5:01:43 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2431418' timestamp-start='2015-02-26 17:01:43.467000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.500615' measure-ordering='alphabetic' measure-percentage='0.382534' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='performance' inline='true' name='aft_kayak_daily_data' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category&quot;,&#13;&#10;&#9;date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;e.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;campaigns.name as Campaign,&#13;&#10;&#9;campaigns.tracking_code as &quot;Tracking Code&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end) as Status,&#13;&#10;&#9;sum(impression_count) as Impressions,&#13;&#10;&#9;sum(click_count) as Clicks,&#13;&#10;&#9;sum(click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(auction_position_sum) as &quot;Auction Position Sum&quot;,&#13;&#10;&#9;sum(click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;sum(exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.campaigns on campaigns.id = acapra.campaign_id&#13;&#10;left join intent_media_production.ad_groups on ad_groups.id = acapra.ad_group_id&#13;&#10;left join intent_media_production.entities e on e.id = acapra.advertiser_id&#13;&#10;where campaigns.id not in (4189,4190,4191,4192,4193)&#13;&#10;and date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;e.id,&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;campaigns.tracking_code,&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end)&#13;&#10;&#9;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category&quot;,&#13;&#10;&#9;date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;e.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;campaigns.name as Campaign,&#13;&#10;&#9;campaigns.tracking_code as &quot;Tracking Code&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end) as Status,&#13;&#10;&#9;sum(impression_count) as Impressions,&#13;&#10;&#9;sum(click_count) as Clicks,&#13;&#10;&#9;sum(click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(auction_position_sum) as &quot;Auction Position Sum&quot;,&#13;&#10;&#9;sum(click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;sum(exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.campaigns on campaigns.id = acapra.campaign_id&#13;&#10;left join intent_media_production.ad_groups on ad_groups.id = acapra.ad_group_id&#13;&#10;left join intent_media_production.entities e on e.id = acapra.advertiser_id&#13;&#10;where campaigns.id not in (4189,4190,4191,4192,4193)&#13;&#10;and date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by&#13;&#10;&#9;date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;e.id,&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;campaigns.tracking_code,&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end)</relation>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum])/sum([Impressions])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
      </column>
      <column caption='AOV' datatype='real' default-format='C1033%' name='[Calculation_2880514122121694]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' scope-isolation='false' />
      </column>
      <column caption='ROAS' datatype='real' default-format='n#,##0;-#,##0' name='[Calculation_3970514122044428]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' scope-isolation='false' />
      </column>
      <column caption='CPA' datatype='real' default-format='C1033%' name='[Calculation_5230514122002225]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' scope-isolation='false' />
      </column>
      <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
      </column>
      <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Click Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Conversion Rate]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Cost per Conversion]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Exposed Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='C1033%' name='[Value per Conversion]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[eCPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Impressions])*1000' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='E:\YB_Tableau_Repository\Data_Extracts\aft_advertiser_report_external__performance.tde' schema='Extract' tablename='Extract' update-time='2/26/2015 5:12:09 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2299967' timestamp-start='2015-02-26 17:12:09.028000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.251914' measure-ordering='alphabetic' measure-percentage='0.602603' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Time Frame' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Month&quot;'>
          <calculation class='tableau' formula='&quot;Month&quot;' />
          <members>
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
            <member value='&quot;Year&quot;' />
            <member value='&quot;All Time&quot;' />
          </members>
        </column>
        <column caption='Max Date' datatype='date' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='#2020-06-05#'>
          <calculation class='tableau' formula='#2020-06-05#' />
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='performance_with_targets' inline='true' name='vertica.41515.470290092591' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;entities.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;campaigns.tracking_code as &quot;Campaign Tracking Code&quot;,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end) as &quot;Campaign Status&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;ad_groups.id as &quot;Ad Group ID&quot;,&#9;&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;ac_o.id as &quot;Origination Airport Code ID&quot;,&#13;&#10;&#9;ac_d.id as &quot;Destination Airport Code ID&quot;,&#13;&#10;&#9;acf_o.id as &quot;Origination Favorite ID&quot;,&#13;&#10;&#9;acf_d.id as &quot;Destination Favorite ID&quot;,&#13;&#10;&#9;ac_o.code as &quot;Origination Airport&quot;,&#13;&#10;&#9;ac_d.code as &quot;Destination Airport&quot;,&#13;&#10;&#9;acf_o.name as &quot;Origination Airport Favorite&quot;,&#13;&#10;&#9;acf_d.name as &quot;Destination Airport Favorite&quot;,&#13;&#10;&#9;null as &quot;City&quot;,&#13;&#10;&#9;null as &quot;State&quot;,&#13;&#10;&#9;null as &quot;Country&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.campaign_budgets cb on cb.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;left join intent_media_production.airport_codes ac_o on acapra.origination_airport_code_id = ac_o.id&#13;&#10;left join intent_media_production.airport_codes ac_d on acapra.destination_airport_code_id = ac_d.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_o on acapra.origination_air_ct_favorite_id = acf_o.id&#13;&#10;left join intent_media_production.air_ct_favorites acf_d on acapra.destination_air_ct_favorite_id = acf_d.id&#13;&#10;where acapra.date_in_et &gt;&gt;= date((current_timestamp - interval &apos;31 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;and entities.id in (122112,153784)&#13;&#10;group by &#13;&#10;&#9;entities.name,&#13;&#10;&#9;entities.id,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end),&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;campaigns.tracking_code,&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;ad_groups.id,&#9;&#13;&#10;&#9;acapra.date_in_et,&#13;&#10;&#9;ac_o.id,&#13;&#10;&#9;ac_d.id,&#13;&#10;&#9;acf_o.id,&#13;&#10;&#9;acf_d.id,&#13;&#10;&#9;ac_o.code,&#13;&#10;&#9;ac_d.code,&#13;&#10;&#9;acf_o.name,&#13;&#10;&#9;acf_d.name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;entities.id as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;campaigns.tracking_code as &quot;Campaign Tracking Code&quot;,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end) as &quot;Campaign Status&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;ad_groups.id as &quot;Ad Group ID&quot;,&#13;&#10;&#9;hcapra.date_in_et as Date,&#13;&#10;&#9;cast(null as int) as &quot;Origination Airport Code ID&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Destination Airport Code ID&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Origination Favorite ID&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Destination Favorite ID&quot;,&#13;&#10;&#9;null as &quot;Origination Code&quot;,&#13;&#10;&#9;null as &quot;Destination Code&quot;,&#13;&#10;&#9;null as &quot;Origination Favorite&quot;,&#13;&#10;&#9;null as &quot;Destination Favorite&quot;,&#13;&#10;&#9;hci.name as &quot;City&quot;,&#13;&#10;&#9;hci.state as &quot;State&quot;,&#13;&#10;&#9;(case &#13;&#10;&#9;&#9;when hco.name is null and hco_hci.name is null then null&#13;&#10;&#9;&#9;else ifnull(hco_hci.name,&apos;&apos;) || ifnull(hco.name,&apos;&apos;)&#13;&#10;&#9;end) as &quot;Country&quot;,&#13;&#10;&#9;sum(hcapra.impression_count) as Impressions,&#13;&#10;&#9;sum(hcapra.click_count) as Clicks,&#13;&#10;&#9;sum(hcapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(hcapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(hcapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(hcapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(hcapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(hcapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations hcapra&#13;&#10;left join intent_media_production.entities on hcapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on hcapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on hcapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;left join intent_media_production.countries hco on (hcapra.hotel_destination_type = &apos;Country&apos; and hcapra.hotel_destination_id = hco.id)&#13;&#10;left join intent_media_production.hotel_cities hci on (hcapra.hotel_destination_type = &apos;HotelCity&apos; and hcapra.hotel_destination_id = hci.id)&#13;&#10;left join intent_media_production.countries hco_hci on hci.country_id = hco_hci.id&#13;&#10;where hcapra.date_in_et &gt;&gt;= date((current_timestamp - interval &apos;31 days&apos;) at timezone &apos;America/New_York&apos;)&#13;&#10;and hcapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;and entities.id in (122112,153784)&#13;&#10;group by &#13;&#10;&#9;entities.name,&#13;&#10;&#9;entities.id,&#13;&#10;&#9;campaigns.name,&#13;&#10;&#9;campaigns.tracking_code,&#13;&#10;&#9;(case when campaigns.paused = 0 then &apos;Active&apos; else &apos;Paused&apos; end),&#13;&#10;&#9;ad_groups.name,&#13;&#10;&#9;ad_groups.id,&#13;&#10;&#9;hcapra.date_in_et,&#13;&#10;&#9;hci.name,&#13;&#10;&#9;hci.state,&#13;&#10;&#9;(case &#13;&#10;&#9;&#9;when hco.name is null and hco_hci.name is null then null&#13;&#10;&#9;&#9;else ifnull(hco_hci.name,&apos;&apos;) || ifnull(hco.name,&apos;&apos;)&#13;&#10;&#9;end)&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Ad Group ID]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Advertiser ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='Intent Media' datatype='string' name='[Calculation_2960521122453172]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Intent Media&quot;' scope-isolation='false' />
      </column>
      <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_3120904172713462]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Auction Position Sum])/sum([Impressions])' scope-isolation='false' />
      </column>
      <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_3890521122410026]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
      </column>
      <column caption='Filter for Advertiser' datatype='string' name='[Calculation_5170514122151415]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Advertiser Name] = [Parameters].[Parameter 1] then &quot;keep&quot; else &quot;remove&quot; end' scope-isolation='false' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Destination Airport Code ID]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Destination Favorite ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Origination Airport Code ID]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Origination Favorite ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[to_join]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' scope-isolation='false' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='E:\YB_Tableau_Repository\Data_Extracts\aft_advertiser_report_external__performance_with_targets.tde' schema='Extract' tablename='Extract' update-time='2/26/2015 5:26:38 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[to_join]' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='39605' timestamp-start='2015-02-26 17:26:38.399000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.499693' measure-ordering='alphabetic' measure-percentage='0.356836' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
          <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
          <members>
            <member value='&quot;Hotels.com-Ads&quot;' />
            <member value='&quot;Hotels.com-Ads - UK&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='tracking_codes' inline='true' name='mysql.41515.471684560187' version='8.2'>
      <connection class='mysql' dbname='intent_media_production' odbc-native-protocol='yes' port='3306' server='production-slave-db-server-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>SELECT&#13;&#10;&#9;it.ad_group_id AS `Ad Group ID`,&#13;&#10;&#9;it.tracking_code AS `Tracking Code`,&#13;&#10;&#9;it.tracking_code_2 AS `Tracking Code 2`,&#13;&#10;&#9;it.desktop_destination_url_override AS `URL Override`,&#13;&#10;&#9;fodp.origination_airport_code_id AS `Origination Airport Code ID`,&#13;&#10;&#9;fodp.destination_airport_code_id AS `Destination Airport Code ID`,&#13;&#10;&#9;fodp.origination_air_ct_favorite_id AS `Origination Favorite ID`,&#13;&#10;&#9;fodp.destination_air_ct_favorite_id AS `Destination Favorite ID`,&#13;&#10;&#9;hci.name AS City,&#13;&#10;&#9;hci.state AS State,&#13;&#10;&#9;CASE WHEN hco_hci.name IS NULL AND hco.name IS NULL THEN NULL ELSE concat(ifnull(hco_hci.name,&apos;&apos;), ifnull(hco.name,&apos;&apos;)) END AS Country&#13;&#10;FROM intent_targets it&#13;&#10;LEFT JOIN intent_media_production.flight_origination_destination_pairs fodp ON fodp.id = it.intent_id AND it.intent_type = &apos;FlightOriginationDestinationPair&apos; &#13;&#10;LEFT JOIN hotel_cities hci ON hci.id = it.intent_id AND it.intent_type = &apos;HotelCity&apos;&#13;&#10;LEFT JOIN countries hco ON hco.id = it.intent_id AND it.intent_type = &apos;Country&apos;&#13;&#10;LEFT JOIN countries hco_hci ON hco_hci.id = hci.country_id&#13;&#10;WHERE it.paused = 0&#13;&#10;&#9;AND it.intent_type IN (&apos;FlightOriginationDestinationPair&apos;,&apos;HotelCity&apos;, &apos;Country&apos;)&#13;&#10;&#9;AND it.ad_group_id IN (16322, 16932, 17843, 21542, 21543, 21544, 21545, 21547, 21548)</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Ad Group ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='to_join' datatype='string' name='[Calculation_0790830160853346]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' scope-isolation='false' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Destination Airport Code ID]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Destination Favorite ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Origination Airport Code ID]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Origination Favorite ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='E:\YB_Tableau_Repository\Data_Extracts\aft_advertiser_report_external__tracking_codes.tde' schema='Extract' tablename='Extract' update-time='4/1/2015 6:18:27 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_0790830160853346]' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='4486' timestamp-start='2015-04-01 18:18:27.267000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.544726' measure-ordering='alphabetic' measure-percentage='0.424566' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='mysql.41515.471684560187'>
      <column aggregation='Sum' datatype='integer' name='[Ad Group ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='to_join' datatype='string' name='[Calculation_0790830160853346]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' scope-isolation='false' />
      </column>
      <column-instance column='[Ad Group ID]' derivation='None' name='[none:Ad Group ID:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_0790830160853346]' derivation='None' name='[none:Calculation_0790830160853346:nk]' pivot='key' type='nominal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='vertica.41515.470290092591'>
      <column aggregation='Sum' datatype='integer' name='[Ad Group ID]' role='dimension' type='ordinal'>
      </column>
      <column-instance column='[Ad Group ID]' derivation='None' name='[none:Ad Group ID:ok]' pivot='key' type='ordinal' />
      <column-instance column='[to_join]' derivation='None' name='[none:to_join:nk]' pivot='key' type='nominal' />
      <column datatype='string' name='[to_join]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' scope-isolation='false' />
      </column>
    </datasource-dependencies>
    <datasource-relationship source='vertica.41515.470290092591' target='mysql.41515.471684560187'>
      <column-mapping>
        <map key='[vertica.41515.470290092591].[none:Ad Group ID:ok]' value='[mysql.41515.471684560187].[none:Ad Group ID:ok]' />
        <map key='[vertica.41515.470290092591].[none:to_join:nk]' value='[mysql.41515.471684560187].[none:Calculation_0790830160853346:nk]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <shared-views>
    <shared-view name='aft_kayak_daily_data'>
      <datasources>
        <datasource caption='performance' name='aft_kayak_daily_data' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
          <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
          <members>
            <member value='&quot;Hotels.com-Ads&quot;' />
            <member value='&quot;Hotels.com-Ads - UK&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='aft_kayak_daily_data'>
        <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
        </column>
        <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
        </column>
        <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[aft_kayak_daily_data].[none:Advertiser Name:nk]'>
        <groupfilter expression='[Parameters].[Parameter 1] = [Advertiser Name]' function='filter' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[none:Advertiser Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]'>
        <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
          <groupfilter function='level-members' level='[none:Calculation_8240605135132939:nk]' />
          <groupfilter function='member' level='[none:Calculation_8240605135132939:nk]' member='&quot;Remove&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]'>
        <groupfilter function='member' level='[none:Calculation_9330515113739378:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='AOVGraph'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Æ </run>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 1]</run>
            <run>&gt;</run>
            <run> AOV by Day</run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location id='AOVGraph' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column caption='AOV' datatype='real' default-format='C1033%' name='[Calculation_2880514122121694]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2880514122121694]' derivation='User' name='[usr:Calculation_2880514122121694:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <slices>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[aft_kayak_daily_data].[tdy:Date:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[aft_kayak_daily_data].[tdy:Date:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[aft_kayak_daily_data].[tdy:Date:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[aft_kayak_daily_data].[tdy:Date:qk]' value='*m/d/yyyy' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[aft_kayak_daily_data].[usr:Calculation_2880514122121694:qk]</rows>
        <cols>[aft_kayak_daily_data].[tdy:Date:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='CSVConversions'>
      <repository-location id='CSVConversions' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Position Sum])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column caption='AOV' datatype='real' default-format='C1033%' name='[Calculation_2880514122121694]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='ROAS' datatype='real' default-format='n#,##0;-#,##0' name='[Calculation_3970514122044428]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' scope-isolation='false' />
            </column>
            <column caption='CPA' datatype='real' default-format='C1033%' name='[Calculation_5230514122002225]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Conversion Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Exposed Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Exposed Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Status]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Impressions])*1000' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tracking Code]' derivation='None' name='[none:Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Exposed Conversions]' derivation='Sum' name='[sum:Exposed Conversions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_2880514122121694]' derivation='User' name='[usr:Calculation_2880514122121694:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_3970514122044428]' derivation='User' name='[usr:Calculation_3970514122044428:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_5230514122002225]' derivation='User' name='[usr:Calculation_5230514122002225:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Conversion Rate]' derivation='User' name='[usr:Conversion Rate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[eCPM]' derivation='User' name='[usr:eCPM:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([aft_kayak_daily_data].[none:Date:ok] / ([aft_kayak_daily_data].[none:Advertiser Name:nk] / ([aft_kayak_daily_data].[none:Product Category:nk] / ([aft_kayak_daily_data].[none:Campaign:nk] / ([aft_kayak_daily_data].[none:Tracking Code:nk] / ([aft_kayak_daily_data].[none:Ad Group:nk] / ([aft_kayak_daily_data].[none:Status:nk] / ([aft_kayak_daily_data].[sum:Impressions:ok] / ([aft_kayak_daily_data].[usr:Average Position:ok] / ([aft_kayak_daily_data].[usr:CTR:ok] / ([aft_kayak_daily_data].[sum:Clicks:ok] / ([aft_kayak_daily_data].[usr:CPC:ok] / ([aft_kayak_daily_data].[sum:Spend:ok] / ([aft_kayak_daily_data].[usr:eCPM:ok] / ([aft_kayak_daily_data].[usr:Conversion Rate:ok] / ([aft_kayak_daily_data].[sum:Click Conversions:ok] / ([aft_kayak_daily_data].[sum:Click Revenue:ok] / ([aft_kayak_daily_data].[sum:Exposed Conversions:ok] / ([aft_kayak_daily_data].[sum:Exposed Revenue:ok] / ([aft_kayak_daily_data].[usr:Calculation_5230514122002225:ok] / ([aft_kayak_daily_data].[usr:Calculation_2880514122121694:ok] / [aft_kayak_daily_data].[usr:Calculation_3970514122044428:ok])))))))))))))))))))))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='CSVNoConversions'>
      <repository-location id='CSVNoConversions' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
            <datasource caption='impression_share' name='vertica.41466.555094895833' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Position Sum])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Status]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Impressions])*1000' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tracking Code]' derivation='None' name='[none:Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:ok]' pivot='key' type='ordinal' />
            <column-instance column='[eCPM]' derivation='User' name='[usr:eCPM:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41466.555094895833'>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_8900711133408888]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_8900711133408888]' derivation='User' name='[usr:Calculation_8900711133408888:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([aft_kayak_daily_data].[none:Date:ok] / ([aft_kayak_daily_data].[none:Advertiser Name:nk] / ([aft_kayak_daily_data].[none:Product Category:nk] / ([aft_kayak_daily_data].[none:Campaign:nk] / ([aft_kayak_daily_data].[none:Tracking Code:nk] / ([aft_kayak_daily_data].[none:Status:nk] / ([vertica.41466.555094895833].[usr:Calculation_8900711133408888:ok] / ([aft_kayak_daily_data].[sum:Impressions:ok] / ([aft_kayak_daily_data].[usr:Average Position:ok] / ([aft_kayak_daily_data].[usr:CTR:ok] / ([aft_kayak_daily_data].[sum:Clicks:ok] / ([aft_kayak_daily_data].[usr:CPC:ok] / ([aft_kayak_daily_data].[sum:Spend:ok] / [aft_kayak_daily_data].[usr:eCPM:ok])))))))))))))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='DataConversions'>
      <repository-location id='DataConversions' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
            <datasource caption='impression_share' name='vertica.41466.555094895833' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Position Sum])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column caption='AOV' datatype='real' default-format='C1033%' name='[Calculation_2880514122121694]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='ROAS' datatype='real' default-format='n#,##0;-#,##0' name='[Calculation_3970514122044428]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' scope-isolation='false' />
            </column>
            <column caption='CPA' datatype='real' default-format='C1033%' name='[Calculation_5230514122002225]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Conversion Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Exposed Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Exposed Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Status]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Impressions])*1000' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tracking Code]' derivation='None' name='[none:Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed Conversions]' derivation='Sum' name='[sum:Exposed Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2880514122121694]' derivation='User' name='[usr:Calculation_2880514122121694:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3970514122044428]' derivation='User' name='[usr:Calculation_3970514122044428:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5230514122002225]' derivation='User' name='[usr:Calculation_5230514122002225:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversion Rate]' derivation='User' name='[usr:Conversion Rate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[eCPM]' derivation='User' name='[usr:eCPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41466.555094895833'>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_8900711133408888]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8900711133408888]' derivation='User' name='[usr:Calculation_8900711133408888:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[aft_kayak_daily_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41466.555094895833].[usr:Calculation_8900711133408888:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Average Position:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:eCPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Conversion Rate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Click Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Click Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Exposed Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Exposed Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Calculation_5230514122002225:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Calculation_2880514122121694:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Calculation_3970514122044428:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[aft_kayak_daily_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41466.555094895833].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41466.555094895833].[usr:Calculation_8900711133408888:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Average Position:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:eCPM:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Conversion Rate:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Click Conversions:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Click Revenue:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Exposed Conversions:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Exposed Revenue:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Calculation_5230514122002225:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Calculation_2880514122121694:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Calculation_3970514122044428:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='natural' column='[aft_kayak_daily_data].[none:Date:ok]' direction='DESC' />
          <slices>
            <column>[aft_kayak_daily_data].[:Measure Names]</column>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[aft_kayak_daily_data].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[aft_kayak_daily_data].[:Measure Names]' value='32' />
            <format attr='width' field='[aft_kayak_daily_data].[none:Campaign:nk]' value='208' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[aft_kayak_daily_data].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='8' />
            <format attr='row-horiz-levels' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[aft_kayak_daily_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='aspect' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([aft_kayak_daily_data].[none:Date:ok] / ([aft_kayak_daily_data].[none:Advertiser Name:nk] / ([aft_kayak_daily_data].[none:Product Category:nk] / ([aft_kayak_daily_data].[none:Campaign:nk] / ([aft_kayak_daily_data].[none:Tracking Code:nk] / ([aft_kayak_daily_data].[none:Ad Group:nk] / [aft_kayak_daily_data].[none:Status:nk]))))))</rows>
        <cols>[aft_kayak_daily_data].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='DataNoConversions'>
      <repository-location id='DataNoConversions' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
            <datasource caption='impression_share' name='vertica.41466.555094895833' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Position Sum])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Status]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Impressions])*1000' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tracking Code]' derivation='None' name='[none:Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[eCPM]' derivation='User' name='[usr:eCPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41466.555094895833'>
            <column caption='Impression Share' datatype='real' default-format='p0.0%' name='[Calculation_8900711133408888]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Count])' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_8900711133408888]' derivation='User' name='[usr:Calculation_8900711133408888:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[aft_kayak_daily_data].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41466.555094895833].[usr:Calculation_8900711133408888:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:Average Position:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[aft_kayak_daily_data].[usr:eCPM:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[aft_kayak_daily_data].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41466.555094895833].[usr:Calculation_8900711133408888:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:Average Position:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[aft_kayak_daily_data].[usr:eCPM:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[aft_kayak_daily_data].[:Measure Names]</column>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[aft_kayak_daily_data].[:Measure Names]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[aft_kayak_daily_data].[:Measure Names]' value='32' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[aft_kayak_daily_data].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='8' />
            <format attr='row-horiz-levels' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[aft_kayak_daily_data].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='aspect' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([aft_kayak_daily_data].[none:Date:ok] / ([aft_kayak_daily_data].[none:Advertiser Name:nk] / ([aft_kayak_daily_data].[none:Product Category:nk] / ([aft_kayak_daily_data].[none:Campaign:nk] / ([aft_kayak_daily_data].[none:Tracking Code:nk] / [aft_kayak_daily_data].[none:Status:nk])))))</rows>
        <cols>[aft_kayak_daily_data].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='ROAS vs CPA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;[Parameters].[Advertiser]&gt;&#10;ROAS </run>
            <run>(Return on Advertising Spend)</run>
            <run bold='true'> vs. CPA </run>
            <run>(Cost per Acquisition)</run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location id='ROASvsCPA' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance' name='aft_kayak_daily_data' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Advertiser' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Hotels.com-Ads&quot;'>
              <calculation class='tableau' formula='&quot;Hotels.com-Ads&quot;' />
              <members>
                <member value='&quot;Hotels.com-Ads&quot;' />
                <member value='&quot;Hotels.com-Ads - UK&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='aft_kayak_daily_data'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column caption='ROAS' datatype='real' default-format='n#,##0;-#,##0' name='[Calculation_3970514122044428]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' scope-isolation='false' />
            </column>
            <column caption='CPA' datatype='real' default-format='C1033%' name='[Calculation_5230514122002225]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' scope-isolation='false' />
            </column>
            <column caption='Max Date Filter' datatype='string' name='[Calculation_8240605135132939]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END' scope-isolation='false' />
            </column>
            <column caption='Date Filter' datatype='string' name='[Calculation_9330515113739378]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Week&quot; THEN IF [Date] &gt;= DATEADD(&apos;day&apos;, -7, TODAY()) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;Year&quot; THEN IF DATETRUNC(&apos;year&apos;,[Date]) = DATETRUNC(&apos;year&apos;,(TODAY()-1)) THEN &apos;Keep&apos; ELSE &apos;Remove&apos; END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_8240605135132939]' derivation='None' name='[none:Calculation_8240605135132939:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9330515113739378]' derivation='None' name='[none:Calculation_9330515113739378:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Week-Trunc' name='[twk:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3970514122044428]' derivation='User' name='[usr:Calculation_3970514122044428:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5230514122002225]' derivation='User' name='[usr:Calculation_5230514122002225:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <slices>
            <column>[aft_kayak_daily_data].[none:Advertiser Name:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_9330515113739378:nk]</column>
            <column>[aft_kayak_daily_data].[none:Calculation_8240605135132939:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[aft_kayak_daily_data].[twk:Date:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[aft_kayak_daily_data].[twk:Date:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[aft_kayak_daily_data].[twk:Date:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[aft_kayak_daily_data].[usr:Calculation_5230514122002225:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='border-color' value='#898989' />
            <format attr='border-style' value='none' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[aft_kayak_daily_data].[twk:Date:qk]' value='*m/d/yyyy' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-color' scope='cols' value='#d7d7d7' />
            <format attr='stroke-color' scope='rows' value='#d7d7d7' />
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[aft_kayak_daily_data].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[aft_kayak_daily_data].[usr:Calculation_3970514122044428:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[aft_kayak_daily_data].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[aft_kayak_daily_data].[usr:Calculation_5230514122002225:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[aft_kayak_daily_data].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([aft_kayak_daily_data].[usr:Calculation_3970514122044428:qk] + [aft_kayak_daily_data].[usr:Calculation_5230514122002225:qk])</rows>
        <cols>[aft_kayak_daily_data].[twk:Date:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='byTarget'>
      <repository-location id='byTarget' path='/t/UnderlyingData/workbooks/AfTAdvertiserReportPublisherFacing' revision='' site='UnderlyingData' />
      <table>
        <view>
          <datasources>
            <datasource caption='performance_with_targets' name='vertica.41515.470290092591' />
            <datasource name='Parameters' />
            <datasource caption='tracking_codes' name='mysql.41515.471684560187' />
          </datasources>
          <datasource-dependencies datasource='mysql.41515.471684560187'>
            <column caption='to_join' datatype='string' name='[Calculation_0790830160853346]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IFNULL([City],&quot;&quot;)+IFNULL([State],&quot;&quot;)+IFNULL([Country],&quot;&quot;)+IFNULL(STR([Destination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Destination Favorite ID]),&quot;&quot;)+IFNULL(STR([Origination Airport Code ID]),&quot;&quot;)+IFNULL(STR([Origination Favorite ID]),&quot;&quot;)' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Tracking Code 2]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[URL Override]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Tracking Code 2]' derivation='None' name='[none:Tracking Code 2:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tracking Code]' derivation='None' name='[none:Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[URL Override]' derivation='None' name='[none:URL Override:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41515.470290092591'>
            <column aggregation='Sum' datatype='integer' name='[Ad Group ID]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Intent Media' datatype='string' name='[Calculation_2960521122453172]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Intent Media&quot;' scope-isolation='false' />
            </column>
            <column caption='Average Position' datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Calculation_3120904172713462]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Auction Position Sum])/sum([Impressions])' scope-isolation='false' />
            </column>
            <column caption='CPC' datatype='real' default-format='C1033%' name='[Calculation_3890521122410026]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Spend])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column caption='Filter for Advertiser' datatype='string' name='[Calculation_5170514122151415]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Advertiser Name] = [Parameters].[Parameter 1] then &quot;keep&quot; else &quot;remove&quot; end' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Campaign Status]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Campaign Tracking Code]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column-instance column='[Ad Group ID]' derivation='None' name='[none:Ad Group ID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2960521122453172]' derivation='None' name='[none:Calculation_2960521122453172:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_5170514122151415]' derivation='None' name='[none:Calculation_5170514122151415:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign Status]' derivation='None' name='[none:Campaign Status:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign Tracking Code]' derivation='None' name='[none:Campaign Tracking Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_3120904172713462]' derivation='User' name='[usr:Calculation_3120904172713462:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_3890521122410026]' derivation='User' name='[usr:Calculation_3890521122410026:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[mysql.41515.471684560187].[none:Tracking Code:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Tracking Code:nk]' member='%null%' />
              <groupfilter from='&quot;275107107;101824258;w&quot;' function='range' level='[none:Tracking Code:nk]' to='&quot;275107107;116111632;n&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.41515.470290092591].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[vertica.41515.470290092591].[none:Calculation_5170514122151415:nk]'>
            <groupfilter function='member' level='[none:Calculation_5170514122151415:nk]' member='&quot;keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41515.470290092591].[:Measure Names]</column>
            <column>[vertica.41515.470290092591].[none:Calculation_5170514122151415:nk]</column>
            <column>[mysql.41515.471684560187].[none:Tracking Code:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='border-color' value='#b0b0b0' />
            <format attr='border-width' value='1' />
          </style-rule>
          <style-rule element='table'>
            <format attr='row-levels' value='16' />
            <format attr='row-horiz-levels' value='16' />
            <format attr='col-levels' value='16' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[vertica.41515.470290092591].[none:Ad Group ID:ok]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='aspect' value='1' />
                <format attr='aspect' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41515.470290092591].[none:Date:ok] / ([vertica.41515.470290092591].[none:Calculation_2960521122453172:nk] / ([vertica.41515.470290092591].[none:Advertiser Name:nk] / ([vertica.41515.470290092591].[none:Campaign:nk] / ([vertica.41515.470290092591].[none:Campaign Tracking Code:nk] / ([vertica.41515.470290092591].[none:Campaign Status:nk] / ([vertica.41515.470290092591].[none:Ad Group ID:ok] / ([vertica.41515.470290092591].[none:Ad Group:nk] / ([vertica.41515.470290092591].[none:City:nk] / ([vertica.41515.470290092591].[none:State:nk] / ([vertica.41515.470290092591].[none:Country:nk] / ([mysql.41515.471684560187].[none:Tracking Code:nk] / ([mysql.41515.471684560187].[none:Tracking Code 2:nk] / ([mysql.41515.471684560187].[none:URL Override:nk] / ([vertica.41515.470290092591].[usr:Calculation_3120904172713462:ok] / ([vertica.41515.470290092591].[sum:Click Conversions:ok] / ([vertica.41515.470290092591].[sum:Click Revenue:ok] / ([vertica.41515.470290092591].[sum:Clicks:ok] / ([vertica.41515.470290092591].[sum:Impressions:ok] / ([vertica.41515.470290092591].[sum:Spend:ok] / [vertica.41515.470290092591].[usr:Calculation_3890521122410026:ok]))))))))))))))))))))</rows>
        <cols></cols>
        <join-lod-include-overrides>
          <column>[mysql.41515.471684560187].[Calculation_0790830160853346]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='147' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='DataConversions'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='datetime' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSVConversions'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='DataNoConversions'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSVNoConversions'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='AOVGraph'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='ROAS vs CPA'>
      <cards>
        <edge name='left'>
          <strip size='263'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='71'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[aft_kayak_daily_data].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='byTarget'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='238'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41515.471684560187].[none:Ad Group ID:ok]</field>
          <field>[vertica.41515.470290092591].[none:Ad Group ID:ok]</field>
          <field>[vertica.41515.470290092591].[none:Ad Group:nk]</field>
          <field>[vertica.41515.470290092591].[none:Advertiser Name:nk]</field>
          <field>[vertica.41515.470290092591].[none:Calculation_2960521122453172:nk]</field>
          <field>[vertica.41515.470290092591].[none:Calculation_5170514122151415:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='DataConversions' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CSVConversions' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvdFvHEt65fnr6by9kd7SOHK3iMnAUoYSkIBb
      RAu4RbQwJuE7wCVgYHwHfnA3+mHsR7/P8zz4f1j/JQbWg1ZjurG82BZc7G31VN0xZaZsaTe4
      JteR2ypMhK0E8ptR9ngfIqtYpChdSZWUun15AIGSGBURmZWREXHi+86Ba1zja4xvdD8/IeFf
      fdCeXOMa7x//mACQ8K8a3/yvnA2Ia1zjnzwkyC+TlX9/Qw3U9QC4xtcHLd/4Zx+6D9e4xofE
      9QC4xtca1wPgGl9rXA+Aa3ytcT0ArvG1xvUAuMbXGtcD4Bpfa1wPgGt8rXE9AK7xtcb1ALjG
      1xrJuX+1H6gX17jGB4CInA0AaQWp5UP25xrXeHO08QFWA/XOVfjanw0AlahLK5NaCLWgEiBR
      aK0I84BSKnZAa1RysRzogUZaQamz8qEO5MMcEpAQkBb0UBPmFSQKWlADhVJdP0SowsufAQGl
      0UpRzatlXxblgFin0ug1btBr0QrV8j5AnuuX+7dm21ILKlEIoFT8t0B/19Q9RCQs73kIATWI
      32kfEBFCEPJc91PhAi2EOqD1W9QrgqCA+FwqFN8E4J/xL//k3//Jv06+lbwUDXr4sx/xk//8
      hPSbgv1rS7aRsv8ff8TJPwgnf3MI/0PGxv804PAvfsTDR09Ivgnl/2WZ/38W+3c12be+wf3/
      +CP8fxWe/b8W0g2y34CH/+fPePK3lhs3bvCX/2lK+fgJ00dT5vOaDWNQ30qwjw85/KsnJNkG
      mYIf/eDPOTw+4Vn1jGd/L6QI09lDDv+yxP8XT3Jjg+yfK6QO/OzgZzgfKH7rZl+3/Bzs3xzy
      5z/+CfU/VLhTx43fvMH08GeUf3mI/TuPfy4Uv2XWaEH40f92n/lzwf4/x6Tf+IjJX9zn8P/2
      3B0VvVxD+IXlz//3B8gvaubPa6Q65f4X+3z0P2aYYdZLG0++fEj510+48T9vMPiNHl9G/x3k
      v8nZy/INMPv5TzitAgcHD2m/Aae/qP7x8k1wy3I/YIYGxCMtZMYgdRNHTwvGGELtAdDG0NQe
      aYXsRop9UmKdR2q/nFnSGxnposMfxVmnqRtQCq01W3cK3HHJ5Msyvp3aOMXFpZnCmBw/d3G2
      eCE0Et9WTdcn2m4J10p8ZV4hsm7mc/PYx6ZuAAVJ07W9/nJSaY13Fvv4iMlsgjt1NNLvMjXX
      Gvv0iGk5YzYrCfViFusHQpzVmw+8v5QQKJ9Yjg6n+FqYziYcnThenujaOGUtljcoRXFr62yD
      rDKKOwVK6bikGShCLaRKU9yO5ZTWfP4Hf4SvBaVgVBSQgAuCDw49MOS5IdSQ6oysDuihIVOQ
      Dw1B4lRsNgukdSiaOBh0xva9XRSxjXSQkgUwnxlCLZg8j10c5JjMofQ6b+DXQ6mU4laBMQap
      hUxniAjZhgERdL5u24qtu1sowAWP1MLoTgGqv2tS2rA9zvA3C6QNiMBIjck2+2uj2MzhNGCG
      PS+B3haJ4vPf+x4iHntaobVGRLoMsIR/1/jmT88lxCwe+K9aC75pubcpf7HM27ZxjX/yEImk
      jV5jYIV5+OV5Fmh+zQJdoz9Ie4XPUwuNNGu14ecXWSC9sm4WIYigBzoyMN3ac3XTIXVkEBbs
      TfzYSocSFRmiEOK6+GK57t/n6lHq3Jt/lepa1t0CSi3Zp4t9OOuburqtwAqDsryO7prgrH9r
      QeI1AF07grQ9X9OF2VUkMk9rz7bdHq4PuvJV9VPzdizQ6j4kAYV69WWGENh/sM/uZ5+Ta83k
      x3+GqAJzA1ReYFTD5GCGtKAGmu172+RDzeSH9wmJRklA3SzYvmXYfzChKArKJ5a9390jH2pm
      P5/gn8PuvS2mD6eRLquFfLNge2cHrcA+nTErHeOdXYqhYv+Hf4YQN5/ZhqHY1Ewfxj6QKHZ3
      diMdWQcmDyaQGfZ+e/zO9/h1qI5n/OBBSbGpCQK7O7vYwwluHjfgZsOws2bb9398H3NzBCIU
      twvKh/s4DN/9vZ1eriFUlv2HJUVmULkmQ9h/OGN0b4/x7byXNsrHM6x1jD/dw+irJSa+si+P
      JggZ9sQyvjs6fxB2EWqgMDdHcYQlkGU5pXMYUyAtSIgbPmctoa5wcyEfQmY0tqzIBgqa+IbU
      Q409sagEfC3kOr7JsxvgQ0N6I4PEkw8U9vGU9IZm5zuxg8Zk3ZtWYzY0k0NL8fE2tEJTxz4c
      HR6xdXcLL0IO0ArpjYzmCqdgNdBAQzWH4mZOEzx8pFA4UMUZI/XOiG9i+6TEB4975nDHFhn2
      +xApoDycwkmKasEFRyFNb/WLNOih7mbvDzcApA6UpaURSwCagwnSZpcMgO5NTCvktwpkXsFA
      o5KU3KQUuYlv3FbRnDQU3UjSSdM9qClmMye7kaKURgTSNMVsGEIIIA3SavQgw9VCqlJ40WBu
      jsgGkGUZ0gphHsiGOa60aL2oW1HcHqFoUNqQDmIftsdb+OcNo25DpAYaXjRkph++/FXIdIYx
      hqaBVKWoJCUzWzQvGvRw3TeoohiNSFuw84rmecPWvXG/LNAgY3u8jTeOIJ6mgd2iIO/pDAAg
      H2aU1mPeZqlyRRjv7EFdUZ549EYGTfMaFmiBljdbD7Yr69XXlnuD+i5jga4ZoF8vtFe/CX7r
      k+ALuAIW6JpFukbElT78sGSB1oEPr2OBukZe4uIXeBVHvyzXrfkSXtp9v/S59sL6cOVtL7Jy
      3H1J3QvWQtoLh7/tSvtXhGXbEBmfy659HVyc+a7iPOSqZ9uWl7+bnuoNIbzbOUB3jSp5DQtE
      Kxw8mDC6t4cewMGP/wyfaLJEICvY+WTE7KcHCOCcZ/ezPXKt2P/xfSRRIAFzZ0wxTJkcTMk2
      Mvzzhu17u+RaMfv5Pu457N7bZnowQYgPlLlZMP72GKWgeloyKS27O4u6IwsEQrZRMNrMmBxM
      oAtI2/10j3yoQIT9L/ZJNwp2vjN6xzv8elTHJfsHZcc6Cbuf7lI+muJ9t8E367e9/8U+5mbc
      UBebBeWjfdwLw+ef9cNsybxiMrOYDY0aZmQ0TGYziru7jG71wwLZpzPKJ47dT/fQfbNAbzlQ
      7aMZkiicC2zdHeGry0IhFoWflky+nJGPttEDHaMeg5CPCsqTQKgsk4MJ2dBAomhqAa1Ib0B1
      EsiHkY50bUWQgDyLO3FbOfKBQYAsjYcRaZaB95DA0WyKGmjGHxf4OmA2MnwXRZoqhT22FHe2
      QAI+xHik6eyIrfHWspxIIM0yGglr3uFXQyWKphWqeUVxs8AHD0kKYmEY+7ceBEQoD2eRBbrl
      sE9LRAP0NADahlA7qmMLWqFbKOeWrOiPOg61xJdfLf0PgLeBBGaHJdKCF6gqS6P0K1igIKTa
      sHtvjASPaAUfKUhiCHCWKSRJ2f10FxFomgapHSIxxFSpyPwAKJWT6yY+kF7F93cLihTXNOQJ
      NN6TmQKjFUeqxLuKkBsyrbGHFj3I43Ljo8i8iPekxsT4omee4naBf+YpPh53bWoa70mvkgVK
      IE3iQYz3DXmeQtPAIAYPqmzdthXmToFpBXeiCbVQ3Cog65EFUhnju2Mqa/GtgMDo9git097a
      0ANFaR2jb3/YMwARGN0dI8FRuu4FLXw1C7Q8GVzgFXPGcq3+FevUNzppFEGSs5PUN637veOa
      nfpwuBIWKMjLm11A3pDdedOMsjer73yp62y1a6xCWokh6GuEWb8cC3TFMfTX+PpgEQd0Zehy
      VtZ5ZtNBemECP0e5CdLGWA4Rzc5vj2LsyEFJcdPgnvkY//J4hm/iSEw3DDufjAjziv0HE4wx
      eN+wu7OLezrD+gaFkGaRIQmnFjsX9ACyvIA6MD08Ymu8Sz5UzH66j28z9n5njNSB/R/vkxmD
      f+bZ3tnFn1rsM0+WQJNm7H1nHK9BhIMH+yhTMP721bBA4TTG0RiTxWv8dBf7KMY3gZCZEeNv
      r7cPmP30AJ0X0ILZ1NjHM1yr2euJ2ZJQMXvsyLUmHWZoYHI4pbizTbG53smtQiFIZF6UjglU
      twz+1FI6z+693bWoUYVCEnmrJag7LhE0IVQUt0c0q+cAF1E+mhFqmB5OUYOCnd8eQUvMyALM
      RoabO3wb2R1RGurQjcwGH2J2WHGzwM0dQRqUVIQkJ33ukHaESMBai4hHDxzSVrhjh7mzRT6I
      3H6KJwioVggh/r24afBzT/CCQrBzKIZxwKoERALcyPDh6lggaWNyD0gc6HPXxUhZ0FtIqIB1
      BoDgnMM5TwiB4laBfTzB61F/A0Aa3InFPYkMnhaYVZZ0o1h7ACwQvMfOHU3wmGcF4bjECWyP
      t1HvMzaoFWazyAK5usFai6/VJbpAXRwOgHOObJiRDRRVCHG0JfEhcz6mQtLEVEAlgrxgWS7t
      DhrcMx8v8wVIq6ANNKQx+VppRqMRSmXxoW0VJjdI7WPy8gvwz+ke5LgpVh3zA8BHDSF+d3hY
      vg2UUpEFusIl3Sox4Lv+NI1AkiHiQa37AClMMcKYDDVQuLlDDU1vuboAJGm8/4NIMIQWTG7Q
      gx5ZoA3D6I4hHaRRqGCQYXLzZmEzPUJqj85ztI4spVIKpV/FAnVrN2kXp6zx7aq72H2l1PJ3
      tGeZ9ovPqcvKIedyTRf1LdqTLpZI0e3uB3r5GRHQ+tV1KjjHGkGPce2vvamvvhd9xdQvTtLP
      rpn+r6lTsogzaE/37GIsUN/XsAYLtHg2wjz8cjkA/DP/pypR37jyGI5rfH1whZtgaYVGGrLB
      u8+Ifu5/eY4FWsRHXOMav+pQbXxO18k0yy7mA5yjlLrRa49LRBSjb8fcgMnhUZRDmQfGn4yx
      x+Vyk4rOGX9cIKFiMjta5gCMPxnjTkuqAApB6ZzRxwVhXuFCQ6ZADwuQQPnUUnw8iieIj2ZI
      qxh/MkLqwOzhFN3VOfr2GJlHFmkh2jX+pNsctsLs5zPUMGd0+2pOg8O8Ynp4hNnICDWMPxlh
      n8Z7QSvoYcFozayq8lEZQ02AfKjjvW4V44/7uSapA/bUkw3SKHCGUD61mM2CvCcVh+ppSaMy
      0hbyzZwwt9gqfn9rpYy2cRC8DQ0aqgoBfN1Q3IpKGK9mgZ5GFuhoNgFVMPp2Qag99qklhBjX
      4SqHeyZIcIjS6KaC2wWyLBcwGxo7d4S5xz+rkCRHN5bidoHMHeWhBQQ1qKB12KcWNTToRBGC
      p3kBQUaoVrBPS9Q8Smy4yhFcoBGPrSHXCpFRp6AW8C1QVVc2ACQ4yu4ate76EzzeWWRQ0LR2
      zQEg2LLEKkuoA6NiRHm4jx+MehwAntlsFsNTtMK0MDku2f3su70NAHfisMEiIVCMCtyTI5yA
      uT0ivyrVvsvQCtOHE0IbCQWTZ8ClLFBMd5RacNaCUqQqav+sShYuZPpoffwp0gVXxZzYtAtV
      9j5ujpsX3Sa4jVSp1AIDRXGnQKRBgiOEqEUkdYOg4mdEkLpjgZTCi+CCEEOOG4JIxzinZxur
      RCHP/ZUyDUp1kpDdvaCNLJCQgghpD22bmwWZAlqw3XeR9fnQJCmjO0WnCxuw8ziYleqPBVIb
      GYXJumtwnVBW9n4pUDphhiSykCTp8iDtUhZoob5wFmsf49v1AKp5OKf7uVAqWLJAiUIPoman
      HugzRYDVch0i09OxBYv4H1hqiIpElTJp4xKgqi7WuWAWQFDnNDMjzXqFp9udNujZvdDQhuU1
      9tL2go0TOWNQEvq9pqV6wxkLdE6Zo4f64cI1sN7afVHvW7FAK7kaoX4NC7Rer65xjfeDhZp5
      b8FwwMvZW9e4xhq4cmGstlmyQe+Cpm1eHwwX5hX21HeMTaCpfTzJG2rKR+VyGWJuFXHZc2rx
      NcvTSjeP+pxGEdmFWwVRNzNHJTGryreK0S1D+dh2h0qQDTPyTo4lzCtc5Sk+HqESsI/LLuNM
      yIYGPYDyqYuy7bUw+niEIib0MMiiNuUVQEKgPLZRY7IWio9HhNMSL3G5p4aGYk1J8OrYonTc
      rGmtCJXFt2l/1ySCnQcypTpJdMEeO7LcrC/B3q2xw9zhqrD8/npDC2mbvtVyUEKIO0cBk2tS
      dTEY7gLc8RHTsgIJTMsjskGGKUYUue42mQYk4KqAvp1H1iKAGIV/kULbwDxgvjPGP3OQwGQ2
      5Xt/8EfkCo6si3RWEsMuwrzC1w1Zbtj7bA89iBlg3jfxgRoqZrMobpQPY5KIVuCdo3wYyG/l
      uKHBKME6Bx+FKxsAYW6ZPJxi8gytNEpnWOsIlYWBQYdAka8jYCVMHh6gBjlSB4o7BXY2wQ8K
      /vj7n/dzDcFx8GCGVgoWLNDTGduffpedNQP5FrDHFv+8nxfCupg+nCAo7OniZXyZR9iCoWm7
      7CtpsC4GehljaLyLTE+aYoZdrE/HVOiNjCaEqNmTduu0F7G+NDNoBYjgu1ijuPE6+2NuFmzf
      LfCVZfrIslBCFJHlxtwMM3xwBJEofNVt3lCxXAqRBepZRvwi1ECjAN8paSNNl4if9raMNKZA
      tYIPHlvaSO32ymylFIUhzB2hqiiPq1h/j2/q+JVLv2//d4AER1ULrnIICj93uPYydeiFlqNS
      HTXmGd0qzujIhZNMFz/iKk+qQA9N5N/rOL0AS2eYxY5/4eQS5gGd50iokDayNyGE7jAmRnOK
      sDycCSE+zHmeU1UW6NItB2qp0Z8NIkW6eONXpxVqoK8uD1WE8tRhOln0uBQKHTVML20vkoAW
      LwClgKTHa+oYoOULpouvVwO9vorDou464EOD6VFyfVH/27JAC7reB0+qUnzwvzw3AEi4ZoGu
      0Q/egzDWuqK7EuR8SuT7Ppy4xj9d/LoEVX6lSV4I8eRWD3VkDU4dmc7wtafYjPE8Mcy5ARU3
      p2fl0hh3sVkQQoUXSFfKxak3boLVIDI7VQjoYWSJYuyGigZrLdhTSzaIbZu8iNPryrp/1Yit
      OrUola1loPBanLvG6ISyvBdt1C5dd6kS5uH88jEEQnco2As6N6DVQ7tqXnWnwev1ffEyXZ7A
      ciYh34tp3juEQy+XlG0XXs9r1KEjpSnMZhOg4A//7R7Vacn9H08pbi3Wcyn2yRFhEaqgMz7/
      bIeqstz/YkKRZ92mKqV6coSbV3ENO1Dkv7tHOC6ZlA6tINsoEHEcHZbs/f73KIaaaTlFWsWe
      3kNqy/4P72PyaLckLYQTi++cGdVAs/fZXowFCoGjsoQ0Y+93+pESvwh7XHL/wXR5jWmyzdGT
      KaEKMNDorFqzbWHyxX3UMMZWje4UlLMJLin44+/v9XINYe64/8UspkRmKRrYP5yy/enn7PQU
      b1TOJjiJL7cYC1RSzoU/+v53r87B81V9+XKCJ8U+sRSjAprmkgHQrd3cqcWeBHwQ1KA7Jh+Y
      +GaeL0IVVrQZF4kbAnqQkSXg5p5i0yDS0FnILQMhgtCZ4yns05JqLjSt7xJgGkCzzCwVQamY
      mWbnjtFmcWZGkbCcRc5w9VLcS5O84Cly0+lUKmDR9x7aGOb44HCVj3FVIcCwz6VFSp5rqseW
      JqSkdf/J7OpGhmo95akltEITHB9CJl1CRWktTS1IklHZKIx1OQtUC9IG3Nwv9XhSnaEVlI8t
      JjfdMsQgwdPAUoszHWTxcOqxXerCL8r5NoZDkyhSlcUlQqfx2IhnVUvUbBaEykZ3QZVSDDWz
      R+X5OmuPXz78KcWKnJ99WpIOTP/+tIsbWoeVawSTZ/FetPFepHr9tkMIMTYqeHzHzKUq6++a
      RAhtnDGbtlm+N+IBYz8P6WIJFOYBL93zlKQUeb4e3fq2SyBZZBcGXOVROkMuskBKvToW6E3f
      qYvE9HXKnUude4s6r/H1Qe+xQIsKX9vom3auh3IXxbN+PTiFayzxHmjQdU3ymnAxFuiSaW9p
      R6n1UgZ8wU5IHeP3V+PitdbLwxWlVAw7DVXnKyyRwUjiEiLuxnVUoUguCSMWoVphDBaxHMsD
      G6UI83jgFerzzMLFQ7je0QpVp2kkElmyl/q3ZtuymoPR3eOLZoBrYcGlJyz1y6UO0OU6rF13
      F+Ye1rQzfVX9b2+SF9cxi1D+15rkLVD+fJ/pibB9x+ATzd7HRcys6SjMnZ1dils55cE+ZSWM
      ChOD1Z57mo8ydr9dUB4e4bq14OjuNqPNnNnDKV6E7fE209kUqSXuKzYLdnd2YxzQ05KZdYzv
      dSZ5P75PQKGVQmWGrU3N9HAWM9QGmtHOboxTqgOThxPUDcPe71yNSZ592rFAmwZa2L63zVHZ
      sUBKozfWbVvY/+F9spsFNEJxp+Do4T5VkvOHv98XC2TZf1BihhlqQ6MR9h9O2d7Z6y3rrHw8
      xZ4Exjt7mJ79zd66L19OIwtkLVt3o/ngy7FAsIzkAzBDE0eO0qTEpYjphKlI4gYNQBtDI9JF
      FSrymwZp4kJG3UjRgxjyEBkegY86/Z66QSmF1pqtOwXuacn0yxKIb5CFFAsojMmjMJdS8EKW
      7TV1E809ljaqizfn1U3BSxaomw2butNHSpqYEddD20pr/Inl6PER04dT7KnD96yRqgYK+/iI
      6eGM2cOS0M3MfUFaUFp98IOxaJJXUs6mhLrhaDZleniZP0B3OCISlzcoRVEUkc5cCZTb+2yv
      0++JGvCpUhS3CsymiZLpwVEUeWR/njeYm0VkNToOP88NoY7sUhYCemjIBl1MkcQljNksCOJQ
      bVzrqUHK9ngXlcTE+nSQkobA7me7hCCYPLJAaqAxNzLUsOf4kxWoJKXYLKJAgAipzjASkCzr
      Dg7XbVuxdXerc270UR79julBcGulBW3YvZfhi3gNtFCoUa9xO8WmgdPwK2CSp9j5ve9B7bHO
      RTNGuSwYboHFW+BtDe2+Cm9S/mKZt23jGh8e72ET/CtokneNa5zhfbBA66CpL7JAl5jkXUxA
      p3OAkU79gdWIvEVidXd4JhLLqOSM0ViN4FvE7MfQ6zOl33PyfBei/pZx/ot2OGMyZIUhWfTv
      Ks8Pln1uz+JcFn3rpe3VtfjipJ2ez0QuzK69S0r2ELX5qnrfega4cD9FvSYWCKB8dMCkdPyb
      nTGT2SwGrW0U7H5cMHk47SoVzGib0a2cgy/2cTUUN7OYdOAcasOwlSumpe3oT2G8sxezuw72
      8a1id7zF5GCCSBxkRTFi/J0onFQ+OqC0nQnfAPb/w59Fue1OgrzQMDksu6AJ2P1sD50IkwcT
      yAx7v301LFD1dMYPHpQUm5ogRKn4wwluHgeFMQU7a7a9ZIHaaI9UzvZxreG7v9dPfFOoLJOH
      FrORoYaaDJjMDijGe4zXFPVa4Nz39yE9wrq+CBp7Yhnf3Ubq18ijA2QDDe0Rk4MDymNLPiwo
      lAc1orjZ0Z11WGrV6I0MWzlUovBeUFm25F5DCHhp2B5tncXxfKTIAB8asg1D42Ms0NHhFDU0
      jG/nXSZaFk34BopMa6bHjtFoC9qADwqzYTgqLVujgqYW9ECiJ9kVTsFqoIGGag7FzTzmS3+k
      UDgYbHXXvQ7iQLJPymiS5xzu1Ea/tl4hlIdTGKToFmxwmDWXFudqX3x/cvXxWa9FHSjLI7yA
      kOIf/AAG5hUmeYsDmASygWF8b0RxZ7SkQ92pZVaWmI1olDFaasko9FCT5QalobJHqCxKYRc3
      C8Za4ZxH6wYhCjAJilSlNM8bzJ0RWQI2s0jwhKAxWnNkXZRMb6MxXnErRvIpY1AKvPUxlfJ5
      E+lJJdA0ZFdpkkdMGTUbhqZpSJMUlaSo4VYMhx6ub5JX3BkBQlUFmucNW3fH0YSvJ6hBxmi8
      TTi1SNvQNDAucvIeJdgX31/2gd/+0sL43h4igdI6zEZB0zRfbZL3Ruikzd+8N7I8eXx1nd3P
      i0Z517gG/CqyQG/52Xc40Lk2yvv1wnuJBVpD/ODlWKDLpqmLp4IXxbNexdW3b1H+sjZeV+dX
      9eWyz14FLmFpzqEvg4yL7V0hC9Sb9etScvFC/X3hXWKBVj/bfV9fHQv05QGzE08+ACFj996I
      6cMpaRrX7cXdaKhWfnlAeRIzlwTwJyVZMaYYpkwOJqhBFJAa3YvxOrOf7+Oew+69baYHUa9F
      JFDcLKJ0torCWZPSsrsTGYT9H/8ZErWMyTYKRptZrFspQkssN4zU7P4X+6Qb0YzvKlAdl51h
      oMZ7YffTXcpH0ygGDGRm/bYPvthH34wmecUtQ/logmszPu8pvinK3VtMpsnyDAVMZhOK0S6j
      W/2wQPbpjNI6dj/de+8ZYC/15XGJoHDPIokirzPJW0CpGNYgqiC70cRkmTpgjy3ZIMUeW4rN
      cdTiqTudHoFUxQfeJ0JmDEflEVujLULtoY2UZZZGr9Y0y8DH2KLpbAoDzfjjAl8HzEaG78Ry
      UxWFsoo7WyABH6JW0XR2xPZ4a1lOJEQWSK7OJE8lRGl2F40AffBRdVgsDGP/1oNEJezDWccC
      FdinM0SPgJ4GQNsQgqM6tkuTvHJuyW72Rx2HukFvaHwtH3YASGS7fJtGc8DKIiq7JBhOhFAF
      qtMqCmARM3hA8E1M+FMDxdZ4G6U1WSdJqDoDvWxoyIcalS5C58CfOIrNAnfil5k5imiAR0I0
      tDMF23dHFLcM7qQiBCEb6GiIV8e1ngLSQYZ4vxRwcs5R3C6iXWo3HSqlY52DK4w/SRRpkqIH
      emmSR9NElqb2sHbbMQZrdCfGV4VaMLcKips9skAqY3R3TJHnaKWQJMZzad2jSd4gJTwL/cq6
      vwNE4nnV1qZGDVLM0GAS9WoWaPVE8KWMrJU11Kps9yvXj19V/sLnRM5OnC+eRi9xcc162Xr5
      imOHlmTW+2j7PVxPr22sxgJd0f14Zxao68/LLFC4mIUlK39/NS5mb30V3qy8sLrBv9i3XxVc
      sQLjry96DKm+DNJKDINfQyry5Viga579Gr8mWKwk1jkHeJkFOjeNx7W6fRyN2Xa+M+piR0rM
      zXgCvLuzi308wz/vBK8yw84nI8K8YnIwxZgM5xt2d3ZxT2e4Zw0kkC7KnVpsiArPWV4sj6uL
      8S65Vsx+foAbi2BqAAAgAElEQVS0ip3fHiN1YP+LfYwpcM882/e2aSqLfeZJgSbNzuJ+WuHg
      wQS1UTDuSeX4IkJl2X9YUpgM7xu2l/eigTayQOu2PfvpATqPdZhcY5/OCKJ7Y7YkVMyeOnKt
      yYaRBZo9mpLf3u5Nydk+msXYrRbMLUOoLEengd3v7KylP6pQSCJvtbSqjm1n0u6jR528Jhiu
      fDwjBDgqp6A6Sq8lquu2YDYyXOVibEXtCIlG16HLJmtwc4dIwNwsooFc3YBUhCQn9Q5pR4gE
      bGmR1qMHDtrILulii1wtsseapQtlmHtCDUWXkRaexZzTaJInyzW51AHSFB8q4IpM8kRidlor
      mA2Dn7vodTa3oLeQtduWGP/jPKEOFEWBLSf4wai/ASANzlqcSGSBWsXstGRXF70NgBA89plF
      5kLucsKxxbWw9cmY/H3GBrXCdBZfqC54yiclTXKpSV5Ub0Yiw5LqKEhVhfOjzS2ZDx/d0SUg
      TSelmNClT8bYHwBeQGhjuaZNOw8vzejuCJWkSB0IAlmn9yPEtEf/nCgIhVoyTe6Z63rREFrQ
      SberWPQvUZGZuUqTvJW6nY/X2DRRdElq10PbClMUmI24NHUnDqX10nykFyQpxWi0DF8PtWCG
      pleTPD00jIoCNYjaQAzSONu8Zz9qCYFso0ArUCoaa2TJK0zylsZmbffQS9wEL2TMl0Z16kKu
      Z3u+3OLGvq7c8t8rvxeJSe6LZdhSyzFE2UEWcUHt6nZanZtSRWJ80pXlAyxYiM7V5uI19hJT
      /xJ7BkvxsD6xev8T+n04L1xDbKOfXIl3YoEW/UgUoaquTfKucTW48iT4HhJtzsmj95oFdI2v
      PRQfXgniTXDukb+MBq2OS2wVmRpBMfq4wD4uQSmCc+TFFsWtnOrYYqvQKUd3+VlKoxXMvpyh
      85yqCow/iXE+9nFJEBh9XFA+mkW1AxH00GDyHKXobHsso2+P0QNF+WgWfXjbgBoWMavsUYke
      6Oim3pWjFWZfzlDDoreYlouQecWs0wYNQRh/MsI9jdcE0kvb9nFJpg1C55N82pkK3u7LKT5g
      Tz3ZII1LiSTqHWV5sb4Eeyets2B9trv4rt6wWBa+RaWhcjRJinT6U7xOHn0BXzmOygqTR70f
      N4DZrKS421GOXQcWatIqkZjs0rqYHDJosCcO3TSEeXQLzBOo5o7mBbhK4Z83yInFhYZUZex8
      tkeRa1xlaZoGNw9oleNsSRUg38xBLKrV0DRMZkcUHxexXGcq56WBU3tlAyAEx7Q8wgwztNa4
      ylEFj3cWGRRoWbdtoTwsQdnoQlkUlIf7+MGoxwHgmc1mUctax+y8ydOS3c++25sHgT11SCO4
      ED6sSd4KC2Qrh9k0NO2rTPKCEELn0zVIkTbq0shi8zrUMdjrRoYZdJtWHdMW1SDq/8cRBpBi
      hho+StFDvaRRecEyNVJEUBsjdu9to1rPbFaeudTXAp0GZDbQeGki0/Qi9tXXgUynF2QEFfL8
      LZN03hJKnZeEpO1YIFIQIe2hbXOzIFPxTWethUT1G1OTpDF6txVCHbBVJDj6JA6WggjvmfW5
      iAWzKAuFaokEyqUs0OJLVd1yItQsl0Dxs4uHLdKarNBoF98cC9FdtVR4i4pnSDhjT7rfxwfq
      TE1CK6JBXgtqGCUPFwzVImVzVW1iVX9yoV96ZafbbUxV1Fqfbca6m7pQiVi37aXahSzuOZFB
      6fOaFqxI13eVqN4ULa5aG/RtTfLiz7OUX1+5axboGleHq84I87Un0+9+LuLn/pfXvM81rgxX
      uewRpBMiePc20iS9EAx3mUleVXVOMTEjbHQ7j2ZtIvh53E1rrZblsoGKjjEiMMgohpryqY3G
      el0MhlIqepAJjG4V2KeRVZIWjM7OJNdDwJ46itujZYaYb+OyLNOGXCvKp3a5vFqUg8ig9OHS
      8ipIHSifOoxW+FooPo6xTb7lrH9rtr3wOgaW99i3LL2Q14YI1UJGvvNktqeuV4eYMK9wlaf4
      eNTv3qJVBMJbnQMs5OtFIM81St5AHt0+nTJ9EiILhMPkmukX96lEkWtNaGHnkxG2nDI9DWQJ
      +Db6WykVQDTOOSazGSbPEZUxvqWxTyxNK2QK7ImLLpKhIdWGvd+NKZD2uMQ+a0BnjHLN9OGM
      0EbpFTcPNLnGOYs9jgk3apBR3IoG3PbEwTyQ51djkhdOLZOH0SQvPkAZ1lpCZWFg0Nm6bQuT
      g320ziPFW4wiC6QK/vj7n/dzDcGx/2BGrtQZC/R4xvan32WnpyBCe2xxvkENzYdlgYDZwwkN
      ivLYRmmdV7JA9RmzobVBpGOBEHxwhNDQiCw3ObSgN2ImlNAxFQvxqzaWS5P4d6RZCbWARuL/
      62HB7r0tqC2Th7OzOPtWoI5CTWao8cHFTfKLRd1xKlscb0eoHoSpXo+Fq70LsQ/xuoSFi30f
      MKaIqZ9zT1mWeOmb2UopbhqquaOqKsqn1TLTrlcsQmo+ICRUuBCoTi2QxpnpUnXodsEChTj9
      SsCGhmwQv1i94gjj5j6uwzpWx4UGM4hiV1FEK5pZuLlb+vumSYoe5khdRWcVrQnBLR0oRQJS
      s1wGublbfibMYzhrSoNS8c17VrfEpUF3o6tTixqs79X7yhsqAXvsMDrDt1EASuqFQ0zTS9tL
      X1sRfC1kA6L4WF9S4+0ZS7dUcEjoxSd4AakDbn7+u+kFb80CyTJo08096SA7zwI1vvlTEq5Z
      oGv8eqAHYaxzsUDSyq9N/MY1fk1whWmR0gqNNKj63WcqvyqLsmCB1IUkBQkBVwtZQhTDbbvT
      XhWPuRdLG7NZdAZ61VL1ARVPhauq6k6PWYpvLcrlw5yqqrrDtBgGvXrI5eYBs5nHuqvq/BJj
      sNoHWZaDMwblqpZAiGArRzZI8QJFnsdrWu3fmm0vDvOgOzDsWIz+lkDdodDK4VoI8b6tvQRa
      Lq/i0rjITa9LINV29+VtWKBuYyltDMXP2uwNhLEeTaJJXmEorY0GddqwdSfn4GBG3hlXL4yq
      J1/sI0ncE6ibBdu5Zv/hjNHdMa607P3B5yiE8vAomuTd3ebocEqoA75uyIaGvc/2OpO8GdZ5
      SHYpcsXkwX40yRso1I2KrU1NWVpCFeIAS3YpNqNb49HhFG5k7P3O1bBA9rgzycuzKJHCNkdP
      OpO8gUZn1ZptC5Mv7keRXWko7hSUD/dxquCP/6AvkzzH/S9mFFrDRoZuhcnhlK1PP2enJ5M8
      +/gI+yygVBcS8wFRrrBAo9EWNM3lJnkisozT0UMD4pEkbmiFzhgvSSlyTVVVMWanY3fMzTzG
      +yQKmhiro7rPZTo7k0ZnIS7VdKrSOdujLXyXd3wmqbcwnlAYo/ErsURNFyrQtJ06wHL5drVx
      QLBikhc8KiEG36GIykk9tTHMkeCwx5bZbBadNnteoua5xh5bjsqS8tAuvcL6wiK8ok/jvXfq
      R3DYU0f5uIy57k+OKI/DK1igOgZHKa0hOMoqkGsdBbLahnSQoVTMD84G8YBLDRQmN7hTSxDQ
      SoFKyZTCzx3ZZhHjTVrpvIEdvgaTx9ziTJsu9sfjBUxulgczSinMpsEdW0K3vFI6I1MKV7mX
      D8LaGNZ7pQdhITB7bMnzqIBnNru8YFYO6tZsO8yjupyv/VlsVpL2ehAWJDI1jfhlbFYvB2Hd
      EijMHW4e4nfzIVmgTpBNxC+D/kTCeRZIqXVigToVuWtcA84L415R/Qtj9ndFCBeFsdaWH79m
      kK7R4X0IY7UNSvoUxrps2ls4xnQskO6y+5eGd91aOE6nXTI7cXqK7ALLeJN4sqw7hicgrYox
      LiF068TOwn7BQHSexYtQ2sVnoCuXnCXfvxQO3f3/1YVD81LbL/Vv3XDoczkOZyxGb9e0yKpC
      LSfv3s0Ff1XCobvPwFkmmUreIBZo9vP9JQvkfBMN7R5Olwkr5s6I8bcLZgf7lJUwumPwAjz3
      iMrYuzdi+jDKnyuguLvNaDNn9uUU/1zYHm8znU2jknRHp+7u7EYW6HHJzDrG93Yphor9H9+P
      LFCiUJlh65ZmOpt1D4pmtBOl16UOUTb9hmGvJynxi6iezvjBQYnJNbSwfW+bo3Ia1+2JRm+s
      27aw/+P70eapM8k7mu1TkfOHv98XC2TZf1BihhlqQ6OBg9mE0b09xj2xQOXjGfbEs72Qrv+A
      KL88IKCw1jK+O3qNMNaKqYEZGnhSQhJZGJEGNcgI8yP0rWL5VtLG0ByXKKVIRWhU1r1UFFnW
      eXlJ04ldnb3JmrpZjkYz1Bw9LpneMOz99ihumBeJNEON2cixhyX6dvTOauqYJXZ0aik+zlkG
      EC1zRa9uSaZ0NMlz8xid2dSRBVI0iMpJe2hbDTT+xOLmHv/M404d0vObVA0U9vERTZWSCbg6
      UPTJAnXJQU37YfeIUgdm5RGNgJAyeTh5vUneYnmDUpjNHO89aWYis5OCubfbaQTFTLBUKYrN
      ArNZkA0Ff2oRpaPt6a0ihlM/tijoDsCi5Hc6SMnSFJUXGBWdJkUiA2LyglBbVBtTItUgZTTe
      JgW0zkl1CvPA7qexL1n3cKiBJruR9mBU92qoJMXkBcbE/qaDDJMF5EYWB26+vkne1miLOMhC
      ZJqKPZTqbwCogWF7nNHcNISOJSnUCJP3aJKX50gbMH0d3q2Bvd/9NyCeIxvINiJ792qTvJVZ
      4LV403Kr5d+2zvchDX6NXyss0nbX2Vv0bJJ3jWuc4X0IYzWdWMK7ws8vxgK9wiTvov6K1Cuy
      g8kl5Vbk5xaqAAt5vCXT1MXyL1iUuD5cMc9Y1Lmq/rVIOudMyGs1KX6VxbpyaUQWbbO8jsv6
      txYumn+87Wz7pm2s1vm2lrevqXdxFvC2+j1vWv+6JnmKN2CByp/vM3PCuDCERLNz2zB5sA+Z
      IW08+Z1okjf76T6lE8Z3DKGF5pmDG4bt24b9BxOKwmBPPHu/G+N8Dn46wS9M8h5OkI7WKm4W
      jDvpbPt0xqx07H6625nkRRZIAdmGYXRLMzmYAVGxYvfT3ahKIYHJFxPIzJlkes9YsEBFrgkC
      ezu7lIfTGK6QRPf6nTXb3v/hfbJVk7zZPg7Dd3+3n/imMLdMHlpMlqFzTQpMHh5QjPcY3+7n
      tNk+jiZ540/3MB/YLNs+mhGIQsOjuyN4nTz6AkpnNLZEMHEnrxTZRgyF2D+Ysb1RUGxqtM7A
      loChee7hRsaChdFa45836IHCd34AANmNGJKaZhk89+SJjnLsg5ydTyLDZEyM9MyHmixT2NJR
      3N6CVvChM+CbHbF1d6srF9/+aZZ1zMPVQA00tA3VnGiSV3v4CFTrYbDVQ8xOnDXtkzKa5D2L
      oSDS50PUZeyVh1M4SdECNjiM9BfPFKSJZyTyYVkgJDA7PKJpIbTEzMJLo0EvsEApkA00Jjfo
      7vBH6xyzaYhsdCxP0rEvuUFpTWUt3MhiymIas8YkhChQ1Br0IMV5QKU0TUNmRhgN6Q1FUwfC
      PJANc+yhRQ+a5Q00myaGG2cGlKLxPj78zxtG+owFomnINq6OBQLIBhnGaJqm6RQKOuapbVB6
      fRaouDOK+kPzgH/esPXxGG70aJI3yBjd3SZkFv+iAYHxZk7eowR7rjNK68g+8NtfBMb3dqOY
      wYlbRjF/ABboDdaYF+tcutFd49cG7RVvhHvICPuALNA7tLN2nNI13ifeFwu0Dl7OCHsFC3QO
      ySX/n1xS7lW/u/j5yz57WZlX9eWyui/77FXgq+5BHyzQZfVfKQvUcxtX9D2ICKpWb3cOcOF+
      vlEsUPnogNJ69CAKY+19toN7OqOqwZ1Ydj/dIx9qyi8PKE983ODeiJtaNgzbt0yMyxloJAjb
      O7vkuWb2833cggU6mETHjjpQFCNGH58JYU3Krg2tOPjiPn4Rb28KRpsZkwex7iCyLIcI+1/s
      k24UvflpXUR1XLJ/UFLc1Hgf2y4fTfA+vvmymwU7n6zX9sGDfXJTIECxaSgfTXBtxuc9xTfJ
      vGJyaDFZt3dDmMymy3itPmCfziifOHa7LL++oJLOJO+t+lJG2655xfbHo/PnAK9siLhjVqog
      u9EQ5lV0YBwWqCSyOvmQswjPRIP3MMhQnXpcZgxH5RFboy1cLeSdtVGWxsOINMtofPT9ms4m
      MMgY387xdcBsZPgQyHX8QtyppbizBXXAz8EYw3R2xPZ4a1lOJMQ6JbztfX1jxGw2j3USWaDg
      YsKQWBjG/q2HKIXiDmf42uM2C+zTGaJHQE8DoG0IwRGOLaJLdAtlZclujmCzlyYItZBtZJH9
      +5Bu8SKUh7PIANUN1YmlUfqSlEiJJnnVadWxO6rLBBN8ExP+xuNtjInmeVL7ZWI1QJZlqEEG
      dWeOl4B3UbnNnfiYXtlldfnn8feN96QbI3bHI4o8w1lLCDHQzT3zUDdLpeR0kCHeLwWcnHMU
      twz2mSfrQrGV0rHOHuNmXoaKekUDHQ35AJoGVBQIY7Bu24qiKBjdKTBDQwgBs1lQ3OyRBVIZ
      o9EYnWt0EtNWi1sFetCjSZ6KhoUfngUKmDsjijxHDaLOlFGvMsmDZbgzdCedSwfGlVovnvgK
      L5+8XjjJXEqrXzzhXPncgvJcpDeeybFfqJdX1/E+4oeW/bp4Urvav75w1ddzlXumq+j7OixQ
      15+XWaBwfk216sH4+tXWWck3WZW9WeaZnMkjvvFn3j9EfjX79SuB96ALtE4bL7NA11z7NXrC
      VecELzzI1nlmz8mjA5dOU/bxjPLEY7IUSTTj2wWzL2fkmwVS+6USQywnbN/Jl/qdDDJ0AvsP
      9jF3xqg2YG6NouHdlwe4GnY/GTN7OIE0nggbUyzzB6pTy1Fp2e4yxGY/3ce3KemLBmUKRnnK
      5GBKmmX4580yk4xW4kZ9o2Dck8rxRYROvsWYDO9j2+XjWdzX0JCZYu2sqtnPZ5g8elkVmxr7
      uKRq1drs0gISKsqnHqMVahhZoNmjkvz2aG0l52iTKLjjktK6+B32+IJVdCzQWyyt3HG0mapC
      YHS7oJHmqz8utY+yFjcN9olllGf4Zw7vG5QSss2CvLM5CnOHy0DQaAK0KfmtHJPFALX7DyZ8
      9/vRrTvUDSlR/JaPUvwzR6gFe1pFmfNNjZ9XpDfSpUme9wE7ryg2C5hXODRpli1jgVZN8vgo
      xYcKuJoBEMWBHdIKZkPHv0uDzC3oApmv27bgTizuxBHqQFUU2HKCH4z6GwDSUD4psS3QsUCz
      05JdnfcmZV7NoyeXD4LOP+AKo12wQAoXXIyxStRl8uiRBQpV6DZ5KYjHOYceRCVkpRTmZoG5
      aUDCcjPYiKB1jtYqWp0mMXaIgaHIDcUtQwh+KZLkn0v305NtFOzcG5MpKA/LpY+Tc56FSV6q
      FHTUXQNLhinLM9wzT7Zikuef+6s1yVvU3bLk/ptGkCSLA3Dttrt7vBHTRd2JQw00Zg1LoJeQ
      pIzuLrSUohaUGZr4nfcEpdKliMKHhNQepXN0sghVj1HFl7NAbaSNSKJrSFgJxVmqNywYogvl
      tH4NK9Lt3NVAoy7mA6hOlbSN6hKLPYksxLQG+vyGc8k8XZJrwBWoG1zE4lo6FkipFWHhlt6M
      5uLPzoMgof8chxWlhAV6eVhX8wHWdHR/Vf3vxAK1Z7kifn5tkneNK8L7EMZqpCEbrGGSF1ZM
      8nrJYLrGNTpctS/wu6hDX0QqF1igl6a+FuypRSRl9HE0x5s9KslzTRWE8bdHUa9TAAQ1MEsT
      vdnjsnN/EcafjKJmaFjkDcRyYV7ha0gV6GEOdTTFM7eKpS5QaFVkckQ4+HLW1RkYfXuMdLqT
      KgFR+ox1aYXyUQnaXJlTvISK2WMb+1Ov3oszUeFizbbt45JsGE9+9VAvTQL7c4oP2MpjVIoa
      Rsun8qmNxEZPJ7fVsQWVQSvkm3l/pnltHARvs1wLVRWXPp2b0GuD4ezjGaGG6eEEkoLRx58T
      gmN6eETxzKAGCnfqsM7FRJdEowfC6FaO1I6jwyOyYYbW0R2+qhz+WdWV89HMbu44OLSoRNCD
      AlpH+dix9wffQycKO3fwAoIUqDpKnmfaxDpPHcFVNLXrDPs8spBfqQPOe6jlygZAmMd7YVau
      0c4d4SSyQFpkzQEglIclKBuFf+8UnUneqMcB4Jk9nGETokleC5OnJbuffZd87YSeCGdLbABq
      wYwK3JMSVzd871ZB/j5jg1phOpsgrcJWrkusepVJXohZXuUTS4x5YcnKqISoISMLc7iFO3qI
      wVW1xBGfgK8X/lPQvOjKr2yMUIpRYZC6oaoc1bxzlF9IjTeylL8gUVFpelmnAE2nFt31YRmu
      sZpofzVQKr4xl/1riY5/SdoJdK3fdnazIFOxjcV3kfX50CQpxZ2io7DDUjW5VzvTzFCYDC8e
      +6SMwmoqfcmI5aohIcpWRoYuReqAby9jgS7s3lfjbPRAUZ0G9FBFxmegzpiZlQ2P1oqqCt3D
      3DFDiwGz6BBEyXU48yPobnzU2oxLImnPylZV1dXZqQLLCjuCOufIsqDeemcflhfQeewO1NJx
      ZPVe9NG2iHRCYl1YSPIaDdd3QXdvF7L1S7WEPgdBx7ic+447jdm18LYs0AqjVtUBpfR5kzz/
      zK8pj77S0JvcvNeV+wCBbde4AlwxC9SrPDrQX4fftJ7Xlbv4u6uMK7lG73gvKZFts2SD3gXn
      QiFeNbWGeYWIIt+Mqsv22JHpaIxX3B4RKhvNrpHuxDceWNmntivXUNwuzpdTJnp51SEesiVE
      WfU2Gs+Z3KCUojq1NG30HqMVysf2rO1bo2h+XDfddJ2e23TapyXp4AodYpb3QuFrGN0uqFau
      sY+2q9Nq+YZTA9UZC6r+rkmEaiFTM4iHmVXlUHp9hxjVqqVDDEnk6rVW/ZnmtZC26VuxQJGs
      iRELZqhJ1cVguBXYpyUiMJtFFugP/+0eoXJR5GrTxBNJpbBPLKGu4mnwIFAMdwiVZf9ggsmz
      aKqnUipr8fOOBdKOYnOPcGrZP7RoBVlWQOOYPrZ8/gffoxhqjp5YaDuB1TowebBPlhedrpAi
      OIuvA6FWZ+EXKlKU1jpIA3l+NSZ54dSyf9CZ5CmFGqTxXlQWBgadrdu2MDnYR+v8jAWa7eNV
      wR9///N+riE49r+YkSsFGxnZi4bJ45LtTz9np6cgQntY4oQlC+SflJSh4Y++/733niE2nUWZ
      fntsKW4VSHvZGOw2v2HusCcBL0KmuvCEgVrG90Sxo8WHuvCHtsvcGmRkSUx3VLlB2oZmNbug
      pWOLFMVNzdFhSQjQtL5LrWxgqIG4yQ0iaBUZED93XZ1nJ43qJXsm1QlT9RfTchFKRxbIBcEM
      FUjTe5tmWNDUDjf30S2+d3mYNAY5lkcggaru/rtXFihDe0957JBSaGr/3hkgAAmOau5pauny
      gh2islewQB0r4IMnVekytiVal1pMHpc2ZmgIdegexCaGQStFPlDxQGWY0Ugst6CdUhoghUSR
      6/joSh066jONKZLSYDZjRKVvIU0U+VDFJVBXZzY0MS+47R655PzSoDq2KJ3156l78YYulkDD
      jEbADPXZvWibuIxY8zBpkQQU6kAjTfwuEhXlH/tAe8bALd07VVTy688nODI/EoRGfBzASQ+W
      qW/NAkl072kDbu5RgwwJ/rxJHgnXsUDX6A9XyQJ1g7ZXYaxrpuUav05YmwVqX8cCdQc9eacP
      s2AgIPpxxR19N0WHl8spJDqmK0VV2Tjl1IJe5AnM4yFXnmuq02oZTqwHepk0L51CRZ7nXRJz
      14dWUAONHhAP3Lqw6UU5iAyKGui1lyGvhAi2ClEZQ87iXM71b822FyZ8C4GAVWPBXtAKoY4s
      3OKeh3kXrt5TE1IHQjj/3fSCxeHsW8wAi4PKxcGlQvFNAP4Z//JP/v2f/OvkW8lyCRTmc37y
      FxOyf1Ew+FbC/g//HPuL5yTfbLH2FGM22P8/7sM3B8z+0wOyf3GHwW8k7P/gzyn/9hknf2fx
      z2tSaqZ/9YSfffkzTk/nmP/FMPgWzB7+DHtquZHe4OhwSvk3h/zl0RHzX9Rs3DSobyU8efyQ
      srQkNzbIfiPKhZd/e4IPz3j294EUYfqfSw6/PMT/g4/l/nmk2qYPf4b7+0DxWzd7vOtnsE8P
      uf/FT6hDhaueceM3b/CXfzXlyaNDTv6Lxz9ft21h/z/8iPC8xv71E/gGPHxwn5/9bc32qB+G
      JvzihPs/foD84hmnzwP131X86Iv7/PI3N7jZk0Duk7+cUT6xJBsbZL/R48vov4P8t7fzHTj8
      6U84/bs5Pzk44L++aKn+7vQfX44Fgng+noAZKnwn8GRMjg8VUguZyZca+EqlaJ3jQ9wAmps5
      TR1QQOUbmi65JWaNgV9RnlDdhhel0MOc7VGBq0omD8tzSc9LZWiTd27swAti3UrFqVAtmB/o
      zeThNcg6e1gX/NLsLzJR/397Z/MaR5Kn/8+hDJFQhkgoQQbIoAAbOkUbflX8DCuxfbCgD+Nh
      D7vLXnaP+/ftXJaZPTSoDw2lATWVDWqUBhtSYEEkqCACXJABnQt7+GaVSrLstruy2tPT+l66
      ZUVFZKryJeKJ56U/a3GlNf7KUV1UFEWBmwc2t12/WdlIU11UnL8qKYtyxWbtqyJcW8d8xoqh
      pqwqzs9mxAjn5Yzzq7uc4ZYcoBa0sZJ62Eb0yDAZptAZVNFG7ONc2j8ypIOunTZMxgY9FBMr
      ufjB5v8qsrRBQ2w11lp8hHSUEmMkHUmSpM4kFyAsgmC1+LVjSDn86giF5Bakquv7iSUsIiaT
      aZgaZhjjUaP+TKRul1IJ+/k+2Sjrjl/yEGIXa5puPLZiMp4AYt8RFxE1zoVo2FNpbZg8S4lP
      LE3HqxqrA9Ksv7+b3bOg/Oaoz6alNC/+6T8gBqraofVdIXl9cIHu675+heqdC7TCbO+RoPvq
      qbadD7BpSF4TPoACxRi7Hd9sFXQXQcTsHZ1VcoJlx3Y55162W87DtUJow52Y/kZ/rfBDQlj+
      vqMRL5DL+oYAABa5SURBVA+jjYRwHYUZF4HY7fJKO7WiPQuF+vppEEMQisK23Ajaa5RGpn56
      hdIIUrb52Ov2lAxYaS96O6dus2pdDrsMHezD2j22EaKwCHrfkGz59JC8lQGA7Md9MCRvyb05
      fP6CTGuOv/mTOD8vAnZ8gB3CtCgxOwbnHUdfv0ANeKddvpsyO5midgzBVYy/eoEdaYofpvi3
      kcl4wqyYyVZ/8NjdfSYH45Uksqgc42eH2JGE5EXEJkSlhv09zey06PQnivHBoZDxFoHjkynq
      oeGoJyvx27UMyTOZJrZweHDI+dmUMBdLFL1jNxw7cvw/f8E8kjWRfWw5Pz2mJuPf/+mol3MI
      80os3nWKMkLtODmdkh/8sbeQvPLljOpNYHxwJJSRz1jlD1MiCdXPhuS18kYwj3K5wwZgdjJm
      VY3dzfDzGjMU7a8fpqQPWeGyxmTMXi3bBdgzkuj4RU45UN1iSF5bS/QkfZjSDBqM1py/nMFD
      zdE/5PJkTWX/gJHG7GimZ5Usvok0i0i6ozk/q9j/wq4JUiJqLaRvG6W0BhpcgP0sowkeHihZ
      sKuMpIexldK4qsLNPf7K4y4dsefFpFJQvjynqRPSCG4RsD2G5MVW/lYyVfl8N0BcBMpXFT4K
      F6g5nX44JA/APu4czoYapRKstZihAqVFTpfn0mbhCfMK3ZkqWWtJhwqlZKWd7VnUUGH3LGEu
      FN9slFIvIBkmQoe2+5gh6DQldOZcJssIr2sh2bVR7LyfpiSIiD7RCcwDhwcTQYFG1yF56QDU
      aDt6YED4LJnBGENcRJJhghmmBCsCcD3aPCRv/+k+0ODmgbiImEeHMOzvnNTQMBmneOOIbRBE
      TeWYrMeQvMzQvHGYLXGyPqUOnh8Jh+uNI90xNG8/FJK3rD4UXp/a7rZV970i7LdX7fYXwb/h
      kLz7+nuvv7+QvDXB+soesdt9XYnd12z7PrbdB5/23XxtCXq822eHYsCNduttt/nmeOd44rXm
      oZex79JGQ/+cmvU++37brttk9jnGJm+Apfj/Q75AsXNkmBVTYkx58YcD6ouSP39bsL+X4RaR
      w4NDqrMZbiEXoUoFdQmXFf/17Ql2NyN07dzLGdVVWCE4R/84pn5dcv4mkD4Es5vTBEdxVnbB
      e4qTkym+haPnRxBq/vTffybbtYRFYPzskHBZUV15WVopCfBTAyAGpt9OITUc/cO2UKCSP58U
      2EwTIhx9dUhZzHAhrGgiBxuOffxNhwK1YPcMZSEhef/ydT8qtzCvmZ6eY3dS1MiQ0DAtTsjH
      R735KZXfHxMGKSqC/dLiXpeUbzxHf3jBr52aVP5QEDuj4fzpPjF8ICSvfFnifUP5ukQNxY5b
      KUVCQ1WLXbqfe5oHCYpAVKIpjS2gJB+grmuhPARPBPQgEgaa9KelQ3QkLhyzC0daeWIb8LXD
      x0jWAg8S0gfN9f7AAKrLmv0nlhg8sUH2GQLYIas7O8YoIXlbfA2roThV13NW58gDUK2H4X4P
      nB35fFmW+ODxzlJdlF1IXk/VioqtKGagE3SEKjjMkx5RIBLcmwp/6XFvHeGywqN+fVQoBspS
      ZL4eCKGmUfo9KFAQCaKLnvyLMZAI7ZgElMjo/NuGbBdSGnzn9gydFfZAuDJ6lOF9Q5YlqEGC
      VxmaCA8Mbh5ItWEy1lQXmuZtJJIJt2bhiVjUoME3icCuWrTFdpThvSfbzVARvFfYETTJ9RRI
      KU3z1pOa7WQDLCtRKVmm5Rx3RQqptIXWoza+UBX2SS5GAc6JLviLHB72d06Cqk0IaYVvRM46
      zjKyHi3YTZZhsozzYSW08b2cbJCgt0xWvF0xQj4+gEVN+cahdww0zUegQLAyUFJ3hdH9knbd
      Ab1vQ/N2KN6q7d8aGvS3djy/p/ocKNDHvtQ/ut3iQ7+Lt37+yE7v63dRsY1CQd+Au3YjKPtO
      FOh9nd8Ov3jfv31s+/f9Hu5GKT5U7/tc3/Ux599XQMbt/vs6p9v9r/9bX1ygLX0PG9mjd2/u
      d+zRb1f1uqAoHfaRBMHFGDE2J99NmZ5MSXcMlXMcfXWE1ory+2MqjxjeonBVgckPMQqmxQyz
      k+KuGo6eC6e/+Osx/qeEyThndjIVD8k2Yh5Z8s4+u3pdUL5yHD4/QitBRlCGGD3mUY7RMCtK
      sUyJcPjV4SqYL9mxveVp3a66LoVHYzT+rYxb/TDFdbFPqdl87JPvjsmWKNCuoXopKFBfyFYM
      NdOXFVZrkpFBDSKzYobJJ+S7/aBA1UUp399Xh583KR5wr0u5Lq8C+7m9uQ9wVyWAXwTGoxza
      GtdGcfaqA/U8rNx4/CKKRhhhSIZFQgeMEoKH1nXZAA0g7MBMReJA0CI/95L06BwxRmbzQvz1
      M/HeT3fSGyFr1UUlSNCixkeF2UmZnVVMnlp8iKhhJHmY0nRqtm2UAppFxLmAeWREqTZIYFHB
      aB82HjviFxF3VhCDx+1ZqpcFUef93QBtQ3CO4lVF1CVZC0VdkZgcdnsZghA8ekdcvT/rDRAj
      xdkMHxNibKguz4kxvcMevROir7s1F0WB8w0m7QhmA02WZaSp5ASE4LpNIUFC9Cgj05o0TYVY
      NzRkI0WappIYWDu5QZoG3yBW6lceY3PG4zFmKO5dYSFolL/yggy1kAwgGSrclRMKtoLKeYkR
      vfIrDlLjPYnaJv9EbONVd3wANA0oAwsvfKkN+7fWkj8y6JERbtSuhA32VYICjdEjjR5AAOyu
      RQ/7M/fSw4RwFfq1df8FJTOGfWwmvLZUG8xI/TwKtNrtZA21XUd52puozZJrDbw7x7+j/Tu/
      7z4XOz2BWv/MsNttHah3j2X9Z271t6V6h69/13H0Udvqd5tjrHOBtvFdbLoTzF0oULgbv1lu
      8H8I3VlHbeJHwEC3UZ73tLox5vXxxY9GmrZdfztH8jdWW1YWLlGgTbLI3nWH/sxZrvd1Xx9b
      S+3HRkqzd8xx134KdSULywNZvZffnxBa1e1yWvK9lOJ0hnqY4t96JuPDDgmSdoqIGmXYLKX4
      oURrRVU58mei2ip/lAyy8f/LKb6fwkCoCybLsLuS9RUuK2avKibP5BiKv550kkiPHllsljI9
      nZGm3TF07WgjJ3+dokb2Ojiv5wp1xbSoMCbF+8jhwXiVq8ZPDdpY8g3HLr8vVg4NWZZRvS6o
      W8XBlz0lxYdAeeEwQ4UaGRSR4mVJtpf3lxR/UXJeBSYHB71yf5RSAoV+wtSqvqyABBc8+WMR
      UL33466uSR4muHlADzPclaMOkSyzcFXBY0O2YyjOSswjoTZo3bWrIw0NNleoWFNVFfl4jBp2
      GVdtFHQIcLUDEryTRW9dVajnKXZX4+Y1yYPuGFSG945qHrG7FuY1jkiSwOx0xv7T/dWxxkWQ
      Puc1sJ0bIMaIqytiDJgdCckLiwbvJCSPjceOVG8qqjdOLGKspSqn+GHe3w0QPWVZUrWALtEt
      FJclh8OstxvAzQPJA/AhoLeU1fBR1UZmpyedM7TklYG6KyRPxPAA7soTo+D/qVI0sSEsHE2b
      4C4rirJEZxp35aEVC+/koaJpwYxMJ4zXnZV6JN0xN2jRvsPMfcfbOXg2RikozsqVONt5D536
      P1VCQAvBreyn/FUgHaW4Ky+/Bxgo/Fu/VXOs5dwztuC9nEfTROIgXYX6bTgC5pHF7CjoGIxq
      qDE98nQYJOR5F1faeTEtVX19lRqA857kM0+vYwioYSbgySDpssruCsmDzpUtErr/qqGGKI4M
      0kHXaXeRLl0gbrTr2ly7wi1dIwJ0aTA3nN+UWguEi6s1SYjiLKC1Jt46BjXoUv/UdVDd6oS7
      i3Brf/elK8RQ3XKw60qtaR42GAPWdlQHsPQJ7a3uGKNXHUUX8Nd7WOEvRYGWxm/ig3orJG9w
      b4x1X7+N6t0efdvqqfv6ndW2NcH0bI8Odxsu1ZeVBCgriGjyx4bqZYka6s6/M5dc4MsKVwfs
      nvCA9ADJEtaK8scSrTUhBOwXeZc0UxKihMtVL0uZxkQkeX1loV5TXTjyL2VtUL0sOiRKPEhN
      lxqjhmLVvmxHC+WPBUqbDdPa318x1BQvK7KRJgQZ213IOYEc36ZjL4MGAfRIU19W+JiQ9+TZ
      I7SWSDq8jnwqLyrSzJJtCtl05sahdlR1Tf7FuPep26eG5IV5B7hECelLBj9DhgPwlxXnZY3J
      NGrgiXuS4FiWJW7uQGnG2uIuKmZvxL04omiuKoIyHD7R+LeeWTkT9KYOjPc0de1ofgI3lIVu
      mNf4RUOiUo6+PiIbadxlhX/byB9wV1OWcoFlowy/iNBK39VphX1scXWN3cuIi1oWz4u4tRsg
      zB2zs3O5YbXG1RWVcxKSpy1647EjZXECHaplraU8m9IoS/64n5C8uPCcnBboAaA1aQuz1wWT
      5/9CpnsKybus8G8jLoTekKVfVG3k/LQgoKguK+yuwcNdKJAsIEMI3eIlIUZP6KwMfRCDoTRN
      u+yvpcVhCosoT5LlTRkbmij9JapDR2LH4f7p2oU6xog2lsNnE2g909OyW6io688ARmt8kGPh
      p+tjTYbJqj3AMpl8m5I7peSJGeOap2obBWHoaez0kUV1pLjqVQXQM5oiHk5xEeVtW9cw7GHx
      vlZqcIsy8pkqLjyhhRjc6vqI7V0oUHttlCuvl4gLcQUxKqVuoB+0ctEvfTyzLFupwpaoyLL9
      kv6gdSZoUSvoQAyCDK3guNil0CioO0hWjzJiWEufUXKjrfw5YyQbZat1TJjXoPT2GIjLhBgt
      U7f1xBzaKOk4G44do3BqQ4zXqrjOl7WXagXGpUPeAEGBlt/Fxn3HzvIyYvp++n8qCrSkZrQR
      FzyJSvFzdwsFurdHv6++6lcwxvILv1oj/ZLyc/+/N+/zLROY7uv3Vduc9kQiySDZaIwbi+B3
      QvK6CvMaFxrSATQk2N2M6qKSRJf1qUjXzu4aQpcJm6iUbCTZwolOxf15L5f2dY2PrPpDJdA2
      pMN0ZcgbF4Hq0mMfW9RAEKmmlXaJTiWP+KIiHUpu8bIdsBqzt0zdWyXH5mTs2JDvWeq6ounQ
      jz7Gruu6s5+XqeIyhC/razoRI3WIaCXTHoji/qH7mzrGEKjmHrtn+11btIpA+KQNNqHIXFvp
      q/gBY6xlVS9nzF4FQYFQpCNN/aakfFMT64r8QEyUqrMZszoS5xXlm8j4qaG6DKhWc1KUZKPO
      IXiQku9pyvKcpo0kg5yqqgihxgcJwD58fkSmBSqtnIdhSp4pZidCtNNaoR6mNJm4J08vp5hd
      gxrKDRqD8I9IarJ/7MdE6naFy4rj72bYLO12nBOqV5WgQEODTtMNx45MvztG60wsUZ5YyuIY
      ryz/+W/9oEAhOI6/LciGCtKUFJiezZh89YKDL/tBgcrXJe5Kgqk/KwoEFKdTGiTEPX8sUtP3
      okBLZEOPzAoFEiMrsR6PweHnHld7abdjIHixoJ4HnPOkunORzvRqMRvjtZI/ttAscfORZTLe
      x88r8fxfn44tPBKSp/HBye9+6hZZiEpMau1psOVNmCVu7jpSn5xXv2OakYUYcHNHeVYK9Ntr
      icdTfemo3lSUpSBNf48bojHUuDpQvRZGaF3XuHcywpYoUEeMWnJ73Fykhg2JoB5zCaBTgyXC
      07WrG+wXlhjkS1PDFDNUuOBlqhA8qATTIToSkqfxc0cyTGWzbRHxC3kTqEHE1Z5kkKAzTagd
      vpXLPBmmkjo59yTDhGbRYNZes/VFBcPtToHKC4fRKU1sSDNDDI6GborWw9gxRBiIXX2zaEiG
      CQxUf+fU8XTEBrOhaWVerEe6N22IXAsyBepbJfdJKNDStzVGqrknHSb4uf/fmzfAGgq0XMH/
      3CLjY9vdbP9hrPl2nx/zmfv6fdXyIZ1tkAHxriTyjlfsx0r+Pk0a+HGtbwki78WHv6X6lSSR
      YfDL3TfetUe/Y0UdF4GwkGzgiLx+Q1133J310Lub7dRyM0gp6rpebYQteT4xBELLdX+D6422
      VUhbjNTzQJZlS/rqDer17b6X7YDuGDV6WxbE3bGpYbcJl2XvHt+mG2Fd0N+SAr0M4evtnNpI
      iHRertKnbCzqzXk7axuqfuExPbpZwC80xlpOg7oN2PTOiKRbVf4wZVYFibgZKCZPLdPvTlBD
      QXXskzHjLy3l6ZTZZZS09ysnF3mSMtnLmJ2VMl9TGvt0Qr6rKYoZPkpI3nkxIywCftFgMrsy
      USpflyKjHB9iM8X0278QUGilUGnK/q5mdlZJWqXW0m5XQvJmxQwephxtCQWqLkr+skSBUEye
      TTgvZ4RadrV1uunYkeNvjkmNoWkaQYFOj3EDy3/+c18heY6/fFdgtYadFN3C9GzK5OBFb1LS
      6vWMygV4lnz2sOyimNKQiq9Ubmmau1AggHjt7CB8Hy/0hIHwUhioFYfHdwZQ2hiIfqX8so8M
      NNAshKrQxKajLHRargfy5GkWDSiF1pncPBcl09Pymmahrnk9xmT4eecH9BM0ndBm2fcKhWk/
      4LzbU6Va6AIu+FXYX2eXRV8cJKU1/spRva4oTgvcPPSONGVaU72uOD8rKYtyxfnqq5bW9n32
      +YuOIwSqi4ryxxkhNpyX55Sv3R1vgFa4OHFJbBtqEbwPRZpnRinqKaBS4sLLBs0ikgw1+/m+
      LFQ7lVj+xJAOISzAfmUJ84AesLL68wtIdUqMAaUtqVrCrrLCN7uWiJPkxTaidcrhwZEI7vVa
      31ZCM0wmCyI1zDA7DqX7fe2ul1IJ+0/2O7mnnAdtJHayT9VDSN5kPAEiPjQSCvI0B9WfJFJr
      w+RZSrQW3yFCuRr3Ol2xexYuw2d/+qMUR3/4V4gN1WXdKQzfA4Pe1331UdvkAvWuCLsPybuv
      31L1Yoy1uG2MdZc9+poAvvu/butfaNFLrsqd7VDXdOclajTUqxij5Wp8hXZ088V1e8P1zY4b
      dOM76NDrT4O4CDDoAc14X3XHptR76NA9ICnvWC92KEafBmaxQ4FuhyD2KYoPi82e1Hf3C0F9
      oih+yUCgQ74+HJJXc/zdOUdfi5X59Js/EZAvVamUyThn+u0xxgrqc/T8BWog9uVxoCHW2KcH
      2FHC8TfH6JEmLODo6yMxufp+Krbiz/aZnc4IURbYdteuTJSq1wXFK8f42SF2pDj+5k9EZPGp
      doygQEvaxEAxPhDTrbgITL/bckjeRcGfvyuF597C5OCQ6mwqC1Wl0Tubjh05/p8uJC+CfWw4
      L46pyfj3P/SEAtWVWLzvpKhRhiJyUkzJn/2RcU+yy/LHgvKN5/BAgg8/Z5U/iC9Q9caRP83h
      vcZYLaiBvvaHGUC6k1GVJWYvJ6GRBbExxBbShNXbwhhN+arG7mb4ecCo2C2KFXpIZ3Ild22q
      wIeG5GEKA4/RmvOXM3ioOfr/ueQRpJ2SbKQxOxnTsxL7OCdpI80iku5ozs8q9r/YvxZ1tBEe
      plvlAwl7siEEsI8ymuBpHigUDaiMpIexlRKyn5t7vDe4C0fseTGpFJRn5zS6Io3gFgG7Yf7u
      esUWdKq6wMLPdwPERaAoz0WhSII/OYaheU9IXqcG27eWUMuKWakE+3hCksgXEzv40+5aaDVh
      Xq1MlbJdi0qVXOiDBGsMSovXv5hcaTKdUi/o+C1g7AQzBJ2mhFYs2k2W4coa3TZdFm9C/sWE
      5AEonZEMAQeTgwneR/LRkjqsSQegNtgm/9kaJJiRkYdAFFlmqhLio4mI9rPNUaD9fB9ocPOA
      fxuZHByC6u+c1DBlMp7gjRP/pQbMQ9vtbfRTZpThL2vZR/rMdfT8jzQLT/nGYXbkwfp/9Gfh
      dgv4evIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='DataNoConversions' width='192'>
      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
      A3WefqzJvaORAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='CSVNoConversions' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='AOVGraph' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='ROAS vs CPA' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='byTarget' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
