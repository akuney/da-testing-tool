<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='SSNDashboard_0' path='/t/PreQA/workbooks' revision='1.1' site='PreQA' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
    <color-palette custom='true' name='Red-Black-Blue' type='ordered-sequential'>
      <color>#993300</color>
      <color>#000000</color>
      <color>#000099</color>
    </color-palette>
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Total GDS List Page&quot;' />
          <member value='&quot;Total Hotel Details Page&quot;' />
          <member value='&quot;Total Hotel List Page&quot;' />
          <member value='&quot;Total Packages List Page&quot;' />
          <member value='&quot;Total SEM List Page&quot;' />
          <member value='&quot;Apollo List Page&quot;' />
          <member value='&quot;Galileo List Page&quot;' />
          <member value='&quot;Hipmunk - SSN - Hotel - OP - List Page&quot;' />
          <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
          <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;Hotel List Page - ebookers.com&quot;' />
          <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
          <member value='&quot;Hotel List Page - HotelClub&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
          <member value='&quot;Hotel List Page - RatesToGo&quot;' />
          <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
          <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
          <member value='&quot;HotelReservations.com - SSN - Hotel - OP - List Page&quot;' />
          <member value='&quot;Martini Package Page - Travelocity&quot;' />
          <member value='&quot;Package List Page - CheapTickets&quot;' />
          <member value='&quot;Package List Page - Orbitz Global&quot;' />
          <member value='&quot;Package List Page - Travelocity&quot;' />
          <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Worldspan List Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Ad Unit&quot;'>
        <calculation class='tableau' formula='&quot;Ad Unit&quot;' />
        <members>
          <member value='&quot;Site&quot;' />
          <member value='&quot;Page Type&quot;' />
          <member value='&quot;Ad Unit&quot;' />
          <member value='&quot;Segment&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Difference Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Percent Difference&quot;'>
        <calculation class='tableau' formula='&quot;Percent Difference&quot;' />
        <members>
          <member value='&quot;Actual Difference&quot;' />
          <member value='&quot;Percent Difference&quot;' />
        </members>
      </column>
      <column caption='OTA Ad Unit Type' datatype='string' name='[GDS Ad Unit Type (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Total GDS List Page&quot;' />
          <member value='&quot;Total Hotel Details Page&quot;' />
          <member value='&quot;Total Hotel List Page&quot;' />
          <member value='&quot;Total Packages List Page&quot;' />
          <member value='&quot;Total SEM List Page&quot;' />
          <member value='&quot;Apollo List Page&quot;' />
          <member value='&quot;Galileo List Page&quot;' />
          <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
          <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;Hotel List Page - ebookers.com&quot;' />
          <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
          <member value='&quot;Hotel List Page - HotelClub&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
          <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
          <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
          <member value='&quot;Martini Package Page - Travelocity&quot;' />
          <member value='&quot;Package List Page - CheapTickets&quot;' />
          <member value='&quot;Package List Page - Orbitz Global&quot;' />
          <member value='&quot;Package List Page - Travelocity&quot;' />
          <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Worldspan List Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Aberdeen&quot;' />
          <member value='&quot;Abu Dhabi&quot;' />
          <member value='&quot;Adelaide&quot;' />
          <member value='&quot;Albany&quot;' />
          <member value='&quot;Albuquerque&quot;' />
          <member value='&quot;Amsterdam&quot;' />
          <member value='&quot;Anchorage&quot;' />
          <member value='&quot;Asheville&quot;' />
          <member value='&quot;Aspen&quot;' />
          <member value='&quot;Athens&quot;' />
          <member value='&quot;Atlanta&quot;' />
          <member value='&quot;Atlantic City&quot;' />
          <member value='&quot;Auckland&quot;' />
          <member value='&quot;Austin&quot;' />
          <member value='&quot;Bali&quot;' />
          <member value='&quot;Baltimore&quot;' />
          <member value='&quot;Bangkok&quot;' />
          <member value='&quot;Barcelona&quot;' />
          <member value='&quot;Beijing&quot;' />
          <member value='&quot;Berlin&quot;' />
          <member value='&quot;Big Island&quot;' />
          <member value='&quot;Biloxi&quot;' />
          <member value='&quot;Birmingham&quot;' />
          <member value='&quot;Bloemfontein&quot;' />
          <member value='&quot;Boise&quot;' />
          <member value='&quot;Bologna&quot;' />
          <member value='&quot;Boston&quot;' />
          <member value='&quot;Branson&quot;' />
          <member value='&quot;Breckenridge&quot;' />
          <member value='&quot;Brisbane&quot;' />
          <member value='&quot;Brussels&quot;' />
          <member value='&quot;Budapest&quot;' />
          <member value='&quot;Buenos Aires&quot;' />
          <member value='&quot;Buffalo&quot;' />
          <member value='&quot;Calgary&quot;' />
          <member value='&quot;Cancun&quot;' />
          <member value='&quot;Cape Town&quot;' />
          <member value='&quot;Charleston&quot;' />
          <member value='&quot;Charlotte&quot;' />
          <member value='&quot;Chicago&quot;' />
          <member value='&quot;Cincinnati&quot;' />
          <member value='&quot;Cleveland&quot;' />
          <member value='&quot;Columbus&quot;' />
          <member value='&quot;Copenhagen&quot;' />
          <member value='&quot;Corpus Christi&quot;' />
          <member value='&quot;Dallas&quot;' />
          <member value='&quot;Daytona Beach&quot;' />
          <member value='&quot;Delhi&quot;' />
          <member value='&quot;Denver&quot;' />
          <member value='&quot;Des Moines&quot;' />
          <member value='&quot;Detroit&quot;' />
          <member value='&quot;Dubai&quot;' />
          <member value='&quot;Dublin&quot;' />
          <member value='&quot;Durban&quot;' />
          <member value='&quot;Dusseldorf&quot;' />
          <member value='&quot;East London&quot;' />
          <member value='&quot;Edinburgh&quot;' />
          <member value='&quot;Edmonton&quot;' />
          <member value='&quot;Flagstaff&quot;' />
          <member value='&quot;Florence&quot;' />
          <member value='&quot;Florida Keys&quot;' />
          <member value='&quot;Fort Lauderdale&quot;' />
          <member value='&quot;Fort Myers&quot;' />
          <member value='&quot;Frankfurt&quot;' />
          <member value='&quot;Geneva&quot;' />
          <member value='&quot;Gold Coast&quot;' />
          <member value='&quot;Grand Rapids&quot;' />
          <member value='&quot;Guanacaste&quot;' />
          <member value='&quot;Guangzhou&quot;' />
          <member value='&quot;Halifax&quot;' />
          <member value='&quot;Hamburg&quot;' />
          <member value='&quot;Hartford&quot;' />
          <member value='&quot;Hilton Head&quot;' />
          <member value='&quot;Ho Chi Minh City&quot;' />
          <member value='&quot;Hong Kong&quot;' />
          <member value='&quot;Honolulu&quot;' />
          <member value='&quot;Houston&quot;' />
          <member value='&quot;Indianapolis&quot;' />
          <member value='&quot;Istanbul&quot;' />
          <member value='&quot;Jacksonville&quot;' />
          <member value='&quot;Jakarta&quot;' />
          <member value='&quot;Johannesburg&quot;' />
          <member value='&quot;Kansas City&quot;' />
          <member value='&quot;Kauai&quot;' />
          <member value='&quot;Kimberley&quot;' />
          <member value='&quot;Knoxville&quot;' />
          <member value='&quot;Kuala Lumpur&quot;' />
          <member value='&quot;Lake Tahoe&quot;' />
          <member value='&quot;Lancaster&quot;' />
          <member value='&quot;Las Vegas&quot;' />
          <member value='&quot;Lexington&quot;' />
          <member value='&quot;Lisbon&quot;' />
          <member value='&quot;London&quot;' />
          <member value='&quot;Los Angeles&quot;' />
          <member value='&quot;Los Cabos&quot;' />
          <member value='&quot;Louisville&quot;' />
          <member value='&quot;Macau&quot;' />
          <member value='&quot;Madison&quot;' />
          <member value='&quot;Madrid&quot;' />
          <member value='&quot;Manchester&quot;' />
          <member value='&quot;Manila&quot;' />
          <member value='&quot;Maui&quot;' />
          <member value='&quot;Melbourne&quot;' />
          <member value='&quot;Memphis&quot;' />
          <member value='&quot;Mexico City&quot;' />
          <member value='&quot;Miami&quot;' />
          <member value='&quot;Milan&quot;' />
          <member value='&quot;Milwaukee&quot;' />
          <member value='&quot;Minneapolis&quot;' />
          <member value='&quot;Monterey&quot;' />
          <member value='&quot;Montreal&quot;' />
          <member value='&quot;Moscow&quot;' />
          <member value='&quot;Mumbai&quot;' />
          <member value='&quot;Munich&quot;' />
          <member value='&quot;Myrtle Beach&quot;' />
          <member value='&quot;Naples&quot;' />
          <member value='&quot;Nashville&quot;' />
          <member value='&quot;Nelspruit&quot;' />
          <member value='&quot;New Orleans&quot;' />
          <member value='&quot;New York&quot;' />
          <member value='&quot;Newport&quot;' />
          <member value='&quot;Niagara Falls&quot;' />
          <member value='&quot;Nice&quot;' />
          <member value='&quot;Ocean City&quot;' />
          <member value='&quot;Oklahoma City&quot;' />
          <member value='&quot;Omaha&quot;' />
          <member value='&quot;Orange County&quot;' />
          <member value='&quot;Orlando&quot;' />
          <member value='&quot;Osaka&quot;' />
          <member value='&quot;Other&quot;' />
          <member value='&quot;Palm Beach&quot;' />
          <member value='&quot;Palm Springs&quot;' />
          <member value='&quot;Panama City&quot;' />
          <member value='&quot;Paris&quot;' />
          <member value='&quot;Park City&quot;' />
          <member value='&quot;Pensacola&quot;' />
          <member value='&quot;Perth&quot;' />
          <member value='&quot;Philadelphia&quot;' />
          <member value='&quot;Phoenix&quot;' />
          <member value='&quot;Phuket&quot;' />
          <member value='&quot;Pittsburgh&quot;' />
          <member value='&quot;Polokwane&quot;' />
          <member value='&quot;Port Elizabeth&quot;' />
          <member value='&quot;Portland&quot;' />
          <member value='&quot;Prague&quot;' />
          <member value='&quot;Pretoria&quot;' />
          <member value='&quot;Providence&quot;' />
          <member value='&quot;Puerto Plata&quot;' />
          <member value='&quot;Punta Cana&quot;' />
          <member value='&quot;Raleigh-Durham&quot;' />
          <member value='&quot;Reno&quot;' />
          <member value='&quot;Rest of Argentina&quot;' />
          <member value='&quot;Rest of Australia&quot;' />
          <member value='&quot;Rest of Austria&quot;' />
          <member value='&quot;Rest of Belgium&quot;' />
          <member value='&quot;Rest of Brazil&quot;' />
          <member value='&quot;Rest of Canada&quot;' />
          <member value='&quot;Rest of Chile&quot;' />
          <member value='&quot;Rest of China&quot;' />
          <member value='&quot;Rest of Costa Rica&quot;' />
          <member value='&quot;Rest of Czech Republic&quot;' />
          <member value='&quot;Rest of Denmark&quot;' />
          <member value='&quot;Rest of Dominican Republic&quot;' />
          <member value='&quot;Rest of France&quot;' />
          <member value='&quot;Rest of Germany&quot;' />
          <member value='&quot;Rest of Greece&quot;' />
          <member value='&quot;Rest of Hong Kong&quot;' />
          <member value='&quot;Rest of Hungary&quot;' />
          <member value='&quot;Rest of India&quot;' />
          <member value='&quot;Rest of Indonesia&quot;' />
          <member value='&quot;Rest of Ireland&quot;' />
          <member value='&quot;Rest of Italy&quot;' />
          <member value='&quot;Rest of Japan&quot;' />
          <member value='&quot;Rest of Korea&quot;' />
          <member value='&quot;Rest of Malaysia&quot;' />
          <member value='&quot;Rest of Mexico&quot;' />
          <member value='&quot;Rest of Netherlands&quot;' />
          <member value='&quot;Rest of New Zealand&quot;' />
          <member value='&quot;Rest of Panama&quot;' />
          <member value='&quot;Rest of Philippines&quot;' />
          <member value='&quot;Rest of Portugal&quot;' />
          <member value='&quot;Rest of Puerto Rico&quot;' />
          <member value='&quot;Rest of Russian Federation&quot;' />
          <member value='&quot;Rest of Singapore&quot;' />
          <member value='&quot;Rest of South Africa&quot;' />
          <member value='&quot;Rest of Spain&quot;' />
          <member value='&quot;Rest of Sweden&quot;' />
          <member value='&quot;Rest of Switzerland&quot;' />
          <member value='&quot;Rest of Taiwan&quot;' />
          <member value='&quot;Rest of Thailand&quot;' />
          <member value='&quot;Rest of Turkey&quot;' />
          <member value='&quot;Rest of UAE&quot;' />
          <member value='&quot;Rest of UK&quot;' />
          <member value='&quot;Rest of US&quot;' />
          <member value='&quot;Rest of Vietnam&quot;' />
          <member value='&quot;Rest of World&quot;' />
          <member value='&quot;Richmond&quot;' />
          <member value='&quot;Rio De Janeiro&quot;' />
          <member value='&quot;Rome&quot;' />
          <member value='&quot;Sacramento&quot;' />
          <member value='&quot;Salt Lake City&quot;' />
          <member value='&quot;San Antonio&quot;' />
          <member value='&quot;San Diego&quot;' />
          <member value='&quot;San Francisco&quot;' />
          <member value='&quot;San Jose&quot;' />
          <member value='&quot;San Juan&quot;' />
          <member value='&quot;Santa Barbara&quot;' />
          <member value='&quot;Santa Cruz&quot;' />
          <member value='&quot;Santa Fe&quot;' />
          <member value='&quot;Santiago&quot;' />
          <member value='&quot;Santo Domingo&quot;' />
          <member value='&quot;Sao Paulo&quot;' />
          <member value='&quot;Sarasota&quot;' />
          <member value='&quot;Savannah&quot;' />
          <member value='&quot;Seattle&quot;' />
          <member value='&quot;Sedona&quot;' />
          <member value='&quot;Seoul&quot;' />
          <member value='&quot;Shanghai&quot;' />
          <member value='&quot;Singapore&quot;' />
          <member value='&quot;South Padre Island&quot;' />
          <member value='&quot;Spokane&quot;' />
          <member value='&quot;St. Louis&quot;' />
          <member value='&quot;St. Petersburg&quot;' />
          <member value='&quot;Stockholm&quot;' />
          <member value='&quot;Sydney&quot;' />
          <member value='&quot;Taipei&quot;' />
          <member value='&quot;Tallahassee&quot;' />
          <member value='&quot;Tampa&quot;' />
          <member value='&quot;Tokyo&quot;' />
          <member value='&quot;Toronto&quot;' />
          <member value='&quot;Tucson&quot;' />
          <member value='&quot;Tulsa&quot;' />
          <member value='&quot;Vail&quot;' />
          <member value='&quot;Vallarta&quot;' />
          <member value='&quot;Vancouver&quot;' />
          <member value='&quot;Venice&quot;' />
          <member value='&quot;Vienna&quot;' />
          <member value='&quot;Virginia Beach&quot;' />
          <member value='&quot;Washington DC&quot;' />
          <member value='&quot;Williamsburg&quot;' />
          <member value='&quot;Wisconsin Dells&quot;' />
          <member value='&quot;Zurich&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Metric]' param-domain-type='list' role='measure' type='nominal' value='&quot;Pages Available&quot;'>
        <calculation class='tableau' formula='&quot;Pages Available&quot;' />
        <members>
          <member value='&quot;Pages Available&quot;' />
          <member value='&quot;Fill Rate&quot;' />
          <member value='&quot;Page CTR&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;Gross Media Revenue&quot;' />
          <member value='&quot;Ads per Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
        <calculation class='tableau' formula='&quot;True&quot;' />
        <members>
          <member value='&quot;True&quot;' />
          <member value='&quot;False&quot;' />
        </members>
      </column>
      <column caption='Channel Type' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;OTA&quot;' />
          <member value='&quot;GDS&quot;' />
        </members>
      </column>
      <column caption='GDS Publisher' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;OWW&quot;' />
          <member value='&quot;Travelport&quot;' />
          <member value='&quot;Apollo&quot;' />
          <member value='&quot;CheapTickets&quot;' />
          <member value='&quot;ebookers&quot;' />
          <member value='&quot;Galileo&quot;' />
          <member value='&quot;HotelClub&quot;' />
          <member value='&quot;Orbitz&quot;' />
          <member value='&quot;Travelocity&quot;' />
          <member value='&quot;Worldspan&quot;' />
        </members>
      </column>
      <column caption='OTA Publisher' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;OWW&quot;' />
          <member value='&quot;Travelport&quot;' />
          <member value='&quot;Apollo&quot;' />
          <member value='&quot;CheapTickets&quot;' />
          <member value='&quot;ebookers&quot;' />
          <member value='&quot;Galileo&quot;' />
          <member value='&quot;HotelClub&quot;' />
          <member value='&quot;Orbitz&quot;' />
          <member value='&quot;Travelocity&quot;' />
          <member value='&quot;Worldspan&quot;' />
        </members>
      </column>
      <column caption='GDS Ad Unit Type' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Total GDS List Page&quot;' />
          <member value='&quot;Total Hotel Details Page&quot;' />
          <member value='&quot;Total Hotel List Page&quot;' />
          <member value='&quot;Total Packages List Page&quot;' />
          <member value='&quot;Total SEM List Page&quot;' />
          <member value='&quot;Apollo List Page&quot;' />
          <member value='&quot;Galileo List Page&quot;' />
          <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
          <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;Hotel List Page - ebookers.com&quot;' />
          <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
          <member value='&quot;Hotel List Page - HotelClub&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
          <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
          <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
          <member value='&quot;Martini Package Page - Travelocity&quot;' />
          <member value='&quot;Package List Page - CheapTickets&quot;' />
          <member value='&quot;Package List Page - Orbitz Global&quot;' />
          <member value='&quot;Package List Page - Travelocity&quot;' />
          <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
          <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
          <member value='&quot;Worldspan List Page&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
        <calculation class='tableau' formula='&quot;Total&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Apollo&quot;' />
          <member value='&quot;CheapTickets&quot;' />
          <member value='&quot;ebookers&quot;' />
          <member value='&quot;Galileo&quot;' />
          <member value='&quot;Hipmunk&quot;' />
          <member value='&quot;HotelClub&quot;' />
          <member value='&quot;HotelReservations&quot;' />
          <member value='&quot;Orbitz&quot;' />
          <member value='&quot;RatesToGo&quot;' />
          <member value='&quot;Travelocity&quot;' />
          <member value='&quot;Worldspan&quot;' />
          <member value='&quot;OWW&quot;' />
          <member value='&quot;Travelport&quot;' />
        </members>
      </column>
      <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2014-07-06#'>
        <calculation class='tableau' formula='#2014-07-06#' />
      </column>
      <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
        <calculation class='tableau' formula='&quot;Yesterday&quot;' />
        <members>
          <member value='&quot;Yesterday&quot;' />
          <member value='&quot;Reference Day&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='active_hotels_with_budget' inline='true' name='active_hotels_with_budget (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;pa.Date,&#13;&#10;&#9;pa.&quot;Advertiser ID&quot;,&#13;&#10;&#9;pa.&quot;Market ID&quot;,&#13;&#10;&#9;pa.Site as &quot;Site&quot;,&#13;&#10;&#9;ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;&#9;ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;&#9;ifnull(imm.country, &apos;Other&apos;) as &quot;Country&quot;,&#13;&#10;&#9;ifnull(imm.finance_region, &apos;Other&apos;) as &quot;Finance Region&quot;,&#13;&#10;&#9;pa.Pub,&#13;&#10;&#9;pa.&quot;SSN Channel Type&quot;,&#13;&#10;&#9;spend_query.&quot;Impressions Served&quot;,&#13;&#10;&#9;spend_query.Clicks,&#13;&#10;&#9;spend_query.Spend,&#13;&#10;&#9;spend_query.Conversions,&#13;&#10;&#9;spend_query.&quot;Exposed Conversions&quot;,&#13;&#10;&#9;spend_query.&quot;Conversion Value Sum&quot;,&#13;&#10;&#9;spend_query.&quot;Exposed Conversion Value Sum&quot;&#13;&#10;from&#13;&#10;&#9;(&#13;&#10;&#9;  select&#13;&#10;      pa.aggregation_level_date_in_et as Date,&#13;&#10;      pa.advertiser_id as &quot;Advertiser ID&quot;,&#13;&#10;      pa.market_id as &quot;Market ID&quot;,&#13;&#10;      s.display_name as Site,&#13;&#10;      (case&#13;&#10;        when ep.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when ep.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else ep.name&#13;&#10;      end) as Pub,&#13;&#10;      ea.ssn_channel_type as &quot;SSN Channel Type&quot;&#13;&#10;    from intent_media_production.participating_advertisers pa&#13;&#10;    left join intent_media_production.sites s on s.name = pa.site&#13;&#10;    left join intent_media_production.entities ep on ep.id = s.publisher_id&#13;&#10;    left join intent_media_production.entities ea on ea.id = pa.advertiser_id&#13;&#10;    where ep.active = 1&#13;&#10;      and ea.active = 1&#13;&#10;      and ea.entity_type = &apos;HotelSsrAdvertiser&apos;&#13;&#10;      and ea.first_auction_participation is not null&#13;&#10;      and DATE(ea.first_auction_participation at timezone &apos;America/New_York&apos;) &lt;&lt;= pa.aggregation_level_date_in_et&#13;&#10;    group by&#13;&#10;      pa.aggregation_level_date_in_et,&#13;&#10;      pa.advertiser_id,&#13;&#10;      pa.market_id,&#13;&#10;      s.display_name,&#13;&#10;      (case&#13;&#10;        when ep.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when ep.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else ep.name&#13;&#10;      end),&#13;&#10;      ea.ssn_channel_type&#13;&#10;  ) pa&#13;&#10;left join&#13;&#10;&#9;(&#13;&#10;&#9;  select&#13;&#10;      aara.aggregation_level_date_in_et as Date,&#13;&#10;      aara.advertiser_id as &quot;Advertiser ID&quot;,&#13;&#10;      aara.market_id as &quot;Market ID&quot;,&#13;&#10;      s.display_name as Site,&#13;&#10;      sum(impression_count) as &quot;Impressions Served&quot;,&#13;&#10;      sum(click_count) as Clicks,&#13;&#10;      sum(actual_cpc_sum) as Spend,&#13;&#10;      sum(click_conversion_count) as Conversions,&#13;&#10;      sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;      sum(click_conversion_value_sum) as &quot;Conversion Value Sum&quot;,&#13;&#10;      sum(exposed_conversion_value_sum) as &quot;Exposed Conversion Value Sum&quot;&#13;&#10;    from intent_media_production.advertiser_account_report_aggregations aara&#13;&#10;    left join intent_media_production.ad_units au on au.id = aara.ad_unit_id&#13;&#10;    left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;    group by&#13;&#10;      aara.aggregation_level_date_in_et,&#13;&#10;      aara.advertiser_id,&#13;&#10;      aara.market_id,&#13;&#10;      s.display_name&#13;&#10;  ) spend_query&#13;&#10;on pa.Date = spend_query.Date&#13;&#10;and pa.&quot;Advertiser ID&quot; = spend_query.&quot;Advertiser ID&quot;&#13;&#10;and pa.&quot;Market ID&quot; = spend_query.&quot;Market ID&quot;&#13;&#10;and pa.Site = spend_query.Site&#13;&#10;left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = pa.&quot;Market ID&quot;&#13;&#10;left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#9;&#13;&#10;where pa.Date &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;Date,&#13;&#10;&#9;cast(null as int) as &quot;Advertiser ID&quot;,&#13;&#10;&#9;&quot;Market ID&quot;,&#13;&#10;&#9;Site,&#13;&#10;&#9;&quot;Market Name&quot;,&#13;&#10;&#9;Segment,&#13;&#10;&#9;Country,&#13;&#10;&#9;&quot;Finance Region&quot;,&#13;&#10;&#9;Pub,&#13;&#10;&#9;&quot;SSN Channel Type&quot;,&#13;&#10;&#9;cast(null as integer) as &quot;Impressions Served&quot;,&#13;&#10;&#9;cast(null as integer) as Clicks,&#13;&#10;&#9;cast(null as float) as Spend,&#13;&#10;&#9;cast(null as integer) as Conversions,&#13;&#10;&#9;cast(null as integer) as &quot;Exposed Conversions&quot;,&#13;&#10;&#9;cast(null as float) as &quot;Conversion Value Sum&quot;,&#13;&#10;&#9;cast(null as float) as &quot;Exposed Conversion Value Sum&quot;&#13;&#10;from&#13;&#10;(&#13;&#10;  select&#13;&#10;&#9;  distinct(aggregation_level_date_in_et) as Date,&#13;&#10;&#9;  0 as Zero&#13;&#10;  from intent_media_production.publisher_performance_report_aggregations&#13;&#10;  where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;) dates,&#13;&#10;(&#13;&#10;  select&#13;&#10;&#9;  imm.id as &quot;Market ID&quot;,&#13;&#10;&#9;  imm.name as &quot;Market Name&quot;,&#13;&#10;&#9;  imm.report_segment as &quot;Segment&quot;,&#13;&#10;&#9;  imm.country as &quot;Country&quot;,&#13;&#10;&#9;  imm.finance_region as &quot;Finance Region&quot;&#13;&#10;  from intent_media_production.intent_media_markets imm&#13;&#10;&#13;&#10;  union&#13;&#10;&#13;&#10;  select&#13;&#10;&#9;  cast(null as integer) as &quot;Market ID&quot;,&#13;&#10;&#9;  &apos;Other&apos; as &quot;Market Name&quot;,&#13;&#10;&#9;  &apos;Other&apos; as &quot;Segment&quot;,&#13;&#10;&#9;  &apos;Other&apos; as &quot;Country&quot;,&#13;&#10;&#9;  &apos;Other&apos; as &quot;Finance Region&quot;&#13;&#10;) markets,&#13;&#10;(&#13;&#10;  select&#13;&#10;    s.display_name as Site,&#13;&#10;&#9;  (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end) as Pub,&#13;&#10;    (case&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;        else &apos;OTA&apos;&#13;&#10;    end) as &quot;SSN Channel Type&quot;&#13;&#10;  from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;  left join intent_media_production.ad_units au on ppra.ad_unit_id = au.id&#13;&#10;  left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;  left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;  where ad_type = &apos;SSR&apos;&#13;&#10;  group by&#13;&#10;    s.display_name,&#13;&#10;    (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end),&#13;&#10;&#9;  (case&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;        else &apos;OTA&apos;&#13;&#10;    end)&#13;&#10;) sites</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Day:qk]&quot;' value='Active Hotels' />
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' value='Active Hotels Delta' />
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' value='Active Hotels ' />
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_3610106160432967:qk]&quot;' value='Budget per Hotel ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Auction Participant Count for Table:qk]&quot;' value='Auction Participant Count' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' value='Clicks' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' value='Gross Media Revenue ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' value='Impressions Served' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' value='Pages Available ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' value='Pages Served' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' value='Ads per Page Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' value='Ads per Page ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Auction Participant Count \%D for Table:qk]&quot;' value='Auction Participant Count Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' value='Available eCPM Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' value='Available eCPM' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' value='Clicks Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' value='CPC Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' value='CPC ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' value='CTR Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' value='CTR ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' value='Fill Rate Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' value='Fill Rate ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' value='Gross Media Revenue Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Day:qk]&quot;' value='Hotels per Auction ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' value='Hotels per Auction Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' value='Hotels per Auction' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' value='Impressions Served Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' value='Pages Available Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' value='Pages Served Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' value='Served eCPM Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' value='Served eCPM' />
          <alias key='&quot;[sold_hotels (copy)].[cum:sum:Sold Hotels:qk]&quot;' value='Total Sold Hotels' />
          <alias key='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' value='Budget' />
          <alias key='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' value='Budget Delta' />
          <alias key='&quot;[sold_hotels (copy)].[usr:Budget per Hotel - Ref Day:qk]&quot;' value='Budget per Hotel' />
          <alias key='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' value='Sold Hotels' />
        </aliases>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - PMTD])/[Active Hotels - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - PQTD])/[Active Hotels - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - PW])/[Active Hotels - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - YTD]-[Active Hotels - PYTD])/[Active Hotels - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPW])/[Active Hotels - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPY])/[Active Hotels - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - SMTDPY])/[Active Hotels - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - SQTDPY])/[Active Hotels - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - SWPY])/[Active Hotels - SWPY]' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Advertiser ID] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Advertiser ID] END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Advertiser ID] &#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(IF [Date] = [Ref Day] THEN [Advertiser ID] END)' scope-isolation='false' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Advertiser ID] END)' scope-isolation='false' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Advertiser ID] END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
      </column>
      <column caption='Budget per Hotel - PYTD' datatype='real' default-format='C1033%' name='[Calculation_0040106162202694]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - PYTD])/[Active Hotels - PYTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PYTD' datatype='real' default-format='p0.0%' name='[Calculation_1070106162755693]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2790106162448809]-[Calculation_0040106162202694])/[Calculation_0040106162202694]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SDPY' datatype='real' default-format='p0.0%' name='[Calculation_1110106160520217]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_4300106160335263])/[Calculation_4300106160335263]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PQTD' datatype='real' default-format='C1033%' name='[Calculation_1230106162113303]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - PQTD])/[Active Hotels - PQTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SDPW' datatype='real' default-format='p0.0%' name='[Calculation_2460106161409047]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_6410106161224985])/[Calculation_6410106161224985]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - Ref Week' datatype='real' default-format='C1033%' name='[Calculation_2600106161507552]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - Ref Week])/[Active Hotels - Ref Week]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SMTDPY' datatype='real' default-format='C1033%' name='[Calculation_2670106162036194]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - SMTDPY])/[Active Hotels - SMTDPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - YTD' datatype='real' default-format='C1033%' name='[Calculation_2790106162448809]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - YTD])/[Active Hotels - YTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SQTDPY' datatype='real' default-format='C1033%' name='[Calculation_2840106162136209]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - SQTDPY])/[Active Hotels - SQTDPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PMTD' datatype='real' default-format='p0.0%' name='[Calculation_3020106162305006]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_4170106162336528]-[Calculation_6310106162009648])/[Calculation_6310106162009648]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - Ref Day' datatype='real' default-format='C1033%' name='[Calculation_3610106160432967]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - Ref Day])/[Active Hotels - Ref Day]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SWPY' datatype='real' default-format='C1033%' name='[Calculation_3610106161728278]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - SWPY])/[Active Hotels - SWPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - MTD' datatype='real' default-format='C1033%' name='[Calculation_4170106162336528]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - MTD])/[Active Hotels - MTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PW' datatype='real' default-format='C1033%' name='[Calculation_4190106161651870]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - PW])/[Active Hotels - PW]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SDPY' datatype='real' default-format='C1033%' name='[Calculation_4300106160335263]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - SDPY])/[Active Hotels - SDPY]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SMTDPY' datatype='real' default-format='p0.0%' name='[Calculation_4960106162539043]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_4170106162336528] -[Calculation_2670106162036194])/[Calculation_2670106162036194]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PQTD' datatype='real' default-format='p0.0%' name='[Calculation_6200106162656365]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_1230106162113303])/[Calculation_1230106162113303]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - PMTD' datatype='real' default-format='C1033%' name='[Calculation_6310106162009648]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - PMTD])/[Active Hotels - PMTD]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SQTDPY' datatype='real' default-format='p0.0%' name='[Calculation_6380106162722912]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_2840106162136209])/[Calculation_2840106162136209]' scope-isolation='false' />
      </column>
      <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget])/[Active Hotels]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - SDPW' datatype='real' default-format='C1033%' name='[Calculation_6410106161224985]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - SDPW])/[Active Hotels - SDPW]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D SWPY' datatype='real' default-format='p0.0%' name='[Calculation_6560106161837608]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_3610106161728278])/[Calculation_3610106161728278]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - %D PW' datatype='real' default-format='p0.0%' name='[Calculation_8590106161806731]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_4190106161651870])/[Calculation_4190106161651870]' scope-isolation='false' />
      </column>
      <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
      </column>
      <column caption='Budget per Hotel - QTD' datatype='real' default-format='C1033%' name='[Calculation_9970106162410403]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - QTD])/[Active Hotels - QTD]' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Filter for GDS Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;OWW&quot; OR [Parameters].[Parameter 2] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 2] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 2] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for OTA Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 3] = &quot;OWW&quot; OR [Parameters].[Parameter 3] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 3] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='string' name='[Label - Active Hotels]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Active Hotels&quot;' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Label - Total]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Total&quot;' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Market ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Percent of Budget Used]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Total Spend])/SUM([sold_hotels (copy)].[Budget])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='real' name='[Total Spend]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Market Name] = &quot;Total&quot; THEN [Spend] END' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Hotels - Ref Day]' derivation='User' name='[usr:Active Hotels - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_3610106160432967]' derivation='User' name='[usr:Calculation_3610106160432967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\ssn_dashboard__active_hotels_with_budget.tde' schema='Extract' tablename='Extract' update-time='3/13/15 5:10:34 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Month Name]' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[Total Spend]' formula='IF [Market Name] = &quot;Total&quot; THEN [Spend] END' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='14371107' timestamp-start='2015-03-13 17:10:34.401000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.355872' measure-ordering='alphabetic' measure-percentage='0.376335' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels:qk]&quot;</bucket>
            </map>
            <map to='#39737c'>
              <bucket>&quot;[sold_hotels (copy)].[usr:Total Sold Hotels:qk]&quot;</bucket>
            </map>
            <map to='#86b4a9'>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
            </map>
            <map to='#86b4a9'>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Total Sold Hotels:qk]&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;[sold_hotels (copy)].[sum:Budget:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[sold_hotels (copy)].[usr:Percent of Budget:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[sold_hotels (copy)].[usr:Gross Media Revenue 7 Day Average:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0f'>
              <bucket>&quot;[sold_hotels (copy)].[cum:sum:Sold Hotels:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>2010</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>2012</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>2015</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#d62728'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>2011</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Aberdeen&quot;' />
            <member value='&quot;Abu Dhabi&quot;' />
            <member value='&quot;Adelaide&quot;' />
            <member value='&quot;Albany&quot;' />
            <member value='&quot;Albuquerque&quot;' />
            <member value='&quot;Amsterdam&quot;' />
            <member value='&quot;Anchorage&quot;' />
            <member value='&quot;Asheville&quot;' />
            <member value='&quot;Aspen&quot;' />
            <member value='&quot;Athens&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Auckland&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Bali&quot;' />
            <member value='&quot;Baltimore&quot;' />
            <member value='&quot;Bangkok&quot;' />
            <member value='&quot;Barcelona&quot;' />
            <member value='&quot;Beijing&quot;' />
            <member value='&quot;Berlin&quot;' />
            <member value='&quot;Big Island&quot;' />
            <member value='&quot;Biloxi&quot;' />
            <member value='&quot;Birmingham&quot;' />
            <member value='&quot;Bloemfontein&quot;' />
            <member value='&quot;Boise&quot;' />
            <member value='&quot;Bologna&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Branson&quot;' />
            <member value='&quot;Breckenridge&quot;' />
            <member value='&quot;Brisbane&quot;' />
            <member value='&quot;Brussels&quot;' />
            <member value='&quot;Budapest&quot;' />
            <member value='&quot;Buenos Aires&quot;' />
            <member value='&quot;Buffalo&quot;' />
            <member value='&quot;Calgary&quot;' />
            <member value='&quot;Cancun&quot;' />
            <member value='&quot;Cape Town&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Charlotte&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Cincinnati&quot;' />
            <member value='&quot;Cleveland&quot;' />
            <member value='&quot;Columbus&quot;' />
            <member value='&quot;Copenhagen&quot;' />
            <member value='&quot;Corpus Christi&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Delhi&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Des Moines&quot;' />
            <member value='&quot;Detroit&quot;' />
            <member value='&quot;Dubai&quot;' />
            <member value='&quot;Dublin&quot;' />
            <member value='&quot;Durban&quot;' />
            <member value='&quot;Dusseldorf&quot;' />
            <member value='&quot;East London&quot;' />
            <member value='&quot;Edinburgh&quot;' />
            <member value='&quot;Edmonton&quot;' />
            <member value='&quot;Flagstaff&quot;' />
            <member value='&quot;Florence&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Frankfurt&quot;' />
            <member value='&quot;Geneva&quot;' />
            <member value='&quot;Gold Coast&quot;' />
            <member value='&quot;Grand Rapids&quot;' />
            <member value='&quot;Guanacaste&quot;' />
            <member value='&quot;Guangzhou&quot;' />
            <member value='&quot;Halifax&quot;' />
            <member value='&quot;Hamburg&quot;' />
            <member value='&quot;Hartford&quot;' />
            <member value='&quot;Hilton Head&quot;' />
            <member value='&quot;Ho Chi Minh City&quot;' />
            <member value='&quot;Hong Kong&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;Indianapolis&quot;' />
            <member value='&quot;Istanbul&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Jakarta&quot;' />
            <member value='&quot;Johannesburg&quot;' />
            <member value='&quot;Kansas City&quot;' />
            <member value='&quot;Kauai&quot;' />
            <member value='&quot;Kimberley&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Kuala Lumpur&quot;' />
            <member value='&quot;Lake Tahoe&quot;' />
            <member value='&quot;Lancaster&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Lexington&quot;' />
            <member value='&quot;Lisbon&quot;' />
            <member value='&quot;London&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Los Cabos&quot;' />
            <member value='&quot;Louisville&quot;' />
            <member value='&quot;Macau&quot;' />
            <member value='&quot;Madison&quot;' />
            <member value='&quot;Madrid&quot;' />
            <member value='&quot;Manchester&quot;' />
            <member value='&quot;Manila&quot;' />
            <member value='&quot;Maui&quot;' />
            <member value='&quot;Melbourne&quot;' />
            <member value='&quot;Memphis&quot;' />
            <member value='&quot;Mexico City&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Milan&quot;' />
            <member value='&quot;Milwaukee&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Montreal&quot;' />
            <member value='&quot;Moscow&quot;' />
            <member value='&quot;Mumbai&quot;' />
            <member value='&quot;Munich&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Naples&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;Nelspruit&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Newport&quot;' />
            <member value='&quot;Niagara Falls&quot;' />
            <member value='&quot;Nice&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Oklahoma City&quot;' />
            <member value='&quot;Omaha&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Osaka&quot;' />
            <member value='&quot;Other&quot;' />
            <member value='&quot;Palm Beach&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Paris&quot;' />
            <member value='&quot;Park City&quot;' />
            <member value='&quot;Pensacola&quot;' />
            <member value='&quot;Perth&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Phuket&quot;' />
            <member value='&quot;Pittsburgh&quot;' />
            <member value='&quot;Polokwane&quot;' />
            <member value='&quot;Port Elizabeth&quot;' />
            <member value='&quot;Portland&quot;' />
            <member value='&quot;Prague&quot;' />
            <member value='&quot;Pretoria&quot;' />
            <member value='&quot;Providence&quot;' />
            <member value='&quot;Puerto Plata&quot;' />
            <member value='&quot;Punta Cana&quot;' />
            <member value='&quot;Raleigh-Durham&quot;' />
            <member value='&quot;Reno&quot;' />
            <member value='&quot;Rest of Argentina&quot;' />
            <member value='&quot;Rest of Australia&quot;' />
            <member value='&quot;Rest of Austria&quot;' />
            <member value='&quot;Rest of Belgium&quot;' />
            <member value='&quot;Rest of Brazil&quot;' />
            <member value='&quot;Rest of Canada&quot;' />
            <member value='&quot;Rest of Chile&quot;' />
            <member value='&quot;Rest of China&quot;' />
            <member value='&quot;Rest of Costa Rica&quot;' />
            <member value='&quot;Rest of Czech Republic&quot;' />
            <member value='&quot;Rest of Denmark&quot;' />
            <member value='&quot;Rest of Dominican Republic&quot;' />
            <member value='&quot;Rest of France&quot;' />
            <member value='&quot;Rest of Germany&quot;' />
            <member value='&quot;Rest of Greece&quot;' />
            <member value='&quot;Rest of Hong Kong&quot;' />
            <member value='&quot;Rest of Hungary&quot;' />
            <member value='&quot;Rest of India&quot;' />
            <member value='&quot;Rest of Indonesia&quot;' />
            <member value='&quot;Rest of Ireland&quot;' />
            <member value='&quot;Rest of Italy&quot;' />
            <member value='&quot;Rest of Japan&quot;' />
            <member value='&quot;Rest of Korea&quot;' />
            <member value='&quot;Rest of Malaysia&quot;' />
            <member value='&quot;Rest of Mexico&quot;' />
            <member value='&quot;Rest of Netherlands&quot;' />
            <member value='&quot;Rest of New Zealand&quot;' />
            <member value='&quot;Rest of Panama&quot;' />
            <member value='&quot;Rest of Philippines&quot;' />
            <member value='&quot;Rest of Portugal&quot;' />
            <member value='&quot;Rest of Puerto Rico&quot;' />
            <member value='&quot;Rest of Russian Federation&quot;' />
            <member value='&quot;Rest of Singapore&quot;' />
            <member value='&quot;Rest of South Africa&quot;' />
            <member value='&quot;Rest of Spain&quot;' />
            <member value='&quot;Rest of Sweden&quot;' />
            <member value='&quot;Rest of Switzerland&quot;' />
            <member value='&quot;Rest of Taiwan&quot;' />
            <member value='&quot;Rest of Thailand&quot;' />
            <member value='&quot;Rest of Turkey&quot;' />
            <member value='&quot;Rest of UAE&quot;' />
            <member value='&quot;Rest of UK&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;Rest of Vietnam&quot;' />
            <member value='&quot;Rest of World&quot;' />
            <member value='&quot;Richmond&quot;' />
            <member value='&quot;Rio De Janeiro&quot;' />
            <member value='&quot;Rome&quot;' />
            <member value='&quot;Sacramento&quot;' />
            <member value='&quot;Salt Lake City&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;San Jose&quot;' />
            <member value='&quot;San Juan&quot;' />
            <member value='&quot;Santa Barbara&quot;' />
            <member value='&quot;Santa Cruz&quot;' />
            <member value='&quot;Santa Fe&quot;' />
            <member value='&quot;Santiago&quot;' />
            <member value='&quot;Santo Domingo&quot;' />
            <member value='&quot;Sao Paulo&quot;' />
            <member value='&quot;Sarasota&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Sedona&quot;' />
            <member value='&quot;Seoul&quot;' />
            <member value='&quot;Shanghai&quot;' />
            <member value='&quot;Singapore&quot;' />
            <member value='&quot;South Padre Island&quot;' />
            <member value='&quot;Spokane&quot;' />
            <member value='&quot;St. Louis&quot;' />
            <member value='&quot;St. Petersburg&quot;' />
            <member value='&quot;Stockholm&quot;' />
            <member value='&quot;Sydney&quot;' />
            <member value='&quot;Taipei&quot;' />
            <member value='&quot;Tallahassee&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Tokyo&quot;' />
            <member value='&quot;Toronto&quot;' />
            <member value='&quot;Tucson&quot;' />
            <member value='&quot;Tulsa&quot;' />
            <member value='&quot;Vail&quot;' />
            <member value='&quot;Vallarta&quot;' />
            <member value='&quot;Vancouver&quot;' />
            <member value='&quot;Venice&quot;' />
            <member value='&quot;Vienna&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
            <member value='&quot;Williamsburg&quot;' />
            <member value='&quot;Wisconsin Dells&quot;' />
            <member value='&quot;Zurich&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Channel Type' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OTA&quot;' />
            <member value='&quot;GDS&quot;' />
          </members>
        </column>
        <column caption='GDS Publisher' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column caption='OTA Publisher' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;Hipmunk&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;HotelReservations&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;RatesToGo&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2014-07-06#'>
          <calculation class='tableau' formula='#2014-07-06#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='publisher_data (copy)'>
        <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[Auction Participant Count %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Auction Participant Count - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Auction Participant Count - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Auction Participant Count - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Auction Participant Count for Table' datatype='integer' name='[Auction Participant Count for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Auction Participant Count - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Auction Participant Count - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Auction Participant Count - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
        </column>
        <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
        </column>
        <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
        </column>
        <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
        </column>
        <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Day]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='sum([Auction Participant Count - Ref Day])/sum([Pages Available - Ref Day])' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
        </column>
        <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
        </column>
        <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
        </column>
        <column-instance column='[Auction Participant Count for Table]' derivation='Sum' name='[sum:Auction Participant Count for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Auction Participant Count %D for Table]' derivation='User' name='[usr:Auction Participant Count %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Hotels per Auction - Ref Day]' derivation='User' name='[usr:Hotels per Auction - Ref Day:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <datasource-dependencies datasource='sold_hotels (copy)'>
        <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - MTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PMTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Budget] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Budget] END)&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - PQTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PW]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - PYTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Budget] &#13;&#10;END)&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - QTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Day]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Week]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SDPW]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Budget] END' />
        </column>
        <column datatype='real' name='[Budget - SMTDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - SQTDPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' name='[Budget - SWPY]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - YTD]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END)&#13;&#10;END' />
        </column>
        <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget]' role='measure' type='quantitative'>
        </column>
        <column datatype='integer' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='RUNNING_SUM(SUM([Sold Hotels]))'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Percent of Budget]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='SUM([active_hotels_with_budget (copy)].[Spend])/sum([Budget])' scope-isolation='false' />
        </column>
        <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column datatype='integer' name='[Sold Hotels]' role='measure' type='quantitative'>
        </column>
        <column-instance column='[Sold Hotels]' derivation='Sum' name='[cum:sum:Sold Hotels:qk]' pivot='key' type='quantitative'>
          <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
        </column-instance>
        <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Percent of Budget]' derivation='User' name='[usr:Percent of Budget:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
      </datasource-dependencies>
    </datasource>
    <datasource caption='market_data' inline='true' name='market_data (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;dimensions.*,&#13;&#10;&#9;data.Impressions,&#13;&#10;&#9;data.Clicks,&#13;&#10;&#9;data.Conversions,&#13;&#10;&#9;data.Spend,&#13;&#10;&#9;data.&quot;Auction Position Sum&quot;,&#13;&#10;&#9;data.Revenue,&#13;&#10;&#9;data.&quot;Exposed Conversions&quot;,&#13;&#10;&#9;data.&quot;Exposed Revenue&quot;&#13;&#10;from&#13;&#10;(&#13;&#10;  select *&#13;&#10;  from&#13;&#10;  (&#13;&#10;    select &#13;&#10;      distinct(aggregation_level_date_in_et) as Date,&#13;&#10;      0 as Zero&#13;&#10;    from intent_media_production.advertiser_account_report_aggregations&#13;&#10;    where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;  ) dates,&#13;&#10;  (&#13;&#10;    select&#13;&#10;      imm.name as &quot;Market Name&quot;,&#13;&#10;      imm.report_segment as &quot;Segment&quot;,&#13;&#10;      imm.country as &quot;Country&quot;,&#13;&#10;      imm.finance_region as &quot;Finance Region&quot;&#13;&#10;    from intent_media_production.intent_media_markets imm&#13;&#10;    &#13;&#10;    union&#13;&#10;    &#13;&#10;    select &#13;&#10;      &apos;Other&apos; as &quot;Market Name&quot;,&#13;&#10;      &apos;Other&apos; as &quot;Segment&quot;,&#13;&#10;      &apos;Other&apos; as &quot;Country&quot;,&#13;&#10;      &apos;Other&apos; as &quot;Finance Region&quot;&#13;&#10;  ) markets,&#13;&#10;  (&#13;&#10;    select &#13;&#10;      (case&#13;&#10;        when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else e.name&#13;&#10;      end) as Pub,&#13;&#10;      s.display_name as &quot;Site&quot;,&#13;&#10;      (case &#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; &#13;&#10;        else &apos;OTA&apos; &#13;&#10;      end) as &quot;SSN Channel Type&quot;,&#13;&#10;      (case&#13;&#10;        when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;        when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;        when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;        when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;        else au.name&#13;&#10;      end) as &quot;Type of Ad Unit&quot;,&#13;&#10;      au.name as &quot;Ad Unit&quot;&#13;&#10;    from intent_media_production.advertiser_account_report_aggregations ppra&#13;&#10;    left join intent_media_production.ad_units au on ppra.ad_unit_id = au.id&#13;&#10;    left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;    left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;    where ad_type = &apos;SSR&apos;&#13;&#10;    group by &#13;&#10;      (case&#13;&#10;        when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else e.name&#13;&#10;      end),&#13;&#10;      s.display_name,&#13;&#10;      (case &#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; &#13;&#10;        else &apos;OTA&apos; &#13;&#10;      end),&#13;&#10;      (case&#13;&#10;        when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;        when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;        when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;        when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;        else au.name&#13;&#10;      end),&#13;&#10;      au.name&#13;&#10;&#9;) ad_unit_names&#13;&#10;) dimensions&#13;&#10;left join&#13;&#10;(&#13;&#10;  select&#13;&#10;    aggregation_level_date_in_et as Date,&#13;&#10;    (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end) as Pub,&#13;&#10;    s.display_name as Site,&#13;&#10;    (case &#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; &#13;&#10;      else &apos;OTA&apos; &#13;&#10;    end) as &quot;SSN Channel Type&quot;,&#13;&#10;    (case&#13;&#10;      when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;      when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;      when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;      when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;      else au.name&#13;&#10;    end) as &quot;Type of Ad Unit&quot;,&#13;&#10;    au.name as &quot;Ad Unit&quot;,&#13;&#10;    ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;    ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;    ifnull(imm.country, &apos;Other&apos;) as &quot;Country&quot;,&#13;&#10;    ifnull(imm.finance_region, &apos;Other&apos;) as &quot;Finance Region&quot;,&#13;&#10;    sum(impression_count) as Impressions,&#13;&#10;    sum(click_count) as Clicks,&#13;&#10;    sum(click_conversion_count) as Conversions,&#13;&#10;    sum(actual_cpc_sum) as Spend,&#13;&#10;    sum(auction_position_sum) as &quot;Auction Position Sum&quot;,&#13;&#10;    sum(click_conversion_value_sum) as Revenue,&#13;&#10;    sum(exposed_conversion_count) as &quot;Exposed Conversions&quot;,&#13;&#10;    sum(exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;&#13;&#10;  from intent_media_production.advertiser_account_report_aggregations aara&#13;&#10;  left join intent_media_production.ad_units au on au.id = aara.ad_unit_id&#13;&#10;  left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;  left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;  left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = aara.market_id&#13;&#10;  left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#13;&#10;  where &#13;&#10;    (case &#13;&#10;      when s.name = &apos;TRAVELOCITY&apos;&#13;&#10;        then aggregation_level_date_in_et &gt;&gt;= &apos;2011-04-01&apos; and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;      else&#13;&#10;        aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;        and (((au.name like &apos;%SEM%&apos; or au.name like &apos;%Hotel Details%&apos;) and aggregation_level_date_in_et &gt;&gt;= &apos;2012-05-15&apos;)&#13;&#10;        or (au.name not like &apos;%SEM%&apos; and au.name not like &apos;%Hotel Details%&apos;))&#13;&#10;    end)&#13;&#10;  group by&#13;&#10;    (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end),&#13;&#10;    s.display_name,&#13;&#10;    (case &#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos; &#13;&#10;      else &apos;OTA&apos; &#13;&#10;    end),&#13;&#10;    (case&#13;&#10;      when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;      when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;      when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;      when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;      else au.name&#13;&#10;    end),&#13;&#10;    au.name,&#13;&#10;    aggregation_level_date_in_et, &#13;&#10;    ifnull(imm.name, &apos;Other&apos;),&#13;&#10;    ifnull(imm.report_segment, &apos;Other&apos;),&#13;&#10;    ifnull(imm.country, &apos;Other&apos;),&#13;&#10;    ifnull(imm.finance_region, &apos;Other&apos;)&#13;&#10;) data&#13;&#10;&#13;&#10;on dimensions.Date = data.Date&#13;&#10;and dimensions.Pub = data.Pub&#13;&#10;and dimensions.Site = data.Site&#13;&#10;and dimensions.&quot;SSN Channel Type&quot; = dimensions.&quot;SSN Channel Type&quot;&#13;&#10;and dimensions.&quot;Type of Ad Unit&quot; = data.&quot;Type of Ad Unit&quot;&#13;&#10;and dimensions.&quot;Ad Unit&quot; = data.&quot;Ad Unit&quot;&#13;&#10;and dimensions.&quot;Market Name&quot; = data.&quot;Market Name&quot;&#13;&#10;and dimensions.&quot;Segment&quot; = data.&quot;Segment&quot;&#13;&#10;and dimensions.&quot;Country&quot; = data.&quot;Country&quot;&#13;&#10;and dimensions.&quot;Finance Region&quot; = data.&quot;Finance Region&quot;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[market_data (copy)].[sum:Spend - Ref Week:qk]&quot;' value='Spend  ' />
          <alias key='&quot;[market_data (copy)].[usr:Clicked ROI - \%D PPW:qk]&quot;' value='Clicked ROI ' />
          <alias key='&quot;[market_data (copy)].[usr:Clicked ROI - \%D PW:qk]&quot;' value='Clicked ROI' />
          <alias key='&quot;[market_data (copy)].[usr:Clicked ROI - Ref Week:qk]&quot;' value='Clicked ROI  ' />
          <alias key='&quot;[market_data (copy)].[usr:Exposed ROI - \%D PPW:qk]&quot;' value='Exposed ROI ' />
          <alias key='&quot;[market_data (copy)].[usr:Exposed ROI - \%D PW:qk]&quot;' value='Exposed ROI' />
          <alias key='&quot;[market_data (copy)].[usr:Exposed ROI - Ref Week:qk]&quot;' value='Exposed ROI  ' />
          <alias key='&quot;[market_data (copy)].[usr:Spend - \%D PPW:qk]&quot;' value='Spend ' />
          <alias key='&quot;[market_data (copy)].[usr:Spend - \%D PW:qk]&quot;' value='Spend' />
        </aliases>
      </column>
      <column datatype='integer' name='[Auction Position Sum]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PPW])/[Clicked ROI - PPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]' />
      </column>
      <column datatype='real' name='[Clicked ROI - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - PPW])/sum([Spend - PPW])' />
      </column>
      <column datatype='real' name='[Clicked ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Clicked ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
      </column>
      <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
      </column>
      <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
      </column>
      <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='integer' name='[Exposed Conversions]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PPW])/[Exposed ROI - PPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]' />
      </column>
      <column datatype='real' name='[Exposed ROI - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - PPW])/sum([Spend - PPW])' />
      </column>
      <column datatype='real' name='[Exposed ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Exposed ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
      </column>
      <column datatype='real' name='[Exposed Revenue - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' name='[Exposed Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='string' name='[Label - Pub and Ad Unit]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Type of Ad Unit]&#13;&#10;    WHEN &quot;Total&quot; THEN [Parameters].[Publisher]&#13;&#10;    WHEN &quot;Total Exit Units&quot; THEN [Parameters].[Publisher] + &quot; Exit Units&quot;&#13;&#10;    WHEN &quot;Total List Page&quot; THEN [Parameters].[Publisher] + &quot; List Page&quot;&#13;&#10;    ELSE [Type of Ad Unit]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Revenue - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Revenue] END' />
      </column>
      <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[SDPPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day] - 14' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day]-7' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Spend - %D PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PPW]))/sum([Spend - PPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Spend - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Spend - PPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -14,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -21,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Spend - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Zero]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
      <column-instance column='[Auction Position Sum]' derivation='Sum' name='[sum:Auction Position Sum:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed Conversions]' derivation='Sum' name='[sum:Exposed Conversions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Is Leap Year]' derivation='Sum' name='[sum:Is Leap Year:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Last Day of Month]' derivation='Sum' name='[sum:Last Day of Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Previous Month]' derivation='Sum' name='[sum:Previous Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - Ref Week]' derivation='Sum' name='[sum:Spend - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Year of Previous Month]' derivation='Sum' name='[sum:Year of Previous Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Zero]' derivation='Sum' name='[sum:Zero:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - %D PPW]' derivation='User' name='[usr:Clicked ROI - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - %D PW]' derivation='User' name='[usr:Clicked ROI - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI - Ref Week]' derivation='User' name='[usr:Clicked ROI - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - %D PPW]' derivation='User' name='[usr:Exposed ROI - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - %D PW]' derivation='User' name='[usr:Exposed ROI - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI - Ref Week]' derivation='User' name='[usr:Exposed ROI - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - %D PPW]' derivation='User' name='[usr:Spend - %D PPW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Spend - %D PW]' derivation='User' name='[usr:Spend - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\ssn_dashboard__market_data.tde' schema='Extract' tablename='Extract' update-time='3/13/15 5:50:36 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Month Name]' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='10320192' timestamp-start='2015-03-13 17:50:35.660000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.434334' measure-ordering='alphabetic' measure-percentage='0.336773' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Breakdown Color:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Package List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Apollo&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Apollo List Page&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Top 10&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rest of US&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Worldspan&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;HotelClub&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Hotel List Page - Travelocity WebApp&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;RatesToGo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;HotelReservations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Package List Page - Travelocity&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Galileo List Page&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Martini Package Page - Travelocity&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Hotel List Page - Orbitz Global - Mobile&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;HotelReservations.com - SSN - Hotel - OP - List Page&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Package List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Hotel List Page - RatesToGo&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Hotel List Page - Travelocity GT&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;11 to 40&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Galileo&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hipmunk - SSN - Hotel - OP - List Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Worldspan List Page&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#67bf5c'>
              <bucket>2012</bucket>
            </map>
            <map to='#729ece'>
              <bucket>2010</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>2015</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>2011</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[market_data (copy)]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[market_data (copy)].[sum:Auction Position Sum:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[market_data (copy)].[usr:Conversions per Click:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data (copy)].[usr:Clicked ROI - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data (copy)].[usr:Clicked ROI - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data (copy)].[usr:Clicked ROI - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;[market_data (copy)].[usr:Clicked ROI:qk]&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;[market_data (copy)].[sum:Revenue:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[market_data (copy)].[sum:Is Leap Year:qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[market_data (copy)].[sum:Exposed Revenue:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[market_data (copy)].[usr:Conversions per Impression:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[market_data (copy)].[sum:Year of Previous Month:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[market_data (copy)].[sum:Last Day of Month:qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[market_data (copy)].[sum:Impressions:qk]&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;[market_data (copy)].[sum:Spend:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[market_data (copy)].[sum:Exposed Conversions:qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[market_data (copy)].[sum:Zero:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[market_data (copy)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data (copy)].[sum:Spend - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data (copy)].[usr:Spend - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;[market_data (copy)].[usr:Spend - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;[market_data (copy)].[sum:Previous Month:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[market_data (copy)].[sum:Clicks:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data (copy)].[usr:Exposed ROI - \%D PPW:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data (copy)].[usr:Exposed ROI - \%D PW:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data (copy)].[usr:Exposed ROI - Ref Week:qk]&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;[market_data (copy)].[usr:Exposed ROI:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[market_data (copy)].[sum:Conversions:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hipmunk - SSN - Hotel - OP - List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
            <member value='&quot;Hotel List Page - RatesToGo&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;HotelReservations.com - SSN - Hotel - OP - List Page&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - CheapTickets&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Ad Unit&quot;'>
          <calculation class='tableau' formula='&quot;Ad Unit&quot;' />
          <members>
            <member value='&quot;Site&quot;' />
            <member value='&quot;Page Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Aberdeen&quot;' />
            <member value='&quot;Abu Dhabi&quot;' />
            <member value='&quot;Adelaide&quot;' />
            <member value='&quot;Albany&quot;' />
            <member value='&quot;Albuquerque&quot;' />
            <member value='&quot;Amsterdam&quot;' />
            <member value='&quot;Anchorage&quot;' />
            <member value='&quot;Asheville&quot;' />
            <member value='&quot;Aspen&quot;' />
            <member value='&quot;Athens&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Auckland&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Bali&quot;' />
            <member value='&quot;Baltimore&quot;' />
            <member value='&quot;Bangkok&quot;' />
            <member value='&quot;Barcelona&quot;' />
            <member value='&quot;Beijing&quot;' />
            <member value='&quot;Berlin&quot;' />
            <member value='&quot;Big Island&quot;' />
            <member value='&quot;Biloxi&quot;' />
            <member value='&quot;Birmingham&quot;' />
            <member value='&quot;Bloemfontein&quot;' />
            <member value='&quot;Boise&quot;' />
            <member value='&quot;Bologna&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Branson&quot;' />
            <member value='&quot;Breckenridge&quot;' />
            <member value='&quot;Brisbane&quot;' />
            <member value='&quot;Brussels&quot;' />
            <member value='&quot;Budapest&quot;' />
            <member value='&quot;Buenos Aires&quot;' />
            <member value='&quot;Buffalo&quot;' />
            <member value='&quot;Calgary&quot;' />
            <member value='&quot;Cancun&quot;' />
            <member value='&quot;Cape Town&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Charlotte&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Cincinnati&quot;' />
            <member value='&quot;Cleveland&quot;' />
            <member value='&quot;Columbus&quot;' />
            <member value='&quot;Copenhagen&quot;' />
            <member value='&quot;Corpus Christi&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Delhi&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Des Moines&quot;' />
            <member value='&quot;Detroit&quot;' />
            <member value='&quot;Dubai&quot;' />
            <member value='&quot;Dublin&quot;' />
            <member value='&quot;Durban&quot;' />
            <member value='&quot;Dusseldorf&quot;' />
            <member value='&quot;East London&quot;' />
            <member value='&quot;Edinburgh&quot;' />
            <member value='&quot;Edmonton&quot;' />
            <member value='&quot;Flagstaff&quot;' />
            <member value='&quot;Florence&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Frankfurt&quot;' />
            <member value='&quot;Geneva&quot;' />
            <member value='&quot;Gold Coast&quot;' />
            <member value='&quot;Grand Rapids&quot;' />
            <member value='&quot;Guanacaste&quot;' />
            <member value='&quot;Guangzhou&quot;' />
            <member value='&quot;Halifax&quot;' />
            <member value='&quot;Hamburg&quot;' />
            <member value='&quot;Hartford&quot;' />
            <member value='&quot;Hilton Head&quot;' />
            <member value='&quot;Ho Chi Minh City&quot;' />
            <member value='&quot;Hong Kong&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;Indianapolis&quot;' />
            <member value='&quot;Istanbul&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Jakarta&quot;' />
            <member value='&quot;Johannesburg&quot;' />
            <member value='&quot;Kansas City&quot;' />
            <member value='&quot;Kauai&quot;' />
            <member value='&quot;Kimberley&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Kuala Lumpur&quot;' />
            <member value='&quot;Lake Tahoe&quot;' />
            <member value='&quot;Lancaster&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Lexington&quot;' />
            <member value='&quot;Lisbon&quot;' />
            <member value='&quot;London&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Los Cabos&quot;' />
            <member value='&quot;Louisville&quot;' />
            <member value='&quot;Macau&quot;' />
            <member value='&quot;Madison&quot;' />
            <member value='&quot;Madrid&quot;' />
            <member value='&quot;Manchester&quot;' />
            <member value='&quot;Manila&quot;' />
            <member value='&quot;Maui&quot;' />
            <member value='&quot;Melbourne&quot;' />
            <member value='&quot;Memphis&quot;' />
            <member value='&quot;Mexico City&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Milan&quot;' />
            <member value='&quot;Milwaukee&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Montreal&quot;' />
            <member value='&quot;Moscow&quot;' />
            <member value='&quot;Mumbai&quot;' />
            <member value='&quot;Munich&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Naples&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;Nelspruit&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Newport&quot;' />
            <member value='&quot;Niagara Falls&quot;' />
            <member value='&quot;Nice&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Oklahoma City&quot;' />
            <member value='&quot;Omaha&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Osaka&quot;' />
            <member value='&quot;Other&quot;' />
            <member value='&quot;Palm Beach&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Paris&quot;' />
            <member value='&quot;Park City&quot;' />
            <member value='&quot;Pensacola&quot;' />
            <member value='&quot;Perth&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Phuket&quot;' />
            <member value='&quot;Pittsburgh&quot;' />
            <member value='&quot;Polokwane&quot;' />
            <member value='&quot;Port Elizabeth&quot;' />
            <member value='&quot;Portland&quot;' />
            <member value='&quot;Prague&quot;' />
            <member value='&quot;Pretoria&quot;' />
            <member value='&quot;Providence&quot;' />
            <member value='&quot;Puerto Plata&quot;' />
            <member value='&quot;Punta Cana&quot;' />
            <member value='&quot;Raleigh-Durham&quot;' />
            <member value='&quot;Reno&quot;' />
            <member value='&quot;Rest of Argentina&quot;' />
            <member value='&quot;Rest of Australia&quot;' />
            <member value='&quot;Rest of Austria&quot;' />
            <member value='&quot;Rest of Belgium&quot;' />
            <member value='&quot;Rest of Brazil&quot;' />
            <member value='&quot;Rest of Canada&quot;' />
            <member value='&quot;Rest of Chile&quot;' />
            <member value='&quot;Rest of China&quot;' />
            <member value='&quot;Rest of Costa Rica&quot;' />
            <member value='&quot;Rest of Czech Republic&quot;' />
            <member value='&quot;Rest of Denmark&quot;' />
            <member value='&quot;Rest of Dominican Republic&quot;' />
            <member value='&quot;Rest of France&quot;' />
            <member value='&quot;Rest of Germany&quot;' />
            <member value='&quot;Rest of Greece&quot;' />
            <member value='&quot;Rest of Hong Kong&quot;' />
            <member value='&quot;Rest of Hungary&quot;' />
            <member value='&quot;Rest of India&quot;' />
            <member value='&quot;Rest of Indonesia&quot;' />
            <member value='&quot;Rest of Ireland&quot;' />
            <member value='&quot;Rest of Italy&quot;' />
            <member value='&quot;Rest of Japan&quot;' />
            <member value='&quot;Rest of Korea&quot;' />
            <member value='&quot;Rest of Malaysia&quot;' />
            <member value='&quot;Rest of Mexico&quot;' />
            <member value='&quot;Rest of Netherlands&quot;' />
            <member value='&quot;Rest of New Zealand&quot;' />
            <member value='&quot;Rest of Panama&quot;' />
            <member value='&quot;Rest of Philippines&quot;' />
            <member value='&quot;Rest of Portugal&quot;' />
            <member value='&quot;Rest of Puerto Rico&quot;' />
            <member value='&quot;Rest of Russian Federation&quot;' />
            <member value='&quot;Rest of Singapore&quot;' />
            <member value='&quot;Rest of South Africa&quot;' />
            <member value='&quot;Rest of Spain&quot;' />
            <member value='&quot;Rest of Sweden&quot;' />
            <member value='&quot;Rest of Switzerland&quot;' />
            <member value='&quot;Rest of Taiwan&quot;' />
            <member value='&quot;Rest of Thailand&quot;' />
            <member value='&quot;Rest of Turkey&quot;' />
            <member value='&quot;Rest of UAE&quot;' />
            <member value='&quot;Rest of UK&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;Rest of Vietnam&quot;' />
            <member value='&quot;Rest of World&quot;' />
            <member value='&quot;Richmond&quot;' />
            <member value='&quot;Rio De Janeiro&quot;' />
            <member value='&quot;Rome&quot;' />
            <member value='&quot;Sacramento&quot;' />
            <member value='&quot;Salt Lake City&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;San Jose&quot;' />
            <member value='&quot;San Juan&quot;' />
            <member value='&quot;Santa Barbara&quot;' />
            <member value='&quot;Santa Cruz&quot;' />
            <member value='&quot;Santa Fe&quot;' />
            <member value='&quot;Santiago&quot;' />
            <member value='&quot;Santo Domingo&quot;' />
            <member value='&quot;Sao Paulo&quot;' />
            <member value='&quot;Sarasota&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Sedona&quot;' />
            <member value='&quot;Seoul&quot;' />
            <member value='&quot;Shanghai&quot;' />
            <member value='&quot;Singapore&quot;' />
            <member value='&quot;South Padre Island&quot;' />
            <member value='&quot;Spokane&quot;' />
            <member value='&quot;St. Louis&quot;' />
            <member value='&quot;St. Petersburg&quot;' />
            <member value='&quot;Stockholm&quot;' />
            <member value='&quot;Sydney&quot;' />
            <member value='&quot;Taipei&quot;' />
            <member value='&quot;Tallahassee&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Tokyo&quot;' />
            <member value='&quot;Toronto&quot;' />
            <member value='&quot;Tucson&quot;' />
            <member value='&quot;Tulsa&quot;' />
            <member value='&quot;Vail&quot;' />
            <member value='&quot;Vallarta&quot;' />
            <member value='&quot;Vancouver&quot;' />
            <member value='&quot;Venice&quot;' />
            <member value='&quot;Vienna&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
            <member value='&quot;Williamsburg&quot;' />
            <member value='&quot;Wisconsin Dells&quot;' />
            <member value='&quot;Zurich&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Channel Type' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OTA&quot;' />
            <member value='&quot;GDS&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;Hipmunk&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;HotelReservations&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;RatesToGo&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2014-07-06#'>
          <calculation class='tableau' formula='#2014-07-06#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='publisher_data' inline='true' name='publisher_data (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;dimensions.*,&#13;&#10;&#9;data.&quot;Pages Available&quot;, &#13;&#10;&#9;data.&quot;Pages Served&quot;, &#13;&#10;&#9;data.&quot;Spend&quot;, &#13;&#10;&#9;data.&quot;Clicks&quot;, &#13;&#10;&#9;data.&quot;Impressions Served&quot;,&#13;&#10;&#9;data.&quot;Auction Participant Count&quot;&#13;&#10;from&#13;&#10;(&#13;&#10;  select *&#13;&#10;  from&#13;&#10;  (&#13;&#10;    select&#13;&#10;      distinct(aggregation_level_date_in_et) as Date,&#13;&#10;      0 as Zero&#13;&#10;    from intent_media_production.publisher_performance_report_aggregations&#13;&#10;    where aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;  ) dates,&#13;&#10;  (&#13;&#10;    select&#13;&#10;      (case&#13;&#10;        when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else e.name&#13;&#10;      end) as Pub,&#13;&#10;      s.display_name as Site,&#13;&#10;      (case&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;        else &apos;OTA&apos;&#13;&#10;      end) as &quot;SSN Channel Type&quot;,&#13;&#10;      (case&#13;&#10;        when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;        when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;        when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;        when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;        else au.name&#13;&#10;      end) as &quot;Type of Ad Unit&quot;,&#13;&#10;      au.name as &quot;Ad Unit&quot;,&#13;&#10;      ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;      ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;      ifnull(imm.country, &apos;Other&apos;) as &quot;Country&quot;,&#13;&#10;      ifnull(imm.finance_region, &apos;Other&apos;) as &quot;Finance Region&quot;&#13;&#10;    from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;    left join intent_media_production.ad_units au on au.id = ppra.ad_unit_id&#13;&#10;    left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;    left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;    left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = ppra.market_id&#13;&#10;    left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#13;&#10;    where&#13;&#10;      (case&#13;&#10;        when s.name = &apos;TRAVELOCITY&apos; then aggregation_level_date_in_et &gt;&gt;= &apos;2011-04-01&apos; and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;        else aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;) and (((au.name like &apos;%SEM%&apos; or au.name like &apos;%Hotel Details%&apos;) and aggregation_level_date_in_et &gt;&gt;= &apos;2012-05-15&apos;) or (au.name not like &apos;%SEM%&apos; and au.name not like &apos;%Hotel Details%&apos;))&#13;&#10;      end)&#13;&#10;    group by&#13;&#10;      (case&#13;&#10;        when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;        else e.name&#13;&#10;      end),&#13;&#10;      s.display_name,&#13;&#10;      (case&#13;&#10;        when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;        else &apos;OTA&apos;&#13;&#10;      end),&#13;&#10;      (case&#13;&#10;        when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;        when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;        when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;        when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;        when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;        else au.name&#13;&#10;      end),&#13;&#10;      au.name,&#13;&#10;      ifnull(imm.name, &apos;Other&apos;),&#13;&#10;      ifnull(imm.report_segment, &apos;Other&apos;),&#13;&#10;      ifnull(imm.country, &apos;Other&apos;),&#13;&#10;      ifnull(imm.finance_region, &apos;Other&apos;)&#13;&#10;  ) ad_unit_names&#13;&#10;) dimensions&#13;&#10;left join&#13;&#10;(&#13;&#10;  select&#13;&#10;&#9;  aggregation_level_date_in_et as Date,&#13;&#10;    (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end) as Pub,&#13;&#10;    s.display_name as Site,&#13;&#10;    (case&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;      else &apos;OTA&apos;&#13;&#10;    end) as &quot;SSN Channel Type&quot;,&#13;&#10;    (case&#13;&#10;      when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;      when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;      when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;      when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;      else au.name&#13;&#10;    end) as &quot;Type of Ad Unit&quot;,&#13;&#10;    au.name as &quot;Ad Unit&quot;,&#13;&#10;    ifnull(imm.name, &apos;Other&apos;) as &quot;Market Name&quot;,&#13;&#10;    ifnull(imm.report_segment, &apos;Other&apos;) as &quot;Segment&quot;,&#13;&#10;    ifnull(imm.country, &apos;Other&apos;) as &quot;Country&quot;,&#13;&#10;    ifnull(imm.finance_region, &apos;Other&apos;) as &quot;Finance Region&quot;,&#13;&#10;    sum(ad_call_count) as &quot;Pages Available&quot;,&#13;&#10;    sum(case when positions_filled &gt;&gt; 0 then ad_call_count else 0 end) as &quot;Pages Served&quot;,&#13;&#10;    sum(gross_actual_cpc_sum) as &quot;Spend&quot;,&#13;&#10;    sum(click_count) as &quot;Clicks&quot;,&#13;&#10;    sum(ad_call_count * positions_filled) as &quot;Impressions Served&quot;,&#13;&#10;    sum(auction_participant_count) as &quot;Auction Participant Count&quot;&#13;&#10;  from intent_media_production.publisher_performance_report_aggregations ppra&#13;&#10;  left join intent_media_production.ad_units au on au.id = ppra.ad_unit_id&#13;&#10;  left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;  left join intent_media_production.entities e on e.id = s.publisher_id&#13;&#10;  left join intent_media_production.intent_media_markets_publisher_markets immpm on immpm.market_id = ppra.market_id&#13;&#10;  left join intent_media_production.intent_media_markets imm on imm.id = immpm.intent_media_market_id&#13;&#10;  where&#13;&#10;    (case&#13;&#10;      when s.name = &apos;TRAVELOCITY&apos; then aggregation_level_date_in_et &gt;&gt;= &apos;2011-04-01&apos; and aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;      else aggregation_level_date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;) and (((au.name like &apos;%SEM%&apos; or au.name like &apos;%Hotel Details%&apos;) and aggregation_level_date_in_et &gt;&gt;= &apos;2012-05-15&apos;) or (au.name not like &apos;%SEM%&apos; and au.name not like &apos;%Hotel Details%&apos;))&#13;&#10;    end)&#13;&#10;  group by&#13;&#10;    (case&#13;&#10;      when e.name = &apos;Orbitz&apos; then &apos;OWW&apos;&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;Travelport&apos;&#13;&#10;      else e.name&#13;&#10;    end),&#13;&#10;    s.display_name,&#13;&#10;    (case&#13;&#10;      when e.name like &apos;%Travelport%&apos; then &apos;GDS&apos;&#13;&#10;      else &apos;OTA&apos;&#13;&#10;    end),&#13;&#10;    (case&#13;&#10;      when au.name = &apos;Travelocity Martini Package Page&apos; then &apos;Total Flight-Hotel Cross-Sell Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (Legacy)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name = &apos;Travelocity List Page (New Platform)&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name in (&apos;Apollo List Page&apos;,&apos;Galileo List Page&apos;,&apos;Worldspan List Page&apos;) then &apos;Total GDS List Page&apos;&#13;&#10;      when au.name like &apos;%SEM%&apos; then &apos;Total SEM List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel List Page%&apos; then &apos;Total Hotel List Page&apos;&#13;&#10;      when au.name like &apos;%Hotel Details Page%&apos; then &apos;Total Hotel Details Page&apos;&#13;&#10;      when au.name like &apos;%Trip Details Page%&apos; then &apos;Total Trip Details Page&apos;&#13;&#10;      when au.name like &apos;%Package%&apos; then &apos;Total Packages List Page&apos;&#13;&#10;      else au.name&#13;&#10;    end),&#13;&#10;    au.name,&#13;&#10;    aggregation_level_date_in_et,&#13;&#10;    ifnull(imm.name, &apos;Other&apos;),&#13;&#10;    ifnull(imm.report_segment, &apos;Other&apos;),&#13;&#10;    ifnull(imm.country, &apos;Other&apos;),&#13;&#10;    ifnull(imm.finance_region, &apos;Other&apos;)&#13;&#10;) data&#13;&#10;&#13;&#10;on dimensions.Date = data.Date&#13;&#10;and dimensions.Pub = data.Pub&#13;&#10;and dimensions.Site = data.Site&#13;&#10;and dimensions.&quot;SSN Channel Type&quot; = data.&quot;SSN Channel Type&quot;&#13;&#10;and dimensions.&quot;Type of Ad Unit&quot; = data.&quot;Type of Ad Unit&quot;&#13;&#10;and dimensions.&quot;Ad Unit&quot; = data.&quot;Ad Unit&quot;&#13;&#10;and dimensions.&quot;Market Name&quot; = data.&quot;Market Name&quot;&#13;&#10;and dimensions.Segment = data.Segment&#13;&#10;and dimensions.Country = data.Country&#13;&#10;and dimensions.&quot;Finance Region&quot; = data.&quot;Finance Region&quot;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' value='Active Hotels Delta' />
          <alias key='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' value='Active Hotels' />
          <alias key='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' value=' ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks - 28Days:qk]&quot;' value='Clicks  ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;' value='Clicks   ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks - Ref Day:qk]&quot;' value='Clicks' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;' value='Clicks ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;' value='Clicks    ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' value='Clicks     ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - 28Days:qk]&quot;' value='Gross Media Revenue  ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;' value='Gross Media Revenue   ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Day:qk]&quot;' value='Gross Media Revenue' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;' value='Gross Media Revenue ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;' value='Gross Media Revenue    ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' value='Gross Media Revenue     ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served - 28Days:qk]&quot;' value='Impressions Served  ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;' value='Impressions Served   ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Day:qk]&quot;' value='Impressions Served' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;' value='Impressions Served ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;' value='Impressions Served    ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' value='Impressions Served     ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Net Media Revenue - Ref Day:qk]&quot;' value='Net Media Revenue' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available - 28Days:qk]&quot;' value='Pages Available  ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;' value='Pages Available   ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Day:qk]&quot;' value='Pages Available' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;' value='Pages Available ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;' value='Pages Available    ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' value='Pages Available     ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served - 28Days:qk]&quot;' value='Pages Served  ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;' value='Pages Served   ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Day:qk]&quot;' value='Pages Served' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;' value='Pages Served ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;' value='Pages Served    ' />
          <alias key='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' value='Pages Served     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D P28Days:qk]&quot;' value='Ads per Page Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;' value='Ads per Page Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;' value='Ads per Page Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;' value='Ads per Page Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - 28Days:qk]&quot;' value='Ads per Page  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;' value='Ads per Page   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Day:qk]&quot;' value='Ads per Page' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;' value='Ads per Page ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;' value='Ads per Page    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' value='Ads per Page Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' value='Ads per Page     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D P28Days:qk]&quot;' value='Available eCPM Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PQTD:qk]&quot;' value='Available eCPM Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;' value='Available eCPM Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;' value='Available eCPM Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - 28Days:qk]&quot;' value='Available eCPM  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - QTD:qk]&quot;' value='Available eCPM   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Day:qk]&quot;' value='Available eCPM' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;' value='Available eCPM ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;' value='Available eCPM    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' value='Available eCPM Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' value='Available eCPM     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks - \%D P28Days:qk]&quot;' value='Clicks Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;' value='Clicks Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;' value='Clicks Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;' value='Clicks Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' value='Clicks Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - \%D P28Days:qk]&quot;' value='CPC Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;' value='CPC Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;' value='CPC Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;' value='CPC Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - 28Days:qk]&quot;' value='CPC  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;' value='CPC   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - Ref Day:qk]&quot;' value='CPC' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;' value='CPC ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;' value='CPC    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' value='CPC Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' value='CPC     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - \%D P28Days:qk]&quot;' value='CTR Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;' value='CTR Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;' value='CTR Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;' value='CTR Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - 28Days:qk]&quot;' value='CTR  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;' value='CTR   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - Ref Day:qk]&quot;' value='CTR' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;' value='CTR ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;' value='CTR    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' value='CTR Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' value='CTR     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D P28Days:qk]&quot;' value='Fill Rate Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;' value='Fill Rate Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;' value='Fill Rate Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;' value='Fill Rate Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - 28Days:qk]&quot;' value='Fill Rate  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;' value='Fill Rate   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Day:qk]&quot;' value='Fill Rate' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;' value='Fill Rate ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;' value='Fill Rate    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' value='Fill Rate Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' value='Fill Rate     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;' value='Gross Media Revenue Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' value='Gross Media Revenue Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;' value='Gross Media Revenue Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' value='Gross Media Revenue Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' value='Gross Media Revenue Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' value='Hotels per Auction Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' value='Hotels per Auction' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D P28Days:qk]&quot;' value='Impressions Served Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;' value='Impressions Served Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;' value='Impressions Served Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;' value='Impressions Served Delta     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' value='Impressions Served Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - \%D P28Days:qk]&quot;' value='Page CTR Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PQTD:qk]&quot;' value='Page CTR Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;' value='Page CTR Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;' value='Page CTR Delta     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - 28Days:qk]&quot;' value='Page CTR  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - QTD:qk]&quot;' value='Page CTR   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Day:qk]&quot;' value='Page CTR' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;' value='Page CTR ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;' value='Page CTR    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available - \%D P28Days:qk]&quot;' value='Pages Available Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;' value='Pages Available Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;' value='Pages Available Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;' value='Pages Available Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' value='Pages Available Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served - \%D P28Days:qk]&quot;' value='Pages Served Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;' value='Pages Served Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;' value='Pages Served Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;' value='Pages Served Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' value='Pages Served Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D P28Days:qk]&quot;' value='Served eCPM Delta  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PQTD:qk]&quot;' value='Served eCPM Delta   ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;' value='Served eCPM Delta ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;' value='Served eCPM Delta    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - 28Days:qk]&quot;' value='Served eCPM  ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - QTD:qk]&quot;' value='Served eCPM    ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Day:qk]&quot;' value='Served eCPM' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;' value='Served eCPM ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;' value='Served eCPM     ' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' value='Served eCPM Delta' />
          <alias key='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' value='Served eCPM   ' />
          <alias key='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' value='Budget' />
          <alias key='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' value='Budget Delta' />
        </aliases>
      </column>
      <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - MTD]-[Ads per Page - PMTD])/[Ads per Page - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - 28Days] - [Ads per Page - S28DaysPY])/[Ads per Page - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Day]-[Ads per Page - SDPY])/[Ads per Page - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - MTD] - [Ads per Page - SMTDPY])/[Ads per Page - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - QTD] - [Ads per Page - SQTDPY])/[Ads per Page - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Ads per Page - Ref Week] - [Ads per Page - SWPY])/[Ads per Page - SWPY]' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - MTD])/sum([Pages Served - MTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - P28Days])/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PMTD])/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PQTD])/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PW])/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - PYTD])/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - Ref Day])/sum([Pages Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - S28DaysPY])/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SDPW])/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' name='[Ads per Page - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SDPY])/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SMTDPY])/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SQTDPY])/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - SWPY])/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Auction Participant Count - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Auction Participant Count - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Auction Participant Count - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - 28Days]) - sum([Auction Participant Count - P28Days]))/sum([Auction Participant Count - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - MTD]) - sum([Auction Participant Count - PMTD]))/sum([Auction Participant Count - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - QTD]) - sum([Auction Participant Count - PQTD]))/sum([Auction Participant Count - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - Ref Week])-sum([Auction Participant Count - PW]))/sum([Auction Participant Count - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - YTD])-sum([Auction Participant Count - PYTD]))/sum([Auction Participant Count - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - 28Days])-sum([Auction Participant Count - S28DaysPY]))/sum([Auction Participant Count - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - Ref Day])-sum([Auction Participant Count - SDPW]))/sum([Auction Participant Count - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - Ref Day])-sum([Auction Participant Count - SDPY]))/sum([Auction Participant Count - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - MTD])-sum([Auction Participant Count - SMTDPY]))/sum([Auction Participant Count - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - QTD])-sum([Auction Participant Count - SQTDPY]))/sum([Auction Participant Count - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Auction Participant Count - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Auction Participant Count - Ref Week])-sum([Auction Participant Count - SWPY]))/sum([Auction Participant Count - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Auction Participant Count] &#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Auction Participant Count] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Auction Participant Count] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Auction Participant Count] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Auction Participant Count] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Auction Participant Count] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Auction Participant Count] END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Auction Participant Count] END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Auction Participant Count] END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Auction Participant Count - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Auction Participant Count - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Auction Participant Count]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Auction Participant Count for Table' datatype='integer' name='[Auction Participant Count for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Auction Participant Count - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Auction Participant Count - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Auction Participant Count - MTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - 28Days]-[Available eCPM - P28Days])/[Available eCPM - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - MTD]-[Available eCPM - PMTD])/[Available eCPM - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - QTD]-[Available eCPM - PQTD])/[Available eCPM - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - Ref Week]-[Available eCPM - PW])/[Available eCPM - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - YTD]-[Available eCPM - PYTD])/[Available eCPM - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - 28Days] - [Available eCPM - S28DaysPY])/[Available eCPM - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - Ref Day]-[Available eCPM - SDPW])/[Available eCPM - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - Ref Day] - [Available eCPM - SDPY])/[Available eCPM - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - MTD] - [Available eCPM - SMTDPY])/[Available eCPM - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - QTD] - [Available eCPM - SQTDPY])/[Available eCPM - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Available eCPM - Ref Week] - [Available eCPM - SWPY])/[Available eCPM - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Available - MTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Pages Available - P28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Pages Available - PMTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Pages Available - PQTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Pages Available - PW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Pages Available - PYTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Available - Ref Day])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Pages Available - S28DaysPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Pages Available - SDPW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Pages Available - SDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Pages Available - SMTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Pages Available - SQTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Pages Available - SWPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Available eCPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
      </column>
      <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
      </column>
      <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
      </column>
      <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - 28Days] - [CPC - S28DaysPY])/[CPC - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPY])/[CPC - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - MTD] - [CPC - SMTDPY])/[CPC - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - QTD] - [CPC - SQTDPY])/[CPC - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CPC - Ref Week] - [CPC - SWPY])/[CPC - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Clicks - MTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Clicks - P28Days])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Clicks - PMTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Clicks - PQTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Clicks - PW])' />
      </column>
      <column datatype='real' name='[CPC - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Clicks - PYTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Clicks - Ref Day])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Clicks - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Clicks - SDPW])' />
      </column>
      <column datatype='real' name='[CPC - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Clicks - SDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Clicks - SMTDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Clicks - SQTDPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Clicks - SWPY])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
      </column>
      <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - 28Days] - [CTR - S28DaysPY])/[CTR - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Day] - [CTR - SDPY])/[CTR - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - MTD] - [CTR - SMTDPY])/[CTR - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - QTD] - [CTR - SQTDPY])/[CTR - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([CTR - Ref Week] - [CTR - SWPY])/[CTR - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Impressions Served - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - P28Days])/sum([Impressions Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PMTD])/sum([Impressions Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PQTD])/sum([Impressions Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PW])/sum([Impressions Served - PW])' />
      </column>
      <column datatype='real' name='[CTR - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PYTD])/sum([Impressions Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Impressions Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - S28DaysPY])/sum([Impressions Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPW])/sum([Impressions Served - SDPW])' />
      </column>
      <column datatype='real' name='[CTR - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPY])/sum([Impressions Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SMTDPY])/sum([Impressions Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SQTDPY])/sum([Impressions Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SWPY])/sum([Impressions Served - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
      </column>
      <column caption='Filter for GDS Ad Unit Type' datatype='string' name='[Calculation_0750102131316031]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 4] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Parameter 4],&quot;Total&quot;) THEN IF [Parameters].[Parameter 4] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 4] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Filter for OTA Publisher' datatype='string' name='[Calculation_1850102131152453]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 3] = &quot;OWW&quot; OR [Parameters].[Parameter 3] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 3] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Filter for GDS Publisher' datatype='string' name='[Calculation_5050102131026937]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;OWW&quot; OR [Parameters].[Parameter 2] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 2] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 2] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Filter for OTA Ad Unit Type' datatype='string' name='[Calculation_6870102131437484]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[GDS Ad Unit Type (copy)] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[GDS Ad Unit Type (copy)],&quot;Total&quot;) THEN IF [Parameters].[GDS Ad Unit Type (copy)] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[GDS Ad Unit Type (copy)] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - MTD]) - sum([Clicks - PMTD]))/sum([Clicks - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - 28Days])-sum([Clicks - S28DaysPY]))/sum([Clicks - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPW]))/sum([Clicks - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPY]))/sum([Clicks - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - MTD])-sum([Clicks - SMTDPY]))/sum([Clicks - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - QTD])-sum([Clicks - SQTDPY]))/sum([Clicks - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicks - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - SWPY]))/sum([Clicks - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Clicks] &#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Clicks] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Clicks] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Clicks] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' name='[Clicks - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Clicks - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
      </column>
      <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='YEAR([Ref Day])' />
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Table]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN IF [Date] = [Ref Day] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;    WHEN &quot;Week&quot; THEN IF [Date] &lt;= [Ref Day] &#13;&#10;                        AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) &#13;&#10;                        THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;    WHEN &quot;Month&quot; THEN IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;                        AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;                        THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year by Day Only]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[MM] + &quot;-&quot; + [DD]' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - MTD]-[Fill Rate - PMTD])/[Fill Rate - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - 28Days] - [Fill Rate - S28DaysPY])/[Fill Rate - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Day]-[Fill Rate - SDPW])/[Fill Rate - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Day] - [Fill Rate - SDPY])/[Fill Rate - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - MTD] - [Fill Rate - SMTDPY])/[Fill Rate - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - QTD] - [Fill Rate - SQTDPY])/[Fill Rate - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Fill Rate - Ref Week] - [Fill Rate - SWPY])/[Fill Rate - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - MTD])/sum([Pages Available - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - P28Days])/sum([Pages Available - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PMTD])/sum([Pages Available - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PQTD])/sum([Pages Available - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PW])/sum([Pages Available - PW])' />
      </column>
      <column datatype='real' name='[Fill Rate - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - PYTD])/sum([Pages Available - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - Ref Day])/sum([Pages Available - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - S28DaysPY])/sum([Pages Available - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SDPW])/sum([Pages Available - SDPW])' />
      </column>
      <column datatype='real' name='[Fill Rate - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SDPY])/sum([Pages Available - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SMTDPY])/sum([Pages Available - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SQTDPY])/sum([Pages Available - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - SWPY])/sum([Pages Available - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
      </column>
      <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
      </column>
      <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
      </column>
      <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
      </column>
      <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - S28DaysPY]))/sum([Gross Media Revenue - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day])-sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPY]))/sum([Gross Media Revenue - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - SMTDPY]))/sum([Gross Media Revenue - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD])-sum([Gross Media Revenue - SQTDPY]))/sum([Gross Media Revenue - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - SWPY]))/sum([Gross Media Revenue - SWPY])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Spend] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Spend] END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Spend] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ATTR(DATEPART(&apos;dayofyear&apos;,[Date])) &gt;= 7 THEN&#13;&#10;WINDOW_AVG(SUM([Spend]), -6, 0)&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
      </column>
      <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - 28Days]-[Hotels per Auction - P28Days])/[Hotels per Auction - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - MTD]-[Hotels per Auction - PMTD])/[Hotels per Auction - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - QTD]-[Hotels per Auction - PQTD])/[Hotels per Auction - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - Ref Week]-[Hotels per Auction - PW])/[Hotels per Auction - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - YTD]-[Hotels per Auction - PYTD])/[Hotels per Auction - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - 28Days] - [Hotels per Auction - S28DaysPY])/[Hotels per Auction - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - Ref Day]-[Hotels per Auction - SDPW])/[Hotels per Auction - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - Ref Day]-[Hotels per Auction - SDPY])/[Hotels per Auction - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - MTD] - [Hotels per Auction - SMTDPY])/[Hotels per Auction - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - QTD] - [Hotels per Auction - SQTDPY])/[Hotels per Auction - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Hotels per Auction - Ref Week] - [Hotels per Auction - SWPY])/[Hotels per Auction - SWPY]' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - 28Days])/sum([Pages Available - 28Days])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - MTD])/sum([Pages Available - MTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - P28Days])/sum([Pages Available - P28Days])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - PMTD])/sum([Pages Available - PMTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - PQTD])/sum([Pages Available - PQTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - PW])/sum([Pages Available - PW])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - PYTD])/sum([Pages Available - PYTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - QTD])/sum([Pages Available - QTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - Ref Day])/sum([Pages Available - Ref Day])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - Ref Week])/sum([Pages Available - Ref Week])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - S28DaysPY])/sum([Pages Available - S28DaysPY])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - SDPW])/sum([Pages Available - SDPW])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - SDPY])/sum([Pages Available - SDPY])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - SMTDPY])/sum([Pages Available - SMTDPY])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - SQTDPY])/sum([Pages Available - SQTDPY])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - SWPY])/sum([Pages Available - SWPY])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count - YTD])/sum([Pages Available - YTD])' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Participant Count])/sum([Pages Available])' scope-isolation='false' />
      </column>
      <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - MTD]) - sum([Impressions Served - PMTD]))/sum([Impressions Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - 28Days])-sum([Impressions Served - S28DaysPY]))/sum([Impressions Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPW]))/sum([Impressions Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPY]))/sum([Impressions Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - MTD])-sum([Impressions Served - SMTDPY]))/sum([Impressions Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - QTD])-sum([Impressions Served - SQTDPY]))/sum([Impressions Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - SWPY]))/sum([Impressions Served - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Impressions Served] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Impressions Served] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;THEN [Impressions Served] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Impressions Served] END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions Served - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='string' name='[Label - Pub and Ad Unit]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE([Parameters].[Publisher] + &quot; &quot; + [Parameters].[Ad Unit Type], &quot;Total Total&quot;, &quot;Total&quot;)' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Label - Total]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Total&quot;' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Gross Media Revenue - %D SWPY]' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - 28Days]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - 28Days]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - MTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - MTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - QTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - QTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Day]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Day]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Week]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Week]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - YTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - YTD]*0.752&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - PMTD])/[Page CTR - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - S28DaysPY])/[Page CTR - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPW])/[Page CTR - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPY])/[Page CTR - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - SMTDPY])/[Page CTR - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - SQTDPY])/[Page CTR - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Page CTR - Ref Week] - [Page CTR - SWPY])/[Page CTR - SWPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Pages Served - MTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - P28Days])/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PMTD])/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PQTD])/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PW])/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PYTD])/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Pages Served - Ref Day])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - S28DaysPY])/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPW])/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPY])/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SMTDPY])/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SQTDPY])/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SWPY])/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
      </column>
      <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - 28Days])-sum([Pages Available - S28DaysPY]))/sum([Pages Available - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPY]))/sum([Pages Available - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - MTD])-sum([Pages Available - SMTDPY]))/sum([Pages Available - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - QTD])-sum([Pages Available - SQTDPY]))/sum([Pages Available - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - SWPY]))/sum([Pages Available - SWPY])' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Pages Available] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Pages Available] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Pages Available] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Pages Available] END' />
      </column>
      <column datatype='integer' name='[Pages Available - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
      </column>
      <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - MTD]) - sum([Pages Served - PMTD]))/sum([Pages Served - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - 28Days])-sum([Pages Served - S28DaysPY]))/sum([Pages Served - S28DaysPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPW]))/sum([Pages Served - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPY]))/sum([Pages Served - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - MTD])-sum([Pages Served - SMTDPY]))/sum([Pages Served - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - QTD])-sum([Pages Served - SQTDPY]))/sum([Pages Served - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - SWPY]))/sum([Pages Served - SWPY])' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-55,[Ref Day]) AND [Date] &lt;= DATEADD(&apos;day&apos;,-28,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Pages Served] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Pages Served] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Pages Served] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;year&apos;,-1,DATEADD(&apos;day&apos;,-27,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Pages Served] END' />
      </column>
      <column datatype='integer' name='[Pages Served - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Month Name' datatype='string' name='[Previous Month Name (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='string' name='[Previous Quarter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,DATEADD(&apos;quarter&apos;,-1,[Ref Day])))' />
      </column>
      <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Current Year]-1' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day]-7' />
      </column>
      <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
      </column>
      <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
      </column>
      <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - 28Days]-[Served eCPM - P28Days])/[Served eCPM - P28Days]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - MTD]-[Served eCPM - PMTD])/[Served eCPM - PMTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - QTD]-[Served eCPM - PQTD])/[Served eCPM - PQTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - Ref Week]-[Served eCPM - PW])/[Served eCPM - PW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - YTD]-[Served eCPM - PYTD])/[Served eCPM - PYTD]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - 28Days] - [Served eCPM - S28DaysPY])/[Served eCPM - S28DaysPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - Ref Day]-[Served eCPM - SDPW])/[Served eCPM - SDPW]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - Ref Day]-[Served eCPM - SDPY])/[Served eCPM - SDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - MTD] - [Served eCPM - SMTDPY])/[Served eCPM - SMTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - QTD] - [Served eCPM - SQTDPY])/[Served eCPM - SQTDPY]' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Served eCPM - Ref Week] - [Served eCPM - SWPY])/[Served eCPM - SWPY]' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - 28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Served - MTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - P28Days]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - P28Days])/sum([Pages Served - P28Days])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PMTD])/sum([Pages Served - PMTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PQTD])/sum([Pages Served - PQTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PW])/sum([Pages Served - PW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - PYTD])/sum([Pages Served - PYTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Served - Ref Day])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - S28DaysPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - S28DaysPY])/sum([Pages Served - S28DaysPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPW])/sum([Pages Served - SDPW])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SDPY])/sum([Pages Served - SDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SMTDPY])/sum([Pages Served - SMTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SQTDPY])/sum([Pages Served - SQTDPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - SWPY])/sum([Pages Served - SWPY])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Served eCPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Pages Served])*1000' />
      </column>
      <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' name='[Tornado Measure - Day ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - Day])' />
      </column>
      <column datatype='real' name='[Tornado Measure - Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Day] - [Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Day] - [CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Day] - [CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Day] - [Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Day] - [CPC - SDPW])/[CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Day] - [CTR - SDPW])/[CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Day] - [Fill Rate - SDPW])/[Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Tornado Measure - MTD ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - MTD])' />
      </column>
      <column datatype='real' name='[Tornado Measure - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - MTD] - [Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - MTD] - [CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - MTD] - [CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - MTD] - [Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - MTD]) - sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - MTD] - [Ads per Page - PMTD])/[Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - MTD] - [CPC - PMTD])/[CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - MTD] - [Fill Rate - PMTD])/[Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Tornado Measure - Week ABS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS([Tornado Measure - Week])' />
      </column>
      <column datatype='real' name='[Tornado Measure - Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Week] - [Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Week] - [CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Week] - [CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Week] - [Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Week]) - sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Week] - [Ads per Page - PW])/[Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Week] - [CPC - PW])/[CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Week] - [CTR - PW])/[CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Week] - [Fill Rate - PW])/[Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Week]) - sum([Pages Available - PW]))/sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Zero]' role='measure' type='ordinal'>
      </column>
      <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
      <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - Ref Day]' derivation='Sum' name='[sum:Clicks - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - Ref Day]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - Ref Day]' derivation='Sum' name='[sum:Impressions Served - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Net Media Revenue - Ref Day]' derivation='Sum' name='[sum:Net Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - Ref Day]' derivation='Sum' name='[sum:Pages Available - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - Ref Day]' derivation='Sum' name='[sum:Pages Served - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - Ref Day]' derivation='User' name='[usr:Ads per Page - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - %D P28Days]' derivation='User' name='[usr:Available eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - %D PQTD]' derivation='User' name='[usr:Available eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - %D PW]' derivation='User' name='[usr:Available eCPM - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - %D PYTD]' derivation='User' name='[usr:Available eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - 28Days]' derivation='User' name='[usr:Available eCPM - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - QTD]' derivation='User' name='[usr:Available eCPM - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - Ref Day]' derivation='User' name='[usr:Available eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - Ref Week]' derivation='User' name='[usr:Available eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM - YTD]' derivation='User' name='[usr:Available eCPM - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - Ref Day]' derivation='User' name='[usr:CPC - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - Ref Day]' derivation='User' name='[usr:CTR - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - Ref Day]' derivation='User' name='[usr:Fill Rate - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - Ref Day]' derivation='User' name='[usr:Page CTR - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - %D P28Days]' derivation='User' name='[usr:Served eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - %D PQTD]' derivation='User' name='[usr:Served eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - %D PW]' derivation='User' name='[usr:Served eCPM - %D PW:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - %D PYTD]' derivation='User' name='[usr:Served eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - 28Days]' derivation='User' name='[usr:Served eCPM - 28Days:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - QTD]' derivation='User' name='[usr:Served eCPM - QTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - Ref Day]' derivation='User' name='[usr:Served eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - Ref Week]' derivation='User' name='[usr:Served eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM - YTD]' derivation='User' name='[usr:Served eCPM - YTD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\ssn_dashboard__publisher_data.tde' schema='Extract' tablename='Extract' update-time='3/13/15 6:05:58 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Blank]' formula='IF 1=0 THEN 1 END' />
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[Date without Year by Day Only]' formula='[MM] + &quot;-&quot; + [DD]' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
            <calculation column='[Previous Month Name (copy)]' formula='CASE MONTH([Date])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='5271360' timestamp-start='2015-03-13 18:05:55.862000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.342527' measure-ordering='alphabetic' measure-percentage='0.3879' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#67bf5c'>
              <bucket>2012</bucket>
            </map>
            <map to='#729ece'>
              <bucket>2010</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>2015</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>2011</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Breakdown Color:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Martini Package Page - Travelocity&quot;</bucket>
            </map>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Package List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Top 10&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rest of US&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;HotelClub&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Total Details Page&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Hotel List Page - RatesToGo&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Worldspan&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Apollo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Apollo List Page&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;HotelReservations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Package List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Package List Page - Travelocity&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Hotel List Page - Travelocity WebApp&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;RatesToGo&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Galileo List Page&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Hotel List Page - Travelocity GT&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;HotelReservations.com - SSN - Hotel - OP - List Page&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Galileo&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Hipmunk - SSN - Hotel - OP - List Page&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Hotel List Page - Orbitz Global - Mobile&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;11 to 40&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Total List Page&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Ad Unit Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hipmunk - SSN - Hotel - OP - List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
            <member value='&quot;Hotel List Page - RatesToGo&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;HotelReservations.com - SSN - Hotel - OP - List Page&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - CheapTickets&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Breakdown]' param-domain-type='list' role='measure' type='nominal' value='&quot;Ad Unit&quot;'>
          <calculation class='tableau' formula='&quot;Ad Unit&quot;' />
          <members>
            <member value='&quot;Site&quot;' />
            <member value='&quot;Page Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Difference Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Percent Difference&quot;'>
          <calculation class='tableau' formula='&quot;Percent Difference&quot;' />
          <members>
            <member value='&quot;Actual Difference&quot;' />
            <member value='&quot;Percent Difference&quot;' />
          </members>
        </column>
        <column caption='OTA Ad Unit Type' datatype='string' name='[GDS Ad Unit Type (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - CheapTickets&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Market]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Aberdeen&quot;' />
            <member value='&quot;Abu Dhabi&quot;' />
            <member value='&quot;Adelaide&quot;' />
            <member value='&quot;Albany&quot;' />
            <member value='&quot;Albuquerque&quot;' />
            <member value='&quot;Amsterdam&quot;' />
            <member value='&quot;Anchorage&quot;' />
            <member value='&quot;Asheville&quot;' />
            <member value='&quot;Aspen&quot;' />
            <member value='&quot;Athens&quot;' />
            <member value='&quot;Atlanta&quot;' />
            <member value='&quot;Atlantic City&quot;' />
            <member value='&quot;Auckland&quot;' />
            <member value='&quot;Austin&quot;' />
            <member value='&quot;Bali&quot;' />
            <member value='&quot;Baltimore&quot;' />
            <member value='&quot;Bangkok&quot;' />
            <member value='&quot;Barcelona&quot;' />
            <member value='&quot;Beijing&quot;' />
            <member value='&quot;Berlin&quot;' />
            <member value='&quot;Big Island&quot;' />
            <member value='&quot;Biloxi&quot;' />
            <member value='&quot;Birmingham&quot;' />
            <member value='&quot;Bloemfontein&quot;' />
            <member value='&quot;Boise&quot;' />
            <member value='&quot;Bologna&quot;' />
            <member value='&quot;Boston&quot;' />
            <member value='&quot;Branson&quot;' />
            <member value='&quot;Breckenridge&quot;' />
            <member value='&quot;Brisbane&quot;' />
            <member value='&quot;Brussels&quot;' />
            <member value='&quot;Budapest&quot;' />
            <member value='&quot;Buenos Aires&quot;' />
            <member value='&quot;Buffalo&quot;' />
            <member value='&quot;Calgary&quot;' />
            <member value='&quot;Cancun&quot;' />
            <member value='&quot;Cape Town&quot;' />
            <member value='&quot;Charleston&quot;' />
            <member value='&quot;Charlotte&quot;' />
            <member value='&quot;Chicago&quot;' />
            <member value='&quot;Cincinnati&quot;' />
            <member value='&quot;Cleveland&quot;' />
            <member value='&quot;Columbus&quot;' />
            <member value='&quot;Copenhagen&quot;' />
            <member value='&quot;Corpus Christi&quot;' />
            <member value='&quot;Dallas&quot;' />
            <member value='&quot;Daytona Beach&quot;' />
            <member value='&quot;Delhi&quot;' />
            <member value='&quot;Denver&quot;' />
            <member value='&quot;Des Moines&quot;' />
            <member value='&quot;Detroit&quot;' />
            <member value='&quot;Dubai&quot;' />
            <member value='&quot;Dublin&quot;' />
            <member value='&quot;Durban&quot;' />
            <member value='&quot;Dusseldorf&quot;' />
            <member value='&quot;East London&quot;' />
            <member value='&quot;Edinburgh&quot;' />
            <member value='&quot;Edmonton&quot;' />
            <member value='&quot;Flagstaff&quot;' />
            <member value='&quot;Florence&quot;' />
            <member value='&quot;Florida Keys&quot;' />
            <member value='&quot;Fort Lauderdale&quot;' />
            <member value='&quot;Fort Myers&quot;' />
            <member value='&quot;Frankfurt&quot;' />
            <member value='&quot;Geneva&quot;' />
            <member value='&quot;Gold Coast&quot;' />
            <member value='&quot;Grand Rapids&quot;' />
            <member value='&quot;Guanacaste&quot;' />
            <member value='&quot;Guangzhou&quot;' />
            <member value='&quot;Halifax&quot;' />
            <member value='&quot;Hamburg&quot;' />
            <member value='&quot;Hartford&quot;' />
            <member value='&quot;Hilton Head&quot;' />
            <member value='&quot;Ho Chi Minh City&quot;' />
            <member value='&quot;Hong Kong&quot;' />
            <member value='&quot;Honolulu&quot;' />
            <member value='&quot;Houston&quot;' />
            <member value='&quot;Indianapolis&quot;' />
            <member value='&quot;Istanbul&quot;' />
            <member value='&quot;Jacksonville&quot;' />
            <member value='&quot;Jakarta&quot;' />
            <member value='&quot;Johannesburg&quot;' />
            <member value='&quot;Kansas City&quot;' />
            <member value='&quot;Kauai&quot;' />
            <member value='&quot;Kimberley&quot;' />
            <member value='&quot;Knoxville&quot;' />
            <member value='&quot;Kuala Lumpur&quot;' />
            <member value='&quot;Lake Tahoe&quot;' />
            <member value='&quot;Lancaster&quot;' />
            <member value='&quot;Las Vegas&quot;' />
            <member value='&quot;Lexington&quot;' />
            <member value='&quot;Lisbon&quot;' />
            <member value='&quot;London&quot;' />
            <member value='&quot;Los Angeles&quot;' />
            <member value='&quot;Los Cabos&quot;' />
            <member value='&quot;Louisville&quot;' />
            <member value='&quot;Macau&quot;' />
            <member value='&quot;Madison&quot;' />
            <member value='&quot;Madrid&quot;' />
            <member value='&quot;Manchester&quot;' />
            <member value='&quot;Manila&quot;' />
            <member value='&quot;Maui&quot;' />
            <member value='&quot;Melbourne&quot;' />
            <member value='&quot;Memphis&quot;' />
            <member value='&quot;Mexico City&quot;' />
            <member value='&quot;Miami&quot;' />
            <member value='&quot;Milan&quot;' />
            <member value='&quot;Milwaukee&quot;' />
            <member value='&quot;Minneapolis&quot;' />
            <member value='&quot;Monterey&quot;' />
            <member value='&quot;Montreal&quot;' />
            <member value='&quot;Moscow&quot;' />
            <member value='&quot;Mumbai&quot;' />
            <member value='&quot;Munich&quot;' />
            <member value='&quot;Myrtle Beach&quot;' />
            <member value='&quot;Naples&quot;' />
            <member value='&quot;Nashville&quot;' />
            <member value='&quot;Nelspruit&quot;' />
            <member value='&quot;New Orleans&quot;' />
            <member value='&quot;New York&quot;' />
            <member value='&quot;Newport&quot;' />
            <member value='&quot;Niagara Falls&quot;' />
            <member value='&quot;Nice&quot;' />
            <member value='&quot;Ocean City&quot;' />
            <member value='&quot;Oklahoma City&quot;' />
            <member value='&quot;Omaha&quot;' />
            <member value='&quot;Orange County&quot;' />
            <member value='&quot;Orlando&quot;' />
            <member value='&quot;Osaka&quot;' />
            <member value='&quot;Other&quot;' />
            <member value='&quot;Palm Beach&quot;' />
            <member value='&quot;Palm Springs&quot;' />
            <member value='&quot;Panama City&quot;' />
            <member value='&quot;Paris&quot;' />
            <member value='&quot;Park City&quot;' />
            <member value='&quot;Pensacola&quot;' />
            <member value='&quot;Perth&quot;' />
            <member value='&quot;Philadelphia&quot;' />
            <member value='&quot;Phoenix&quot;' />
            <member value='&quot;Phuket&quot;' />
            <member value='&quot;Pittsburgh&quot;' />
            <member value='&quot;Polokwane&quot;' />
            <member value='&quot;Port Elizabeth&quot;' />
            <member value='&quot;Portland&quot;' />
            <member value='&quot;Prague&quot;' />
            <member value='&quot;Pretoria&quot;' />
            <member value='&quot;Providence&quot;' />
            <member value='&quot;Puerto Plata&quot;' />
            <member value='&quot;Punta Cana&quot;' />
            <member value='&quot;Raleigh-Durham&quot;' />
            <member value='&quot;Reno&quot;' />
            <member value='&quot;Rest of Argentina&quot;' />
            <member value='&quot;Rest of Australia&quot;' />
            <member value='&quot;Rest of Austria&quot;' />
            <member value='&quot;Rest of Belgium&quot;' />
            <member value='&quot;Rest of Brazil&quot;' />
            <member value='&quot;Rest of Canada&quot;' />
            <member value='&quot;Rest of Chile&quot;' />
            <member value='&quot;Rest of China&quot;' />
            <member value='&quot;Rest of Costa Rica&quot;' />
            <member value='&quot;Rest of Czech Republic&quot;' />
            <member value='&quot;Rest of Denmark&quot;' />
            <member value='&quot;Rest of Dominican Republic&quot;' />
            <member value='&quot;Rest of France&quot;' />
            <member value='&quot;Rest of Germany&quot;' />
            <member value='&quot;Rest of Greece&quot;' />
            <member value='&quot;Rest of Hong Kong&quot;' />
            <member value='&quot;Rest of Hungary&quot;' />
            <member value='&quot;Rest of India&quot;' />
            <member value='&quot;Rest of Indonesia&quot;' />
            <member value='&quot;Rest of Ireland&quot;' />
            <member value='&quot;Rest of Italy&quot;' />
            <member value='&quot;Rest of Japan&quot;' />
            <member value='&quot;Rest of Korea&quot;' />
            <member value='&quot;Rest of Malaysia&quot;' />
            <member value='&quot;Rest of Mexico&quot;' />
            <member value='&quot;Rest of Netherlands&quot;' />
            <member value='&quot;Rest of New Zealand&quot;' />
            <member value='&quot;Rest of Panama&quot;' />
            <member value='&quot;Rest of Philippines&quot;' />
            <member value='&quot;Rest of Portugal&quot;' />
            <member value='&quot;Rest of Puerto Rico&quot;' />
            <member value='&quot;Rest of Russian Federation&quot;' />
            <member value='&quot;Rest of Singapore&quot;' />
            <member value='&quot;Rest of South Africa&quot;' />
            <member value='&quot;Rest of Spain&quot;' />
            <member value='&quot;Rest of Sweden&quot;' />
            <member value='&quot;Rest of Switzerland&quot;' />
            <member value='&quot;Rest of Taiwan&quot;' />
            <member value='&quot;Rest of Thailand&quot;' />
            <member value='&quot;Rest of Turkey&quot;' />
            <member value='&quot;Rest of UAE&quot;' />
            <member value='&quot;Rest of UK&quot;' />
            <member value='&quot;Rest of US&quot;' />
            <member value='&quot;Rest of Vietnam&quot;' />
            <member value='&quot;Rest of World&quot;' />
            <member value='&quot;Richmond&quot;' />
            <member value='&quot;Rio De Janeiro&quot;' />
            <member value='&quot;Rome&quot;' />
            <member value='&quot;Sacramento&quot;' />
            <member value='&quot;Salt Lake City&quot;' />
            <member value='&quot;San Antonio&quot;' />
            <member value='&quot;San Diego&quot;' />
            <member value='&quot;San Francisco&quot;' />
            <member value='&quot;San Jose&quot;' />
            <member value='&quot;San Juan&quot;' />
            <member value='&quot;Santa Barbara&quot;' />
            <member value='&quot;Santa Cruz&quot;' />
            <member value='&quot;Santa Fe&quot;' />
            <member value='&quot;Santiago&quot;' />
            <member value='&quot;Santo Domingo&quot;' />
            <member value='&quot;Sao Paulo&quot;' />
            <member value='&quot;Sarasota&quot;' />
            <member value='&quot;Savannah&quot;' />
            <member value='&quot;Seattle&quot;' />
            <member value='&quot;Sedona&quot;' />
            <member value='&quot;Seoul&quot;' />
            <member value='&quot;Shanghai&quot;' />
            <member value='&quot;Singapore&quot;' />
            <member value='&quot;South Padre Island&quot;' />
            <member value='&quot;Spokane&quot;' />
            <member value='&quot;St. Louis&quot;' />
            <member value='&quot;St. Petersburg&quot;' />
            <member value='&quot;Stockholm&quot;' />
            <member value='&quot;Sydney&quot;' />
            <member value='&quot;Taipei&quot;' />
            <member value='&quot;Tallahassee&quot;' />
            <member value='&quot;Tampa&quot;' />
            <member value='&quot;Tokyo&quot;' />
            <member value='&quot;Toronto&quot;' />
            <member value='&quot;Tucson&quot;' />
            <member value='&quot;Tulsa&quot;' />
            <member value='&quot;Vail&quot;' />
            <member value='&quot;Vallarta&quot;' />
            <member value='&quot;Vancouver&quot;' />
            <member value='&quot;Venice&quot;' />
            <member value='&quot;Vienna&quot;' />
            <member value='&quot;Virginia Beach&quot;' />
            <member value='&quot;Washington DC&quot;' />
            <member value='&quot;Williamsburg&quot;' />
            <member value='&quot;Wisconsin Dells&quot;' />
            <member value='&quot;Zurich&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Metric]' param-domain-type='list' role='measure' type='nominal' value='&quot;Pages Available&quot;'>
          <calculation class='tableau' formula='&quot;Pages Available&quot;' />
          <members>
            <member value='&quot;Pages Available&quot;' />
            <member value='&quot;Fill Rate&quot;' />
            <member value='&quot;Page CTR&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;Gross Media Revenue&quot;' />
            <member value='&quot;Ads per Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Channel Type' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OTA&quot;' />
            <member value='&quot;GDS&quot;' />
          </members>
        </column>
        <column caption='GDS Publisher' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column caption='OTA Publisher' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
          </members>
        </column>
        <column caption='GDS Ad Unit Type' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Total GDS List Page&quot;' />
            <member value='&quot;Total Hotel Details Page&quot;' />
            <member value='&quot;Total Hotel List Page&quot;' />
            <member value='&quot;Total Packages List Page&quot;' />
            <member value='&quot;Total SEM List Page&quot;' />
            <member value='&quot;Apollo List Page&quot;' />
            <member value='&quot;Galileo List Page&quot;' />
            <member value='&quot;Hotel Details Page - CheapTickets&quot;' />
            <member value='&quot;Hotel Details Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;Hotel List Page - ebookers.com&quot;' />
            <member value='&quot;Hotel List Page - ebookers.ie&quot;' />
            <member value='&quot;Hotel List Page - HotelClub&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Classic&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Hotel List Page - Orbitz Global - Mobile&quot;' />
            <member value='&quot;Hotel List Page - Travelocity GT&quot;' />
            <member value='&quot;Hotel List Page - Travelocity WebApp&quot;' />
            <member value='&quot;Martini Package Page - Travelocity&quot;' />
            <member value='&quot;Package List Page - CheapTickets&quot;' />
            <member value='&quot;Package List Page - Orbitz Global&quot;' />
            <member value='&quot;Package List Page - Travelocity&quot;' />
            <member value='&quot;SEM Hotel List Page - CheapTickets&quot;' />
            <member value='&quot;SEM Hotel List Page - Orbitz Global&quot;' />
            <member value='&quot;Worldspan List Page&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Publisher]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Apollo&quot;' />
            <member value='&quot;CheapTickets&quot;' />
            <member value='&quot;ebookers&quot;' />
            <member value='&quot;Galileo&quot;' />
            <member value='&quot;Hipmunk&quot;' />
            <member value='&quot;HotelClub&quot;' />
            <member value='&quot;HotelReservations&quot;' />
            <member value='&quot;Orbitz&quot;' />
            <member value='&quot;RatesToGo&quot;' />
            <member value='&quot;Travelocity&quot;' />
            <member value='&quot;Worldspan&quot;' />
            <member value='&quot;OWW&quot;' />
            <member value='&quot;Travelport&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2014-07-06#'>
          <calculation class='tableau' formula='#2014-07-06#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
        <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
        </column>
        <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <datasource-dependencies datasource='sold_hotels (copy)'>
        <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
        </column>
        <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
    </datasource>
    <datasource caption='sold_hotels' inline='true' name='sold_hotels (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select &#13;&#10;&#9;sold_hotels.Date,&#13;&#10;&#9;sold_hotels.&quot;SSN Channel Type&quot;,&#13;&#10;&#9;sold_hotels.&quot;Sold Hotels&quot;,&#13;&#10;&#9;budgets.&quot;Budget&quot;&#13;&#10;from&#13;&#10;(&#13;&#10;  select&#13;&#10;&#9;&#9;dates.date_in_et as Date,&#13;&#10;&#9;&#9;dates.ssn_channel_type as &quot;SSN Channel Type&quot;,&#13;&#10;&#9;&#9;sold_hotels_query.sold_hotels as &quot;Sold Hotels&quot;&#9;&#9;&#13;&#10;  from&#13;&#10;  (&#13;&#10;    select *&#13;&#10;    from&#13;&#10;    (&#13;&#10;      select&#13;&#10;        distinct(aggregation_level_date_in_et) as date_in_et&#13;&#10;      from intent_media_production.participating_advertisers&#13;&#10;    ) dates,&#13;&#10;    (&#13;&#10;      select&#13;&#10;        distinct(ssn_channel_type) as ssn_channel_type&#13;&#10;      from intent_media_production.entities&#13;&#10;      where ssn_channel_type is not null&#13;&#10;    ) ssn_channel_types&#13;&#10;  ) dates&#13;&#10;  left join&#13;&#10;  (&#13;&#10;    select&#13;&#10;      sold_date_in_et as date_in_et,&#13;&#10;      ssn_channel_type,&#13;&#10;      count(distinct(id)) as sold_hotels&#13;&#10;    from&#13;&#10;    (&#13;&#10;      select&#13;&#10;        id,&#13;&#10;        ssn_channel_type,&#13;&#10;        DATE(first_auction_participation at timezone &apos;America/New_York&apos;) as sold_date_in_et&#13;&#10;      from intent_media_production.entities&#13;&#10;      where entity_type = &apos;HotelSsrAdvertiser&apos;&#13;&#10;        and active = 1&#13;&#10;        and first_auction_participation is not null&#13;&#10;    ) sold_dates&#13;&#10;  group by &#13;&#10;    date_in_et, &#13;&#10;    ssn_channel_type&#13;&#10;  ) sold_hotels_query&#13;&#10;  on sold_hotels_query.date_in_et = dates.date_in_et&#13;&#10;  and sold_hotels_query.ssn_channel_type = dates.ssn_channel_type&#13;&#10;) sold_hotels&#13;&#10;left join&#13;&#10;(&#13;&#10;  select&#13;&#10;&#9;  pa.Date,&#13;&#10;&#9;  pa.&quot;SSN Channel Type&quot;,&#13;&#10;&#9;  sum(budgets_query.Budget) as Budget&#13;&#10;  from&#13;&#10;&#9;(&#13;&#10;    select&#13;&#10;      aggregation_level_date_in_et as Date,&#13;&#10;      e.ssn_channel_type as &quot;SSN Channel Type&quot;,&#13;&#10;      advertiser_id as &quot;Advertiser ID&quot;&#13;&#10;    from intent_media_production.participating_advertisers p&#13;&#10;    left join intent_media_production.entities e on e.id = p.advertiser_id&#13;&#10;    group by &#13;&#10;      aggregation_level_date_in_et, &#13;&#10;      e.ssn_channel_type, &#13;&#10;      advertiser_id&#13;&#10;  ) pa&#13;&#10;  left join &#9;&#13;&#10;&#9;(&#13;&#10;    select&#13;&#10;      latest.date_in_et,&#13;&#10;      latest.ssn_channel_type,&#13;&#10;      latest.advertiser_id,&#13;&#10;      allocated_budget as &quot;Budget&quot;&#13;&#10;    from&#13;&#10;    (&#13;&#10;      select&#13;&#10;        date_in_et,&#13;&#10;        e.ssn_channel_type,&#13;&#10;        advertiser_id,&#13;&#10;        max(h.id) as latest_id&#13;&#10;      from intent_media_production.historical_budgets h&#13;&#10;      left join intent_media_production.entities e on e.id = h.advertiser_id&#13;&#10;      group by &#13;&#10;        date_in_et, &#13;&#10;        e.ssn_channel_type, &#13;&#10;        advertiser_id&#13;&#10;    ) latest&#13;&#10;&#9;&#9;left join intent_media_production.historical_budgets hb &#13;&#10;&#9;&#9;on latest.date_in_et = hb.date_in_et &#13;&#10;&#9;&#9;&#9;and latest.advertiser_id = hb.advertiser_id&#13;&#10;&#9;&#9;&#9;and latest.latest_id = hb.id&#13;&#10;  ) budgets_query&#13;&#10;  on budgets_query.date_in_et = pa.Date&#13;&#10;    and budgets_query.ssn_channel_type = pa.&quot;SSN Channel Type&quot;&#13;&#10;    and budgets_query.advertiser_id = pa.&quot;Advertiser ID&quot;&#13;&#10;  group by Date, &quot;SSN Channel Type&quot;&#13;&#10;) budgets&#13;&#10;on budgets.Date = sold_hotels.Date&#13;&#10;and budgets.&quot;SSN Channel Type&quot; = sold_hotels.&quot;SSN Channel Type&quot;&#13;&#10;where sold_hotels.Date &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - MTD])-sum([Budget - PMTD]))/sum([Budget - PMTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - QTD]) - sum([Budget - PQTD]))/sum([Budget - PQTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Week])-sum([Budget - PW]))/sum([Budget - PW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - YTD])-sum([Budget - PYTD]))/sum([Budget - PYTD])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Day])-sum([Budget - SDPW]))/sum([Budget - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Day]) - sum([Budget - SDPY]))/sum([Budget - SDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - MTD])-sum([Budget - SMTDPY]))/sum([Budget - SMTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - QTD])-sum([Budget - SQTDPY]))/sum([Budget - SQTDPY])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Budget - %D SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([Budget - Ref Week])-sum([Budget - SWPY]))/sum([Budget - SWPY])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Budget] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Budget] END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - PQTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATEADD(&apos;quarter&apos;,-1,DATETRUNC(&apos;quarter&apos;,[Ref Day]))&#13;&#10;AND [Date] &lt;= DATEADD(&apos;quarter&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - PYTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;year&apos;, [Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1) &#13;&#10;THEN&#13;&#10;(IF [Date] &lt;= DATEADD(&apos;year&apos;, -1, [Ref Day]) &#13;&#10;THEN [Budget] &#13;&#10;END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - QTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] = DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Budget] END' />
      </column>
      <column datatype='real' name='[Budget - SMTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;month&apos;,[Date]) = DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) =( DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - SQTDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEPART(&apos;quarter&apos;,[Date]) = DATEPART(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND  [Date] &lt;=DATEADD(&apos;year&apos;,-1, [Ref Day])&#13;&#10;AND DATEPART(&apos;year&apos;,[Date]) = (DATEPART(&apos;year&apos;,[Ref Day])-1)&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Budget - SWPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &gt; DATEADD(&apos;year&apos;, -1, DATEADD(&apos;day&apos;, -7,[Ref Day])) AND [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day])&#13;&#10;THEN [Budget]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget - YTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Budget]&#13;&#10;END)&#13;&#10;END' />
      </column>
      <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[DD]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM([Sold Hotels]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='string' name='[MM]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Month Name]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Percent of Budget]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([active_hotels_with_budget (copy)].[Spend])/sum([Budget])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPM])/[Sold Hotels as of SDPM]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPQ]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPQ])/[Sold Hotels as of SDPQ]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of SDPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [SDPM] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of SDPQ]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [SDPQ] THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of SDPY]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= DATEADD(&apos;year&apos;,-1,[Ref Day]) THEN [Sold Hotels] END))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\ssn_dashboard__sold_hotels.tde' schema='Extract' tablename='Extract' update-time='3/13/15 6:18:20 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[DD]' formula='IF DAY([Date])&gt;9 THEN STR(DAY([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(DAY([Date]))&#13;&#10;END' />
            <calculation column='[MM]' formula='IF MONTH([Date])&gt;9 THEN STR(MONTH([Date]))&#13;&#10;ELSE &quot;0&quot; + STR(MONTH([Date]))&#13;&#10;END' />
            <calculation column='[Month Name]' formula='CASE MONTH([Date])&#13;&#10;    WHEN 1 THEN &apos;January&apos;&#13;&#10;    WHEN 2 THEN &apos;February&apos;&#13;&#10;    WHEN 3 THEN &apos;March&apos;&#13;&#10;    WHEN 4 THEN &apos;April&apos;&#13;&#10;    WHEN 5 THEN &apos;May&apos;&#13;&#10;    WHEN 6 THEN &apos;June&apos;&#13;&#10;    WHEN 7 THEN &apos;July&apos;&#13;&#10;    WHEN 8 THEN &apos;August&apos;&#13;&#10;    WHEN 9 THEN &apos;September&apos;&#13;&#10;    WHEN 10 THEN &apos;October&apos;&#13;&#10;    WHEN 11 THEN &apos;November&apos;&#13;&#10;    WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='3648' timestamp-start='2015-03-13 18:18:20.029000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.393103' measure-ordering='alphabetic' measure-percentage='0.435632' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[yr:Date:ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>2010</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>2012</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>2015</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>2014</bucket>
            </map>
            <map to='#d62728'>
              <bucket>2013</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>2011</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Aggregated By]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Channel Type' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Total&quot;'>
          <calculation class='tableau' formula='&quot;Total&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;OTA&quot;' />
            <member value='&quot;GDS&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='any' role='measure' type='quantitative' value='#2014-07-06#'>
          <calculation class='tableau' formula='#2014-07-06#' />
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
        <column datatype='real' name='[Spend]' role='measure' type='quantitative'>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='active_hotels_with_budget (copy)'>
      <datasources>
        <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
      </datasources>
      <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
        <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Country:nk]'>
        <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[active_hotels_with_budget (copy)].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Finance Region:nk]'>
        <groupfilter function='level-members' level='[none:Finance Region:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='market_data (copy)'>
      <datasources>
        <datasource caption='market_data' name='market_data (copy)' />
      </datasources>
      <datasource-dependencies datasource='market_data (copy)'>
        <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
        </column>
        <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
        </column>
        <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
        <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
        <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
        <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[market_data (copy)].[none:Country:nk]'>
        <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[market_data (copy)].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[market_data (copy)].[none:Filter for Ad Unit Type:nk]'>
        <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[market_data (copy)].[none:Filter for Channel Type:nk]'>
        <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[market_data (copy)].[none:Filter for Publisher:nk]'>
        <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[market_data (copy)].[none:Finance Region:nk]'>
        <groupfilter function='level-members' level='[none:Finance Region:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='publisher_data (copy)'>
      <datasources>
        <datasource caption='publisher_data' name='publisher_data (copy)' />
      </datasources>
      <datasource-dependencies datasource='publisher_data (copy)'>
        <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
        </column>
        <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
        </column>
        <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
        <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
        <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[publisher_data (copy)].[none:Breakdown Color:nk]'>
        <groupfilter from='&quot;Apollo&quot;' function='range' level='[none:Breakdown Color:nk]' to='&quot;Worldspan&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[publisher_data (copy)].[none:Country:nk]'>
        <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[publisher_data (copy)].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[publisher_data (copy)].[none:Finance Region:nk]'>
        <groupfilter function='level-members' level='[none:Finance Region:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[publisher_data (copy)].[none:Segment:nk]'>
        <groupfilter function='level-members' level='[none:Segment:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='sold_hotels (copy)'>
      <datasources>
        <datasource caption='sold_hotels' name='sold_hotels (copy)' />
      </datasources>
      <datasource-dependencies datasource='sold_hotels (copy)'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='quantitative' column='[sold_hotels (copy)].[none:Date:qk]' included-values='all'>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='28Days Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Past 28 Days through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;vs. Past 28 Days through &lt;[publisher_data (copy)].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - 28Days]-[Available eCPM - P28Days])/[Available eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - 28Days]-[Served eCPM - P28Days])/[Served eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='Day-Trunc' name='[tdy:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D P28Days]' derivation='User' name='[usr:Available eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - 28Days]' derivation='User' name='[usr:Available eCPM - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D P28Days]' derivation='User' name='[usr:Served eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - 28Days]' derivation='User' name='[usr:Served eCPM - 28Days:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D P28Days:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='54' />
            <format attr='height' field='[publisher_data (copy)].[none:Pub:nk]' value='48' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='true' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data (copy)].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPM:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Month Name:nk]' />
              <lod column='[publisher_data (copy)].[none:Previous Month Name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='28Days Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;[publisher_data (copy)].[none:Current Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data (copy)].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPM:qk]&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - 28Days]-[Ads per Page - P28Days])/[Ads per Page - P28Days]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - 28Days]-[Available eCPM - P28Days])/[Available eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Available - 28Days])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - 28Days]-[CPC - P28Days])/[CPC - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Clicks - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - 28Days] - [CTR - P28Days])/[CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Impressions Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - 28Days]) - sum([Clicks - P28Days]))/sum([Clicks - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - 28Days]-[Fill Rate - P28Days])/[Fill Rate - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - 28Days])/sum([Pages Available - 28Days])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - 28Days])-sum([Gross Media Revenue - P28Days]))/sum([Gross Media Revenue - P28Days])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - 28Days]) - sum([Impressions Served - P28Days]))/sum([Impressions Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - 28Days] - [Page CTR - P28Days])/[Page CTR - P28Days]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - 28Days])/sum([Pages Served - 28Days])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - 28Days]) - sum([Pages Available - P28Days]))/sum([Pages Available - P28Days])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - 28Days]) - sum([Pages Served - P28Days]))/sum([Pages Served - P28Days])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &gt;= DATEADD(&apos;day&apos;,-27,[Ref Day]) AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D P28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - 28Days]-[Served eCPM - P28Days])/[Served eCPM - P28Days]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - 28Days]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - 28Days])/sum([Pages Served - 28Days])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - 28Days]' derivation='Sum' name='[sum:Clicks - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - 28Days]' derivation='Sum' name='[sum:Gross Media Revenue - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - 28Days]' derivation='Sum' name='[sum:Impressions Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - 28Days]' derivation='Sum' name='[sum:Pages Available - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - 28Days]' derivation='Sum' name='[sum:Pages Served - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='Day-Trunc' name='[tdy:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D P28Days]' derivation='User' name='[usr:Ads per Page - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - 28Days]' derivation='User' name='[usr:Ads per Page - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D P28Days]' derivation='User' name='[usr:Available eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - 28Days]' derivation='User' name='[usr:Available eCPM - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D P28Days]' derivation='User' name='[usr:CPC - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - 28Days]' derivation='User' name='[usr:CPC - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D P28Days]' derivation='User' name='[usr:CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - 28Days]' derivation='User' name='[usr:CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D P28Days]' derivation='User' name='[usr:Clicks - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D P28Days]' derivation='User' name='[usr:Fill Rate - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - 28Days]' derivation='User' name='[usr:Fill Rate - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D P28Days]' derivation='User' name='[usr:Gross Media Revenue - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D P28Days]' derivation='User' name='[usr:Impressions Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D P28Days]' derivation='User' name='[usr:Page CTR - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - 28Days]' derivation='User' name='[usr:Page CTR - 28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D P28Days]' derivation='User' name='[usr:Pages Available - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D P28Days]' derivation='User' name='[usr:Pages Served - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D P28Days]' derivation='User' name='[usr:Served eCPM - %D P28Days:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - 28Days]' derivation='User' name='[usr:Served eCPM - 28Days:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D P28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - 28Days:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D P28Days:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D P28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - 28Days:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D P28Days:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='true' />
            <format attr='display' field='[publisher_data (copy)].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPM:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Month Name:nk]' />
              <lod column='[publisher_data (copy)].[none:Previous Month Name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Active Hotels YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Active Hotels Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget (copy)].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[usr:Active Hotels:qk]</rows>
        <cols>[active_hotels_with_budget (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Active and Sold Hotels'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Active and Sold Hotels in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' name='[Active Hotels]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels]' derivation='User' name='[usr:Active Hotels:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Sold Hotels]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Sold Hotels]' derivation='Sum' name='[cum:sum:Sold Hotels:qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[active_hotels_with_budget (copy)].[usr:Active Hotels:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[active_hotels_with_budget (copy)].[usr:Active Hotels:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget (copy)].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[sold_hotels (copy)].[cum:sum:Sold Hotels:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='4' y-axis-name='[active_hotels_with_budget (copy)].[usr:Active Hotels:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([sold_hotels (copy)].[cum:sum:Sold Hotels:qk] + [active_hotels_with_budget (copy)].[usr:Active Hotels:qk])</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Ref Day]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Ad CTR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:CTR:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[usr:CTR:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:CTR:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:CTR:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:CTR:qk] + [publisher_data (copy)].[usr:CTR:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ads per Page'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:Ads per Page:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[usr:Ads per Page:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:Ads per Page:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:Ads per Page:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:Ads per Page:qk] + [publisher_data (copy)].[usr:Ads per Page:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Ads per Page YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Ads per Page Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:Ads per Page:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Available eCPM'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='C1033%' name='[Available eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM]' derivation='User' name='[usr:Available eCPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:Available eCPM:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[usr:Available eCPM:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:Available eCPM:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:Available eCPM:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:Available eCPM:qk] + [publisher_data (copy)].[usr:Available eCPM:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Available eCPM YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Available eCPM Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='C1033%' name='[Available eCPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Pages Available])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Available eCPM]' derivation='User' name='[usr:Available eCPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:Available eCPM:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Budget per Hotel'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Average Budget per Hotel in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget])/[Active Hotels]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_6380106163627707]' derivation='User' name='[usr:Calculation_6380106163627707:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[active_hotels_with_budget (copy)].[none:Date:qk]' value='Date (top 4 graphs)'>
              <formatted-text>
                <run>Date (top 4 graphs)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[usr:Calculation_6380106163627707:qk]</rows>
        <cols>[active_hotels_with_budget (copy)].[none:Date Axis:qk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Ref Day]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Blank Title'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Æ &#10;</run>
            <run bold='true' fontsize='8'>Æ   &#10;   </run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Budget per Hotel YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Average Budget per Hotel Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column caption='Budget for Hotel' datatype='real' default-format='C1033%' name='[Calculation_6380106163627707]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget])/[Active Hotels]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_6380106163627707]' derivation='User' name='[usr:Calculation_6380106163627707:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[active_hotels_with_budget (copy)].[none:Date:qk]' value='Date (top 4 graphs)'>
              <formatted-text>
                <run>Date (top 4 graphs)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[usr:Calculation_6380106163627707:qk]</rows>
        <cols>[active_hotels_with_budget (copy)].[none:Date without Year:nk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Ref Day]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='CPC'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:CPC:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:CPC:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:CPC:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:CPC:qk] + [publisher_data (copy)].[usr:CPC:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='CPC YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CPC Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:CPC:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='CSV'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Impressions Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Pages Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Segment]' derivation='CountD' name='[ctd:Segment:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='None' name='[none:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served]' derivation='Sum' name='[sum:Impressions Served:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue]' derivation='Sum' name='[sum:Net Media Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served]' derivation='Sum' name='[sum:Pages Served:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[ctd:Segment:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='natural' column='[publisher_data (copy)].[none:Date:ok]' direction='DESC' />
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data (copy)].[none:Pages Available:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Pages Available:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='84' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[publisher_data (copy)].[none:Type of Ad Unit:nk]' value='200' />
            <format attr='height' field='[publisher_data (copy)].[:Measure Names]' value='38' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[none:Date:ok] / ([publisher_data (copy)].[none:Pub:nk] / ([publisher_data (copy)].[none:Site:nk] / ([publisher_data (copy)].[none:Type of Ad Unit:nk] / ([publisher_data (copy)].[none:Ad Unit:nk] / ([publisher_data (copy)].[none:Segment:nk] / [publisher_data (copy)].[none:Market Name:nk]))))))</rows>
        <cols>[publisher_data (copy)].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='CSV Data'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served])/sum([Pages Served])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Impressions Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Travelocity&quot; THEN&#13;&#10;[Spend]*0.7332&#13;&#10;ELSE&#13;&#10;[Spend]*0.752&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Pages Served]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='None' name='[none:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Impressions Served]' derivation='Sum' name='[sum:Impressions Served:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Net Media Revenue]' derivation='Sum' name='[sum:Net Media Revenue:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pages Served]' derivation='Sum' name='[sum:Pages Served:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Ads per Page]' derivation='User' name='[usr:Ads per Page:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <sort class='natural' column='[publisher_data (copy)].[none:Date:ok]' direction='DESC' />
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data (copy)].[none:Pages Available:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Pages Available:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[publisher_data (copy)].[none:Type of Ad Unit:nk]' value='200' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[none:Date:ok] / ([publisher_data (copy)].[none:Pub:nk] / ([publisher_data (copy)].[none:Site:nk] / ([publisher_data (copy)].[none:Type of Ad Unit:nk] / ([publisher_data (copy)].[none:Ad Unit:nk] / ([publisher_data (copy)].[none:Segment:nk] / ([publisher_data (copy)].[none:Market Name:nk] / ([publisher_data (copy)].[sum:Pages Available:ok] / ([publisher_data (copy)].[usr:Fill Rate:ok] / ([publisher_data (copy)].[sum:Pages Served:ok] / ([publisher_data (copy)].[usr:Ads per Page:ok] / ([publisher_data (copy)].[sum:Impressions Served:ok] / ([publisher_data (copy)].[usr:CTR:ok] / ([publisher_data (copy)].[sum:Clicks:ok] / ([publisher_data (copy)].[usr:CPC:ok] / ([publisher_data (copy)].[sum:Spend:ok] / [publisher_data (copy)].[sum:Net Media Revenue:ok]))))))))))))))))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='CTR YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CTR Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:CTR:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Clicked ROI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data (copy)].[usr:Clicked ROI:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data (copy)].[usr:Clicked ROI:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data (copy)].[usr:Clicked ROI:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data (copy)].[usr:Clicked ROI:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[usr:Clicked ROI:qk] + [market_data (copy)].[usr:Clicked ROI:qk])</rows>
        <cols>[market_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Clicked ROI YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Clicked ROI Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' name='[Clicked ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicked ROI]' derivation='User' name='[usr:Clicked ROI:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data (copy)].[usr:Clicked ROI:qk]</rows>
        <cols>[market_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Click'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data (copy)].[usr:Conversions per Click:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[market_data (copy)].[none:Breakdown Color:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data (copy)].[usr:Conversions per Click:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data (copy)].[usr:Conversions per Click:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[usr:Conversions per Click:qk] + [market_data (copy)].[usr:Conversions per Click:qk])</rows>
        <cols>[market_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Click YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Click Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' name='[Conversions per Click]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Conversions per Click]' derivation='User' name='[usr:Conversions per Click:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[market_data (copy)].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data (copy)].[usr:Conversions per Click:qk]</rows>
        <cols>[market_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Impression'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Impression</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data (copy)].[usr:Conversions per Impression:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data (copy)].[usr:Conversions per Impression:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data (copy)].[usr:Conversions per Impression:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[usr:Conversions per Impression:qk] + [market_data (copy)].[usr:Conversions per Impression:qk])</rows>
        <cols>[market_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Conversions per Impression YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Conversions per Impression Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' name='[Conversions per Impression]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Conversions per Impression]' derivation='User' name='[usr:Conversions per Impression:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data (copy)].[usr:Conversions per Impression:qk]</rows>
        <cols>[market_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Exposed ROI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[market_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[market_data (copy)].[usr:Exposed ROI:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[market_data (copy)].[usr:Exposed ROI:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[market_data (copy)].[usr:Exposed ROI:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[market_data (copy)].[usr:Exposed ROI:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[usr:Exposed ROI:qk] + [market_data (copy)].[usr:Exposed ROI:qk])</rows>
        <cols>[market_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Exposed ROI YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Exposed ROI Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Exposed ROI]' derivation='User' name='[usr:Exposed ROI:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Market:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[market_data (copy)].[usr:Exposed ROI:qk]</rows>
        <cols>[market_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Fill Rate YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Fill Rate Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data (copy)].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:Fill Rate:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='GDS Total'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column caption='Filter for GDS Ad Unit Type' datatype='string' name='[Calculation_0750102131316031]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 4] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Parameter 4],&quot;Total&quot;) THEN IF [Parameters].[Parameter 4] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 4] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Filter for GDS Publisher' datatype='string' name='[Calculation_5050102131026937]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;OWW&quot; OR [Parameters].[Parameter 2] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 2] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 2] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Label - Total]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Total&quot;' scope-isolation='false' />
            </column>
            <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0750102131316031]' derivation='None' name='[none:Calculation_0750102131316031:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_5050102131026937]' derivation='None' name='[none:Calculation_5050102131026937:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Label - Total]' derivation='None' name='[none:Label - Total:nk]' pivot='key' type='nominal' />
            <column-instance column='[SSN Channel Type]' derivation='None' name='[none:SSN Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_0750102131316031:nk]'>
            <groupfilter function='member' level='[none:Calculation_0750102131316031:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_5050102131026937:nk]'>
            <groupfilter function='member' level='[none:Calculation_5050102131026937:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:SSN Channel Type:nk]'>
            <groupfilter function='member' level='[none:SSN Channel Type:nk]' member='&quot;GDS&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:SSN Channel Type:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Calculation_0750102131316031:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_5050102131026937:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[none:Label - Total:nk]' value='84' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Label - Total:nk]' value='bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:SSN Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols>[publisher_data (copy)].[none:Label - Total:nk]</cols>
        <join-lod-include-overrides>
          <column>[active_hotels_with_budget (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='GDS by Market'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column caption='Filter for GDS Ad Unit Type' datatype='string' name='[Calculation_0750102131316031]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 4] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Parameter 4],&quot;Total&quot;) THEN IF [Parameters].[Parameter 4] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 4] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Filter for GDS Publisher' datatype='string' name='[Calculation_5050102131026937]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;OWW&quot; OR [Parameters].[Parameter 2] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 2] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 2] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0750102131316031]' derivation='None' name='[none:Calculation_0750102131316031:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_5050102131026937]' derivation='None' name='[none:Calculation_5050102131026937:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[SSN Channel Type]' derivation='None' name='[none:SSN Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_0750102131316031:nk]'>
            <groupfilter function='member' level='[none:Calculation_0750102131316031:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_5050102131026937:nk]'>
            <groupfilter function='member' level='[none:Calculation_5050102131026937:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:SSN Channel Type:nk]'>
            <groupfilter function='member' level='[none:SSN Channel Type:nk]' member='&quot;GDS&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:SSN Channel Type:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Calculation_0750102131316031:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_5050102131026937:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[none:Market Name:nk]' value='76' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='148' />
            <format attr='height' field='[publisher_data (copy)].[none:Market Name:nk]' value='20' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[publisher_data (copy)].[none:Market Name:nk]' value='bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:SSN Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols>[publisher_data (copy)].[none:Market Name:nk]</cols>
        <join-lod-include-overrides>
          <column>[active_hotels_with_budget (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[sum:Spend:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[sum:Spend:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[sum:Spend:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[sum:Spend:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[sum:Spend:qk] + [publisher_data (copy)].[sum:Spend:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue %'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[pcto:sum:Spend:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[pcto:sum:Spend:qk]</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Media Revenue YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Gross Media Revenue Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[sum:Spend:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gross Revenue Graph'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Publisher]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> Gross Revenue by Day</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date without Year by Day Only]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[MM] + &quot;-&quot; + [DD]' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Gross Media Revenue 7 Day Average]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ATTR(DATEPART(&apos;dayofyear&apos;,[Date])) &gt;= 7 THEN&#13;&#10;WINDOW_AVG(SUM([Spend]), -6, 0)&#13;&#10;END'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year by Day Only]' derivation='None' name='[none:Date without Year by Day Only:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue 7 Day Average]' derivation='User' name='[usr:Gross Media Revenue 7 Day Average:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' tc-options='NullIfIncomplete' />
            </column-instance>
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[publisher_data (copy)].[usr:Gross Media Revenue 7 Day Average:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[publisher_data (copy)].[usr:Gross Media Revenue 7 Day Average:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[publisher_data (copy)].[sum:Spend:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data (copy)].[yr:Date:ok]' value='Year'>
              <formatted-text>
                <run>Year</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[publisher_data (copy)].[none:Segment:nk]' value='Market Filter'>
              <formatted-text>
                <run>Market Filter</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.3010752201080322' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:Gross Media Revenue 7 Day Average:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.95150536298751831' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[sum:Spend:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[sum:Spend:qk] + [publisher_data (copy)].[usr:Gross Media Revenue 7 Day Average:qk])</rows>
        <cols>[publisher_data (copy)].[none:Date without Year by Day Only:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Hotels per Auction'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count])/sum([Pages Available])' scope-isolation='false' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction]' derivation='User' name='[usr:Hotels per Auction:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:Hotels per Auction:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[usr:Hotels per Auction:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='6'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='7' y-axis-name='[publisher_data (copy)].[usr:Hotels per Auction:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='8' y-axis-name='[publisher_data (copy)].[usr:Hotels per Auction:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:Hotels per Auction:qk] + [publisher_data (copy)].[usr:Hotels per Auction:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Key Performance Metrics Performance'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data (copy)].[sum:Pages Available for Table:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[sum:Pages Available for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[publisher_data (copy)].[:Measure Names]' value='bold' />
            <format attr='text-align' field='[publisher_data (copy)].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[publisher_data (copy)].[none:Segment:nk]' value='Market Segment'>
              <formatted-text>
                <run>Market Segment</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[publisher_data (copy)].[none:Market Name:nk]</rows>
        <cols>[publisher_data (copy)].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data (copy)].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - MTD])/sum([Pages Served - MTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Available - MTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Clicks - MTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Impressions Served - MTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - MTD])/sum([Pages Available - MTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - MTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - MTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Pages Served - MTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - MTD])/sum([Pages Served - MTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - MTD]' derivation='Sum' name='[sum:Clicks - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - MTD]' derivation='Sum' name='[sum:Gross Media Revenue - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - MTD]' derivation='Sum' name='[sum:Impressions Served - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - MTD]' derivation='Sum' name='[sum:Net Media Revenue - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - MTD]' derivation='Sum' name='[sum:Pages Available - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - MTD]' derivation='Sum' name='[sum:Pages Served - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - MTD]' derivation='User' name='[usr:Ads per Page - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - MTD]' derivation='User' name='[usr:Available eCPM - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - MTD]' derivation='User' name='[usr:CPC - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - MTD]' derivation='User' name='[usr:CTR - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - MTD]' derivation='User' name='[usr:Fill Rate - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - MTD]' derivation='User' name='[usr:Page CTR - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - MTD]' derivation='User' name='[usr:Served eCPM - MTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - MTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - MTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - MTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='MTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - MTD' datatype='real' default-format='C1033%' name='[Calculation_4170106162336528]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - MTD])/[Active Hotels - MTD]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - MTD]' derivation='User' name='[usr:Active Hotels - MTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4170106162336528]' derivation='User' name='[usr:Calculation_4170106162336528:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - MTD])/sum([Pages Available - MTD])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - MTD]' derivation='User' name='[usr:Hotels per Auction - MTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - MTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_4170106162336528:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - MTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - MTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_4170106162336528:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - MTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Market Differences PPW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Percent Difference between WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data (copy)].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> and WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data (copy)].[none:SDPPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PPW])/[Clicked ROI - PPW]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PPW])/[Exposed ROI - PPW]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] - 14' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Spend - %D PPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PPW]))/sum([Spend - PPW])' />
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPPW]' derivation='None' name='[none:SDPPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI - %D PPW]' derivation='User' name='[usr:Clicked ROI - %D PPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - %D PPW]' derivation='User' name='[usr:Exposed ROI - %D PPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - %D PPW]' derivation='User' name='[usr:Spend - %D PPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Clicked ROI - \%D PPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Exposed ROI - \%D PPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Spend - \%D PPW:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Market Name:nk]</column>
            <column>[market_data (copy)].[:Measure Names]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='% Difference' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[market_data (copy)].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data (copy)].[:Measure Names]' />
              <lod column='[market_data (copy)].[none:Ref Day:qk]' />
              <lod column='[market_data (copy)].[none:SDPPW:qk]' />
              <lod column='[market_data (copy)].[usr:Clicked ROI - %D PPW:qk]' />
              <lod column='[market_data (copy)].[usr:Exposed ROI - %D PPW:qk]' />
              <lod column='[market_data (copy)].[usr:Spend - %D PPW:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Market Name:&#9;</run>
                <run bold='true'>&lt;[market_data (copy)].[none:Market Name:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>WE </run>
                <run bold='true'>&lt;[market_data (copy)].[none:Ref Day:qk]&gt; </run>
                <run fontcolor='#787878'>vs. WE </run>
                <run bold='true'>&lt;[market_data (copy)].[none:SDPPW:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Clicked ROI % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Clicked ROI - %D PPW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Exposed ROI % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Exposed ROI - %D PPW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Spend % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Spend - %D PPW:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[none:Market Name:nk] / [market_data (copy)].[:Measure Names])</rows>
        <cols>[market_data (copy)].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='Market Differences PW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Percent Difference between WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data (copy)].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> and WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data (copy)].[none:SDPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Clicked ROI - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Exposed ROI - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Spend - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])' />
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI - %D PW]' derivation='User' name='[usr:Clicked ROI - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - %D PW]' derivation='User' name='[usr:Exposed ROI - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - %D PW]' derivation='User' name='[usr:Spend - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Clicked ROI - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Exposed ROI - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Spend - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Market Name:nk]</column>
            <column>[market_data (copy)].[:Measure Names]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='% Difference' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[market_data (copy)].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data (copy)].[:Measure Names]' />
              <lod column='[market_data (copy)].[none:Ref Day:qk]' />
              <lod column='[market_data (copy)].[none:SDPW:qk]' />
              <lod column='[market_data (copy)].[usr:Clicked ROI - %D PW:qk]' />
              <lod column='[market_data (copy)].[usr:Exposed ROI - %D PW:qk]' />
              <lod column='[market_data (copy)].[usr:Spend - %D PW:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Market Name:&#9;</run>
                <run bold='true'>&lt;[market_data (copy)].[none:Market Name:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>WE </run>
                <run bold='true'>&lt;[market_data (copy)].[none:Ref Day:qk]&gt; </run>
                <run fontcolor='#787878'>vs. WE </run>
                <run bold='true'>&lt;[market_data (copy)].[none:SDPW:qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Clicked ROI % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Clicked ROI - %D PW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Exposed ROI % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Exposed ROI - %D PW:qk]&gt;</run>
                <run fontcolor='#787878'>&#10;Spend % Difference: </run>
                <run bold='true'>&lt;[market_data (copy)].[usr:Spend - %D PW:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([market_data (copy)].[none:Market Name:nk] / [market_data (copy)].[:Measure Names])</rows>
        <cols>[market_data (copy)].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='OTA Total'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column caption='Filter for OTA Publisher' datatype='string' name='[Calculation_1850102131152453]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 3] = &quot;OWW&quot; OR [Parameters].[Parameter 3] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 3] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Filter for OTA Ad Unit Type' datatype='string' name='[Calculation_6870102131437484]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[GDS Ad Unit Type (copy)] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[GDS Ad Unit Type (copy)],&quot;Total&quot;) THEN IF [Parameters].[GDS Ad Unit Type (copy)] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[GDS Ad Unit Type (copy)] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Label - Total]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Total&quot;' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1850102131152453]' derivation='None' name='[none:Calculation_1850102131152453:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_6870102131437484]' derivation='None' name='[none:Calculation_6870102131437484:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Label - Total]' derivation='None' name='[none:Label - Total:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[SSN Channel Type]' derivation='None' name='[none:SSN Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_1850102131152453:nk]'>
            <groupfilter function='member' level='[none:Calculation_1850102131152453:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_6870102131437484:nk]'>
            <groupfilter function='member' level='[none:Calculation_6870102131437484:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Market Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Atlanta&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Charleston&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Chicago&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Dubai&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Honolulu&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;London&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;New York&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Orlando&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Philadelphia&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:SSN Channel Type:nk]'>
            <groupfilter function='member' level='[none:SSN Channel Type:nk]' member='&quot;OTA&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:SSN Channel Type:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Market Name:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_1850102131152453:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_6870102131437484:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[none:Market Name:nk]' value='76' />
            <format attr='width' field='[publisher_data (copy)].[none:Label - Total:nk]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[publisher_data (copy)].[none:Market Name:nk]' value='bold' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Label - Total:nk]' value='bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:SSN Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols>[publisher_data (copy)].[none:Label - Total:nk]</cols>
        <join-lod-include-overrides>
          <column>[active_hotels_with_budget (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='OTA by Market'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Active Hotels %D for Table]' derivation='User' name='[usr:Active Hotels %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column caption='Ads per Page %D for Table' datatype='real' default-format='p0.0%' name='[Ads per Page %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column caption='Available eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Available eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column caption='CPC %D for Table' datatype='real' default-format='p0.0%' name='[CPC %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column caption='CTR %D for Table' datatype='real' default-format='p0.0%' name='[CTR %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column caption='Filter for OTA Publisher' datatype='string' name='[Calculation_1850102131152453]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Parameter 3] = &quot;OWW&quot; OR [Parameters].[Parameter 3] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Parameter 3] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Parameter 3] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Filter for OTA Ad Unit Type' datatype='string' name='[Calculation_6870102131437484]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[GDS Ad Unit Type (copy)] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[GDS Ad Unit Type (copy)],&quot;Total&quot;) THEN IF [Parameters].[GDS Ad Unit Type (copy)] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[GDS Ad Unit Type (copy)] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Clicks for Table' datatype='integer' name='[Clicks for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Clicks - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Clicks - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Clicks - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Fill Rate %D for Table' datatype='real' default-format='p0.0%' name='[Fill Rate %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column caption='Gross Media Revenue %D for Table' datatype='real' default-format='p0.0%' name='[Gross Media Revenue %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column caption='Hotels per Auction %D for Table' datatype='real' default-format='p0.0%' name='[Hotels per Auction %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column caption='Impressions Served %D for Table' datatype='real' default-format='p0.0%' name='[Impressions Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Impressions Served for Table' datatype='integer' name='[Impressions Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Impressions Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Impressions Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Impressions Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column caption='Pages Available %D for Table' datatype='real' default-format='p0.0%' name='[Pages Available %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column caption='Pages Served %D for Table' datatype='real' default-format='p0.0%' name='[Pages Served %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Pages Served for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Served - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Served - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Served - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM %D for Table' datatype='real' default-format='p0.0%' name='[Served eCPM %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1850102131152453]' derivation='None' name='[none:Calculation_1850102131152453:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_6870102131437484]' derivation='None' name='[none:Calculation_6870102131437484:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[SSN Channel Type]' derivation='None' name='[none:SSN Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks for Table]' derivation='Sum' name='[sum:Clicks for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served for Table]' derivation='Sum' name='[sum:Impressions Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served for Table]' derivation='Sum' name='[sum:Pages Served for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page %D for Table]' derivation='User' name='[usr:Ads per Page %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM %D for Table]' derivation='User' name='[usr:Available eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC %D for Table]' derivation='User' name='[usr:CPC %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR %D for Table]' derivation='User' name='[usr:CTR %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks %D for Table]' derivation='User' name='[usr:Clicks %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate %D for Table]' derivation='User' name='[usr:Fill Rate %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue %D for Table]' derivation='User' name='[usr:Gross Media Revenue %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction %D for Table]' derivation='User' name='[usr:Hotels per Auction %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served %D for Table]' derivation='User' name='[usr:Impressions Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available %D for Table]' derivation='User' name='[usr:Pages Available %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served %D for Table]' derivation='User' name='[usr:Pages Served %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM %D for Table]' derivation='User' name='[usr:Served eCPM %D for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column caption='Budget %D for Table' datatype='real' default-format='p0.0%' name='[Budget %D for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - %D SDPW]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - %D PW]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - %D PMTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Budget for Table' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Budget - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Budget - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Budget - MTD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Budget for Table]' derivation='Sum' name='[sum:Budget for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Budget %D for Table]' derivation='User' name='[usr:Budget %D for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]' included-values='non-null'>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[sum:Budget for Table:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[usr:Budget \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM \%D for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM \%D for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_1850102131152453:nk]'>
            <groupfilter function='member' level='[none:Calculation_1850102131152453:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Calculation_6870102131437484:nk]'>
            <groupfilter function='member' level='[none:Calculation_6870102131437484:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Market Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Atlanta&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Charleston&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Chicago&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Dubai&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Honolulu&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;London&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;New York&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Orlando&quot;' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Philadelphia&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:SSN Channel Type:nk]'>
            <groupfilter function='member' level='[none:SSN Channel Type:nk]' member='&quot;OTA&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:SSN Channel Type:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Market Name:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_6870102131437484:nk]</column>
            <column>[publisher_data (copy)].[none:Calculation_1850102131152453:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[none:Market Name:nk]' value='98' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='152' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[publisher_data (copy)].[none:Market Name:nk]' value='bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#ebf4ff' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:SSN Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols>[publisher_data (copy)].[none:Market Name:nk]</cols>
        <join-lod-include-overrides>
          <column>[active_hotels_with_budget (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='PMTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data (copy)].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - MTD]-[Ads per Page - PMTD])/[Ads per Page - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - MTD]-[Available eCPM - PMTD])/[Available eCPM - PMTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - MTD]) - sum([Clicks - PMTD]))/sum([Clicks - PMTD])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - MTD]-[Fill Rate - PMTD])/[Fill Rate - PMTD]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - MTD]) - sum([Impressions Served - PMTD]))/sum([Impressions Served - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - PMTD])/[Page CTR - PMTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - MTD]) - sum([Pages Served - PMTD]))/sum([Pages Served - PMTD])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - MTD]-[Served eCPM - PMTD])/[Served eCPM - PMTD]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PMTD]' derivation='User' name='[usr:Ads per Page - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PMTD]' derivation='User' name='[usr:Available eCPM - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PMTD]' derivation='User' name='[usr:CPC - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PMTD]' derivation='User' name='[usr:CTR - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PMTD]' derivation='User' name='[usr:Clicks - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PMTD]' derivation='User' name='[usr:Fill Rate - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PMTD]' derivation='User' name='[usr:Gross Media Revenue - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PMTD]' derivation='User' name='[usr:Impressions Served - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PMTD]' derivation='User' name='[usr:Net Media Revenue - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PMTD]' derivation='User' name='[usr:Page CTR - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PMTD]' derivation='User' name='[usr:Pages Available - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PMTD]' derivation='User' name='[usr:Pages Served - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PMTD]' derivation='User' name='[usr:Served eCPM - %D PMTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PMTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PMTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PMTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - PMTD])/[Active Hotels - PMTD]' />
            </column>
            <column caption='Budget per Hotel - %D PMTD' datatype='real' default-format='p0.0%' name='[Calculation_3020106162305006]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_4170106162336528]-[Calculation_6310106162009648])/[Calculation_6310106162009648]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PMTD]' derivation='User' name='[usr:Active Hotels - %D PMTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3020106162305006]' derivation='User' name='[usr:Calculation_3020106162305006:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - MTD]-[Hotels per Auction - PMTD])/[Hotels per Auction - PMTD]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D PMTD]' derivation='User' name='[usr:Hotels per Auction - %D PMTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPM])/[Sold Hotels as of SDPM]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPM]' derivation='User' name='[usr:Sold Hotels - %D SDPM:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPM]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PMTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_3020106162305006:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PMTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPM:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PMTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_3020106162305006:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PMTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='PQTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data (copy)].[none:Current Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data (copy)].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - QTD]-[Available eCPM - PQTD])/[Available eCPM - PQTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - QTD]-[Served eCPM - PQTD])/[Served eCPM - PQTD]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PQTD]' derivation='User' name='[usr:Available eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PQTD]' derivation='User' name='[usr:Net Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PQTD]' derivation='User' name='[usr:Served eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PQTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - PQTD])/[Active Hotels - PQTD]' />
            </column>
            <column caption='Budget per Hotel - %D PQTD' datatype='real' default-format='p0.0%' name='[Calculation_6200106162656365]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_1230106162113303])/[Calculation_1230106162113303]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PQTD]' derivation='User' name='[usr:Active Hotels - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6200106162656365]' derivation='User' name='[usr:Calculation_6200106162656365:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - QTD]-[Hotels per Auction - PQTD])/[Hotels per Auction - PQTD]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D PQTD]' derivation='User' name='[usr:Hotels per Auction - %D PQTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPQ]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPQ])/[Sold Hotels as of SDPQ]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPQ]' derivation='User' name='[usr:Sold Hotels - %D SDPQ:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPQ]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPQ:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6200106162656365:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPQ:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6200106162656365:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='PW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Week]-[Available eCPM - PW])/[Available eCPM - PW]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Week]-[Served eCPM - PW])/[Served eCPM - PW]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PW]' derivation='User' name='[usr:Available eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PW]' derivation='User' name='[usr:Net Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PW]' derivation='User' name='[usr:Served eCPM - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PW Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - PW])/[Active Hotels - PW]' />
            </column>
            <column caption='Budget per Hotel - %D PW' datatype='real' default-format='p0.0%' name='[Calculation_8590106161806731]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_4190106161651870])/[Calculation_4190106161651870]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PW]' derivation='User' name='[usr:Active Hotels - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8590106161806731]' derivation='User' name='[usr:Calculation_8590106161806731:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - Ref Week]-[Hotels per Auction - PW])/[Hotels per Auction - PW]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D PW]' derivation='User' name='[usr:Hotels per Auction - %D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPW]' derivation='User' name='[usr:Sold Hotels - %D SDPW:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPW]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_8590106161806731:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_8590106161806731:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='PYTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - YTD]-[Available eCPM - PYTD])/[Available eCPM - PYTD]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - YTD]-[Served eCPM - PYTD])/[Served eCPM - PYTD]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PYTD]' derivation='User' name='[usr:Available eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D PYTD]' derivation='User' name='[usr:Net Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PYTD]' derivation='User' name='[usr:Served eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:Current Year:ok]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='PYTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - YTD]-[Active Hotels - PYTD])/[Active Hotels - PYTD]' />
            </column>
            <column caption='Budget per Hotel - %D PYTD' datatype='real' default-format='p0.0%' name='[Calculation_1070106162755693]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2790106162448809]-[Calculation_0040106162202694])/[Calculation_0040106162202694]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D PYTD]' derivation='User' name='[usr:Active Hotels - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1070106162755693]' derivation='User' name='[usr:Calculation_1070106162755693:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - YTD]-[Hotels per Auction - PYTD])/[Hotels per Auction - PYTD]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D PYTD]' derivation='User' name='[usr:Hotels per Auction - %D PYTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_1070106162755693:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_1070106162755693:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
        <join-lod-exclude-overrides>
          <column>[market_data (copy)].[Ref Day]</column>
        </join-lod-exclude-overrides>
      </table>
    </worksheet>
    <worksheet name='Page CTR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions Served])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR]' derivation='User' name='[usr:Page CTR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[publisher_data (copy)].[usr:CTR:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[publisher_data (copy)].[usr:CTR:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:Page CTR:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:CTR:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:Page CTR:qk] + [publisher_data (copy)].[usr:CTR:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Page CTR YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Page CTR Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Pages Served])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Page CTR]' derivation='User' name='[usr:Page CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[usr:Page CTR:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Page Fill Rate'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served])/sum([Pages Available])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate]' derivation='User' name='[usr:Fill Rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[usr:Fill Rate:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[usr:Fill Rate:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[usr:Fill Rate:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[usr:Fill Rate:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[usr:Fill Rate:qk] + [publisher_data (copy)].[usr:Fill Rate:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Pages Available'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='datetime' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN DATETRUNC(&apos;week&apos;,[Date])&#13;&#10;WHEN &quot;Month&quot; THEN DATETRUNC(&apos;month&apos;,[Date])&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <encoding attr='space' class='1' field='[publisher_data (copy)].[sum:Pages Available:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='1' field='[publisher_data (copy)].[sum:Pages Available:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
          </pane>
          <pane id='1' y-axis-name='[publisher_data (copy)].[sum:Pages Available:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[publisher_data (copy)].[none:Breakdown Color:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[publisher_data (copy)].[sum:Pages Available:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([publisher_data (copy)].[sum:Pages Available:qk] + [publisher_data (copy)].[sum:Pages Available:qk])</rows>
        <cols>[publisher_data (copy)].[tdy:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Pages Available YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Pages Available Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Previous Month Name (copy)]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Pages Available]' role='measure' type='quantitative'>
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pages Available]' derivation='Sum' name='[sum:Pages Available:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[publisher_data (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[sum:Pages Available:qk]</rows>
        <cols>[publisher_data (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Percent of Budget Used YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent of Budget Used Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Percent of Budget]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([active_hotels_with_budget (copy)].[Spend])/sum([Budget])' scope-isolation='false' />
            </column>
            <column-instance column='[Percent of Budget]' derivation='User' name='[usr:Percent of Budget:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[yr:Date:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[sold_hotels (copy)].[usr:Percent of Budget:qk]</rows>
        <cols>[active_hotels_with_budget (copy)].[none:Date without Year:nk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Filter for Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Percent of Hotels Active'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent of Active Hotels</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='Day-Trunc' name='[tdy:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]' scope='cols' value='true' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]' field-type='quantitative' max='1.0' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget (copy)].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Date Axis:qk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Ref Day]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Performance by Region &amp; Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Advertiser ID] END)' scope-isolation='false' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Active Hotels - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Active Hotels - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Active Hotels - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Active Hotels - Ref Week]' derivation='User' name='[usr:Active Hotels - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Hotels for Table]' derivation='User' name='[usr:Active Hotels for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Ads per Page - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Ads per Page - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Ads per Page - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Available eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Available eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Available eCPM - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Fill Rate - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Fill Rate - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Fill Rate - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Gross Media Revenue for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Gross Media Revenue - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Gross Media Revenue - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Gross Media Revenue - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Hotels per Auction - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Hotels per Auction - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Hotels per Auction - MTD]&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Available for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Pages Available - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Pages Available - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Pages Available - MTD]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM for Table]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Day&quot; THEN [Served eCPM - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Served eCPM - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Served eCPM - MTD]&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Gross Media Revenue for Table]' derivation='Sum' name='[sum:Gross Media Revenue for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available for Table]' derivation='Sum' name='[sum:Pages Available for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page for Table]' derivation='User' name='[usr:Ads per Page for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM for Table]' derivation='User' name='[usr:Available eCPM for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Table]' derivation='User' name='[usr:CPC for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Table]' derivation='User' name='[usr:CTR for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate for Table]' derivation='User' name='[usr:Fill Rate for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction for Table]' derivation='User' name='[usr:Hotels per Auction for Table:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM for Table]' derivation='User' name='[usr:Served eCPM for Table:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels for Table:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM for Table:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM for Table:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[publisher_data (copy)].[sum:Pages Available for Table:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[sum:Pages Available for Table:qk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[none:Finance Region:nk]' value='96' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[publisher_data (copy)].[:Measure Names]' value='bold' />
            <format attr='text-align' field='[publisher_data (copy)].[:Measure Names]' value='center' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([publisher_data (copy)].[none:Finance Region:nk] / [publisher_data (copy)].[none:Country:nk])</rows>
        <cols>[publisher_data (copy)].[:Measure Names]</cols>
        <subtotals>
          <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
        </subtotals>
      </table>
    </worksheet>
    <worksheet name='QTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data (copy)].[none:Current Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data (copy)].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - QTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - QTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - QTD]' derivation='Sum' name='[sum:Net Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - QTD]' derivation='User' name='[usr:Available eCPM - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - QTD]' derivation='User' name='[usr:Served eCPM - QTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - QTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - QTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='QTD Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data (copy)].[none:Current Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data (copy)].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Previous Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,DATEADD(&apos;quarter&apos;,-1,[Ref Day])))' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPQ]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;quarter&apos;,-1,[Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Quarter]' derivation='None' name='[none:Current Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Quarter]' derivation='None' name='[none:Previous Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPQ]' derivation='Day-Trunc' name='[tdy:SDPQ:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='text-align' value='right' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='58' />
            <format attr='height' field='[publisher_data (copy)].[none:Pub:nk]' value='36' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data (copy)].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Previous Quarter:nk]' />
              <lod column='[publisher_data (copy)].[none:Current Quarter:nk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPQ:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='QTD Data 2'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD]-[Ads per Page - PQTD])/[Ads per Page - PQTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - QTD]-[Available eCPM - PQTD])/[Available eCPM - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Available - QTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD]-[CPC - PQTD])/[CPC - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Clicks - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - PQTD])/[CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Impressions Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD]) - sum([Clicks - PQTD]))/sum([Clicks - PQTD])' />
            </column>
            <column datatype='integer' name='[Clicks - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD]-[Fill Rate - PQTD])/[Fill Rate - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - QTD])/sum([Pages Available - QTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD]) - sum([Gross Media Revenue - PQTD]))/sum([Gross Media Revenue - PQTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD]) - sum([Impressions Served - PQTD]))/sum([Impressions Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Impressions Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - PQTD])/[Page CTR - PQTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - QTD])/sum([Pages Served - QTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD]) - sum([Pages Available - PQTD]))/sum([Pages Available - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Available - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD]) - sum([Pages Served - PQTD]))/sum([Pages Served - PQTD])' />
            </column>
            <column datatype='integer' name='[Pages Served - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PQTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - QTD]-[Served eCPM - PQTD])/[Served eCPM - PQTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - QTD])/sum([Pages Served - QTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - QTD]' derivation='Sum' name='[sum:Clicks - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - QTD]' derivation='Sum' name='[sum:Gross Media Revenue - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - QTD]' derivation='Sum' name='[sum:Impressions Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - QTD]' derivation='Sum' name='[sum:Pages Available - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - QTD]' derivation='Sum' name='[sum:Pages Served - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PQTD]' derivation='User' name='[usr:Ads per Page - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - QTD]' derivation='User' name='[usr:Ads per Page - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PQTD]' derivation='User' name='[usr:Available eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - QTD]' derivation='User' name='[usr:Available eCPM - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PQTD]' derivation='User' name='[usr:CPC - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - QTD]' derivation='User' name='[usr:CPC - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PQTD]' derivation='User' name='[usr:CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - QTD]' derivation='User' name='[usr:CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PQTD]' derivation='User' name='[usr:Clicks - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PQTD]' derivation='User' name='[usr:Fill Rate - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - QTD]' derivation='User' name='[usr:Fill Rate - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PQTD]' derivation='User' name='[usr:Gross Media Revenue - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PQTD]' derivation='User' name='[usr:Impressions Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PQTD]' derivation='User' name='[usr:Page CTR - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - QTD]' derivation='User' name='[usr:Page CTR - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PQTD]' derivation='User' name='[usr:Pages Available - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PQTD]' derivation='User' name='[usr:Pages Served - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PQTD]' derivation='User' name='[usr:Served eCPM - %D PQTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - QTD]' derivation='User' name='[usr:Served eCPM - QTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PQTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PQTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PQTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - QTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PQTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='QTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;quarter&apos;,[Date]) = DATETRUNC(&apos;quarter&apos;,[Ref Day])&#13;&#10;AND [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column caption='Budget per Hotel - QTD' datatype='real' default-format='C1033%' name='[Calculation_9970106162410403]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - QTD])/[Active Hotels - QTD]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - QTD]' derivation='User' name='[usr:Active Hotels - QTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9970106162410403]' derivation='User' name='[usr:Calculation_9970106162410403:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - QTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - QTD])/sum([Pages Available - QTD])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - QTD]' derivation='User' name='[usr:Hotels per Auction - QTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - QTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_9970106162410403:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - QTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - QTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_9970106162410403:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - QTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Ref Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Ads per Page - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Day])/sum([Pages Served - Ref Day])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Available - Ref Day])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Clicks - Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Impressions Served - Ref Day])' />
            </column>
            <column datatype='integer' name='[Clicks - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Day])/sum([Pages Available - Ref Day])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' name='[Impressions Served - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Day]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Day]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Pages Served - Ref Day])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Pages Served] END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Day])/sum([Pages Served - Ref Day])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Day]' derivation='Sum' name='[sum:Clicks - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Day]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Day]' derivation='Sum' name='[sum:Impressions Served - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - Ref Day]' derivation='Sum' name='[sum:Net Media Revenue - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Day]' derivation='Sum' name='[sum:Pages Available - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Day]' derivation='Sum' name='[sum:Pages Served - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Day]' derivation='User' name='[usr:Ads per Page - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - Ref Day]' derivation='User' name='[usr:Available eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Day]' derivation='User' name='[usr:CPC - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Day]' derivation='User' name='[usr:CTR - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Day]' derivation='User' name='[usr:Fill Rate - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Day]' derivation='User' name='[usr:Page CTR - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - Ref Day]' derivation='User' name='[usr:Served eCPM - Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Day:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
            <format attr='height' field='[publisher_data (copy)].[:Measure Names]' value='20' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='196' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='font-size' field='[publisher_data (copy)].[:Measure Names]' value='12' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
            <format attr='border-style' data-class='subtotal' value='solid' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='solid' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='Ref Day Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(IF [Date] = [Ref Day] THEN [Advertiser ID] END)' scope-isolation='false' />
            </column>
            <column caption='Budget per Hotel - Ref Day' datatype='real' default-format='C1033%' name='[Calculation_3610106160432967]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - Ref Day])/[Active Hotels - Ref Day]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - Ref Day]' derivation='User' name='[usr:Active Hotels - Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3610106160432967]' derivation='User' name='[usr:Calculation_3610106160432967:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - Ref Day])/sum([Pages Available - Ref Day])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Hotels per Auction - Ref Day]' derivation='User' name='[usr:Hotels per Auction - Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_3610106160432967:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Day:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_3610106160432967:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Day:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Segment:nk]'>
            <groupfilter function='level-members' level='[none:Segment:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Ref Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - Ref Week]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - Ref Week]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - Ref Week]' derivation='Sum' name='[sum:Net Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - Ref Week]' derivation='User' name='[usr:Available eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - Ref Week]' derivation='User' name='[usr:Served eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='192' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='font-size' field='[publisher_data (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
            <format attr='border-style' data-class='subtotal' value='solid' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='solid' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='Ref Week Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Advertiser ID] END)' scope-isolation='false' />
            </column>
            <column caption='Budget per Hotel - Ref Week' datatype='real' default-format='C1033%' name='[Calculation_2600106161507552]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - Ref Week])/[Active Hotels - Ref Week]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - Ref Week]' derivation='User' name='[usr:Active Hotels - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2600106161507552]' derivation='User' name='[usr:Calculation_2600106161507552:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - Ref Week])/sum([Pages Available - Ref Week])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - Ref Week]' derivation='User' name='[usr:Hotels per Auction - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_2600106161507552:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_2600106161507552:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Week:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='89' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='SDPW'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Day]-[Available eCPM - SDPW])/[Available eCPM - SDPW]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPW]))/sum([Clicks - SDPW])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Day]-[Fill Rate - SDPW])/[Fill Rate - SDPW]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day])-sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPW]))/sum([Impressions Served - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPW])/[Page CTR - SDPW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPW]))/sum([Pages Served - SDPW])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Day]-[Served eCPM - SDPW])/[Served eCPM - SDPW]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SDPW]' derivation='User' name='[usr:Ads per Page - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D SDPW]' derivation='User' name='[usr:Available eCPM - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SDPW]' derivation='User' name='[usr:CPC - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SDPW]' derivation='User' name='[usr:CTR - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SDPW]' derivation='User' name='[usr:Clicks - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SDPW]' derivation='User' name='[usr:Fill Rate - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SDPW]' derivation='User' name='[usr:Gross Media Revenue - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SDPW]' derivation='User' name='[usr:Impressions Served - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SDPW]' derivation='User' name='[usr:Net Media Revenue - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SDPW]' derivation='User' name='[usr:Page CTR - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SDPW]' derivation='User' name='[usr:Pages Available - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SDPW]' derivation='User' name='[usr:Pages Served - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D SDPW]' derivation='User' name='[usr:Served eCPM - %D SDPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D SDPW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SDPW Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPW])/[Active Hotels - SDPW]' />
            </column>
            <column caption='Budget per Hotel - %D SDPW' datatype='real' default-format='p0.0%' name='[Calculation_2460106161409047]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_6410106161224985])/[Calculation_6410106161224985]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SDPW]' derivation='User' name='[usr:Active Hotels - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2460106161409047]' derivation='User' name='[usr:Calculation_2460106161409047:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - Ref Day]-[Hotels per Auction - SDPW])/[Hotels per Auction - SDPW]' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - Ref Day])/sum([Pages Available - Ref Day])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D SDPW]' derivation='User' name='[usr:Hotels per Auction - %D SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotels per Auction - Ref Day]' derivation='User' name='[usr:Hotels per Auction - Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPW])/[Sold Hotels as of SDPW]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPW]' derivation='User' name='[usr:Sold Hotels - %D SDPW:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPW]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SDPW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_2460106161409047:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SDPW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[sold_hotels (copy)].[usr:Budget per Hotel - \%D SDPW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - Ref Day:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='SDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Day]-[Ads per Page - SDPY])/[Ads per Page - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Day] - [Available eCPM - SDPY])/[Available eCPM - SDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Day]-[CPC - SDPY])/[CPC - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Day] - [CTR - SDPY])/[CTR - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Day])-sum([Clicks - SDPY]))/sum([Clicks - SDPY])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Day] - [Fill Rate - SDPY])/[Fill Rate - SDPY]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPY]))/sum([Gross Media Revenue - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Day])-sum([Impressions Served - SDPY]))/sum([Impressions Served - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Day]-[Page CTR - SDPY])/[Page CTR - SDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Day])-sum([Pages Available - SDPY]))/sum([Pages Available - SDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Day])-sum([Pages Served - SDPY]))/sum([Pages Served - SDPY])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Day]-[Served eCPM - SDPY])/[Served eCPM - SDPY]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SDPY]' derivation='User' name='[usr:Ads per Page - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D SDPY]' derivation='User' name='[usr:Available eCPM - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SDPY]' derivation='User' name='[usr:CPC - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SDPY]' derivation='User' name='[usr:CTR - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SDPY]' derivation='User' name='[usr:Clicks - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SDPY]' derivation='User' name='[usr:Fill Rate - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SDPY]' derivation='User' name='[usr:Impressions Served - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SDPY]' derivation='User' name='[usr:Net Media Revenue - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SDPY]' derivation='User' name='[usr:Page CTR - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SDPY]' derivation='User' name='[usr:Pages Available - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SDPY]' derivation='User' name='[usr:Pages Served - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D SDPY]' derivation='User' name='[usr:Served eCPM - %D SDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D SDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D SDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Day]-[Active Hotels - SDPY])/[Active Hotels - SDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SDPY' datatype='real' default-format='p0.0%' name='[Calculation_1110106160520217]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_3610106160432967]-[Calculation_4300106160335263])/[Calculation_4300106160335263]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SDPY]' derivation='User' name='[usr:Active Hotels - %D SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1110106160520217]' derivation='User' name='[usr:Calculation_1110106160520217:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - Ref Day]-[Hotels per Auction - SDPY])/[Hotels per Auction - SDPY]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D SDPY]' derivation='User' name='[usr:Hotels per Auction - %D SDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_1110106160520217:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_1110106160520217:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='SMTDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;vs. &lt;[publisher_data (copy)].[none:Previous Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPM:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - MTD] - [Ads per Page - SMTDPY])/[Ads per Page - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - MTD] - [Available eCPM - SMTDPY])/[Available eCPM - SMTDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - MTD] - [CPC - SMTDPY])/[CPC - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - MTD] - [CTR - SMTDPY])/[CTR - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - MTD])-sum([Clicks - SMTDPY]))/sum([Clicks - SMTDPY])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - MTD] - [Fill Rate - SMTDPY])/[Fill Rate - SMTDPY]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - MTD])-sum([Gross Media Revenue - SMTDPY]))/sum([Gross Media Revenue - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - MTD])-sum([Impressions Served - SMTDPY]))/sum([Impressions Served - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - MTD] - [Page CTR - SMTDPY])/[Page CTR - SMTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - MTD])-sum([Pages Available - SMTDPY]))/sum([Pages Available - SMTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - MTD])-sum([Pages Served - SMTDPY]))/sum([Pages Served - SMTDPY])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - MTD] - [Served eCPM - SMTDPY])/[Served eCPM - SMTDPY]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SMTDPY]' derivation='User' name='[usr:Ads per Page - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D SMTDPY]' derivation='User' name='[usr:Available eCPM - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SMTDPY]' derivation='User' name='[usr:CPC - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SMTDPY]' derivation='User' name='[usr:CTR - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SMTDPY]' derivation='User' name='[usr:Clicks - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SMTDPY]' derivation='User' name='[usr:Fill Rate - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SMTDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SMTDPY]' derivation='User' name='[usr:Impressions Served - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SMTDPY]' derivation='User' name='[usr:Net Media Revenue - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SMTDPY]' derivation='User' name='[usr:Page CTR - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SMTDPY]' derivation='User' name='[usr:Pages Available - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SMTDPY]' derivation='User' name='[usr:Pages Served - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D SMTDPY]' derivation='User' name='[usr:Served eCPM - %D SMTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D SMTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D SMTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SMTDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - MTD]-[Active Hotels - SMTDPY])/[Active Hotels - SMTDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SMTDPY' datatype='real' default-format='p0.0%' name='[Calculation_4960106162539043]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_4170106162336528] -[Calculation_2670106162036194])/[Calculation_2670106162036194]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SMTDPY]' derivation='User' name='[usr:Active Hotels - %D SMTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4960106162539043]' derivation='User' name='[usr:Calculation_4960106162539043:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SMTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - MTD] - [Hotels per Auction - SMTDPY])/[Hotels per Auction - SMTDPY]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D SMTDPY]' derivation='User' name='[usr:Hotels per Auction - %D SMTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SMTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_4960106162539043:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SMTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SMTDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_4960106162539043:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SMTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='SQTDPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             &lt;[publisher_data (copy)].[none:Current Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. &lt;[publisher_data (copy)].[none:Previous Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:SDPQ:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - QTD] - [Ads per Page - SQTDPY])/[Ads per Page - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - QTD] - [Available eCPM - SQTDPY])/[Available eCPM - SQTDPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - QTD] - [CPC - SQTDPY])/[CPC - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - QTD] - [CTR - SQTDPY])/[CTR - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - QTD])-sum([Clicks - SQTDPY]))/sum([Clicks - SQTDPY])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - QTD] - [Fill Rate - SQTDPY])/[Fill Rate - SQTDPY]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - QTD])-sum([Gross Media Revenue - SQTDPY]))/sum([Gross Media Revenue - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - QTD])-sum([Impressions Served - SQTDPY]))/sum([Impressions Served - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - QTD] - [Page CTR - SQTDPY])/[Page CTR - SQTDPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - QTD])-sum([Pages Available - SQTDPY]))/sum([Pages Available - SQTDPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - QTD])-sum([Pages Served - SQTDPY]))/sum([Pages Served - SQTDPY])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - QTD] - [Served eCPM - SQTDPY])/[Served eCPM - SQTDPY]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SQTDPY]' derivation='User' name='[usr:Ads per Page - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D SQTDPY]' derivation='User' name='[usr:Available eCPM - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SQTDPY]' derivation='User' name='[usr:CPC - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SQTDPY]' derivation='User' name='[usr:CTR - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SQTDPY]' derivation='User' name='[usr:Clicks - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SQTDPY]' derivation='User' name='[usr:Fill Rate - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SQTDPY]' derivation='User' name='[usr:Gross Media Revenue - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SQTDPY]' derivation='User' name='[usr:Impressions Served - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SQTDPY]' derivation='User' name='[usr:Net Media Revenue - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SQTDPY]' derivation='User' name='[usr:Page CTR - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SQTDPY]' derivation='User' name='[usr:Pages Available - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SQTDPY]' derivation='User' name='[usr:Pages Served - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D SQTDPY]' derivation='User' name='[usr:Served eCPM - %D SQTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D SQTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D SQTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SQTDPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - QTD]-[Active Hotels - SQTDPY])/[Active Hotels - SQTDPY]' />
            </column>
            <column caption='Budget per Hotel - %D SQTDPY' datatype='real' default-format='p0.0%' name='[Calculation_6380106162722912]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_9970106162410403]-[Calculation_2840106162136209])/[Calculation_2840106162136209]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SQTDPY]' derivation='User' name='[usr:Active Hotels - %D SQTDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6380106162722912]' derivation='User' name='[usr:Calculation_6380106162722912:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SQTDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - QTD] - [Hotels per Auction - SQTDPY])/[Hotels per Auction - SQTDPY]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D SQTDPY]' derivation='User' name='[usr:Hotels per Auction - %D SQTDPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SQTDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6380106162722912:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SQTDPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SQTDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6380106162722912:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SQTDPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='SWPY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week] - [Ads per Page - SWPY])/[Ads per Page - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Week] - [Available eCPM - SWPY])/[Available eCPM - SWPY]' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week] - [CPC - SWPY])/[CPC - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week] - [CTR - SWPY])/[CTR - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - SWPY]))/sum([Clicks - SWPY])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week] - [Fill Rate - SWPY])/[Fill Rate - SWPY]' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - SWPY]))/sum([Gross Media Revenue - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - SWPY]))/sum([Impressions Served - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Net Media Revenue - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Gross Media Revenue - %D SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week] - [Page CTR - SWPY])/[Page CTR - SWPY]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - SWPY]))/sum([Pages Available - SWPY])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - SWPY]))/sum([Pages Served - SWPY])' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Week] - [Served eCPM - SWPY])/[Served eCPM - SWPY]' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D SWPY]' derivation='User' name='[usr:Ads per Page - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D SWPY]' derivation='User' name='[usr:Available eCPM - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D SWPY]' derivation='User' name='[usr:CPC - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D SWPY]' derivation='User' name='[usr:CTR - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D SWPY]' derivation='User' name='[usr:Clicks - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D SWPY]' derivation='User' name='[usr:Fill Rate - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D SWPY]' derivation='User' name='[usr:Gross Media Revenue - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D SWPY]' derivation='User' name='[usr:Impressions Served - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - %D SWPY]' derivation='User' name='[usr:Net Media Revenue - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D SWPY]' derivation='User' name='[usr:Page CTR - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D SWPY]' derivation='User' name='[usr:Pages Available - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D SWPY]' derivation='User' name='[usr:Pages Served - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D SWPY]' derivation='User' name='[usr:Served eCPM - %D SWPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D SWPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Net Media Revenue - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D SWPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <color column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='SWPY Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Active Hotels - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Active Hotels - Ref Week]-[Active Hotels - SWPY])/[Active Hotels - SWPY]' />
            </column>
            <column caption='Budget per Hotel - %D SWPY' datatype='real' default-format='p0.0%' name='[Calculation_6560106161837608]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_2600106161507552]-[Calculation_3610106161728278])/[Calculation_3610106161728278]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - %D SWPY]' derivation='User' name='[usr:Active Hotels - %D SWPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6560106161837608]' derivation='User' name='[usr:Calculation_6560106161837608:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Hotels per Auction - %D SWPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Hotels per Auction - Ref Week] - [Hotels per Auction - SWPY])/[Hotels per Auction - SWPY]' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - %D SWPY]' derivation='User' name='[usr:Hotels per Auction - %D SWPY:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Sold Hotels - %D SDPY]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Sold Hotels as of Ref Day]-[Sold Hotels as of SDPY])/[Sold Hotels as of SDPY]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels - %D SDPY]' derivation='User' name='[usr:Sold Hotels - %D SDPY:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of Ref Day]' ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Sold Hotels as of SDPY]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SWPY:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6560106161837608:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SWPY:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels - \%D SDPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - \%D SWPY:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_6560106161837608:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - \%D SWPY:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='236' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[active_hotels_with_budget (copy)].[Multiple Values]' max='0.29999999999999999' min='-0.29999999999999999' num-steps='3' palette='Red-Black-Blue' type='interpolated' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
              <color column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Spend and ROI by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend and ROI by Market&#10;Week Ending </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[market_data (copy)].[Ref Day]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='market_data' name='market_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='market_data (copy)'>
            <column datatype='real' name='[Clicked ROI - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue - Ref Week])/sum([Spend - Ref Week])' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed ROI - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Exposed Revenue - Ref Week])/sum([Spend - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend - Ref Week]' derivation='Sum' name='[sum:Spend - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI - Ref Week]' derivation='User' name='[usr:Clicked ROI - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI - Ref Week]' derivation='User' name='[usr:Exposed ROI - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[market_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Clicked ROI - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[market_data (copy)].[usr:Exposed ROI - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[market_data (copy)].[none:Market Name:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Name:nk]' />
              <groupfilter function='member' level='[none:Market Name:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[market_data (copy)].[none:Market Name:nk]' direction='DESC' using='[market_data (copy)].[sum:Impressions:qk]'>
          </sort>
          <slices>
            <column>[market_data (copy)].[none:Date:qk]</column>
            <column>[market_data (copy)].[none:Market Name:nk]</column>
            <column>[market_data (copy)].[:Measure Names]</column>
            <column>[market_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[market_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[market_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[market_data (copy)].[none:Country:nk]</column>
            <column>[market_data (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[market_data (copy)].[Multiple Values]' scope='rows' value='ROI' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[Multiple Values]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[market_data (copy)].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[market_data (copy)].[sum:Spend - Ref Week:qk]' scope='rows' value='Spend' />
            <format attr='subtitle' class='0' field='[market_data (copy)].[sum:Spend - Ref Week:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[market_data (copy)].[sum:Spend - Ref Week:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[market_data (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[market_data (copy)].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[market_data (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[market_data (copy)].[sum:Spend - Ref Week:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[market_data (copy)].[:Measure Names]' />
              <lod column='[market_data (copy)].[none:Ref Day:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([market_data (copy)].[sum:Spend - Ref Week:qk] + [market_data (copy)].[Multiple Values])</rows>
        <cols>[market_data (copy)].[none:Market Name:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current            vs. Previous               vs. &lt;[publisher_data (copy)].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - Ref Week]' derivation='User' name='[usr:Available eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - Ref Week]' derivation='User' name='[usr:Served eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='208' />
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='line-pattern' value='none' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Month Name:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;</run>
            <run bold='true' fontsize='8'>Æ   &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current              vs. Previous            vs. &lt;[publisher_data (copy)].[none:Previous Year:ok]&gt;    </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>.</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Month Name:nk]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title QTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Quarter:nk]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'> Current              vs. Previous               vs. &lt;[publisher_data (copy)].[none:Previous Year:ok]&gt;      </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'> .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Quarter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Q&quot; + STR(DATEPART(&apos;quarter&apos;,[Ref Day]))' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Quarter]' derivation='None' name='[none:Current Quarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Quarter:nk]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>Past 7 Days through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current            vs. Previous               vs. &lt;[publisher_data (copy)].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' value='right' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='line-pattern' value='none' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Title YTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;[publisher_data (copy)].[none:Current Year:ok]&gt; through &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;</run>
            <run bold='true' fontsize='8'>Æ  &#10;</run>
            <run bold='true' fontalignment='2' fontsize='8'>      Current                      vs. &lt;[publisher_data (copy)].[none:Previous Year:ok]&gt; </run>
            <run bold='true' fontalignment='2' fontcolor='#f0f0f0' fontsize='8'>   .</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[publisher_data (copy)].[sum:Blank:qk]' scope='cols' value='false' />
            <format attr='tick-color' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-pattern' value='none' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Year:ok]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols total='true'>[publisher_data (copy)].[sum:Blank:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:SDPW:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Tornado Measure - Day ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - Day])' />
            </column>
            <column datatype='real' name='[Tornado Measure - Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Day] - [Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Day] - [CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Day] - [CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Day] - [Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Day] - [Ads per Page - SDPW])/[Ads per Page - SDPW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Day] - [CPC - SDPW])/[CPC - SDPW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Day] - [CTR - SDPW])/[CTR - SDPW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Day] - [Fill Rate - SDPW])/[Fill Rate - SDPW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Day]) - sum([Pages Available - SDPW]))/sum([Pages Available - SDPW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Day]) - sum([Gross Media Revenue - SDPW]))/sum([Gross Media Revenue - SDPW])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - Day ABS]' derivation='User' name='[usr:Tornado Measure - Day ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - Day]' derivation='User' name='[usr:Tornado Measure - Day:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[publisher_data (copy)].[none:Market Name:nk]' direction='DESC' using='[publisher_data (copy)].[usr:Tornado Measure - Day ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='357' />
                <format attr='maxwidth' value='357' />
                <format attr='minheight' value='840' />
                <format attr='maxheight' value='840' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[none:Market Name:nk]</rows>
        <cols>[publisher_data (copy)].[usr:Tornado Measure - Day:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:Current Month Name:nk]</run>
            <run>&gt;</run>
            <run> through </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:Previous Month Name:nk]</run>
            <run>&gt;</run>
            <run> through </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:SDPM:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Current Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE DATEPART(&apos;month&apos;,[Ref Day])&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Previous Month Name]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Previous Month]&#13;&#10;WHEN 1 THEN &apos;January&apos;&#13;&#10;WHEN 2 THEN &apos;February&apos;&#13;&#10;WHEN 3 THEN &apos;March&apos;&#13;&#10;WHEN 4 THEN &apos;April&apos;&#13;&#10;WHEN 5 THEN &apos;May&apos;&#13;&#10;WHEN 6 THEN &apos;June&apos;&#13;&#10;WHEN 7 THEN &apos;July&apos;&#13;&#10;WHEN 8 THEN &apos;August&apos;&#13;&#10;WHEN 9 THEN &apos;September&apos;&#13;&#10;WHEN 10 THEN &apos;October&apos;&#13;&#10;WHEN 11 THEN &apos;November&apos;&#13;&#10;WHEN 12 THEN &apos;December&apos;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPM]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;month&apos;,-1,[Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Tornado Measure - MTD ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - MTD])' />
            </column>
            <column datatype='real' name='[Tornado Measure - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - MTD] - [Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - MTD] - [CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - MTD] - [CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - MTD] - [Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - MTD]) - sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - MTD] - [Ads per Page - PMTD])/[Ads per Page - PMTD]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - MTD] - [CPC - PMTD])/[CPC - PMTD]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - MTD] - [CTR - PMTD])/[CTR - PMTD]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - MTD] - [Fill Rate - PMTD])/[Fill Rate - PMTD]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - MTD]) - sum([Pages Available - PMTD]))/sum([Pages Available - PMTD])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - MTD]) - sum([Gross Media Revenue - PMTD]))/sum([Gross Media Revenue - PMTD])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Month Name]' derivation='None' name='[none:Current Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Month Name]' derivation='None' name='[none:Previous Month Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPM]' derivation='None' name='[none:SDPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - MTD ABS]' derivation='User' name='[usr:Tornado Measure - MTD ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - MTD]' derivation='User' name='[usr:Tornado Measure - MTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[publisher_data (copy)].[none:Market Name:nk]' direction='DESC' using='[publisher_data (copy)].[usr:Tornado Measure - MTD ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' max='1.0' min='-1.0' num-steps='2' palette='tableau-red-blue' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' />
              <lod column='[publisher_data (copy)].[none:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:SDPM:qk]' />
              <lod column='[publisher_data (copy)].[none:Previous Month Name:nk]' />
              <lod column='[publisher_data (copy)].[none:Current Month Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[none:Market Name:nk]</rows>
        <cols>[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Metric]</run>
            <run>&gt;</run>
            <run> - </run>
            <run>&lt;</run>
            <run>[Parameters].[Difference Type]</run>
            <run>&gt;</run>
            <run>&#10;WE </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:Ref Day:qk]</run>
            <run>&gt;</run>
            <run> vs. WE </run>
            <run>&lt;</run>
            <run>[publisher_data (copy)].[none:SDPW:qk]</run>
            <run>&gt;</run>
            <run>Æ&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Market Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Tornado Measure - Week ABS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='ABS([Tornado Measure - Week])' />
            </column>
            <column datatype='real' name='[Tornado Measure - Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Difference Type]&#13;&#10;WHEN &quot;Actual Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN [Ads per Page - Ref Week] - [Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN [CPC - Ref Week] - [CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN [CTR - Ref Week] - [CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN [Fill Rate - Ref Week] - [Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN sum([Pages Available - Ref Week]) - sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;WHEN &quot;Percent Difference&quot; THEN&#13;&#10;    CASE [Parameters].[Metric]&#13;&#10;        WHEN &quot;Ads per Page&quot; THEN ([Ads per Page - Ref Week] - [Ads per Page - PW])/[Ads per Page - PW]&#13;&#10;        WHEN &quot;CPC&quot; THEN ([CPC - Ref Week] - [CPC - PW])/[CPC - PW]&#13;&#10;        WHEN &quot;Page CTR&quot; THEN ([CTR - Ref Week] - [CTR - PW])/[CTR - PW]&#13;&#10;        WHEN &quot;Fill Rate&quot; THEN ([Fill Rate - Ref Week] - [Fill Rate - PW])/[Fill Rate - PW]&#13;&#10;        WHEN &quot;Pages Available&quot; THEN (sum([Pages Available - Ref Week]) - sum([Pages Available - PW]))/sum([Pages Available - PW])&#13;&#10;        WHEN &quot;Gross Media Revenue&quot; THEN (sum([Gross Media Revenue - Ref Week]) - sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])&#13;&#10;    END&#13;&#10;END' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Name]' derivation='None' name='[none:Market Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Tornado Measure - Week ABS]' derivation='User' name='[usr:Tornado Measure - Week ABS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tornado Measure - Week]' derivation='User' name='[usr:Tornado Measure - Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[publisher_data (copy)].[none:Market Name:nk]' direction='DESC' using='[publisher_data (copy)].[usr:Tornado Measure - Week ABS:qk]'>
          </sort>
          <slices>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' max='1.0' min='-1.0' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' />
              <lod column='[publisher_data (copy)].[none:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[none:Market Name:nk]</rows>
        <cols>[publisher_data (copy)].[usr:Tornado Measure - Week:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Budget'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Budget in Network</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Percent of Hotels Active]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([Advertiser ID])/[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Percent of Hotels Active]' derivation='User' name='[usr:Percent of Hotels Active:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[sold_hotels (copy)].[Gross Media Revenue 7 Day Average]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget]' role='measure' type='quantitative'>
            </column>
            <column caption='Percent of Budget' datatype='real' default-format='p0%' name='[Percent of Budget]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([active_hotels_with_budget (copy)].[Spend])/sum([Budget])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Percent of Budget]' derivation='User' name='[usr:Percent of Budget:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[sum:Number of Records:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Percent of Hotels Active:qk:1]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]' filter-group='4'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[active_hotels_with_budget (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='subtitle' class='0' field='[sold_hotels (copy)].[usr:Percent of Budget:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[sold_hotels (copy)].[usr:Percent of Budget:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[sold_hotels (copy)].[usr:Percent of Budget:qk]' field-type='quantitative' fold='true' max='1.0' min='0.0' range-type='fixed' scope='rows' type='space' />
            <format attr='width' field='[sold_hotels (copy)].[sum:Budget:qk]' value='58' />
            <format attr='width' field='[sold_hotels (copy)].[usr:Percent of Budget:qk]' value='58' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[sold_hotels (copy)].[sum:Budget:qk]' value='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='col-width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='160' />
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[active_hotels_with_budget (copy)].[:Measure Names]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[active_hotels_with_budget (copy)].[none:Date:qk]' value='Date (top 4 graphs)'>
              <formatted-text>
                <run>Date (top 4 graphs)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[sold_hotels (copy)].[sum:Budget:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[sold_hotels (copy)].[usr:Percent of Budget:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[active_hotels_with_budget (copy)].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([sold_hotels (copy)].[sum:Budget:qk] + [sold_hotels (copy)].[usr:Percent of Budget:qk])</rows>
        <cols>[active_hotels_with_budget (copy)].[none:Date Axis:qk]</cols>
        <join-lod-include-overrides>
          <column>[sold_hotels (copy)].[Ref Day]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Total Budget YoY'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Budget Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Budget]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Only Full Time Frames]&#13;&#10;WHEN &quot;True&quot; THEN IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;WHEN &quot;False&quot; THEN &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date without Year]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Aggregated By]&#13;&#10;    WHEN &quot;Month&quot; THEN [Month Name]&#13;&#10;    WHEN &quot;Week&quot; THEN &quot;Week &quot; + STR(DATEPART(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Day&quot; THEN [MM] + &quot;-&quot; + [DD]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date without Year]' derivation='None' name='[none:Date without Year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Budget]' derivation='Sum' name='[sum:Budget:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[sold_hotels (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[sold_hotels (copy)].[none:Filter for Channel Type:nk]'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[sold_hotels (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[sold_hotels (copy)].[none:Date:qk]</column>
            <column>[sold_hotels (copy)].[none:Filter for Channel Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[sold_hotels (copy)].[yr:Date:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[sold_hotels (copy)].[sum:Budget:qk]</rows>
        <cols>[sold_hotels (copy)].[none:Date without Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Week Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>                             Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt;&#10;                             vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run bold='true'>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Week]-[Available eCPM - PW])/[Available eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Week]-[Served eCPM - PW])/[Served eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PW]' derivation='User' name='[usr:Available eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - Ref Week]' derivation='User' name='[usr:Available eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PW]' derivation='User' name='[usr:Served eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - Ref Week]' derivation='User' name='[usr:Served eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='text-align' value='right' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='54' />
            <format attr='height' field='[publisher_data (copy)].[none:Pub:nk]' value='48' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data (copy)].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[publisher_data (copy)].[none:Date:qk]' value='Date'>
              <formatted-text>
                <run fontsize='8'>Date</run>
              </formatted-text>
            </format>
            <format attr='font-size' value='8' />
            <format attr='title' field='[publisher_data (copy)].[none:Country:nk]' value='Country'>
              <formatted-text>
                <run fontsize='8'>Country</run>
              </formatted-text>
            </format>
            <format attr='title' field='[publisher_data (copy)].[none:Finance Region:nk]' value='Finance Region'>
              <formatted-text>
                <run fontsize='8'>Finance Region</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Week Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>                                         Week Ending &lt;[publisher_data (copy)].[tdy:Ref Day:qk]&gt; &#10;                                          vs. Week Ending &lt;[publisher_data (copy)].[tdy:SDPW:qk]&gt;</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - Ref Week]-[Ads per Page - PW])/[Ads per Page - PW]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - Ref Week]-[Available eCPM - PW])/[Available eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Available - Ref Week])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - Ref Week]-[CPC - PW])/[CPC - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Clicks - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - Ref Week]-[CTR - PW])/[CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - Ref Week])-sum([Clicks - PW]))/sum([Clicks - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - Ref Week]-[Fill Rate - PW])/[Fill Rate - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - Ref Week])/sum([Pages Available - Ref Week])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - Ref Week])-sum([Gross Media Revenue - PW]))/sum([Gross Media Revenue - PW])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - Ref Week])-sum([Impressions Served - PW]))/sum([Impressions Served - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions Served] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - Ref Week]-[Page CTR - PW])/[Page CTR - PW]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Pages Served - Ref Week])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - Ref Week])-sum([Pages Available - PW]))/sum([Pages Available - PW])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Available] END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - Ref Week])-sum([Pages Served - PW]))/sum([Pages Served - PW])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Pages Served] END' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day]-7' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - Ref Week]-[Served eCPM - PW])/[Served eCPM - PW]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - Ref Week])/sum([Pages Served - Ref Week])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - Ref Week]' derivation='Sum' name='[sum:Clicks - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - Ref Week]' derivation='Sum' name='[sum:Gross Media Revenue - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - Ref Week]' derivation='Sum' name='[sum:Impressions Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - Ref Week]' derivation='Sum' name='[sum:Pages Available - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - Ref Week]' derivation='Sum' name='[sum:Pages Served - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='Day-Trunc' name='[tdy:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PW]' derivation='User' name='[usr:Ads per Page - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - Ref Week]' derivation='User' name='[usr:Ads per Page - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PW]' derivation='User' name='[usr:Available eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - Ref Week]' derivation='User' name='[usr:Available eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PW]' derivation='User' name='[usr:CPC - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - Ref Week]' derivation='User' name='[usr:CPC - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PW]' derivation='User' name='[usr:CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - Ref Week]' derivation='User' name='[usr:CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PW]' derivation='User' name='[usr:Clicks - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PW]' derivation='User' name='[usr:Fill Rate - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - Ref Week]' derivation='User' name='[usr:Fill Rate - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PW]' derivation='User' name='[usr:Gross Media Revenue - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PW]' derivation='User' name='[usr:Impressions Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PW]' derivation='User' name='[usr:Page CTR - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - Ref Week]' derivation='User' name='[usr:Page CTR - Ref Week:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PW]' derivation='User' name='[usr:Pages Available - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PW]' derivation='User' name='[usr:Pages Served - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PW]' derivation='User' name='[usr:Served eCPM - %D PW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - Ref Week]' derivation='User' name='[usr:Served eCPM - Ref Week:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank (copy):qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PW:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - Ref Week:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PW:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[tdy:SDPW:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='integer' name='[Blank]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF 1=0 THEN 1 END' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Net Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Pub] = &quot;Travelocity&quot; THEN&#13;&#10;[Gross Media Revenue - YTD]*0.7332&#13;&#10;ELSE&#13;&#10;[Gross Media Revenue - YTD]*0.752&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blank]' derivation='Sum' name='[sum:Blank:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Net Media Revenue - YTD]' derivation='Sum' name='[sum:Net Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - YTD]' derivation='User' name='[usr:Available eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - YTD]' derivation='User' name='[usr:Served eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Net Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Net Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Blank:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='240' />
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#f7f7f7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='YTD Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Current Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:Ref Day:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> &#10;  vs. </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[none:Previous Year:ok]</run>
            <run bold='true' fontsize='12'>&gt;</run>
            <run bold='true' fontsize='12'> through </run>
            <run bold='true' fontsize='12'>&lt;</run>
            <run bold='true' fontsize='12'>[publisher_data (copy)].[tdy:SDPY:qk]</run>
            <run bold='true' fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - YTD]-[Available eCPM - PYTD])/[Available eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - YTD]-[Served eCPM - PYTD])/[Served eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PYTD]' derivation='User' name='[usr:Available eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - YTD]' derivation='User' name='[usr:Available eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PYTD]' derivation='User' name='[usr:Served eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - YTD]' derivation='User' name='[usr:Served eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
            <format attr='height' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='58' />
            <format attr='height' field='[publisher_data (copy)].[none:Pub:nk]' value='40' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='true' />
            <format attr='font-weight' field='[publisher_data (copy)].[none:Pub:nk]' value='bold' />
            <format attr='text-decoration' field='[publisher_data (copy)].[none:Pub:nk]' value='underline' />
            <format attr='text-align' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Year:ok]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
              <lod column='[publisher_data (copy)].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD Data 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data (copy)].[none:Current Year:ok]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> through </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data (copy)].[tdy:Ref Day:qk]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> &#10;  vs. </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data (copy)].[none:Previous Year:ok]</run>
            <run fontsize='12'>&gt;</run>
            <run fontsize='12'> through </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[publisher_data (copy)].[tdy:SDPY:qk]</run>
            <run fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='real' default-format='p0.0%' name='[Ads per Page - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Ads per Page - YTD]-[Ads per Page - PYTD])/[Ads per Page - PYTD]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Ads per Page - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions Served - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Available eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Available eCPM - YTD]-[Available eCPM - PYTD])/[Available eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Available eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Available - YTD])*1000' />
            </column>
            <column datatype='string' name='[Breakdown Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Breakdown]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;WHEN &quot;Page Type&quot; THEN [Type of Ad Unit]&#13;&#10;WHEN &quot;Segment&quot; THEN [Segment]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CPC - YTD]-[CPC - PYTD])/[CPC - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Clicks - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([CTR - YTD]-[CTR - PYTD])/[CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Impressions Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicks - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Clicks - YTD])-sum([Clicks - PYTD]))/sum([Clicks - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Clicks - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Clicks]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='integer' name='[Current Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='YEAR([Ref Day])' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Fill Rate - YTD]-[Fill Rate - PYTD])/[Fill Rate - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Fill Rate - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Pages Served - YTD])/sum([Pages Available - YTD])' />
            </column>
            <column datatype='string' name='[Filter for Ad Unit Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Ad Unit Type] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF CONTAINS([Parameters].[Ad Unit Type],&quot;Total&quot;) THEN IF [Parameters].[Ad Unit Type] = [Type of Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Ad Unit Type] = [Ad Unit] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='boolean' name='[Filter for Channel Type]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='string' name='[Filter for Publisher]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Publisher] = &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSEIF [Parameters].[Publisher] = &quot;OWW&quot; OR [Parameters].[Publisher] = &apos;Travelport&apos; THEN IF [Pub] = [Parameters].[Publisher] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;ELSE IF [Parameters].[Publisher] = [Site] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Gross Media Revenue - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Gross Media Revenue - YTD])-sum([Gross Media Revenue - PYTD]))/sum([Gross Media Revenue - PYTD])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Gross Media Revenue - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Spend]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impressions Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Impressions Served - YTD])-sum([Impressions Served - PYTD]))/sum([Impressions Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Impressions Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Impressions Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Page CTR - YTD]-[Page CTR - PYTD])/[Page CTR - PYTD]' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Page CTR - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks - YTD])/sum([Pages Served - YTD])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Available - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Available - YTD])-sum([Pages Available - PYTD]))/sum([Pages Available - PYTD])' />
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Pages Available - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Available]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Pages Served - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([Pages Served - YTD])-sum([Pages Served - PYTD]))/sum([Pages Served - PYTD])' />
            </column>
            <column datatype='integer' default-format='N' name='[Pages Served - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Pages Served]&#13;&#10;END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Previous Year]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Current Year]-1' />
            </column>
            <column datatype='string' name='[Pub]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPY]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATEADD(&apos;year&apos;,-1, [Ref Day]))' />
            </column>
            <column aggregation='CountD' datatype='string' name='[Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Served eCPM - %D PYTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Served eCPM - YTD]-[Served eCPM - PYTD])/[Served eCPM - PYTD]' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Served eCPM - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Gross Media Revenue - YTD])/sum([Pages Served - YTD])*1000' />
            </column>
            <column-instance column='[Breakdown Color]' derivation='None' name='[none:Breakdown Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Current Year]' derivation='None' name='[none:Current Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Ad Unit Type]' derivation='None' name='[none:Filter for Ad Unit Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Channel Type]' derivation='None' name='[none:Filter for Channel Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Filter for Publisher]' derivation='None' name='[none:Filter for Publisher:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Previous Year]' derivation='None' name='[none:Previous Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pub]' derivation='None' name='[none:Pub:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks - YTD]' derivation='Sum' name='[sum:Clicks - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - YTD]' derivation='Sum' name='[sum:Gross Media Revenue - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - YTD]' derivation='Sum' name='[sum:Impressions Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - YTD]' derivation='Sum' name='[sum:Pages Available - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - YTD]' derivation='Sum' name='[sum:Pages Served - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPY]' derivation='Day-Trunc' name='[tdy:SDPY:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - %D PYTD]' derivation='User' name='[usr:Ads per Page - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ads per Page - YTD]' derivation='User' name='[usr:Ads per Page - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - %D PYTD]' derivation='User' name='[usr:Available eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Available eCPM - YTD]' derivation='User' name='[usr:Available eCPM - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - %D PYTD]' derivation='User' name='[usr:CPC - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC - YTD]' derivation='User' name='[usr:CPC - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - %D PYTD]' derivation='User' name='[usr:CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR - YTD]' derivation='User' name='[usr:CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks - %D PYTD]' derivation='User' name='[usr:Clicks - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - %D PYTD]' derivation='User' name='[usr:Fill Rate - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Fill Rate - YTD]' derivation='User' name='[usr:Fill Rate - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gross Media Revenue - %D PYTD]' derivation='User' name='[usr:Gross Media Revenue - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions Served - %D PYTD]' derivation='User' name='[usr:Impressions Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - %D PYTD]' derivation='User' name='[usr:Page CTR - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Page CTR - YTD]' derivation='User' name='[usr:Page CTR - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Available - %D PYTD]' derivation='User' name='[usr:Pages Available - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pages Served - %D PYTD]' derivation='User' name='[usr:Pages Served - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - %D PYTD]' derivation='User' name='[usr:Served eCPM - %D PYTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served eCPM - YTD]' derivation='User' name='[usr:Served eCPM - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[publisher_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[publisher_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Available - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Available - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Fill Rate - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Pages Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Pages Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Ads per Page - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Impressions Served - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Impressions Served - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CTR - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Clicks - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Clicks - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:CPC - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[sum:Gross Media Revenue - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Gross Media Revenue - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Available eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Served eCPM - \%D PYTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - YTD:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Page CTR - \%D PYTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[publisher_data (copy)].[none:Breakdown Color:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Total&quot;</bucket>
              <bucket>&quot;Total Hotel List Page&quot;</bucket>
              <bucket>&quot;Hotel Details Page&quot;</bucket>
              <bucket>&quot;Total Packages List Page&quot;</bucket>
              <bucket>&quot;Total Flight-Hotel Cross-Sell Page&quot;</bucket>
              <bucket>&quot;Total SEM List Page&quot;</bucket>
              <bucket>&quot;Orbitz&quot;</bucket>
              <bucket>&quot;CheapTickets&quot;</bucket>
              <bucket>&quot;ebookers&quot;</bucket>
              <bucket>&quot;HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity&quot;</bucket>
              <bucket>&quot;Top 10&quot;</bucket>
              <bucket>&quot;11 to 40&quot;</bucket>
              <bucket>&quot;Rest of US&quot;</bucket>
              <bucket>&quot;International&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - Orbitz Classic&quot;</bucket>
              <bucket>&quot;Hotel Details Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - Orbitz Global&quot;</bucket>
              <bucket>&quot;Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel Details Page - CheapTickets&quot;</bucket>
              <bucket>&quot;SEM Hotel List Page - CheapTickets&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.com&quot;</bucket>
              <bucket>&quot;Hotel List Page - ebookers.ie&quot;</bucket>
              <bucket>&quot;Hotel List Page - HotelClub&quot;</bucket>
              <bucket>&quot;Travelocity List Page (Legacy)&quot;</bucket>
              <bucket>&quot;Travelocity List Page (New Platform)&quot;</bucket>
              <bucket>&quot;Travelocity Package Page&quot;</bucket>
              <bucket>&quot;Travelocity Martini Package Page&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:Filter for Ad Unit Type:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Channel Type:nk]' filter-group='12'>
            <groupfilter function='member' level='[none:Filter for Channel Type:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[publisher_data (copy)].[none:Filter for Publisher:nk]' filter-group='9'>
            <groupfilter function='member' level='[none:Filter for Publisher:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[publisher_data (copy)].[:Measure Names]</column>
            <column>[publisher_data (copy)].[none:Date:qk]</column>
            <column>[publisher_data (copy)].[none:Filter for Market:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Publisher:nk]</column>
            <column>[publisher_data (copy)].[none:Filter for Channel Type:nk]</column>
            <column>[publisher_data (copy)].[none:Breakdown Color:nk]</column>
            <column>[publisher_data (copy)].[none:Country:nk]</column>
            <column>[publisher_data (copy)].[none:Finance Region:nk]</column>
            <column>[publisher_data (copy)].[none:Segment:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='95' />
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='width' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='119' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[publisher_data (copy)].[:Measure Names]' value='216' />
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[publisher_data (copy)].[Multiple Values]' value='11' />
            <format attr='display' field='[publisher_data (copy)].[:Measure Names]' value='true' />
            <format attr='display' field='[publisher_data (copy)].[none:Pub:nk]' value='false' />
            <format attr='display' field='[publisher_data (copy)].[none:Breakdown Color:nk]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#e1e8fa' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='11' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='11' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='font-size' value='8' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[publisher_data (copy)].[Multiple Values]' />
              <lod column='[publisher_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[publisher_data (copy)].[none:Current Year:ok]' />
              <lod column='[publisher_data (copy)].[none:Previous Year:ok]' />
              <lod column='[publisher_data (copy)].[tdy:SDPY:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[publisher_data (copy)].[:Measure Names]</rows>
        <cols total='true'>([publisher_data (copy)].[none:Pub:nk] / [publisher_data (copy)].[none:Breakdown Color:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='YTD Hotels'>
      <table>
        <view>
          <datasources>
            <datasource caption='active_hotels_with_budget' name='active_hotels_with_budget (copy)' />
            <datasource name='Parameters' />
            <datasource caption='publisher_data' name='publisher_data (copy)' />
            <datasource caption='sold_hotels' name='sold_hotels (copy)' />
          </datasources>
          <datasource-dependencies datasource='active_hotels_with_budget (copy)'>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Active Hotels - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD(&#13;&#10;IF DATETRUNC(&apos;year&apos;, [Date]) = DATETRUNC(&apos;year&apos;,[Ref Day])&#13;&#10;THEN &#13;&#10;(IF [Date] &lt;= [Ref Day]&#13;&#10;THEN [Advertiser ID]&#13;&#10;END)&#13;&#10;END&#13;&#10;)' />
            </column>
            <column caption='Budget per Hotel - YTD' datatype='real' default-format='C1033%' name='[Calculation_2790106162448809]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([sold_hotels (copy)].[Budget - YTD])/[Active Hotels - YTD]' scope-isolation='false' />
            </column>
            <column caption='Filter for Channel Type' datatype='boolean' name='[Calculation_8830912141655380]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] = &quot;Total&quot; OR [Parameters].[Parameter 1] = [SSN Channel Type]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column caption='Region' datatype='string' name='[Finance Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Yesterday or Reference Day] = &quot;Yesterday&quot; THEN&#13;&#10;TODAY()-1&#13;&#10;ELSE&#13;&#10;[Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column-instance column='[Calculation_8830912141655380]' derivation='None' name='[none:Calculation_8830912141655380:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Filter for Market]' derivation='None' name='[none:Filter for Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Finance Region]' derivation='None' name='[none:Finance Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Active Hotels - YTD]' derivation='User' name='[usr:Active Hotels - YTD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2790106162448809]' derivation='User' name='[usr:Calculation_2790106162448809:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='publisher_data (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='boolean' name='[Filter for Market]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([Parameters].[Market] = &quot;Total&quot;) OR ([Parameters].[Market] = [Market Name])' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Hotels per Auction - YTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Auction Participant Count - YTD])/sum([Pages Available - YTD])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Hotels per Auction - YTD]' derivation='User' name='[usr:Hotels per Auction - YTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='sold_hotels (copy)'>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[SSN Channel Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sold Hotels as of Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='RUNNING_SUM(SUM(IF [Date] &lt;= [Ref Day] THEN [Sold Hotels] END))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Sold Hotels as of Ref Day]' derivation='User' name='[usr:Sold Hotels as of Ref Day:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - YTD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[active_hotels_with_budget (copy)].[usr:Calculation_2790106162448809:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[publisher_data (copy)].[usr:Hotels per Auction - YTD:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[active_hotels_with_budget (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[sold_hotels (copy)].[usr:Sold Hotels as of Ref Day:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Active Hotels - YTD:qk]&quot;</bucket>
              <bucket>&quot;[active_hotels_with_budget (copy)].[usr:Calculation_2790106162448809:qk]&quot;</bucket>
              <bucket>&quot;[publisher_data (copy)].[usr:Hotels per Auction - YTD:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:Calculation_8830912141655380:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[active_hotels_with_budget (copy)].[none:Filter for Market:nk]'>
            <groupfilter function='member' level='[none:Filter for Market:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[active_hotels_with_budget (copy)].[none:Filter for Market:nk]</column>
            <column>[active_hotels_with_budget (copy)].[:Measure Names]</column>
            <column>[active_hotels_with_budget (copy)].[none:Date:qk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Country:nk]</column>
            <column>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[Multiple Values]' value='12' />
            <format attr='width' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='77' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='216' />
            <format attr='height' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='16' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]' value='false' />
            <format attr='font-size' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='12' />
            <format attr='display' field='[active_hotels_with_budget (copy)].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[active_hotels_with_budget (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[active_hotels_with_budget (copy)].[:Measure Names]</rows>
        <cols>[active_hotels_with_budget (copy)].[tdy:Ref Day:ok]</cols>
        <join-lod-include-overrides>
          <column>[publisher_data (copy)].[Date]</column>
          <column>[publisher_data (copy)].[Filter for Market]</column>
          <column>[publisher_data (copy)].[SSN Channel Type]</column>
          <column>[sold_hotels (copy)].[Date]</column>
          <column>[sold_hotels (copy)].[SSN Channel Type]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Advertiser Metrics'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Advertiser Metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1300' minheight='1600' minwidth='1300' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='17' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='16' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97500' id='4' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97500' id='2' type='layout-basic' w='84692' x='0' y='2500'>
                <zone h='24375' id='9' name='Conversions per Click' show-title='true' w='42346' x='0' y='51250'>
                </zone>
                <zone h='24375' id='11' name='Conversions per Impression' show-title='true' w='42346' x='42346' y='51250'>
                </zone>
                <zone h='24375' id='14' name='Clicked ROI' show-title='true' w='42346' x='0' y='75625'>
                </zone>
                <zone h='24375' id='15' name='Exposed ROI' show-title='true' w='42346' x='42346' y='75625'>
                </zone>
                <zone h='20500' id='30' name='Total Budget' show-title='true' w='42346' x='42346' y='2500'>
                </zone>
                <zone h='26250' id='33' name='Average Budget per Hotel' show-title='true' w='42346' x='42346' y='25000'>
                </zone>
                <zone h='26250' id='37' name='Percent of Hotels Active' show-title='true' w='42346' x='0' y='25000'>
                </zone>
                <zone h='20500' id='39' name='Active and Sold Hotels' show-title='true' w='42346' x='0' y='2500'>
                </zone>
                <zone h='2000' id='43' name='Active and Sold Hotels' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' w='42346' x='0' y='23000'>
                </zone>
                <zone h='2000' id='44' name='Total Budget' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' w='42346' x='42346' y='23000'>
                </zone>
              </zone>
              <zone fixed-size='199' h='97500' id='20' is-fixed='true' type='layout-basic' w='15308' x='84692' y='2500'>
                <zone h='48750' id='3' param='vert' type='layout-flow' w='15308' x='84692' y='2500'>
                  <zone h='3125' id='46' param='[Parameters].[Parameter 1]' type='paramctrl' w='15308' x='84692' y='2500'>
                  </zone>
                  <zone h='4063' id='45' name='Total Budget' param='[active_hotels_with_budget (copy)].[none:Date:qk]' type='filter' w='15308' x='84692' y='5625'>
                  </zone>
                  <zone h='41562' id='19' type='empty' w='15308' x='84692' y='9688'>
                  </zone>
                </zone>
                <zone h='48750' id='21' param='vert' type='layout-flow' w='15308' x='84692' y='51250'>
                  <zone h='3125' id='26' param='[Parameters].[Publisher]' type='paramctrl' w='15308' x='84692' y='51250'>
                  </zone>
                  <zone h='3125' id='27' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='15308' x='84692' y='54375'>
                  </zone>
                  <zone h='3125' id='25' param='[Parameters].[Market]' type='paramctrl' w='15308' x='84692' y='57500'>
                  </zone>
                  <zone h='3188' id='47' name='Conversions per Impression' param='[market_data (copy)].[none:Country:nk]' type='filter' w='15308' x='84692' y='60625'>
                  </zone>
                  <zone h='3188' id='48' name='Conversions per Impression' param='[market_data (copy)].[none:Finance Region:nk]' type='filter' w='15308' x='84692' y='63813'>
                  </zone>
                  <zone h='3125' id='6' param='[Parameters].[Breakdown]' type='paramctrl' w='15308' x='84692' y='67001'>
                  </zone>
                  <zone h='3125' id='7' param='[Parameters].[Aggregated By]' type='paramctrl' w='15308' x='84692' y='70126'>
                  </zone>
                  <zone h='3125' id='40' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='15308' x='84692' y='73251'>
                  </zone>
                  <zone h='4063' id='41' name='Conversions per Impression' param='[market_data (copy)].[none:Date:qk]' type='filter' w='15308' x='84692' y='76376'>
                  </zone>
                  <zone h='1313' id='22' type='text' w='15308' x='84692' y='80439'>
                    <formatted-text>
                      <run bold='true' fontalignment='0'>&lt;</run>
                      <run bold='true' fontalignment='0'>[Parameters].[Breakdown]</run>
                      <run bold='true' fontalignment='0'>&gt;</run>
                    </formatted-text>
                  </zone>
                  <zone h='18248' id='10' name='Conversions per Click' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' w='15308' x='84692' y='81752'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Advertiser Metrics Year over Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Advertiser Metrics Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1300' minheight='1600' minwidth='1300' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='19' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97500' id='4' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97500' id='2' type='layout-basic' w='87692' x='0' y='2500'>
                <zone h='24375' id='7' name='Conversions per Click YoY' show-title='true' w='43846' x='0' y='51250'>
                </zone>
                <zone h='24375' id='9' name='Conversions per Impression YoY' show-title='true' w='43846' x='43846' y='51250'>
                </zone>
                <zone h='24375' id='12' name='Clicked ROI YoY' show-title='true' w='43846' x='0' y='75625'>
                </zone>
                <zone h='24375' id='13' name='Exposed ROI YoY' show-title='true' w='43846' x='43846' y='75625'>
                </zone>
                <zone h='24375' id='23' name='Active Hotels YoY' show-title='true' w='43846' x='0' y='2500'>
                </zone>
                <zone h='24375' id='27' name='Percent of Budget Used YoY' show-title='true' w='43846' x='43846' y='26875'>
                </zone>
                <zone h='24375' id='30' name='Total Budget YoY' show-title='true' w='43846' x='43846' y='2500'>
                </zone>
                <zone h='24375' id='34' name='Budget per Hotel YoY' show-title='true' w='43846' x='0' y='26875'>
                </zone>
              </zone>
              <zone fixed-size='160' h='97500' id='21' is-fixed='true' type='layout-basic' w='12308' x='87692' y='2500'>
                <zone h='48750' id='3' param='vert' type='layout-flow' w='12308' x='87692' y='2500'>
                  <zone h='3125' id='32' param='[Parameters].[Parameter 1]' type='paramctrl' w='12308' x='87692' y='2500'>
                  </zone>
                  <zone h='3125' id='17' param='[Parameters].[Aggregated By]' type='paramctrl' w='12308' x='87692' y='5625'>
                  </zone>
                  <zone h='3125' id='16' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='12308' x='87692' y='8750'>
                  </zone>
                  <zone h='4063' id='28' name='Active Hotels YoY' param='[active_hotels_with_budget (copy)].[none:Date:qk]' type='filter' w='12308' x='87692' y='11875'>
                  </zone>
                  <zone h='4063' id='33' name='Total Budget YoY' param='[sold_hotels (copy)].[none:Date:qk]' type='filter' w='12308' x='87692' y='15938'>
                  </zone>
                  <zone h='8875' id='24' name='Active Hotels YoY' param='[active_hotels_with_budget (copy)].[yr:Date:ok]' type='color' w='12308' x='87692' y='20001'>
                  </zone>
                  <zone h='22374' id='18' type='empty' w='12308' x='87692' y='28876'>
                  </zone>
                </zone>
                <zone h='48750' id='22' param='vert' type='layout-flow' w='12308' x='87692' y='51250'>
                  <zone h='3125' id='14' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='51250'>
                  </zone>
                  <zone h='3125' id='15' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='12308' x='87692' y='54375'>
                  </zone>
                  <zone h='4063' id='29' name='Conversions per Impression YoY' param='[market_data (copy)].[none:Date:qk]' type='filter' w='12308' x='87692' y='57500'>
                  </zone>
                  <zone h='8875' id='8' name='Conversions per Click YoY' param='[market_data (copy)].[yr:Date:ok]' type='color' w='12308' x='87692' y='61563'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='CSV Download'>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1900' minheight='1200' minwidth='1900' />
      <zones>
        <zone h='100000' id='9' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='2' type='layout-basic' w='91579' x='0' y='0'>
              <zone h='100000' id='1' name='CSV' w='91579' x='0' y='0'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='3' is-fixed='true' param='vert' type='layout-flow' w='8421' x='91579' y='0'>
              <zone h='4499' id='10' param='[Parameters].[Parameter 1]' type='paramctrl' w='8421' x='91579' y='0'>
              </zone>
              <zone h='4166' id='6' param='[Parameters].[Publisher]' type='paramctrl' w='8421' x='91579' y='4499'>
              </zone>
              <zone h='4166' id='7' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='8421' x='91579' y='8665'>
              </zone>
              <zone h='4166' id='8' param='[Parameters].[Market]' type='paramctrl' w='8421' x='91579' y='12831'>
              </zone>
              <zone h='4249' id='11' name='CSV' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='8421' x='91579' y='16997'>
              </zone>
              <zone h='4249' id='12' name='CSV' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='8421' x='91579' y='21246'>
              </zone>
              <zone h='5416' id='5' name='CSV' param='[publisher_data (copy)].[none:Date:qk]' type='filter' w='8421' x='91579' y='25495'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='GDS Pilot Performance by Market'>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1800' minheight='1600' minwidth='1800' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='8' param='vert' type='layout-flow' w='91111' x='0' y='0'>
              <zone h='2500' id='7' type='title' w='91111' x='0' y='0'>
              </zone>
              <zone h='97250' id='6' type='layout-basic' w='91111' x='0' y='2500'>
                <zone h='41500' id='20' name='GDS by Market' w='85389' x='0' y='2500'>
                </zone>
                <zone h='41500' id='21' name='GDS Total' w='5722' x='85389' y='2500'>
                </zone>
                <zone h='55750' id='22' name='OTA by Market' w='85389' x='0' y='44000'>
                </zone>
                <zone h='55750' id='23' name='OTA Total' w='5722' x='85389' y='44000'>
                </zone>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='9' is-fixed='true' param='vert' type='layout-flow' w='8889' x='91111' y='0'>
              <zone h='3375' id='19' param='[Parameters].[Parameter 2]' type='paramctrl' w='8889' x='91111' y='0'>
              </zone>
              <zone h='3125' id='18' param='[Parameters].[Parameter 4]' type='paramctrl' w='8889' x='91111' y='3375'>
              </zone>
              <zone h='3125' id='16' param='[Parameters].[Parameter 3]' type='paramctrl' w='8889' x='91111' y='6500'>
              </zone>
              <zone h='3125' id='17' param='[Parameters].[GDS Ad Unit Type (copy)]' type='paramctrl' w='8889' x='91111' y='9625'>
              </zone>
              <zone h='3188' id='24' name='GDS by Market' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='8889' x='91111' y='12750'>
              </zone>
              <zone h='3188' id='25' name='GDS by Market' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='8889' x='91111' y='15938'>
              </zone>
              <zone h='5063' id='11' param='[Parameters].[Aggregated By]' type='paramctrl' w='8889' x='91111' y='19126'>
              </zone>
              <zone h='3125' id='15' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='8889' x='91111' y='24189'>
              </zone>
              <zone h='2938' id='14' param='[Parameters].[Reference Day]' type='paramctrl' w='8889' x='91111' y='27314'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Gross Revenue Trend'>
      <style>
      </style>
      <size maxheight='1100' maxwidth='1800' minheight='1100' minwidth='1800' />
      <zones>
        <zone h='100000' id='9' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='2' type='layout-basic' w='92278' x='0' y='0'>
              <zone h='53600' id='1' name='Gross Revenue Graph' show-title='true' w='92278' x='0' y='0'>
              </zone>
              <zone h='28091' id='7' name='Ref Week' w='6278' x='27833' y='71909'>
              </zone>
              <zone h='28091' id='12' name='PW' w='5000' x='34111' y='71909'>
              </zone>
              <zone h='28091' id='14' name='SWPY' w='5333' x='39111' y='71909'>
              </zone>
              <zone h='28091' id='15' name='MTD' w='6223' x='44444' y='71909'>
              </zone>
              <zone h='28091' id='16' name='PMTD' w='5500' x='50667' y='71909'>
              </zone>
              <zone h='28091' id='17' name='SMTDPY' w='5222' x='56167' y='71909'>
              </zone>
              <zone h='28091' id='18' name='QTD' w='6667' x='61389' y='71909'>
              </zone>
              <zone h='28091' id='19' name='PQTD' w='5444' x='68056' y='71909'>
              </zone>
              <zone h='28091' id='20' name='SQTDPY' w='5778' x='73500' y='71909'>
              </zone>
              <zone h='28091' id='21' name='YTD' w='7166' x='79278' y='71909'>
              </zone>
              <zone h='28091' id='22' name='PYTD' w='5834' x='86444' y='71909'>
              </zone>
              <zone h='3200' id='6' name='Gross Revenue Graph' param='[publisher_data (copy)].[yr:Date:ok]' type='color' w='69889' x='22389' y='53600'>
              </zone>
              <zone h='6350' id='25' name='Title Week' show-title='true' w='16611' x='27833' y='56800'>
              </zone>
              <zone h='6382' id='35' name='Blank Title' show-title='true' w='11667' x='0' y='56800'>
              </zone>
              <zone h='6382' id='36' name='Title MTD' show-title='true' w='16945' x='44444' y='56800'>
              </zone>
              <zone h='6400' id='37' name='Title QTD' show-title='true' w='17889' x='61389' y='56800'>
              </zone>
              <zone h='6400' id='38' name='Title YTD' show-title='true' w='13000' x='79278' y='56800'>
              </zone>
              <zone h='28091' id='41' name='Ref Day' w='17833' x='0' y='71909'>
              </zone>
              <zone h='28091' id='45' name='SDPW' w='4611' x='17833' y='71909'>
              </zone>
              <zone h='28091' id='47' name='SDPY' w='5389' x='22444' y='71909'>
              </zone>
              <zone h='6382' id='48' name='Title Day' show-title='true' w='16166' x='11667' y='56800'>
              </zone>
              <zone h='3200' id='49' type='empty' w='22389' x='0' y='53600'>
              </zone>
              <zone h='8727' id='51' name='Ref Day Hotels' w='17833' x='0' y='63182'>
              </zone>
              <zone h='8727' id='52' name='SDPW Hotels' w='4611' x='17833' y='63182'>
              </zone>
              <zone h='8727' id='53' name='SDPY Hotels' w='5389' x='22444' y='63182'>
              </zone>
              <zone h='8759' id='54' name='Ref Week Hotels' w='6278' x='27833' y='63150'>
              </zone>
              <zone h='8759' id='55' name='PW Hotels' w='5000' x='34111' y='63150'>
              </zone>
              <zone h='8759' id='56' name='SWPY Hotels' w='5333' x='39111' y='63150'>
              </zone>
              <zone h='8727' id='57' name='MTD Hotels' w='6223' x='44444' y='63182'>
              </zone>
              <zone h='8727' id='58' name='PMTD Hotels' w='5500' x='50667' y='63182'>
              </zone>
              <zone h='8727' id='59' name='SMTDPY Hotels' w='5222' x='56167' y='63182'>
              </zone>
              <zone h='8709' id='60' name='QTD Hotels' w='6667' x='61389' y='63200'>
              </zone>
              <zone h='8709' id='61' name='PQTD Hotels' w='5444' x='68056' y='63200'>
              </zone>
              <zone h='8709' id='62' name='SQTDPY Hotels' w='5778' x='73500' y='63200'>
              </zone>
              <zone h='8709' id='63' name='YTD Hotels' w='7166' x='79278' y='63200'>
              </zone>
              <zone h='8709' id='64' name='PYTD Hotels' w='5834' x='86444' y='63200'>
              </zone>
            </zone>
            <zone fixed-size='139' h='100000' id='3' is-fixed='true' param='vert' type='layout-flow' w='7722' x='92278' y='0'>
              <zone h='4910' id='68' param='[Parameters].[Parameter 1]' type='paramctrl' w='7722' x='92278' y='0'>
              </zone>
              <zone h='4546' id='8' param='[Parameters].[Publisher]' type='paramctrl' w='7722' x='92278' y='4910'>
              </zone>
              <zone h='4546' id='50' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='7722' x='92278' y='9456'>
              </zone>
              <zone h='4546' id='65' param='[Parameters].[Market]' type='paramctrl' w='7722' x='92278' y='14002'>
              </zone>
              <zone h='4637' id='69' name='Ref Day Hotels' param='[active_hotels_with_budget (copy)].[none:Country:nk]' type='filter' w='7722' x='92278' y='18548'>
              </zone>
              <zone h='4637' id='70' name='Ref Day Hotels' param='[active_hotels_with_budget (copy)].[none:Finance Region:nk]' type='filter' w='7722' x='92278' y='23185'>
              </zone>
              <zone h='5637' id='66' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='7722' x='92278' y='27822'>
                <formatted-text>
                  <run>Yesterday &#10;or Reference Day</run>
                </formatted-text>
              </zone>
              <zone h='4273' id='67' param='[Parameters].[Reference Day]' type='paramctrl' w='7722' x='92278' y='33459'>
              </zone>
              <zone h='5910' id='5' name='Gross Revenue Graph' param='[publisher_data (copy)].[none:Date:qk]' type='filter' w='7722' x='92278' y='37732'>
              </zone>
              <zone h='4637' id='71' name='Gross Revenue Graph' param='[publisher_data (copy)].[none:Segment:nk]' type='filter' w='7722' x='92278' y='43642'>
              </zone>
              <zone h='6364' id='72' type='text' w='7722' x='92278' y='48279'>
                <formatted-text>
                  <run fontcolor='#b40f1e'>*Market Filter does not apply to Sold Hotels,&#10;Active Hotels,Budgets per Hotel, or&#10;Hotels per auction</run>
                </formatted-text>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Key Performance Metrics by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics by Market</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1100' maxwidth='1500' minheight='1100' minwidth='1500' />
      <zones>
        <zone h='100000' id='13' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='3637' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='96363' id='4' param='horz' type='layout-flow' w='100000' x='0' y='3637'>
              <zone h='96363' id='2' type='layout-basic' w='89333' x='0' y='3637'>
                <zone h='96363' id='20' name='Key Performance Metrics Performance' w='89333' x='0' y='3637'>
                </zone>
              </zone>
              <zone fixed-size='160' h='96363' id='3' is-fixed='true' param='vert' type='layout-flow' w='10667' x='89333' y='3637'>
                <zone h='4546' id='17' param='[Parameters].[Parameter 1]' type='paramctrl' w='10667' x='89333' y='3637'>
                </zone>
                <zone h='4546' id='5' param='[Parameters].[Publisher]' type='paramctrl' w='10667' x='89333' y='8183'>
                </zone>
                <zone h='4546' id='6' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='10667' x='89333' y='12729'>
                </zone>
                <zone h='4637' id='21' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='10667' x='89333' y='17275'>
                </zone>
                <zone h='4637' id='22' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='10667' x='89333' y='21912'>
                </zone>
                <zone h='4546' id='11' param='[Parameters].[Aggregated By]' type='paramctrl' w='10667' x='89333' y='26549'>
                </zone>
                <zone h='5637' id='7' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='10667' x='89333' y='31095'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='4273' id='8' param='[Parameters].[Reference Day]' type='paramctrl' w='10667' x='89333' y='36732'>
                </zone>
                <zone h='4637' id='23' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Segment:nk]' type='filter' w='10667' x='89333' y='41005'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Market Tornados'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Market Tornados</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1300' minheight='1200' minwidth='1300' />
      <zones>
        <zone h='100000' id='3' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='18' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='3332' id='17' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='96668' id='10' param='horz' type='layout-flow' w='100000' x='0' y='3332'>
              <zone h='96668' id='4' param='horz' type='layout-flow' w='87692' x='0' y='3332'>
                <zone h='96668' id='2' type='layout-basic' w='87692' x='0' y='3332'>
                  <zone h='96668' id='1' name='Tornado - Day' show-title='true' w='30516' x='0' y='3332'>
                  </zone>
                  <zone h='96668' id='6' name='Tornado - Week' show-title='true' w='28758' x='30516' y='3332'>
                  </zone>
                  <zone h='96668' id='8' name='Tornado - MTD' show-title='true' w='28418' x='59274' y='3332'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='96668' id='9' is-fixed='true' param='vert' type='layout-flow' w='12308' x='87692' y='3332'>
                <zone h='4166' id='19' param='[Parameters].[Parameter 1]' type='paramctrl' w='12308' x='87692' y='3332'>
                </zone>
                <zone h='4166' id='11' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='7498'>
                </zone>
                <zone h='4166' id='12' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='12308' x='87692' y='11664'>
                </zone>
                <zone h='4166' id='13' param='[Parameters].[Metric]' type='paramctrl' w='12308' x='87692' y='15830'>
                </zone>
                <zone h='4166' id='14' param='[Parameters].[Difference Type]' type='paramctrl' w='12308' x='87692' y='19996'>
                </zone>
                <zone h='4249' id='20' name='Tornado - Week' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='12308' x='87692' y='24162'>
                </zone>
                <zone h='4249' id='21' name='Tornado - Week' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='12308' x='87692' y='28411'>
                </zone>
                <zone h='5166' id='15' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='12308' x='87692' y='32660'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='3916' id='16' param='[Parameters].[Reference Day]' type='paramctrl' w='12308' x='87692' y='37826'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Performance by Region and Country'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics by Region &amp; Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1100' maxwidth='1500' minheight='1100' minwidth='1500' />
      <zones>
        <zone h='100000' id='13' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='96364' id='10' param='vert' type='layout-flow' w='12867' x='87133' y='3636'>
            <zone h='28819' id='4' param='horz' type='layout-flow' w='12867' x='87133' y='3636'>
              <zone fixed-size='160' h='28819' id='3' is-fixed='true' param='vert' type='layout-flow' w='12867' x='87133' y='3636'>
                <zone h='4546' id='17' param='[Parameters].[Parameter 1]' type='paramctrl' w='12867' x='87133' y='3636'>
                </zone>
                <zone h='4546' id='5' param='[Parameters].[Publisher]' type='paramctrl' w='12867' x='87133' y='8182'>
                </zone>
                <zone h='4546' id='6' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='12867' x='87133' y='12728'>
                </zone>
                <zone h='4546' id='11' param='[Parameters].[Aggregated By]' type='paramctrl' w='12867' x='87133' y='17274'>
                </zone>
                <zone h='5637' id='7' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='12867' x='87133' y='21820'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='4273' id='8' param='[Parameters].[Reference Day]' type='paramctrl' w='12867' x='87133' y='27457'>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone h='96364' id='23' name='Performance by Region &amp; Country' w='87133' x='0' y='3636'>
          </zone>
          <zone h='3636' id='9' type='title' w='100000' x='0' y='0'>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Funnel by Page'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>Sheet Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='2700' maxwidth='2200' minheight='2700' minwidth='2200' />
      <zones>
        <zone h='100000' id='21' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='15' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1481' id='14' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98519' id='4' param='horz' type='layout-flow' w='100000' x='0' y='1481'>
              <zone h='98519' id='2' type='layout-basic' w='92727' x='0' y='1481'>
                <zone h='19260' id='1' name='Week Data' show-title='true' w='92727' x='0' y='1481'>
                </zone>
                <zone h='5185' id='7' name='Week Data 2' w='92727' x='0' y='20741'>
                </zone>
                <zone h='19111' id='8' name='28Days Data' show-title='true' w='92727' x='0' y='25926'>
                </zone>
                <zone h='5444' id='9' name='28Days Data 2' w='92727' x='0' y='45037'>
                </zone>
                <zone h='5741' id='11' name='QTD Data 2' w='92727' x='0' y='69370'>
                </zone>
                <zone h='5741' id='13' name='YTD Data 2' w='92727' x='0' y='94259'>
                </zone>
                <zone h='19148' id='12' name='YTD Data' show-title='true' w='92727' x='0' y='75111'>
                </zone>
                <zone h='18889' id='10' name='QTD Data' show-title='true' w='92727' x='0' y='50481'>
                </zone>
              </zone>
              <zone fixed-size='160' h='98519' id='3' is-fixed='true' param='vert' type='layout-flow' w='7273' x='92727' y='1481'>
                <zone h='1852' id='22' param='[Parameters].[Parameter 1]' type='paramctrl' w='7273' x='92727' y='1481'>
                </zone>
                <zone h='1852' id='6' param='[Parameters].[Publisher]' type='paramctrl' w='7273' x='92727' y='3333'>
                </zone>
                <zone h='1852' id='16' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='7273' x='92727' y='5185'>
                </zone>
                <zone h='1852' id='19' param='[Parameters].[Market]' type='paramctrl' w='7273' x='92727' y='7037'>
                </zone>
                <zone h='2037' id='23' name='Week Data' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='7273' x='92727' y='8889'>
                </zone>
                <zone h='2037' id='24' name='Week Data' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='7273' x='92727' y='10926'>
                </zone>
                <zone h='1852' id='20' param='[Parameters].[Breakdown]' type='paramctrl' w='7273' x='92727' y='12963'>
                </zone>
                <zone h='2296' id='17' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='7273' x='92727' y='14815'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='1740' id='18' param='[Parameters].[Reference Day]' type='paramctrl' w='7273' x='92727' y='17111'>
                </zone>
                <zone h='2555' id='5' name='Week Data' param='[publisher_data (copy)].[none:Date:qk]' type='filter' w='7273' x='92727' y='18851'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Metrics'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='2000' maxwidth='1400' minheight='2000' minwidth='1400' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2000' id='19' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97800' id='6' param='horz' type='layout-flow' w='100000' x='0' y='2000'>
              <zone h='97800' id='2' param='vert' type='layout-flow' w='83571' x='0' y='2000'>
                <zone h='97800' id='3' type='layout-basic' w='83571' x='0' y='2000'>
                  <zone h='18994' id='4' name='Pages Available' show-title='true' w='41786' x='0' y='2000'>
                  </zone>
                  <zone h='18994' id='10' name='Page Fill Rate' show-title='true' w='41785' x='41786' y='2000'>
                  </zone>
                  <zone h='20074' id='11' name='Gross Media Revenue' show-title='true' w='41786' x='0' y='60268'>
                  </zone>
                  <zone h='20074' id='12' name='Gross Media Revenue %' show-title='true' w='41785' x='41786' y='60268'>
                  </zone>
                  <zone h='19354' id='13' name='Page CTR' show-title='true' w='41786' x='0' y='40914'>
                  </zone>
                  <zone h='19354' id='14' name='CPC' show-title='true' w='41785' x='41786' y='40914'>
                  </zone>
                  <zone h='19920' id='15' name='Ad CTR' show-title='true' w='41786' x='0' y='20994'>
                  </zone>
                  <zone h='19920' id='16' name='Ads per Page' show-title='true' w='41785' x='41786' y='20994'>
                  </zone>
                  <zone h='19458' id='17' name='Available eCPM' show-title='true' w='41785' x='0' y='80342'>
                  </zone>
                  <zone h='19458' id='29' name='Hotels per Auction' show-title='true' w='41786' x='41785' y='80342'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='230' h='97800' id='5' is-fixed='true' param='vert' type='layout-flow' w='16429' x='83571' y='2000'>
                <zone h='2500' id='30' param='[Parameters].[Parameter 1]' type='paramctrl' w='16429' x='83571' y='2000'>
                </zone>
                <zone h='2500' id='24' param='[Parameters].[Publisher]' type='paramctrl' w='16429' x='83571' y='4500'>
                </zone>
                <zone h='2500' id='22' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='16429' x='83571' y='7000'>
                </zone>
                <zone h='2500' id='28' param='[Parameters].[Market]' type='paramctrl' w='16429' x='83571' y='9500'>
                </zone>
                <zone h='2550' id='31' name='Pages Available' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='16429' x='83571' y='12000'>
                </zone>
                <zone h='2550' id='32' name='Pages Available' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='16429' x='83571' y='14550'>
                </zone>
                <zone h='2500' id='8' param='[Parameters].[Breakdown]' type='paramctrl' w='16429' x='83571' y='17100'>
                </zone>
                <zone h='2500' id='23' param='[Parameters].[Aggregated By]' type='paramctrl' w='16429' x='83571' y='19600'>
                </zone>
                <zone h='2500' id='25' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='16429' x='83571' y='22100'>
                </zone>
                <zone h='3250' id='27' name='Pages Available' param='[publisher_data (copy)].[none:Date:qk]' type='filter' w='16429' x='83571' y='24600'>
                </zone>
                <zone h='1050' id='26' type='text' w='16429' x='83571' y='27850'>
                  <formatted-text>
                    <run bold='true' fontalignment='0'>&lt;</run>
                    <run bold='true' fontalignment='0'>[Parameters].[Breakdown]</run>
                    <run bold='true' fontalignment='0'>&gt;</run>
                  </formatted-text>
                </zone>
                <zone h='22400' id='21' name='Page Fill Rate' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' w='16429' x='83571' y='28900'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Publisher Metrics Year over Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Key Performance Metrics Year over Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1200' minheight='1600' minwidth='1200' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='23' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='2500' id='22' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='97250' id='6' param='horz' type='layout-flow' w='100000' x='0' y='2500'>
              <zone h='97250' id='2' param='vert' type='layout-flow' w='86667' x='0' y='2500'>
                <zone h='97250' id='3' type='layout-basic' w='86667' x='0' y='2500'>
                  <zone h='24323' id='4' name='Pages Available YoY' show-title='true' w='43334' x='0' y='2500'>
                  </zone>
                  <zone h='24323' id='10' name='Fill Rate YoY' show-title='true' w='43333' x='43334' y='2500'>
                  </zone>
                  <zone h='24323' id='11' name='Gross Media Revenue YoY' show-title='true' w='43334' x='0' y='75427'>
                  </zone>
                  <zone h='24323' id='12' name='Available eCPM YoY' show-title='true' w='43333' x='43334' y='75427'>
                  </zone>
                  <zone h='24322' id='13' name='CTR YoY' show-title='true' w='43334' x='0' y='26823'>
                  </zone>
                  <zone h='24322' id='14' name='Ads per Page YoY' show-title='true' w='43333' x='43334' y='26823'>
                  </zone>
                  <zone h='24282' id='15' name='Page CTR YoY' show-title='true' w='43334' x='0' y='51145'>
                  </zone>
                  <zone h='24282' id='16' name='CPC YoY' show-title='true' w='43333' x='43334' y='51145'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='97250' id='5' is-fixed='true' param='vert' type='layout-flow' w='13333' x='86667' y='2500'>
                <zone h='3125' id='25' param='[Parameters].[Parameter 1]' type='paramctrl' w='13333' x='86667' y='2500'>
                </zone>
                <zone h='3125' id='9' param='[Parameters].[Publisher]' type='paramctrl' w='13333' x='86667' y='5625'>
                </zone>
                <zone h='3125' id='18' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='13333' x='86667' y='8750'>
                </zone>
                <zone h='3125' id='24' param='[Parameters].[Market]' type='paramctrl' w='13333' x='86667' y='11875'>
                </zone>
                <zone h='3188' id='26' name='Pages Available YoY' param='[publisher_data (copy)].[none:Country:nk]' type='filter' w='13333' x='86667' y='15000'>
                </zone>
                <zone h='3188' id='27' name='Pages Available YoY' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' w='13333' x='86667' y='18188'>
                </zone>
                <zone h='3125' id='19' param='[Parameters].[Aggregated By]' type='paramctrl' w='13333' x='86667' y='21376'>
                </zone>
                <zone h='3125' id='20' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13333' x='86667' y='24501'>
                </zone>
                <zone h='4063' id='21' name='Pages Available YoY' param='[publisher_data (copy)].[none:Date:qk]' type='filter' w='13333' x='86667' y='27626'>
                </zone>
                <zone h='8875' id='17' name='Fill Rate YoY' param='[publisher_data (copy)].[yr:Date:ok]' type='color' w='13333' x='86667' y='31689'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Variance by Market'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Publisher]</run>
            <run>&gt;</run>
            <run> Variance by Market</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='3500' maxwidth='1300' minheight='3500' minwidth='1300' />
      <zones>
        <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='10' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1142' id='9' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98858' id='4' param='horz' type='layout-flow' w='100000' x='0' y='1142'>
              <zone h='98858' id='2' type='layout-basic' w='87692' x='0' y='1142'>
                <zone h='13629' id='1' name='Spend and ROI by Market' show-title='true' w='87692' x='0' y='1142'>
                </zone>
                <zone h='85229' id='7' name='Market Differences PW' show-title='true' w='43846' x='0' y='14771'>
                </zone>
                <zone h='85229' id='8' name='Market Differences PPW' show-title='true' w='43846' x='43846' y='14771'>
                </zone>
              </zone>
              <zone fixed-size='160' h='98858' id='3' is-fixed='true' param='vert' type='layout-flow' w='12308' x='87692' y='1142'>
                <zone h='1428' id='16' param='[Parameters].[Parameter 1]' type='paramctrl' w='12308' x='87692' y='1142'>
                </zone>
                <zone h='1428' id='13' param='[Parameters].[Publisher]' type='paramctrl' w='12308' x='87692' y='2570'>
                </zone>
                <zone h='1428' id='14' param='[Parameters].[Ad Unit Type]' type='paramctrl' w='12308' x='87692' y='3998'>
                </zone>
                <zone h='1457' id='17' name='Spend and ROI by Market' param='[market_data (copy)].[none:Country:nk]' type='filter' w='12308' x='87692' y='5426'>
                </zone>
                <zone h='1457' id='18' name='Spend and ROI by Market' param='[market_data (copy)].[none:Finance Region:nk]' type='filter' w='12308' x='87692' y='6883'>
                </zone>
                <zone h='1771' id='11' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='12308' x='87692' y='8340'>
                  <formatted-text>
                    <run>Yesterday or &#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='1342' id='12' param='[Parameters].[Reference Day]' type='paramctrl' w='12308' x='87692' y='10111'>
                </zone>
                <zone h='1857' id='5' name='Spend and ROI by Market' param='[market_data (copy)].[none:Date:qk]' type='filter' w='12308' x='87692' y='11453'>
                </zone>
                <zone h='2342' id='6' name='Spend and ROI by Market' param='[market_data (copy)].[:Measure Names]' type='color' w='12308' x='87692' y='13310'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Revenue Graph'>
      <cards>
        <edge name='left'>
          <strip size='202'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='checkdropdown' param='[publisher_data (copy)].[none:Segment:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[publisher_data (copy)].[none:Filter for Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Segment:nk]</field>
          <field>[publisher_data].[none:Ad Unit Filter:nk]</field>
          <field>[publisher_data].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date without Year by Day Only:nk]</field>
          <field>[publisher_data].[none:Date:qk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Ad Unit Type:nk]</field>
          <field>[publisher_data].[none:Filter for Graphs without Total:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
          <field>[publisher_data].[none:Filter for Market:nk]</field>
          <field>[publisher_data].[none:Filter for Publisher:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Blank Title'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title Day'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Day'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Day Hotels'>
      <cards>
        <edge name='left'>
          <strip size='253'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[active_hotels_with_budget (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[active_hotels_with_budget (copy)].[none:Segment:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
          <field>[publisher_data (copy)].[none:Filter for Ad Unit Type:nk]</field>
          <field>[publisher_data (copy)].[none:Filter for Publisher:nk]</field>
          <field>[sold_hotels].[attr:Market Name:nk]</field>
          <field>[vertica.41289.579273854164].[attr:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPW Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPY'>
      <cards>
        <edge name='left'>
          <strip size='284'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title Week'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Week'>
      <cards>
        <edge name='left'>
          <strip size='214'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ref Week Hotels'>
      <cards>
        <edge name='left'>
          <strip size='236'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PW'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PW Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SWPY'>
      <cards>
        <edge name='left'>
          <strip size='284'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SWPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title MTD'>
      <cards>
        <edge name='left'>
          <strip size='289'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='MTD'>
      <cards>
        <edge name='left'>
          <strip size='289'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
            <card size='331' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='MTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='265'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PMTD'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PMTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='283'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SMTDPY'>
      <cards>
        <edge name='left'>
          <strip size='288'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SMTDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title QTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='96' type='filters' />
            <card size='221' type='marks' />
            <card size='360' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='290'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PQTD'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PQTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='283'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SQTDPY'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SQTDPY Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Title YTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='62' type='filters' />
            <card size='257' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='62' type='filters' />
            <card size='257' type='marks' />
            <card size='357' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PYTD'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Year:ok]</field>
          <field>[mysql.41193.431456574071].[none:Previous Year:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Ref Day:ok]</field>
          <field>[mysql.41193.431456574071].[yr:SDPY:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[publisher_data].[none:Filter for Gross Revenue Trend:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='PYTD Hotels'>
      <cards>
        <edge name='left'>
          <strip size='272'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[Multiple Values]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:Country:nk]</field>
          <field>[active_hotels_with_budget (copy)].[none:Finance Region:nk]</field>
          <field>[active_hotels_with_budget].[none:Filter for Market:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Gross Revenue Trend'>
      <active id='1' />
      <zones>
        <zone name='Gross Revenue Graph'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Week'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PW'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SWPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='MTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PMTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SMTDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='QTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PQTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SQTDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='YTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PYTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Gross Revenue Graph' pane-specification-id='1' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
        <zone name='Title Week'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Blank Title'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title MTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title QTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Title YTD'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Day'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPW'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPY'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Title Day'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ref Day Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPW Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Ref Week Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PW Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SWPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='MTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PMTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SMTDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='QTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PQTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='SQTDPY Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='YTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='PYTD Hotels'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='Ref Day Hotels' param='[active_hotels_with_budget (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Ref Day Hotels' param='[active_hotels_with_budget (copy)].[none:Finance Region:nk]' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Gross Revenue Graph' param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='checkdropdown' name='Gross Revenue Graph' param='[publisher_data (copy)].[none:Segment:nk]' type='filter' values='relevant' />
        <zone forceUpdate='true' name='' type='text' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Pages Available'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:SSN Channel Type:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data (copy)].[none:Breakdown Color:nk]</field>
          <field>[publisher_data (copy)].[none:Country:nk]</field>
          <field>[publisher_data (copy)].[none:Finance Region:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page Fill Rate'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ad CTR'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ads per Page'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page CTR'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data (copy)].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPC'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue %'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter without Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Available eCPM'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Hotels per Auction'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='7' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Ad Unit Type]' type='parameter' />
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with Totals:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Metrics'>
      <active id='4' />
      <zones>
        <zone name='Pages Available'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[mysql.41193.431456574071].[none:Breakdown Color:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='Page Fill Rate'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Gross Media Revenue'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Gross Media Revenue %'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Page CTR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ad CTR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ads per Page'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Available eCPM'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Hotels per Auction'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='Pages Available' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Pages Available' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Pages Available' param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Page Fill Rate' pane-specification-id='1' param='[publisher_data (copy)].[none:Breakdown Color:nk]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Active and Sold Hotels'>
      <cards>
        <edge name='left'>
          <strip size='260'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='3' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:Calculation_8830912141655380:nk]</field>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Budget'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date:qk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Market:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
          <field>[vertica.41289.579273854164].[attr:Market:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Percent of Hotels Active'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
          <field>[vertica.41289.579273854164].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average Budget per Hotel'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date:qk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Market:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Click'>
      <cards>
        <edge name='left'>
          <strip size='197'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Filter for Ad Unit Type:nk]</field>
          <field>[market_data].[none:Filter for Market:nk]</field>
          <field>[market_data].[none:Filter for Publisher:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Impression'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data (copy)].[none:Country:nk]</field>
          <field>[market_data (copy)].[none:Filter for Channel Type:nk]</field>
          <field>[market_data (copy)].[none:Finance Region:nk]</field>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicked ROI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[none:Market:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Exposed ROI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Breakdown Color:nk]</field>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date:qk]</field>
          <field>[market_data].[none:Dimension Filter with Totals:nk]</field>
          <field>[market_data].[none:Pub:nk]</field>
          <field>[market_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Metrics'>
      <zones>
        <zone name='Conversions per Click'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Conversions per Impression'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Clicked ROI'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Exposed ROI'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Total Budget'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Average Budget per Hotel'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Percent of Hotels Active'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active and Sold Hotels'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active and Sold Hotels' pane-specification-id='3' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' />
        <zone name='Total Budget' pane-specification-id='2' param='[active_hotels_with_budget (copy)].[:Measure Names]' type='color' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone name='Total Budget' param='[active_hotels_with_budget (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='Conversions per Impression' param='[market_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Conversions per Impression' param='[market_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Conversions per Impression' param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Conversions per Click' pane-specification-id='1' param='[market_data (copy)].[none:Breakdown Color:nk]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Pages Available YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Fill Rate YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CTR YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ads per Page YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Page CTR YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPC YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Gross Media Revenue YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Available eCPM YoY'>
      <cards>
        <edge name='left'>
          <strip size='256'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41193.431456574071].[none:Ad Unit Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit Type Filter without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date without Year:nk]</field>
          <field>[mysql.41193.431456574071].[none:Date:qk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs with Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Filter for Graphs without Total:nk]</field>
          <field>[mysql.41193.431456574071].[none:Publisher:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[none:Type of Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[yr:Date Axis:ok]</field>
          <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Metrics Year over Year'>
      <zones>
        <zone name='Pages Available YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Fill Rate YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[mysql.41193.431456574071].[yr:Date:ok]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='Gross Media Revenue YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Available eCPM YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CTR YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Ads per Page YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Page CTR YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='Pages Available YoY' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Pages Available YoY' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Pages Available YoY' param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Fill Rate YoY' pane-specification-id='0' param='[publisher_data (copy)].[yr:Date:ok]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Active Hotels YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[vertica.41289.579273854164].[none:Date without Year:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Budget YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[sold_hotels (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[sold_hotels (copy)].[none:Date:qk]</field>
          <field>[sold_hotels (copy)].[none:Filter for Channel Type:nk]</field>
          <field>[sold_hotels].[none:DD:nk]</field>
          <field>[sold_hotels].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[sold_hotels].[none:Date without Year:nk]</field>
          <field>[sold_hotels].[none:MM:nk]</field>
          <field>[sold_hotels].[none:Month Name:nk]</field>
          <field>[sold_hotels].[yr:Date Axis:ok]</field>
          <field>[sold_hotels].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Budget per Hotel YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:Date without Year:nk]</field>
          <field>[active_hotels_with_budget (copy)].[yr:Date:ok]</field>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[active_hotels_with_budget].[none:Date:qk]</field>
          <field>[active_hotels_with_budget].[none:Market Name:nk]</field>
          <field>[active_hotels_with_budget].[none:Market:nk]</field>
          <field>[active_hotels_with_budget].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Percent of Budget Used YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[active_hotels_with_budget (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[vertica.41289.579273854164].[none:Date without Year:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Click YoY'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Market]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Conversions per Impression YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicked ROI YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Exposed ROI YoY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[market_data (copy)].[yr:Date:ok]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[market_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[market_data].[none:Date without Year:nk]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Metrics Year over Year'>
      <zones>
        <zone name='Conversions per Click YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Conversions per Impression YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Clicked ROI YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Exposed ROI YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Active Hotels YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Percent of Budget Used YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Total Budget YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Budget per Hotel YoY'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Active Hotels YoY' param='[active_hotels_with_budget (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Total Budget YoY' param='[sold_hotels (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Active Hotels YoY' pane-specification-id='0' param='[active_hotels_with_budget (copy)].[yr:Date:ok]' type='color' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone name='Conversions per Impression YoY' param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Conversions per Click YoY' pane-specification-id='0' param='[market_data (copy)].[yr:Date:ok]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Key Performance Metrics Performance'>
      <cards>
        <edge name='left'>
          <strip size='253'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:SSN Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Filter for Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Segment:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Key Performance Metrics by Market'>
      <zones>
        <zone name='Key Performance Metrics Performance'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='dropdown' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone mode='checkdropdown' name='Key Performance Metrics Performance' param='[publisher_data (copy)].[none:Segment:nk]' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Performance by Region &amp; Country'>
      <cards>
        <edge name='left'>
          <strip size='253'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Aggregated By]' type='parameter' />
            <card mode='compact' param='[Parameters].[Yesterday or Reference Day]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[active_hotels_with_budget (copy)].[none:SSN Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Country:nk]</field>
          <field>[publisher_data (copy)].[none:Filter for Channel Type:nk]</field>
          <field>[publisher_data (copy)].[none:Finance Region:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Performance by Region and Country'>
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Performance by Region &amp; Country'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='GDS by Market'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data (copy)].[:Measure Names]</field>
          <field>[publisher_data (copy)].[none:Calculation_0750102131316031:nk]</field>
          <field>[publisher_data (copy)].[none:Calculation_5050102131026937:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='GDS Total'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data (copy)].[:Measure Names]</field>
          <field>[publisher_data (copy)].[none:Calculation_0750102131316031:nk]</field>
          <field>[publisher_data (copy)].[none:Calculation_5050102131026937:nk]</field>
          <field>[publisher_data (copy)].[none:Label - Total:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='OTA by Market'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data (copy)].[:Measure Names]</field>
          <field>[publisher_data (copy)].[none:Calculation_1850102131152453:nk]</field>
          <field>[publisher_data (copy)].[none:Calculation_6870102131437484:nk]</field>
          <field>[publisher_data (copy)].[none:Label - Total:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='OTA Total'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data (copy)].[:Measure Names]</field>
          <field>[publisher_data (copy)].[none:Calculation_1850102131152453:nk]</field>
          <field>[publisher_data (copy)].[none:Calculation_6870102131437484:nk]</field>
          <field>[publisher_data (copy)].[none:Label - Total:nk]</field>
          <field>[publisher_data (copy)].[none:Market Name:nk]</field>
          <field>[publisher_data (copy)].[none:SSN Channel Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='GDS Pilot Performance by Market'>
      <zones>
        <zone name='OTA by Market'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 4]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[GDS Ad Unit Type (copy)]' type='paramctrl' />
        <zone mode='dropdown' name='GDS by Market' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='GDS by Market' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='list' name='' param='[Parameters].[Aggregated By]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Day'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[usr:Tornado Measure - Day:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Week'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[usr:Tornado Measure - Week:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - MTD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[publisher_data (copy)].[usr:Tornado Measure - MTD:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='61'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.41285.594435081017].[none:Current Month Name:nk]</field>
          <field>[vertica.41285.594435081017].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[vertica.41285.594435081017].[none:Market Name:nk]</field>
          <field>[vertica.41285.594435081017].[none:Previous Month Name:nk]</field>
          <field>[vertica.41285.594435081017].[yr:SDPM:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Market Tornados'>
      <zones>
        <zone name='Tornado - Day'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Tornado - Week'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Tornado - MTD'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Metric]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Difference Type]' type='paramctrl' />
        <zone mode='dropdown' name='Tornado - Week' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Tornado - Week' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Spend and ROI by Market'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Market Differences PW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Market Differences PPW'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='1' param='[market_data (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='68'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[market_data].[:Measure Names]</field>
          <field>[market_data].[none:Dimension Filter with No Breakdown:nk]</field>
          <field>[market_data].[none:Market Name:nk]</field>
          <field>[market_data].[yr:Ref Day:ok]</field>
          <field>[market_data].[yr:SDPPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Variance by Market'>
      <zones>
        <zone name='Spend and ROI by Market'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[market_data].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='dropdown' name='Spend and ROI by Market' param='[market_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Spend and ROI by Market' param='[market_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Spend and ROI by Market' param='[market_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Spend and ROI by Market' pane-specification-id='1' param='[market_data (copy)].[:Measure Names]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Week Data'>
      <cards>
        <edge name='left'>
          <strip size='235'>
            <card size='120' type='filters' />
            <card size='221' type='marks' />
            <card size='324' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Week Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='221' type='marks' />
            <card size='552' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='28Days Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='88' type='filters' />
            <card size='257' type='marks' />
            <card size='331' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='28Days Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='0' type='filters' />
            <card size='269' type='marks' />
            <card size='412' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Data'>
      <cards>
        <edge name='left'>
          <strip size='271'>
            <card size='167' type='filters' />
            <card size='269' type='marks' />
            <card size='296' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Publisher]' type='parameter' />
            <card mode='compact' param='[Parameters].[Breakdown]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Current Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Month Name:nk]</field>
          <field>[mysql.41193.431456574071].[none:Previous Quarter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site Filter:nk]</field>
          <field>[mysql.41193.431456574071].[none:Site:nk]</field>
          <field>[mysql.41193.431456574071].[yr:SDPQ:ok]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='QTD Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='221' type='marks' />
            <card size='552' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='95' type='filters' />
            <card size='269' type='marks' />
            <card size='301' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='YTD Data 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='28' type='filters' />
            <card size='269' type='marks' />
            <card size='504' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41014.596836111108].[:Measure Names]</field>
          <field>[mysql.41014.596836111108].[none:Date:qk]</field>
          <field>[mysql.41014.596836111108].[none:Site Filter with Total:nk]</field>
          <field>[mysql.41014.596836111108].[none:Site:nk]</field>
          <field>[mysql.41014.596836111108].[yr:Ref Day:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPM:ok]</field>
          <field>[mysql.41014.596836111108].[yr:SDPW:ok]</field>
          <field>[mysql.41193.431456574071].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Breakdown Color:nk]</field>
          <field>[publisher_data].[none:Dimension Filter with No Breakdown by Ad Unit Totaled:nk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Publisher Funnel by Page'>
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='Week Data' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='Week Data' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone mode='compact' name='' param='[Parameters].[Breakdown]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone name='Week Data' param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSV'>
      <cards>
        <edge name='left'>
          <strip size='237'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data].[:Measure Names]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date:ok]</field>
          <field>[publisher_data].[none:Market Name:nk]</field>
          <field>[publisher_data].[none:Pages Available:qk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Segment:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
          <field>[publisher_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='CSV Download'>
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Publisher]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Ad Unit Type]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Market]' type='paramctrl' />
        <zone mode='dropdown' name='CSV' param='[publisher_data (copy)].[none:Country:nk]' type='filter' />
        <zone mode='dropdown' name='CSV' param='[publisher_data (copy)].[none:Finance Region:nk]' type='filter' />
        <zone name='CSV' param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CSV Data'>
      <cards>
        <edge name='left'>
          <strip size='237'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[publisher_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Publisher]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[publisher_data].[:Measure Names]</field>
          <field>[publisher_data].[none:Ad Unit:nk]</field>
          <field>[publisher_data].[none:Date:ok]</field>
          <field>[publisher_data].[none:Market Name:nk]</field>
          <field>[publisher_data].[none:Pages Available:qk]</field>
          <field>[publisher_data].[none:Pub:nk]</field>
          <field>[publisher_data].[none:Segment:nk]</field>
          <field>[publisher_data].[none:Site:nk]</field>
          <field>[publisher_data].[none:Type of Ad Unit:nk]</field>
          <field>[publisher_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Gross Revenue Graph' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='24' name='Blank Title' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAIAAAAj02USAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAWUlEQVRoge3SwQ3AIBDAsNL9dz52IA+EZE+QR9bMfHDqvx3A
      2wxEYiASA5EYiMRAJAYiMRCJgUgMRGIgEgORGIjEQCQGIjEQiYFIDERiIBIDkRiIxEAkBiLZ
      8dADLTtsO04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='24' name='Title Day' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAIAAAAj02USAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAWUlEQVRoge3SwQ3AIBDAsNL9dz52IA+EZE+QR9bMfHDqvx3A
      2wxEYiASA5EYiMRAJAYiMRCJgUgMRGIgEgORGIjEQCQGIjEQiYFIDERiIBIDkRiIxEAkBiLZ
      8dADLTtsO04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Ref Day' width='191'>
      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
    </thumbnail>
    <thumbnail height='84' name='Ref Day Hotels' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SDPW' width='64'>
      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
    </thumbnail>
    <thumbnail height='84' name='SDPW Hotels' width='81'>
      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
      /yv8B9WulxrGA32LAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SDPY' width='84'>
      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
      EYprrlfgIQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='84' name='SDPY Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABUCAIAAAB1IEzSAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAmUlEQVR4nO3aMQ6AIBAAQTX+/zMmvo0OX0CLxey0NLehIeTO
      OeeBuf4e4Ac1G2o21Gy4Vwfv8+6cY6ezNwmhZkPNhpoNNRtqNtRsqNlQs0FsXv6HjTF2zrGT
      eM81G2o21Gyo2VCzoWZDzYaaDTUb2pUy1Gyo2VCzoWZDzYaaDTUbajaIze1KGWo21Gyo2VCz
      oWZDzYaaDWLzB+BbEZLlD0XeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='24' name='Title Week' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Ref Week' width='84'>
      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
      zgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='84' name='Ref Week Hotels' width='93'>
      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
      5U/BfwCzUwwXMleZBwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='PW' width='64'>
      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
    </thumbnail>
    <thumbnail height='84' name='PW Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='SWPY' width='84'>
      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
    </thumbnail>
    <thumbnail height='84' name='SWPY Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABUCAIAAAB1IEzSAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAmUlEQVR4nO3aMQ6AIBAAQTX+/zMmvo0OX0CLxey0NLehIeTO
      OeeBuf4e4Ac1G2o21Gy4Vwfv8+6cY6ezNwmhZkPNhpoNNRtqNtRsqNlQs0FsXv6HjTF2zrGT
      eM81G2o21Gyo2VCzoWZDzYaaDTUb2pUy1Gyo2VCzoWZDzYaaDTUbajaIze1KGWo21Gyo2VCz
      oWZDzYaaDWLzB+BbEZLlD0XeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='24' name='Title MTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='MTD' width='84'>
      iVBORw0KGgoAAAANSUhEUgAAAFQAAADACAYAAACanESUAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvwAADr8BOAVTJAAAEQVJREFUeJztnWFoU+fewH996YcTcJCAgwQqmJcKS3FgisJN
      0A9m7AVbNrDih7VM8B4VZjrhrt2Fq5kfSuYLLu3A2V3YbXdhIxMmzUBJhA3jB+X0hUkiKMnA
      0QgKKSgkoHACFv7vh6RtkqZNu3tmY/r8IKDn/J9zkl+fc85zzvP8zwMKhUKh+KN01C8QEdmM
      L9Iu/Ndmf4F2Qwm1GCXUYpRQi1FCLUYJtRgl1GKUUItRQi1GCbUYJdRilFCLUUItRgm1GCXU
      YpRQi1FCLUYJtRgl1GKUUItRQi1GCbUYJdRilFCLUUItRgm1GCXUYpRQi1FCLUYJtRgl1GKU
      UItRQi1GCbUYJdRilFCLUUItRgm1GCXUYpRQi1FCLUYJtRgl1GI6mwUkridexfdoG1TyrMWo
      Q95iWlvovc/p6ThB9Ukn96Wfjo6OVT61sbUUSX85RO+btnKsw8U7p34gW6qOKZH9/gT+Soxj
      xzsMX5+v206SYdvKffu/zDXerbQKj2dksAsBXeLNYrMR8Wma+CYyq4aYCV2cmk/Ct/NiioiZ
      nxG9C3H+zViKKfw4IJpTl5mnlTL5KRnQnBL82azZlxefXM413k8LCjVlLhYUr4ZomrYOoXmZ
      OqSJtv+yzK0RFT+pifbRzdo9/TggdIclJSIiBZk6hHCydm/x43XLrumCc0QMaUzrHfI3hvnv
      wQTuCymMC96m4aUbIUI33IS+CuJeNSpN+lYJ767aCO1tP97f4xiP1v/10veScCiAb70F1qwM
      r4L8nMw9L/9zbsLXpIbOSeQviHZ0RgprbjQuOoieqFv8MCK+quWF2KDYaw75GdGd1Yd8uRY7
      9wck0GUXQLTtPtG/y8hiROvVUKcb97Z1xt6ZJPJ/ToJnBrBbsGv74WmSZzLob5YvNDaXTuZM
      gsi7WiUiRfoWFOnj8sMCIoKZi+K7HiDwZRZo9at8E2ZjUea7hxnab8XWiiROufHfHiL1XMqy
      8gn6E8uyIMBlUzBvj+BZdLzNjf5hP7Nnx0ksvNZCZ5m5Mo/zcIDmZ9p18ChK+F8QPBtcOkI0
      p49zfz/C7CchYi/WKNsJlDJkH73OQn8zSM5rHHl3PZcHF+5uyPxW11ZcgBI+PLuAhRLgxuWs
      K9oJkCdX3xxtgNb5Ggst3TdI00dgXZdbL96DGulstmZp6b5B2unH3w3Y7TgaFV0ANDduJ/Bo
      En+Hi9E7dd/lRQF29xPY2aD8Bq7HfzprXeUzF71VbcjmmLFB0TSvjCQqDftcVAa7EOeniy1K
      U25+5BTnB1OSyleu2c9TEtlvF++Fxb0UZOaoJs7jM7IYYhZSEtnvFj1Rbme8tkLjJxH+Elm1
      MR8/Wd9Iz0v8H33i3a4JINidEjgZlczLqpCXBTEmBpditO1eGZxI1TbJXuYl/nFAnHYEEPtb
      fRL+eTmifZ82LSQ4cRqmvul7pbt9bc+hzSjeiJHZ4Xrl+21bodlZk+GTljSoNkT7HvKbRNvW
      0M2iaZ9SqVRqFqKoQtVQi1FCLaZ1hN4L02sbJlm/vJhm8lgvLocNm82Ga1eA4StZShuNqWch
      T+KTAG5XuYxjRy9HvkhSXKiK+T3KkNeFzebA9f446WLtJoyzPeg/NTkl1t9xmKb5538eRpf7
      j2rWFSR+3C7a/nNyM1cQ0yzI3I+6OLFL8OeNxKz8ZC56ha5BmbpfENM0pfBrWHwaEvh6rhKT
      kvBuxPMPQwrP8zJ1VBPtg6gUFreRuyyBvRHJ1G13k4UWJPOjXtt/VL3+eVx0TRM9UVsmehRx
      f2asP2bFJyORvYhvIlOz3PjMLRytSHs8JX0g+rWqP0D3OTGW/oge0a8VVmx7cw/5X0bpOZbE
      PWaQHPOsXP/AIFny4KnpCtLwer3kbhnk1htTz4s0xl3o6a7tY/J6fXA9idHsez+aJvQoyLml
      J/nLbK7Qt0fI5DNEP/Y27sJ4Ok+OXjw765Z3AneyZVnriannWZ4c3vJz0JoyNiilyD4Ctvfi
      3w3GbJrSQhHj1yz2QwG8lIiNTRL4TKfRje3mCnW6ca/8I7cIHkauTOH5qQ/HG24+XwiTOOuH
      exEixXMEV3kO2zpX+Vake4hoOo9pFsj8EMRrLxKbSNB3fgjXQo7oYA8Omw3Hjn7G75abAEro
      RpiNEGKU4T2Q/fIIJx7rGAWT3EU74cNhjJbvpHvTiZvKOa2aBWCvpzywYT0x9Wx34SZN9mF9
      GRManY8ByBP9IsngJwPYyZH8OYv9gA+PBnafH88zg/STVhe6209Ay9b98BLpdBr7AW9Z1npi
      6tnmxb8XUnWddun0LBzy0duozO1xQvZRRvcsL3Jss60Ia22hnX4ChyF6PkRyvgSUyF0JMnLV
      if6ef/0xK3ATeN9D+tIo0w/KdzrFu2FGvsjTdzjQoMWRY/Kswej5AbTF8v/jIXcjSbYExVmD
      7HY/3q4Gu9qUO6XFhvOKOyVTzFxcRg55xK5V+nC6KkNfNhRTbsh7L1Yte2rI1HHfUt+Qtt0j
      fWM3Jd/guxWu6eI5Hl++SzJNMZ9nZOqoR+wgWveARG7nxTTN5n1K6vHdxmjtQ/41RAm1GCXU
      YpRQi1G9nhajaqjFKKEW09pCVZ6Shag8JatQeUrWovKULEblKVmMylPaPFSekqWoPCVrUXlK
      1qLylP4AKk/JYlSeUiuh8pSsReUpWYzKU2oT2raGbhYqT8liVA21GCXUYtpXaDHN9OnlPCTX
      rgCjN/JNi+VvjBLY5cJms2FzuOgdGCf5rDqiRPbKMIEdjvJ2vUcIVW23TYXmmDwaIPxsiETO
      xDQLpCZ6mBnwM3xrjWvCo0mODMzgHjMoPDcx80mGnofpPzbNorLiVR3/6Qz9N/KYpkn2govo
      gJ/QbHl9e46+uxemx5dAv28w0r28OHnaQf/8ZfKxoYYPpHNf+em5NkTml6rulHthenxZwk+j
      DGzLMXmgh/CBm+QvLI49LRE75kC3xylcCrRpDd0TImPWygRwdLngaZFCw0Il0r+mYVfdMPLd
      vfhIkPwVwE3wtlkls1zOrHpW2p5CG1Ii91sO3K6G+UWQJ58Dr6euq69Tw0aJ1IMG/e4LJXJX
      Rgjd8hL6a6AcbvXXbll+nyRy1Yme6MOS1KjfJ+l/b5LUfA7t8BQDb5UXb40aupBj/HiI/PFp
      wgctyjTrDhLPZsjnU4SKo/S+N0mOrSB0IU/sVICwFiF5qVFCwn+I5kE/H8R1J8z0bLsLLeWI
      nvKjZ4eIXw3iXvME58LlhnS2vt+phAn0vrX6MArsDuwUKb5oZ6FPYuj7ehl+rJO8EcbftGpq
      ePd54X5dwu2DFLP04fMCJBl22PB/VSe9WKBYScZtT6HFJMMHh/ihNMTM1RDedR7n7oNH8NyN
      MPrvLKUF4Fma8Kfj5A8NENgOEGBkzEf2u8nlu6dSjujEJObJMPrONhVavD7J9BPgyTT9lVvP
      5c/yaziSp23YTle9lGN3kOlv+ilcCOB4w4ZtVx+xN0LEvx1aamq5P46RPJZn1Fu+9XTsOkJi
      X4L0pQAa7XqntIm0ZQ3dTJRQi1FCLUYJtRjV62kxqoZajBJqMa0ndKFI8n/76XF00NFhw3Hg
      BNN3i2vEZxn3ddBxao2p3n4fx79qblMHJ240KlQk8VcXHb7xxu9+Wm/MBgfIWU5qzCN06TKT
      N0XElMxFn2han0zlG8dnJnyisTIdpikvMxLZr4m2P1I7Aq9CIaGLk7VH+DWKaS2hL+Oia0jf
      t9UDCFMS7kZ8lxr8rIeXxadpomkbF5r/tk80zSeXHzZY+fymBLsq211N6CoxrXXId/YxZQrx
      49VPM0oUGo5vn2f6zCjFs1HCexqtX4MXCUJnE7jPThLsXrl6dmyIaV+U6Q9X38R6YoDNP+Rr
      MPNijPlEsw/KTF0iUv7bPtG6RsR4Wc5V2kgNnZvwCdrAim2KiMjtEXFWTjGrDupdI6Z1hV4L
      ivMtp9ixi2/MkEL1ea4wU5WDuVGhhow4a3M8l3iZkvBuben00lBok5jWFbrI05syshtxfnSz
      kq1WkPhxZ9X/Nyj09og4cUs4vXJV5qKvJme0kdBmMa0vVCpJrvTJ1FORwjVdnE5d4kuH68aE
      Gp86Gye/ZiPiwyeR7PKiFULXEfNaCJWELuCTyMPKD2C1T7PM5fILseqzkkUWEyRW22553+uJ
      aS2hucviQ1uR5Gr+OCBousQbtBc3VEOfz8gAyMCPZvNYaZ5p0iimtZpNO4cInbQT/WqSXKWj
      oDQ/S3gige/iOfr+02EZT3LkcNO76897C2xrCcVO39dpZrpj+F3l20LXvhDFszmMj9foxm1A
      4lSD29FcljROtPVmO/8B2vfxncpTshaVp2QxKk+pTWjbGrpZqDwli1E11GKUUItpP6GrzcvU
      hOINHZfNz+Sj6oUGoYMuHDYbLu8wsSe1ZfLfH8H/Re1rN9pL6JMY+tHPyTaPrKWYJHTmB2q7
      AkvEPulnckeE3PMCicMGQ4fHl7e9YDA+4SL8Ue0sO20itETu+jD+t4eIPdvofXqJ5Hmd6Ipy
      KVK/lPDs82Pv1PD6/PAgRbbSHZP75yjGX0cI1N3GtofQZvMyrcVsGP17P9NfD62/zIsk49/6
      iXy08vlCewhtNi/TaiwYhI5N0nspwsD2+pW99L6rkf3VoLhQIj1rwMEAvm2Q/WeI/Ccj+Bs0
      OtsjT8npXuPNjKuTvjjM5M4wqQ9d8Ev9Wo2BiTipw0dwv3ECbW+QmSs6rmKM0e8CjKQbPydo
      jxr6R/h9nOAXdsL/WuM1mXY/4Vt5CqZJ/naEvi5Ifx2B86P4O4sY5/24bDZsrl6Gr5bTa7em
      0EoiGOenCe7cQLn5KOHrfYwetlP6aYT+f3uYfmxSuD6AcewE0/NbVeiTBDN3IX22ZzmZ4f1p
      IM2op0HaTAXj0udonwzj7QTjVozSvgD+7aDt9eMnSfr+VhW6M4hhmpjVn2s64CWSNRv3DsxP
      8/kvOqGjVZe9bbYVeaNbU+iGKZEcm8R9Ichio8x/cADtVpzkMyjdNTAI4H17CwldkZO0ER5N
      E7qvM1I1j6d2eJz48Rz6LhuO9xIEYlPoTpWnZDlbpoa+KpRQi1FCLUYJtRjV62kxqoZajBJq
      MVtU6Cr5RQvzJM68g8vRQUeHA1dgmMST+qJpxgd7cVTmVHLseIcT32dZtbW+roGTrzmNc5AK
      Ej/pFG1/RFKVyV3Mh1MysKd6tLRZiQmLUcmjysd0ceKUkdvliK0ndLUcpPth8TQYe58acy+/
      6/5lXHRNk+DP1RGmzBxF3GPld91vuUN+1fyixzmyBPDurl1s3+Zk/pZR7u18kCZZ8uKueRil
      4dnnJfezsUVehFXNnVEGvurl8qU1pgtq1Cl0t/LqoXyOHD146pLFtE4N7qTJspWELqT5/KNJ
      3Bcvo9dPoALgcuMmRfa32sXZbHpDu9kyQrNfBgnbI0RXG1q+R+fcoSyRiRjzJSjPUz/E8Pcb
      28/WEPrbOPrfWbtDDid6LEX4RRiPo4MORy/Dj3SiY15wrjKTzXr4k6+xm8J68otWw/jUKRya
      Kk+wkg6Lu0F85qJ3qcWwJYQ2YkUOUsMcqTm5vB8JfFNJ1q80m2pjys2mxaaVErq0ZHF+0ErD
      /qUpczFdPF0jYiwlnJky84Em2p4RiVca9nM/DG7xhn2FhllyhZREPvCIHQTNLt4PIpKqTwHP
      x+Xce16xa5X5lLoCov+wPOOtenxnMVvjKv8KUUItRgm1GCXUYlSeksWoGmoxr7nQJMMHJtd4
      ldqr5/UUWsoSPR3A7epn+u4o/iZzJRWvDuFYl/gi6a+G6K3MlWRzuQmcjpJd9axXJHHKha1q
      2/8P3Qvl1KUH8a8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='84' name='MTD Hotels' width='81'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='PMTD' width='84'>
      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
      6yn9H9EaXbX1T4tBAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='84' name='PMTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='SMTDPY' width='64'>
      iVBORw0KGgoAAAANSUhEUgAAAEAAAADACAIAAAA7u/JRAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAP5ElEQVR4nO1cb2gTWbt/evHDDHRhBvpCAi50QGFHFDpFwQz6
      oQN9oSm9YEov2NCF7tiFtV1hmypsjf3gjb2gSRe0VaiJgmUUvCQFJVPY4vihy+RCJSO0ZF6w
      dAoWJqAwAxZmwMDcD0na/O22b01HYX7kS855npPzmznn5Dnnd85psiwLvmX8h90VOCgcAnbD
      IWA3HAJ2wyFgNxwCdsMhYDccAnbDIWA3HAJ2wyFgNxwCdsMhYDccAnbDIWA3HAJ2wyFgNxwC
      dsMhYDccAnbDIWA3HAJ2wyFgNxwCduNIvQz+JX+Y9fi30eRseLIZX4SAlPI1CX+VJZn/d4v3
      4TGqKca083OSWemiSP1NMarqM5Fvt7J87USMaoox3dKqvuP0duzptURlSdZBoa5fdUXb4NVS
      SZoc4to86XeGZVmWIYoXkPjT9d1L0Z54omc9acWyLEubJaMXrqufLeOFL3q2f90o/FBm0JN+
      X+l4sDewmRD+ixCW9Irk7Mtpg+wljiEAAIiH7CG1l4lKo1J8jIn3JfwKR7UCgK5KMpykXUcA
      oWjcTGU3AADgr6B0NEgdrXQ9CAFe6PFnXaHuhyH8AKUAmMrdoOoOMheJ+jaKdF+hrnirMw5C
      oJ2e1/rvBlxYZYarZwRX4sqaCQBgSsqijPf4qqyK2JyRXuruoeGiAeamSFgVszkwJVHDfcQP
      AItBmQqRLbXcD9wHLOt9OF7RByzL+JPl2iDaBtE24H6PG/W91duuaEdALUvLZK6S0TaIdvnS
      K5plpcU+b+ZDbfeGENCeeKIXAusf8p14PXPVxd1I1uEgih3A3U/vUrzB++L305ZlaQkfdxai
      Z7HkbHq7tEYQePXqLCQT2o6BEo63EaJcy1cKRNtcorRL6aLY5Vv/ZFnviiObxiXPusTlQvZe
      +4A+R++M1v2R3YYUMMEE5B8lbf4IACjGx1rFSgIgvURb/bLmQ2pPkGgGczlp4LT7GAKYx01k
      VVnZKXsvwAZEdmCPtjiKg1GakAMAEnfVqJ62IoEnWCOngJT0AKNeUIVvzThSZdGIUMJDDnmU
      2TFlwwQAyGWVR2GtM0Qeq7ZU9E1Aj9cdPfW5gDoQIvJ/J2e60fdJZc0EPaUqLjdZ8NrrG9gX
      sIuCv2WM/9ktfNCh2YV7Y/6bXqRQJxoGxGLzUrR3gPTUGWBNPj1/gnpapHfsunciww+i6Rzh
      vsxTpwvJTjRqNxwCduObJ1B3FDLNqknIV4lv/g04BOpCGMHRUtD3lEoDtAYKZroY7HDjKOqm
      RhKbOz7qXC99Rz4UAmtS2vSEZWMb4q8VIQMzbZRCTQ664CgbGiAAzMRo98z3YeWTxl8Q/Rci
      hSrnxMiUO/QLeSgE3mWkFppq3bN9Ksw+BnY2zGAAkE4vmuQZGjuCUB4aVtPyFgCA8mBM/CnA
      NJf5NSQWAgBJSkFXmN6ruTJzLaL3caGO6nCziC0h8ogOL1dGfg16A3rmjYK9m2GOu1EUxb9n
      Rp7Ju4zK5mIk9IYMjG7Pm9vbOxF5WdRzppQSoYPxNIP8IKiOBuiqB94gAunUazCPMDMrqmEY
      2ruYZ8HrrezE29DjD2J6xzC7M61BfFPJ4fdjxHe4d5GJz7JuPRF6wgQuuqud60ajX/iPbIFF
      +9Hkh2mmus1mY93ECPZE4/rqth9pkg4f57k+ECe8vXckHSPZu8npPjcc3v/AERTMtLxZI0df
      5AXwendp/Vku9NI7dgEz5wPdj8nYe0N76RN/vBTLAhzuH1ntKopLPJxj6JprPnmDu7eQ0RHq
      CIivE+YZhm4B5DRNgyCtADSKwMYMg7qDqZ0EU9fgZDfTWm0qpVNAdNB1p5XZ2K1FNthX7N7N
      aMVjaAyBVv9Inxl7nFDza3O6NDMrsZMsWW2ZU5U1oI7XyAEAAFO4OUNMDuez6Q4f8jopfATz
      jSgCQ51qHAHAfI8yseZpmkBRFCU6QjAuTncWniJ6Wdgx3FRkAByr0wE2YsEVNtBZyEUuRJKD
      CnscxXt4JhFlXQCHNwo1DE40ajccAnbDWdiyGw4BgJo68Tb0x3SMulQvks6bKKNoYq7UZB86
      8cEJZJVr3ky9Cm5EhNlUnbw89OwDr/C67E9Tf9grrvm6ly3/b0h6aFgpZGbluyJ5xVfh3xCd
      uAhFmghqdYJQAAA9JV0hk0+kitSvRSc250fSW0HmZ6pWJgAo0mU6/bGXmY/vog/vGNfRiQ8y
      qW+n5zWkFYHNSI3MjzHhdvrEgyS+kqzj7iYnVarVBcCXN0DMTZGwIGZzXkwSNdxHF3Xi/lpz
      hoO8ARfSWq956MrkiO7lPPXVOwAEaa0tjmFDcfpYInmmiXsA7XeDLpBSD3Vq0FPTuCHLKubr
      MWGV7X7B/LsFkOTtzPYUwVwIqR0hTwvo87387YQBmPsngRmi8g+vAQS2ePG/k8QN2VW/9+4H
      KekeUM8pWLvF31TJ/zWolgTf5ZUo1XMaYO8E9Dk6PlUcEMlw79NA3b0PbxOKloVRPFZSCYGK
      Efcs5ty+q2/Oh9SekKdUJwaPm8gqsgKniX0Q2IdOfC7KStHtb/ocHZ86wUjRPQw11bBHJ/5i
      2ItOfNgE9Dl6120KJcjrxH2lOjEhD6KxriA4OvFXBIeA3fjmCTg6sd1wCPw9dP5nN3p+puas
      U7hSLiZvm9mvExehLwaH5+rPOZdNz1RmRyxeGiYAvg6dOI8tIXiZ0+vF1Tk58xaj26rDvH3o
      xI0lIE6ynCc2fbFO9mo6BV76zN7KyuvEvxySTgwAAKmg/0H79G1fDXEUAAD0FUlpUWa6CDeK
      oribucwVxWT7dWKAnBS6MkNMhv31N4WmlwXYAuaerBqG8UGJeXhvz4ySg33pxHW3HhsHQ2aS
      Qs6F890zOQhwOpz5Gw/D+BTvB4R9USNHvEH5nqiGob66SmEAgJHsk/V8VmPewFrEPw7BB8P7
      m4UdQVAw0/+qGm8PXydWFuISSMFThcG9+zHAm7ETKD2z8fe+SFUrt0EnJn4VSxtAsQmJw62l
      VspMJ+oeF3cStnQNyO7z5a/NHp14TyD8P/vMuVgiWxSTH05Lg2H2ZKmNbTrxbtjWibE+LjOL
      T5/Pi8lMKBcU7zJlqzWOTvwNwCFgN755As7Clt1wCADU0on17Jw/waAxqil23p2YeKrnariZ
      r4OFM8cePHEtkt3azrH9PPESGz3rEZdVy7KsD/FXnRCdFCv9UsPcWUpcUi3Lsox0egCJDkzn
      T//Zf55Y+ZMDb8hz2gUA0OJjfvNBSig3MpXnM0ZHyHPOBQCAUNRkCF8JyW/ha9CJpexbE28t
      CSpJGn+fVLKlNggxZbGTJbpvC4FA1tiCOjjU88Sq8R4wooTAEQBIaWu7FrYh60CgLbDf88QN
      0on3C115Mm2cCpA/AHwNOvF+Yb4eE14T7c+2D3XvQye2/3/AXL3FjyeJO3yd0xIp6R5QA0Wd
      eM5gF2bgkVd6U8huxHliN/o96ErJ3DwHAB68Vv3Mt7f4oWnkmsCcq60723KemHK1IZl3MkCx
      H8uihtN05QioZx/2Ju9niEmJ6aq3eGSTTkyc98FiMPVXFgBg86nwRwLt6q2ooz7nTd4X8VGh
      fu3tO08MnRFmlZUmiJhmQrML7+C8Vz3FOuXPE6fkxykA0KZOxKZ2/PDRdd9A8b0554m/DTgE
      7MY3T8DRie2GQyCPt1I7KgqlKTmTH+UJN4eiHNEp8rWOwAGAuiAyxzkU5dzH+bGFkka7Jvsp
      DkU5939KUkngJY4n2PkvTmBTYfsycnmacIX3rxC84jcMv/wA5/pEoSoA1BdFul/vnvcbhl9d
      oaln/MhiISdyMS1f6NY+9YaxDDO6s3v61hIZvPBFCSgvRfqUmKi4uWZVGnsMgTskmQ9jjpFj
      PVn/bbWi/rFxBb1KB/KCAIL5RwnhJ1EEgI+quAq0B0OOIPQZ3FzW809HuCkTE2SFbHUwAovi
      iR+zxM1u4Wb5rFg1ZHC1l0gV2HeI/lovV78MZRU8VEkUjSHYRz1Vb+a5IQc3yOudlckHI3Cq
      PaP6uF+xmrF8pdr1VqveLoFWDuOaogC0uOmTIKZ0M2eKyxrW5aIAEjdl5gZZrbMejIALIWrO
      iv+BEqBLJc9SkbXqyruOQbp03eqdVuxIWOBZOzmfxL+L38q18+NueCuFdXK41qy4McNoG3m9
      S5ueUvJnKZVnwsizaiOMvYbL9zN8FgDA3FDY0ZI3dIzkJL9h+DNPSQqDxJTqnSDdOZ3rT+Ao
      h3/PR/Y7pdwnEP/T7uCW1O7mUHdibJPkJnBoqTwK4R7wiuNm8AyHohw9qvsft5MAWHNVYSkx
      CORIG8h/CJfeE6LmV24joQuimANo4KoEgrFPfGzxmzguwBniRJUVOcikB3cqqgBOHq8wMbk7
      ev8EjYHJ/Wlg510kAuBxkx8VaRPo1kadJ5YZlCsO6gBgSsvA9BDlfd2c6eTwyztjq/JW1zsI
      pmL1aikdxMix4jkEvBmt+KkGnScm2C7gbsuyCZAD5WU6tkFcH6hoQYjvRxyeSZFVAABzTYnM
      moHKcUafGdfHJgqzYuafqLKgyCboKVVuwfLrpA1qQoj/Ubd+RWDwtI4A2dMeWyap4k+hl1Xj
      vhsA3ANeQRfYTi6oA3bSHXzoGz5dVoq5mImdosTWwlfyNya6IjB4xjzmDs3T+a03jk5sNxwC
      duObJ+AsbNkNh0BNLFxqqgE6UjZZ4Wsb/ZG/YysVPI+jTU04eal073T2cXf7/5TPXg+sE+8B
      WpI9Cq6hpLa70ZALjrJJzbIsI34RQfo47bORvkHCyVAmb/JZDJxkk5/K3A6DgHjVBUeHX33a
      1Wgp4ALX8J95UVsMuMAztW5ZlsWzAL74J8uyrPUpTyGxBI0X+dYigTu673mIqQ70d6BErkb0
      vnios77sucXfekRHpKqtqA144qUwkkMuOBlKf97ViGddQIZ2rg4ub0KdUdWyMpOU95Fa7dtg
      Ah+iXgBmtsYPl0CLdkG+liVp4vVzGAKAnR5OvrcsLe47FhBrPYXGElBnme0WXN8oygD4nu9y
      t7aVvkn5nmuWpYm/F/dOPy/wbSgBLdoF0BXddfCxtEdeAG+0zsXelmVZatTbFkp/toxEP+Ji
      4x8sY/k6CUz+lTWSwOckC+C5+zcX9ycHAc5N72IkXiV8zzXLsl79ghQfR5IFYHnLOuh2m92x
      KglAVO6FroQkLQHxz93u2AousKGdvdOVUnEjCbxXFKBqXTddgvwdWz/UvWOLn4gQtwOFvdOd
      PmSJ54t7pz15/fuLNZgqrE95ANhkVToMlaS9C3uKjaEG3oU9Z8MlrUsTf/dgCABGDb8odGIn
      nLYbDgG78c0TcHRiu9EwmXVDZlAOLfmULFZvw5zpLLNBtxer9yyzfokJTUFmLY8GZC2FEEmN
      3u2Gm5ya/gtY3j/dUZFRlFnHkfhPcWYUUx8RCBRk1unJMtP/B5LIGRzihD/yAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='84' name='SMTDPY Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABUCAIAAAB1IEzSAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAmUlEQVR4nO3aMQ6AIBAAQTX+/zMmvo0OX0CLxey0NLehIeTO
      OeeBuf4e4Ac1G2o21Gy4Vwfv8+6cY6ezNwmhZkPNhpoNNRtqNtRsqNlQs0FsXv6HjTF2zrGT
      eM81G2o21Gyo2VCzoWZDzYaaDTUb2pUy1Gyo2VCzoWZDzYaaDTUbajaIze1KGWo21Gyo2VCz
      oWZDzYaaDWLzB+BbEZLlD0XeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='24' name='Title QTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAAF1JREFUeJzt06EBwDAMxMA0++/s8ixgoDv46InOAQAASr53
      mJnZOAIb7vYB2CQA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA
      0gRA2g8d7gQkbuVM7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='QTD' width='104'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='84' name='QTD Hotels' width='81'>
      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
      59HMhiK5zPkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='PQTD' width='84'>
      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
    </thumbnail>
    <thumbnail height='84' name='PQTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='SQTDPY' width='84'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='84' name='SQTDPY Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABUCAIAAAB1IEzSAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAmUlEQVR4nO3aMQ6AIBAAQTX+/zMmvo0OX0CLxey0NLehIeTO
      OeeBuf4e4Ac1G2o21Gy4Vwfv8+6cY6ezNwmhZkPNhpoNNRtqNtRsqNlQs0FsXv6HjTF2zrGT
      eM81G2o21Gyo2VCzoWZDzYaaDTUb2pUy1Gyo2VCzoWZDzYaaDTUbajaIze1KGWo21Gyo2VCz
      oWZDzYaaDWLzB+BbEZLlD0XeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='24' name='Title YTD' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAIAAAAj02USAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAAWUlEQVRoge3SwQ3AIBDAsNL9dz52IA+EZE+QR9bMfHDqvx3A
      2wxEYiASA5EYiMRAJAYiMRCJgUgMRGIgEgORGIjEQCQGIjEQiYFIDERiIBIDkRiIxEAkBiLZ
      8dADLTtsO04AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='YTD' width='104'>
      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
      WKwbnDge4MAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='84' name='YTD Hotels' width='81'>
      iVBORw0KGgoAAAANSUhEUgAAAFEAAABUCAIAAAB1IEzSAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAJFUlEQVR4nO1bQWjbWBr+s/QgQQcs6MGCFOIhhTqkEJkGxmJ6
      qCCHOKfY+NCaKbRKC00yhYnTnMweumoPrdNCJ+6hG3dgFmegi7PQYBU2VDl4kA8JeoEUKZAQ
      FaagQgMWtCBDA96DZVlOLSdtmsRe+zvZ73vv9/vy3v/rf09/OorFIrQY/nbcEzgGtDW3Btqa
      WwNtza2BE04Ev8Af5TyOEh3tnKQl0Diadf4aqdZo50c6aoB+tLuv8oDu6Bip5ZA6f43s8E9X
      BhQbA3medQNs7aNj5robOtlMvrpZifsxAGAzDpbhh7hlvDE0f3g11olh2D40Z6NucI/916hu
      3Zr5EcMwrIbmsuWG0yzedmPhdOr6npq34j8AFk7vWmPtWQDr5dL3/Z9rtiw3mOZs1I0FZrVi
      Zi/NBs+6wcuh6lZtNoC5o9ni1sPPNNssN5LmTxLXi/kfbxWLe2rOzw4CDMxq1Y3pMOa++coo
      fqa52rJds2NOcjRQHo1xrrj8s2fvru/Scy8h+DzitrXpC5NjOTalMNiXWD5WzevT7BRwytg+
      FIP+cl6AwOxFmzqdn7yRGXqqMCe/0PK33apfhK2H/s+m449v1O6cuQrw40zV5ufZmopYvqbl
      ivHj9mcb6vqzxHWD545UZ3iNGGazbPfnxsnD6mJHUzeBOuv9JsYaVDN/o6Pjhi2PfKPIAMTJ
      z0PV16BRz1U7/MgozD4NHIbtBl1n/eW8fJo8JOMNqlnJGePXqUMy3qh7+zDRoOt8qHDMwwqF
      wlHO4yjRiuvc1nyMWOV8+LgTqa8kIv0kgePEaV/kV6TbqMJ6avwiSeA4TpDMBK/tWIwwTuB2
      0L+aN2KNofntPBu+qzixm4ngQEwdSMl5I4+S3heBYHn2sJkI+GPaFUH7YOSVZM9CiJ4QzDi0
      iaSCP64YFkTrXOmUshtHhLz8nKUwKN1m1eyQuoRBLydZDcucFwKzf5mU62omb3X9PQgQTL03
      DMMw5i/DqeirWhaPe50XJ3uuCJ47onDH6fygaRsFzzBToXspGnhhGeAjn/4DQsOVCwMsnDKM
      VPAkAABCORik6VoWj1vzuaisyamfKVfdXi58N69sqrApI/B6CZS44iMJHCc9Nn/W5RXVtZFg
      zpA4jhOnmfE/FOvZe9ya3R7PHoclkvQAWhQ0q+GNIpU+vH+nghr/JY5NiVreyGc5z0KIviXo
      AABSbgkKJ/xcVjUMQ/0PI4/SgcaKYfWABW9G3UuTkUdKYQdgG3GjnC3aFZiJJNuLAQDWHUk+
      YfXfYqk3AMDM5I38Yox2YwDgOh9LPaRzf58WdgCaQTOAn0P8GDxhiO8IMpz0PExGAEgXAScA
      A6+Psu2TM14vIGWjhg2y0wMFSXkLcMx3gPuG6yInbHDml+3UPLi83S4gvRRIX2LG/Os0wToL
      twj8QsJ6w6YtzPGnIoF+gC5mqBfxSxVPLyBJgYCfAniTYHByMlsxgpZF6B1iugCaQjNzacy9
      Ep9e0AoAhdfTkQkxcC9KnwAAL3uPlSciXLZEJSNTc65fopFTAF2R8XAhORUT3hUACtpibOxB
      nr3Hlh54DapZGMXxUcH84ufE+ZA82kPguGc445uT0z+ZVyiugRm0GFImfCSOEwMJ7JaI7pQe
      ya7gMznlF1mKwHHCN6WE5tHMgPnAc7wzOOaz5A7P3sKST5jDsN2g66wvppVO4pCMN6hmOQdj
      1478Pqx9T/J/hfa9Z2vg4JrR3TNDyW0AANjhR/BxwWI+zofIyVzp8/q0z5ZLOVKrd78PJM2r
      n4WRyiMaoPDvEDlljlAe+KyLHgBA//h+6DdzEH8NH1+E+tSBNW9LItC+UwAA8BoJFymfRa2K
      4gW6FHwLa6Lm93n2onQkgt9XSh3QqsD0V4yhZZHuN0coyxpNWcZ0KQe0eQBHKMtQlXhfmzqw
      ZoSEC+avFDYka8YAoCKR7PeW8nplHZVnXI+SlgWmzzSmrlnTBQBVypH0OXOEgmi6zzImoSWG
      6gUAgI+qZC2AM3VQzcqqSFHmvQ1aFsszBgBQEKL7SpQu5VzlGdej0DJFnTM/itnydAFgR0Er
      NHUWAAC2JdFFe616inUknqe8pfPhqihesC2zE7XHy39HZGoXNgBAX9AxmbjE1qx5AAAYrP3a
      lRp2NBYYdGL87CVHKr5x0NoKMeoOpj8Ui8Vi8VOGdUdFi3k/G+jmzFoIJU4Nzub3QbnDabPC
      7wXrvl0xln8WsAor5PtU4FnFmHjbHXxuDspcdUezxT2pg+3tN5LYWd5mr5FQDksA1X6+Juo2
      P69DWU6OVgW7/9v9XFnWHfwcoazdzx2pg2leQ6jf9GYdia7yjKG+nztTDv6vfI2f16G+dle3
      qD8b6bDlJHL8vH9GtSiJ6w7Mvi8Wi8XipwyLjb0q7oP6kDY9WIlT9lIwxHksn3/BYjcrI4zn
      Qcvt5ftUqdJxT+ogexuJlpN8VMS3tK+rzNRJVOrmMDUTmK9KVOpRB9BsD2C2vAqgKkrZZ1yf
      UpGI7Z4uQFUAs+dVsCtKic4BrJpqn6taBG3NrYFW1NyulWoNtDU3BXSUHGU8JI7jOHmGmXyp
      OfbcFqaDvlJH35WEVWLVdJrVRJjhtiO8ahhGXnrYkw7S40u1Qo8ujPtD6bNxKW8YeSGixZiw
      edPYbO8xVrkeP8+uidFus0EYJYbezWjzkV1VNsoDn+8FK2fL/3qzyvX45y7n5Fhfk9QZVNAX
      k42YvYHoJGFNzwNUa0bp3xXqRsBTa2DT7e1d0KQ/VfCQu0v6P6rKJvi6MX6C8ZA4TjS3P1dB
      fxmLLbnZq4Hd9VbbmgqQmRoRB1OKZuSVdLDkz01TN+SEzUTw8hx2NcldrF1iRlyJcwMkBoC5
      6dg/Oe+fseklgCbWvJkYujCpXkqjx0zNGkKscrsGAABdXh8UpHUVmlSzvsIx/ZPycBo9Drhq
      RuEub49zeWHzadZXuODA9LufMuiJg2AAAJoZxtKLYqXhNRLBxZz3QPM9n3WePRfiB9PK00D9
      sljYTDD9cc8TIRH2wLbADYcS5Iw8HyGbbp31heTcNuj/CpFVJfjmC+CqCqvuMR4liGeM5zuc
      8EZEf0qai5Qeac22zt8CTbbO3wT/AwK8ZWU2YU0eAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='PYTD' width='84'>
      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
      vjDqcT2l/wNoOBCouowVygAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='84' name='PYTD Hotels' width='81'>
      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
    </thumbnail>
    <thumbnail height='192' name='Gross Revenue Trend' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Pages Available' width='192'>
      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
      oWDQxNAA8P/Aa13CiyTlTgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Page Fill Rate' width='192'>
      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
      EkekbTyTAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Ad CTR' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAIDUlEQVR4nO3d23MT5xmA8V1ptZa8sk6WhG1sbGNAiZOYoXUw
      xLQ0IYZ22mmn/1ov2+n0pu0F6TTkoi3NNJSYtBOgCQmEU4wxB2Eb2bJO1mm12u1Fp6Eyq06T
      d7rIM8/vhhmPL96LZ1af/fKtVcdxFOCb0hRFoSF8Y9q//snn8//Ld5dKpWg0+v+cB7uM+vzj
      p1Wv3FxeTRq+gT3jSnWz3A40tyvJ1GAsGt3c3Ewmky9kUPQm7fkvNZvtbHZ51TSd5WzANGv1
      9WLJGhgcWzg1Xy6XCQj/ySWgWuFJ1Qykg+1QNOZrbYcSr2Yy+tLtG7ZuRCIR70dEL3P5CPsv
      +AjDDr4XPQB2NwKCCAFBhIAgQkAQISCIEBBECAgiBAQRl1WG3Tb/dvWablaTk684lbVS0y6W
      6lOTYxPj+7yfDz3OJSCn3c6uPUoF9EfXrsc0pdHesmvWYjZrxAYrLFPRySUgvx6anTncKG5N
      xoYVp24qmUi/f/3Rw4GwobZYpqIDy1SIcIiGCAFBhIAgQkAQISCIEBBECAgiBAQRl99EK4pj
      mq12y/T3hdR2y3JUu23puh4IBLyeDj3PJSCrXvnl2XPhRm5o5m11K1uo5h8+LswefWP++Lda
      rZb3I6KXuXyEaaHIvqF4JLqnXthUNX9/fOzM945/cXUxX7Msy/J+RPQydmEQ4RANEQKCCAFB
      hIAgQkAQISCIEBBECAgiBAQRt3thjr288qCaX9fjY4lgq9zy1yrbw8PpdCrl/XzocS5PoHaz
      9uHlj6PhkBGLXb9+79bnizc/u3rhw8vFSrVcLns/InqZyxNIC4YPv3So5esf67MLQ7GmOpII
      B1a+vOsP8pZW7MQyFSIcoiFCQBAhIIgQEEQICCIEBBECgggBQYSAIOKyymibtfc/upIKKrHR
      l5qbD4sNM19ovJzZf/DAlPfzoce5BKT69UplY3NpI9UK+aulhl3WTOvS4vpAcqjGW1rRySUg
      n187PnvM2i7ZgUgwsKephAaCvtza6mDE0CyWqejAMhUiHKIhQkAQISCIEBBECAgiBAQRAoII
      AUHE/S2t5UqlWtrSw8mgatZtv9moRyMDhmF4PR16nvtbWn/9+3fTmjV9/PtPbl+v1J/mNuqj
      k9NvnTxaq9W8HxG9zO1iYSiSmdib6Ot7vLJshPt8kUzmYN9nn35SV07ouu79iOhl7MIgwiEa
      IgQEEQKCCAFBhIAgQkAQISCIEBBECAgibm9ptduf3rj58r7UaiWgm7lSU6lUauNjI3v3jng/
      H3qc683Uxq17t5eufdAXPxYObNetDXPbur/y6Ac/PFPmYiE6ub6l1Tgy/crUvlP3v9z09xlN
      ZTJmaNmV5VC/4fCWVnRimQoRDtEQISCIEBBECAgiBAQRAoIIAUGEgCBCQBBxvVhY/sU75zJR
      vzp8xM4tbVSLS/eeLpw+Mzc74/186HEuTyAtFNmTCMfTo/m1hy1H1cN7frzwxoU/ncsWa/zJ
      S+zALgwinIEgQkAQISCIEBBECAgiBAQRAoIIAUGEgCDidrHQcdZzuepWLjq8XzMLZSvQ2K6k
      04PxWNz7+dDj3C4WNrbf+/P5n745f+P2XauwUWusl0tWf2z09MIJLhZiB9dl6sBrmakrVz8Z
      TkTiiXBqdObo3FzQLjq6EeFiITqxTIUIh2iIEBBECAgiBAQRAoIIAUGEgCBCQBAhIIi4Xyw8
      e/7i9KDj2/9W/f6VrVp1db36+rcPz7w27f186HHuFwuDmpVKDGzXG6WK2WorB4aNS3+98KRQ
      5WIhdnDfhZXKpX7dX23aqmNZqh7U1EqplB4Z2WIXhk6uf7VZiUaiiqLEgs++wp9shisO0RAh
      IIgQEEQICCIEBBECgggBQYSAIOL6i0Sn0Wi2W81AKKxYTdP2tS0zGAz26brX06HnuS5TK786
      ++5ofyCQntC2twq1fDZbmjny+nfmZ03T9H5E9DL3ZerE3pTmV/2O7dcD4cT42yePLV2/XGjY
      tm17PyJ62VfLVKe4lfdrmhowwqFAt+/mYiF2+PcTyHEuLl787e/e0zT/C50Hu8yzjzDVsYdS
      iXqr/QKnwa7zLKDNQoGfs/B1PQtobN/BQ0PhQp0nEL6GrwJSw37ri5WNuNH1BA08j9e7QIRV
      BkQICCIEBBH3WxmK4yz+5Xxy/6tKea3YMLcKjcyhyYMHprydDbtAl4AUx2w2bt28E9Wchl32
      ma2PLq0NJIdqvKUVnboEpKpjE5OZWFq1m00lFAn5nq6uDkYMzeItrejAj/EQ4RANEQKCCAFB
      hIAgQkAQISCIEBBECAgi3VYZyubT1WA05TO367a/1WgMRMJGf7+Xk2FX6LpMff8P7yQz82ox
      V67ncrn6+NT0myfnarWat+Oh13X7CHMSiRGnXgsafdH0oe/Oz+Wzd6q2pvO/7tGJXRhEOERD
      hIAgQkAQISCIEBBECAgiBAQRAoIIAUGk6y7s83/8XQ0Px/VmqalUKrV9Y8N7R0a8nQ27QJcn
      kKr29+mpkZE7d7P37117snzz4uLH+TJ/sRA7df3vHIFwMu5rjo6nm8pE3NAeryyH+g0nwsVC
      dGCZChEO0RAhIIgQEEQICCIEBBECgggBQYSAIEJAEOm2TLV/8/OfHTjxk+qDGxvV4tK93MLp
      hbnZw97Ohl2g6xNIDxkP7t4ybSVgpH50au6DP557XGCZip267sJcvq6qeXZh6NR1G6+qqpdz
      YJfiEA0RAoIIAUGEgCBCQBAhIIgQEEQICCL/BCSX86R8eOYQAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Ads per Page' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Page CTR' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='CPC' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue' width='192'>
      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
      JIdxAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue %' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAANcElEQVR4nO3dW3Ab13kH8G+xi73gDgIgwbsomZJsybITWbVs
      Rc7IcdNkkkwySSaup8mMJpOH5qHT6VNn+tjnNg95aDOZpp0+eJqk8WSmzkzTeKIkdlpLlqMb
      xdiUqAspkeIFxB1YLHb3bB9Ic0EIAAkeR0s4/98TARKLM+JfZ7893x5QcByHAHbL5/UAoLdJ
      LZ/94U9+fGRiZKliF+7fGRrfX8rnnz79klgvFwqFaDT6iIcIe1nrAMmKuLRS1M2cVS6Upejc
      3JTcN3XmuRNElEwmH+0IYU9rHaDTz70Q8gvLZVZcXTxydDK3f6Bcf8QDg94gdFVEZzIZzEDQ
      CEU0cEGAgAsCBFwQIOCCAAEXBAi4IEDABQECLggQcGnRyrCN8vf+47XRgLg4v1iKDQVWZoZP
      fvZLLz7P/2aOXnVsm/84sHe0CJCohNKJkFDTSRCI6JWzZ1/9z/86Fwgde2yI882qP/2JU9M5
      DwJ7yiPthVV+/CoZxq5fDnsQaiDgggABFwQIuCBAwAUBAi4IEHBBgIALAgRcECDgggABFwQI
      uLTeWEhEP/r3H+RX5paDTyTy0x9WNx4+etrOQCFNCgwfi4uVl8+evTd14dz5a5lM5lGODHoC
      uvHABTUQcEGAgAsCBFwQIOCCAAEXBAi4IEDABQECLggQcEGAgAsCBFw6deNXF5f11NiHuDce
      Pno6deNJVIjoFXTjoT1044ELaiDgggABFwQIuCBAwAUBAi4IEHBBgIALAgRcECDgggABFwQI
      uLTtxr/6/X+oGWxBHMPeeOig7QykBpNiZAh746EzdOOBC2og4IIAARcECLggQMAFAQIuCBBw
      QYCACwIEXBAg4IIAARcECLh06sYXq3I51Ie98dBBp258vVIi7I2HjtCNBy6ogYALAgRcECDg
      ggABFwQIuCBAwAUBAi4IEHBBgIALAgRcECDg0rYbf+3Cudk7C2L6iH9lKnjg+CePH32Uw4Je
      0XYGspj/qeMn52YuTRw8+N6li5em3kc3Hh7WdgY6cPhYKCCdOf3C8PDAl/uH5Wg6FpSRIWjS
      NkDReJSInnziIBFFotFHNyLoKSiigQsCBFwQIOCCAAEXBAi4IEDABQECLggQcEGAgAsCBFw6
      dePfn102AvGEuYxuPLTTNkAW80+kklcq1QMHD/7q4sWwLI0N7n5TM3xUderGRyJqaHZhMJ1A
      Nx7a2aYb//ih/YRuPLSHIhq4IEDABQECLggQcEGAgAsCBFwQIOCCAAEXBAi4IEDApW0r4/yb
      vxSpvsgGsDceOmgboNkbMwXdZ8sLf/rskd+gGw9ttA3QS5/+M1Ijq5kc9sZDB20DlB47QETp
      /hShGw/toYgGLggQcEGAgAsCBFwQIOCCAAEXBAi4IEDABQECLggQcOnUjWc2u5W3sTceOujU
      jb/93vzgJ57D3njowP278Uvzs+cvXXv2xc8PRmQiWpq/JYb6Mqu54XSiVilsduPxd+OhkTsD
      2WZ9ZmbmxJnPrz9c78an+uKEbjy05xbRtl038qurZdPD0UDPcQMk+PxH/+STo1G/h6OBntMQ
      IIeVdV0QPBwM9B43QNnM6vSVt+8VLQ9HAz3HDdDIxGMnT336cEr1cDTQc9wA6cXM76ens1Xb
      w9FAz3EDVDUFWayVDZzCoAtugG7duZ0e2h9T0B2DLrhxKVV1vW6IIi7DoAvuSvRXv/LyWi4X
      8IsejgZ6jhugS//3v6+99uqf/+13jw1qRPTLX7w+EAvdqkaxNx46cANUZ8bIwY8l1Y1TWFjV
      fn1hhskS9sZDB26AMov3q8XVpbI1FCciSg+PfO2Jp5dXstgbDx24ATrx/Ol7uTcGo/L6w7ED
      h4moP5kkdOOhvYarsGKxVCoyx8PBQO9xAzR9fcqx7bqJhUToghugXHbVJDmo4DIeuuDWQN/4
      5rffv70YDyoejgZ6jjsD3Xzv+jtv/ffNlaqHo4Ge4wZIDYY0LaRIaGVAFxoCJEu2IAeUtht9
      AB7mBiifzQdjMT+aqdCNhhvKTPOtN36um8zD0UDPabgnumr/5V98YaVY93A00HPciufQePrm
      g/KZ0dD6w3/+zt+n04dmq2ZgZWb45Ge/9OLzHo0Q9jR3Brp9+1Z2aS5T2th6fOr0S3dv3yCi
      V86evTd14dz5a+ikwsPcvfHTly/8/Gevf+Zbf3dkMNDup7E3Hpq4M9Dq4pIWjfh9uAqDLrg1
      UHp0KFPRwwGsA0EX3BnItGxZDWAdCLriBuidy1dUVfU5WAf6I2JWeFuf7gnrc1/4crq/n/Nw
      0FtKhh0POALHR2q4M9Cv3/jZv/zgX7MVLCT+EckGEjbfLYRugJ48sK+QefCgjL3xe0uh2Pos
      UzHs+0yr17l+/cVwwrK5ihb3FHbk5Jnxo8+GQhrP4eDD5TjO9dTjz5RuKXLz1fHdYPru2FOP
      zV0+ZK/t+vhlJVIjiecDWdwZ6PqVd//tn/5xdg0LfXtIzTDzAxPzSvPiLbPZcjhNRAvRYWbv
      8qRhW5ahhXQ/15TRcFP9xbfGPv6plIYPV9hDMv4ISdJ8YsK2tqSkaJIe6yciPdaftXe5dGeZ
      dl0L10Sum5jd9/7i17+taBpWgfaUTCBBRLVIIrPoHyC3WFkOpuiDS6f7ocFkfXEXB68IfpKk
      ql8lq7TrEboBUrUtU9ns9JvnXr+wFBlN5KfRjfcEs+1sMLX+9ZrWN2BvNLMdxpYi7oLLcmLM
      vHvXr8jdHl+Xg0RkSCpxFOJtT1jLK6u2mo6LlZfRjfdItWbVon3rX2e1+GbbO2uL1Whq88cs
      LTSvplq8fjtlSSOiqsj1oYZtT5+nznzl1JmNr//qr/9m/Qtk6FEqqFESNv6HlyL91tq0X5Ed
      x7kZO8D8W+abu4n9+5berZJk2yym7LQMWS+f64rGSszn22Xti5LZe3qhdQlS8rv31TBVywsK
      EWVN31pqvOkna5HEjJh4e+zkUqCLm23K/gARGWqIZy0RAfLektJnGi3+QEBVDjY+zKrxguWb
      GjxGrWaLOweeMdVgTont8E2ZZdeUEBExRTPt3X8iAgLkvVx0oOw07yh3HKfs3xKg5Uj6/PjJ
      SrRTuVMMJyyzOYsOc4p68xyz5shmIExEJAhVYfd/ngAB8pjjOCUlUlAiTc/bpqUHtjxZ6huy
      lLY3i66zgpGyveV3ymx2NTB6cfRE40oSY2wm8dhmIWXI2xxWrxqbJXwTBMhjVt2shuMPB6hu
      O5YW2sUBG89izGZXwhMLQ4drkcSS4KZkiWmF5OjmQ11sXgLI5SubC9wOY5dTR/Jm69ocAfJY
      2ZGYouXVaNN/8ZKotax1tpVTNz4NjDF2NTj+ID25/nAuNu4wRkS6TTcGDje+pPZQNyMTGyp+
      kJglpuYG9t2OjLV8OwTIYyUlRESVcKKpjq76tzmttJMPxJnNiOiuL7Y4dGjz+Vxq7Hx48r4p
      nx883lRIGQ/NQBUltBJIEhGz7dm+/US03D9RMlr07REgjxXlMBE5ipoVt0wD5a2XYDunxweu
      BUYzNZoZOdb0rezAxNVDL1RD8abnq1LzDFTyB5eDKcdxFoVgMTlCRI7kv546XDGbKyEEyDPr
      56yCvFHoTI0e1y1n81sVjpssFoYfvzh5msk7PYIpq4y5s8t6/V7sG6xU67OJyc3ns8mx346f
      WmNbLtkQIM/cqas3KFpTw+sP64HI5b7DzLKIqFxna/37eA7O/F302A1ly1pi3WJmIEyi9PvQ
      WCU+0PiTlhp4Z/xkxnEPjgB5phaI3Nx/ohZ1145zydEFIURE88FBEre5SYMZFYfx3j5ayWeJ
      iCmq1fDpqiVRJZ9IRKsTT7Z4X7/y7sjxnL2xcNX+z35Pv/k/P71aTcexN/4PhLW6yLqVnOx/
      8O7C+L5tXz7AFmNG8Yb6cZ5b4lPCasmKiJJUFeTNOmjb+t1WAr8bPn5q/m1NFjt140uFAmFv
      /B+MI7T4PNNKfGBKHTaD7rIQy99ruYgXpeLHtHtRfY5nDCNS3rEMIjL8bsFUkrdffzICkTuB
      NKEb7yG7zcyxvP/pxodP+W9PG2GmNje5ok6BiJ4Sb/zGHvWJu/lsXYecuK+osbJJwZooExmr
      hpBVozltRw21+4l9B+8/QA3kGVvY/h+fMTtmZiacW82vtSyxWp/LjaaEUqI+v7sBMMsK6csh
      QSciXdIcx5lJTM5OPFNKjuzk5WYw+kAMI0CesXdwBcNMw6inJmmembUt37Bqohhb8z99rzJ5
      1HfD3tV99YKlC0wN2jkiMiSlZpjFvsGujjAfHUWAPLOTGShgF3VptFpPxcylxucjrKA7MSLK
      SY+HTDP5wSRkdXNnT9gpln1jmlkioqqorMgxR+quLZ/vG0KAPGP7ti9cgmbW8CVWnCf6zNXG
      58PWWk1IEhEJvvvmk0ed95htp/TZtHln5wOIOKWqE5fNOhHVZW2lm5vRNogSAuQZtoMAaWaF
      SUFLisrGlhsqNLNkSRulru4fUW3fWPXqJ5TplNDFJsOQnTN8fbLot23bCEQK4d3cWI0AecbZ
      wSlM/qDBEPTJtrnxsQWO4/htgRou4lasyeeCdx3LCenZxqZEZ4F6wZYisiA7Vp0pmhFu7pHt
      xP8DkjIlStABvWQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Available eCPM' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Hotels per Auction' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Publisher Metrics' width='192'>
      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
      3js7JpQuUq8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Active and Sold Hotels' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Budget' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Percent of Hotels Active' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Average Budget per Hotel' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Conversions per Click' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Conversions per Impression' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Clicked ROI' width='192'>
      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
      6JMa0L8rHaiVf2duRgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Exposed ROI' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Advertiser Metrics' width='192'>
      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
      NldHtsCPjqAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Pages Available YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fill Rate YoY' width='192'>
      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
      FNmMUwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='CTR YoY' width='192'>
      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
      U20tgEhEAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Ads per Page YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Page CTR YoY' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='CPC YoY' width='192'>
      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
      71PpmeIx1e6EAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Gross Media Revenue YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Available eCPM YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Publisher Metrics Year over Year' width='192'>
      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
      wgvRaFQxhgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Active Hotels YoY' width='101'>
      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
      EwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Budget YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Budget per Hotel YoY' width='192'>
      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
      YAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Percent of Budget Used YoY' width='110'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Conversions per Click YoY' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOwgAADsIBFShKgAAAByVJREFUeJzt3UFrG+cWh/G/L1M4ggnMgA0acMADt1BdurDA
      izil/Sxt6efM5kK7aKg3pQ7cC7qLCxLEoBcq0FnMootRHMuOxi5NpM6c5wcmhEhhFn6kmdF7
      9B6pdbT5AUI5knT0/bfff3f5zeXXhz4YYN8ySUcvvn7x1Q/f/fDtn31ySunjHxGwR9lf/Q+K
      ovgYxwEcxD8OfQDAIREAQiMAhNZ5DZBukmQma1zJXWraZ5gZ5/4YhN0BNK7rN7/I8kpqkpbL
      tSSXu1SWlaYXkzYIoMeedheokZSNVJ5U0irJP+0xAXuzO4DMdHnxUspMalwuk5mkRnJJlknu
      pIB+634HMNs8ymR3nmG7Hg/0DHeBEBoBIDQCQGgEgNAIAKERAEIjAIRGAAiNABAaASA0AkBo
      BIDQHhmIWUhWvB+IUbsKVBkDMRiGRwZifrsdiJn9ZyaXqcil8vlE0y+MgRj03qMDMe0kQDsG
      aVaofDaS8YuPgXjaQIykyZeS5LLMbp/JQAz67mkDMdqc+zMKg4HhLhBCIwCERgAIjQAQGgEg
      NAJAaASA0AgAoREAQiMAhEYACI0AEFr3QMxiIeXbAzGSZJmpOGYgBv3XPRDz39+kvJLdDsRI
      hRUqT0pNL6YMxKD3Hh2IebcA2vKiXRLd6HZGAOi77oGYFy/1LoHpuaTG3//yMxCDAeh+B7j/
      Ss8rPwaGu0AIjQAQGgEgNAJAaASA0AgAoREAQiMAhEYACI0AEBoBIDQCQGidi+Fmb66lvNRI
      a81vNjvEmGR5qfp0vJcDBD6l3QG4a3Ezl9xl7pq/nbc7xGTSqHSVRcFyaPTe7gDMZFbKrJCy
      pFJ1++qfWbtHmJmSszwa/dZ5CjS9mP6FZwN/f1wEIzQCQGgEgNAIAKERAEIjAIRGAAiNABAa
      ASA0AkBoBIDQCAChEQBCe9pATLPWPLkkb5dDm2nyz3pPhwh8Oo8PxKxc1rwfiLFGKk9KpeOK
      gRj0XudATJGXkhVSk1RmdbtDjLuUj1XkptQwEIN+6zwFmpwzEINh4yIYoREAQiMAhEYACI0A
      EBoBIDQCQGgEgNAIAKERAEIjAIRGAAiNABBa53rO61+vZUU7ELP0dncYX3m7Q8wZO8Sg/zoH
      YlLa7BCzGYiZL5aqxpXKE1d5zA4x6L+nDcQoqcpq1Z9PpGbzb+wQgwFgIAahcRGM0AgAoREA
      QiMAhEYACI0AEBoBIDQCQGgEgNAIAKERAEIjAITWHUCzp6MADmT3es5Gunr9k6wYS01SWkmW
      ufz3tfSs0uX5hEDQex0BuLxZy1dJ1riWb+eaL+Yq80rVZyOlVZI3DMSg37YC8JT06t+vVNVT
      Tb+sVZ/VUlZKclWntSw3+WopZaWKolBK6UCHDXwc2wGslko3S6lMmkoan35gI7yi2NOhAZ/e
      1kWw5aWsKFUao46IYSuA+c1catpvfwAi2ArA3TWZTOTc3UEQWwFU43bv33pcHep4gL3augg2
      K2T5WkXOORBiuPdJsOvq51e6ejM7zNEAe7YdQGaSS2s+4EIQ2wE0ruK4lK+dZQ4IYfsaIDNV
      zyspK+SSuBLA0G3fBm1cs9lMS3cZX3uIAD6wHNpU5ix3QAwPAvDG+dJbhPHgV73ITcvVZpVn
      c+cR9y+KiQQDsL0a1F2z/81UWSU1rqvXP0pFLWuS5vPl7ePK57WmX9TcKULvPbgLVOaFbGRS
      o3ZN0CpJm88FRpm0btq5gZScgRj0Xnb/b8W40uSsksxUn/2rXRrauApvA1AmKTMVhSklbpSi
      3x6cyaf/zzUr56pPxxqfshEehu3hbdDNKzwQwfZEWGYajysmwhDGg4EYbyTLR4c6HmCv7q0G
      lXyV2sF4IIAHy6GL47GMUyAEsXUXKC3mqj+vmQlGGA9OgRaLhSSuARDD1jvA+LTWeFyzzgdh
      fPhzACAI9gdAaASA0AgAoXWf8TMQg4Hr3CDjp9c/yt4NxLzdfDrcSKOy1OX5lIEY9N7uU6Cm
      /fFVkq/a7wkafSalmyS5K60YiEH/7X4HuDMQY42r2rza12ftvzEQgyHoPJNnIAZDx10ghEYA
      CI0AEBoBIDQCQGgEgNAIAKERAEIjAIRGAAiNABAaASC0zsVwnlL79ehqvzZRaneO9MzYTR6D
      0DkQc/XrL7K82gzErDV6NtJyOVf1fKIJO8RgAB4dbPTGN7vFuLSWqqq6fTcA+m53AJlpev7y
      9hG1tyGYmZS1fxIC+q7zHcDunOfzhbkYIu4CITQCQGgEgNAIAKERAEIjAIRGAAiNABAaASA0
      AkBoBIDQCAChdS6GSym1i+Ca98uilandUZ6BGAxA50DM9d2BmOVmIGa+VHlSaXoxYSAGvffn
      BmJ+314iDfTdkwdiJpsILGMgBsPx5IEYSTLx6o9h4S4QQiMAhEYACI0AEBoBIDQCQGgEgNAI
      AKERAEIjAIRGAAjtD8U45QWUbHqzAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Conversions per Impression YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Clicked ROI YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Exposed ROI YoY' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Advertiser Metrics Year over Year' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO29f2wc150n+EmmvPd60MK8mmvtVF3IHN+EnGVx
      rKyaI3ncPVEG6jtloRa0gUg4C4lrDxTa2XPo+OBIMTYRE2QdypPxSA7iiPbNOG3fRKCMtY4U
      LoJaNxHcxK6Mbu1Q1yWsBBZ3yPMjho2pwqox9TBqXH/nXDu6P7rZbJJNiqRIibb4gQCxql+9
      elXvW9/3/fW+38/cvXsXW9jCWvHZhz2ALXyysUVAW7gvbBHQ+sC5ken/QX/PM8/2//Fg/fmR
      CyN1R5R6e+6w/8VnvdLcb6m3U0t3TyPnM86NTH37hjj+jWdVAACnv/dCfWN7dKR2mBnNNL44
      oJN/fBqAN2Wfu7BEm0X4tR/+8IcrbLqFZbDdEIm9nXZuZuCV/5WK3g8HfpzJ5szf2PbvftT/
      xO/Hf/rGT9MX00/8YTw9nEnsiwPwJnI3p5UzXYz/npW5cC71f/wyNzb53/7e3RHtHDmb0v97
      /cc/Pp3LO1/+3c+/8PIPnQn73P/+S8vazn7jf/jpaz/OZO3EH8YH//TkL//yV2Zb5/t/dvrq
      f56M7+4E6P23TwW/2dkc8k6/fe4rh/4odzH1F/9+hKD/8uxpF+bVkUH7o1JJufpn/uH0G3/m
      /I0qFezU0L8n6G3CxGe1x0rTv7w2k77wft+LfTP/OXf6zT9zpr0vNm//4Y9/nL6Y/uIffOWn
      /S9MKnT+bhsp74ev/DjzH3JbHGj9MXL2TM+3+3u+ZNkuEvsSZpjFd8ep6OSn3Fqb1DtD1q5Y
      9sowgMzY+MD3TwiDWU2h9HXpTHpDb54mYHwsnR4bh2kde6kvsTdJRekWpCx4OufyemYkNw7Q
      4JspOeMfe7630q3xeELeyKSv5JN7owANvnUOwOBbg/FYNLkvIX30He1yJmXq/eGBVweSe6PO
      rXE8pjNQ5fLY/iNyNJX8+jGm4fQbpwCkz6akKnfujkPJ/C3pA71PJQGkz6e6v9Hf+y+jWwS0
      /uBh3S24bkGybRwB0hfOKU03IyYFsy0CJRU4Q2KHOfKhQ0RUIqUouq8r/doLIpbkutnzjReO
      v3iss81kLAQAAQGAxl548Rhu2zmpYnsS/d8+3vUvE4yx+rszkEvQNQBMtFv9P+jvO3oEAAWo
      tQxp8EokHcfaGe99Opk6O1S73GqyOtoFADMiXvh2/7HvHHNGz/kBMw2TynM98DCXBenNuFtL
      2PriMfGF5rZ/3pn5P99Xv97Wc+CJ4kfOjj9I5v5jOvoHCdH829v5NvGFZvW3su33vhzf3fnE
      7z8h/59CdzKe+otzT+xJWP+sjbHQV/5F4ondT6TfS7mB/uXdHdpjYdHUPDl+9bd3xH+nozP7
      lyPQf6f36a9BTb//f/3VVw98hf0TTXxBAAA0fBbx3V/Umy3xW9u3N4noF8w/f/sX8T/8F7/T
      1pb7T2PR320TQmifxb/q+mrqzwbNL3R2fG7bL9775R99/d+Y/1SvPMBngGYhtM/iiegXU6lB
      /fMdX/nDxNVf/dL6/S83i8+bv8mFEADEjifsv3zf/cftn9myA23hfrC1hG3hvrBFQFu4L2iV
      /5SihzuOLSwPxsAYIyLaZBNVFaJpTkN4mMheHvrp+StfiXXm/++/Uv918j9ey+ZuTZmfM4tF
      V/3tNFgo9E/Yqdf7zUCl/9oP/m4Gvxa8fz5t6o+Vgsd++r+dajO3F1VJ56GBH/zbkpqZKX3G
      /1up/9b2v/pPfxUOac5/mTJN0/fktKdKf68QKPp/yfmogP+vVPiv3vZfD46/8iczt7L655q9
      v/U0BM5/mcI/UKHobf/N7Q/7xUDToGlaEATBppgoOGPpP/pf/g1C2zcXAf30J38i/9oJqDj1
      d4H71zfdv/8HRbBHRwrThX/b33+z4H91XyL1s4GbUzNy4uZntum/uvC+9Ip/cerklfy4aej2
      aPrmTOnLsfgTO5pP/cWvvvgbxRd+8O/K/y188+ovcznbKQaJWOfJV78/OZa5KWfGxm6O/YeR
      P3n9tPo7TzO+2PGFtnBJTuLzufOn/+SNVPMXfvudU6dnPBn6fGfb57YIaCG2f67N9WZ+Z5va
      TARE7u1/3H7s2a+O/bXrTjoduztLRWX+thX6+5mv/OveoFQ68NVu8Tkz+MfgXyUTAds+6diJ
      g19Tf+t+8ffaYvu+uu2/0377c6b798GXY09ov74tUH7n7+0gCj/xzz8viyXzt7Z/+X9ONv9T
      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
      OH4eyg9UAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Key Performance Metrics Performance' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Key Performance Metrics by Market' width='192'>
      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
      q4/RFKg0pVltSjQqUZuvsaESIwp0/Ir50mILTJbNrj9giFD6QrMSvbEUrlJkTXWSYLH5zujQ
      iGOI0QezCMAKimYpGMB8aaWImaIAWAQIVMnso9KXJEKqNR+jc0oPjAzq7UOFCACyqbDVakVo
      xT1BChi2WhEGUfaxTx+kfRYYNujIiR598GHZDKSUUqHjFNmAg6GSSsORxU02lqK0f4QOdKQ7
      JEp0QiySXVhCLK6gRPe8uvo/x/5HCOkoaCy/HEVv9tg7w8jRRizz6s/n87FPyWyy4Yme/XGn
      8us1mTpZdpz81Mkp5cvwn9UPfljdd19cJfpiT3T55In5+pJsCO2e6BMTP8jfM/STU1v1RE+e
      cmvzFQsoArinJyenq/E7YevFjNDZq9PAcMET3bn8enXEgldbFhj6brXW6jUr0xOIqGIXCRd7
      ogEAsQueaIBsCmQzjid6F2tFYEYARqsVgUnMVkR2jpEDAFSIWkwXF7Nh5+hUfr0mSikMkaQI
      YICGHTSls1vD+dGue6IB+AKnAyzwReKJTngvSJTohFhcJCT6wp0XDmMYAUSKZlkQBsQgGCEh
      dieBne8B5VNllqdBCKXY/ds2ibB8arLw4GPemQnmjGw5/1X50p31simAiECGFvvJ5LRH+y1s
      ygDsx/4wriHYm3FJmtTm/Yc/c6ByagLBtlLEKZRon74b+sZS4LKLfSWn/90U0WJJOHtLfIm7
      Zyp83h37+gSueieeL5erHvdq2qYYB1TuTAWA+FJr0PiG/AoAQmz9yGJbgOb1Gm9I7tXAAN8X
      wpeBUv6KiF9Ek7Rd8zzliyCEQLXtA7yq91ezsRRetdLhGctLwhX4nEf7mVQBtUgLAQGw6Vv9
      zDQgvhtBC0opwFbLsHX+2SFWZmvMGUQl2YCz5ccO61Zoi5h9VDZbFkEVArWgZdhaPNHKly0w
      lZKsn0lf0IF2Ea3VE72xFNQiHZ6xTJTohFgku7CEWGwq0eiLn1S96C1ovqSa/krvdaZ8SfVE
      4cT3v2+nbfWSeg16wpfl0i8V/fC2xnSEqvy3nk47xwUj8MmpdN4h8Twq3vSJlV9HM7N8iNnH
      vzHxRs9rYbMxU11ynLi3MD5XbaioOnPGcZzqyanGP+PS//G65Yk+W27+xujkF735swUXTqHI
      qxXRkNTCY88cH3lo9NHPHGADlHOOTc59YhlSpYrO3dvZuLlarYiGAtBvBCaEYAQxrRcWIVUZ
      tEIfQ6lQVbxFSwnRskceGokZ28C5CLDmcTny0AFCCOlnYr7SJU+0lbLtzizwl9zCvPMeG6BS
      tfisO/LgwSBENpBVSpEIVUQIIEYABslu95ZeKaW3qG8bgSFCsOKGc6BSYBDhS5tAoJD22W0j
      sxM7GR2VL5HYBIixPlVQXfJEA5+r0d3FTiJQkhooIRaJEp0Qi01PdLuI/sX/9tKmpRrL6nWs
      /h2PXgt7o0gsz883Qng98leW0310e6zQAAAw9cIUeQu9f/RZTmfE3dTEj9g9zuqc60c0Ey/i
      zqu63gJfWl7N59nUC+Xg5dXVX8qf/WJ+T2xPtFet8OUl7xx3hvKVU91J59jwRM//tNOgkouK
      6CXh7C2Vnx/nnIPik7PBwQcHJ79btpljRb4XWiO7bfSFhOzIvdt2wpAYQCyL6X4ab6Vasgle
      tUL2Mqc/1nbJSttWxlIhAgAxACPApm9Grfg50bLpYxgECmXYtXSODSVadBxUcrkS3dadg6YE
      g9iWLRuSZq0WAgBiBDYhkKKWjibWW0M1VdAUaGT1dixsexgsHRF33vkKGGYLCOuzTGJC1AJi
      y4aIX0SrpmxFpmpKNsAg6k46x4YSbRLSoWcmUaITYpHswhJicbkSPVvzUh8g/q9Wwtex+vN6
      9NtwdnZ2vr4Ev40yGrsLbJWpF6bUSzLqMW2N99EL4cgvTmUoI/ECeb1zbnXWk/+ErJ+2PdHz
      c9WfnV8a1BFxd+bHP6qcr98+NOT+cKr5a7X0f+e7lBM9/9Op8HraScTdRXYOLpxCUfqCcyHm
      K1955gSA5DNueYaTkE98d4I3tn+rTwwgabOq16a9EY5MCFa8uM00rZSNIfJ5DqHvVmvC95Vq
      qQaP3+XIjNAZHkFfBCEQgnIt6F5OtJWxZOPd2DnaeOe9drBZ0JQAxO6zpS9ty25FgCqIXwbG
      RzUVRAEats6c6AvhyE1Jd3VkBL4K3rkq7WcBtmxikhSBMECixxPdNoO37dtdz4nueCmSGigh
      FokSnRCL/w81vnVOr6pgDQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Performance by Region &amp; Country' width='192'>
      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
      cm4I/z9Cev6t0YoPygAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Performance by Region and Country' width='192'>
      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
      4AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDS by Market' width='192'>
      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
      gr/2NPIXroZO3//ihng/ddUHnl6opLfgq+hmW7phVMC9BQ4AtdmKt7SpakDV9tcU3OnKmmbX
      1GYq3gIHxMrRycrsxx06syGpJQkaK0fLfmtTWefudNlflgBQeWGyO6n1bjyK8b+doATY7qGO
      6vhNn6WpAIslcGJyYt/vfx9W6tUlTi1arVWdXN55pFh60BGCi7kaBgIMCNvCBFVXxBn0MOpg
      pICQg3/4pPUplh2Gktc9yO+giwHCspvfub9rKdH2fWHnd1j+gkcikt/VfZU0y9pT835+F3Ny
      TJGYa9UPgmpRAbRdJzXCFfLpivOH3Q+Q2ZbrLToZ8Nuh3dVO1/VufGGkVMoPhaoDGqltK4Sh
      ARsMsKnJV0KMFCFksSVYzoEI2U5HLdf8wPQX6rzl8zYHIJkBRgClDAkBsQrOIPmUNxrtQWYC
      qAhBCTMRcxNoPWyQEQ1KCrAsiDbxXtfAgxBQKIU+D/PxU2N/hUEg4CYhCKZNOjSzCSmNPASI
      pIog/xCrex9xwNTHcv0aCBEJAAIgAjEANKJBiAEYKWJl+JyL2aH8YEYqZRFC1nKzCVkroCGE
      rEXsEJEQsvY/YAAhn7YHd3VzHBGItclfviaFiGRzUqgUEAJA1raZNmXSNSmMlGVZG83luBEq
      UCSxJiWJlekib723iO6xKXrB1B6bojeBemyKdQdMofKPHV9Wb8xHSdp+a6U88aN0msqz0dxP
      pvF8ZFpZPCe90820Zc7X/X6jb0Wupm+n5WeewjuH+s6p6EK0stxoN+YnXY/ekV5ebupL2GpJ
      O5Oe/OunXnvDl2f7on9qqXbjRy8cU7fSlX9cvinRD+/4+OwZ+sr/88N+mrUtc/Lpp1dUcPi5
      w5HW6S+xWJ/rKPlfPFtuVmcvmjSbScuF2tMn5mr/+Zg6Gxl3ZOm2GFru8XLllWrjldmLpp1N
      meOHfrD0RuvkyWPqbJS8M5uIY1blePnkK9XGa7Mt2efcn608e6gZXD5cPhydVckvZRMbPH4a
      rp6U9crrTdrh5UZQSPc/9czTrTf8Y5VaFAXpbG6DRsmF2tMn5uWS6766vG4CaQyee25KSsHP
      rpJgxT+HS3Ov8LcDQOUvncbbWOTPh5fUofGp4O2WV/Od3ymlt0bl4+7qWcHfbDaXG0FAkkbU
      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
    </thumbnail>
    <thumbnail height='192' name='GDS Total' width='88'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='OTA by Market' width='192'>
      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
      VtBiUgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='OTA Total' width='92'>
      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
    </thumbnail>
    <thumbnail height='192' name='GDS Pilot Performance by Market' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Tornado - Day' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Tornado - Week' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Tornado - MTD' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Market Tornados' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Spend and ROI by Market' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Market Differences PW' width='192'>
      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
      iikRtlbzBwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Market Differences PPW' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Variance by Market' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Week Data' width='192'>
      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
      zh+Owlfn4f8AAvDXX9Hs+o4AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='164' name='Week Data 2' width='192'>
      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
      AyY17YnuNmXcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='28Days Data' width='192'>
      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
      gBKZ+c8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='164' name='28Days Data 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='QTD Data' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvV+MHNd97/lx0vQ9lTSTKrsnqXJmkjkOx2GN
      NLqqjuioezMK2AYdsAkmEAkFsAhfICtgX7LYh33Yp2CfF4uLC9zd6GFzlwmyBiXAAke75rKJ
      kJuaG45drWi0XYSGmBpkBj6znkaqYPa6DsJe94ldsfehev6JlEiJFElJ8wUIdtWcOnXq/Kk6
      5/x+v+8XDnCAzzA+t/P/BL9MwS8+1tIc4ACPGBUAJvjlv/wf/vI/PnX0qacec3kOcIBHinIA
      FPziU0efeqrZbP7eYy7PAQ7wSPELj7sAB7g/ZFmGMeZxF+NTh4MB8ElB8bgL8OnEwQA4wGca
      BwPgAJ9dGH0wAA7w2cbBADjAZxfCPhgAB/hs42AAHOAzi6yfHQyAA3x2YdcOpkAH+AxDCDF2
      hTjAAd4LY8gGKVQc3JrNvp5iDAaBEOPDoUYIuzx4gB6lBxn5ELyajagKjNYI236AvEbjMlk4
      VYEQ9k6ZASjMwQA4wJ0ww4zOG5fJKxZWMUK4s7RPNBDj3pIsLpAeDmj9vg+AzlJGhSIbCBrj
      cx8W8WKH3qbGAnIE7ZNN4jcu0vzmn+F+2DFQGNRaj6gboVKozzcJfIlTBXdyNzO9GR8MgAPc
      iWQpBLfOKycDMJqFb50nWnOxkhhVgBgokjRFJRH1RgtuKZJ3IsItgFOsrq+iBxq/0aZ9HwPC
      ZAnRDUX7T19B2gJ1M4ZiRKoSLn7rPE7NoXWyTb4REcUKb7pOsyGJrnRIBznWdJ3GxIjusmJU
      sWiebBP8fhuvCpdjePnFNtlal3QgyLMeUaxwpmcJvNHBGuAA74Uhz8Cb8spDYePVPJRS9JZ7
      yLkAz7YRU5JTx+tESx2i70ZQ8wj8Ov6zAa35OqIweK5zf3ccGoSQeHY5P5FPB8iaBYXAb7Sw
      TUp4qcPCd7o4rkf81kWiNYWwbbyaQ+/aReI4IS0c6kcE0WLEe90Gc7VKb7lLuJjQPN6CwSpZ
      emAJPsAdEFhVyHVeHhaGfJjjTTg4joXreoiqQzAX4E5KMKBH5YJSCIHAEHcj5IkzBEfc+7uj
      EFBotp1d1TtdumspYsJBTnt4Vcj7inQIoiIInmvhYUhuJOhihCiACsgjEjnlgdZ3dx4cjjB4
      yGlJs9HCPnywCD7AXeDPN+hcCumMUoTRaDzaRz06S+MVZJHTvRpiUsB2kIXGtj3SzZSF118l
      Wof2pCbZyPDvYxAIVyLdmItvLiBtQbKR0jrdwhKiXFRXBN60BJFAxWC0wQiDKQS2AFMxmKGh
      txhhBgLnaH1nvWJVxmWuWFiujaUVnSsd8s2U2ae9cUikw69+7//83t8eBMQ8ucj6GXbNLt+W
      jwBGZyQbCio2/lEfISDbzLAnXdAZqp9jCoM84sNQQ1WQZinGlJ2RCriuRE7f31cAY0g2EvQQ
      5LTEdW2yTYU9KUFnmIoNJkVtZoiaxJ+0STYSTAF2VaCWQ5KhR7Ph4x8py2uGGj0E17UxOsMU
      NgJNsqmwaz5ejYMB8EnBox4AnzSod0K0mCV4+j4H3Bh3ToEOAi+eSIyKEcIIROVgANwN3tNN
      PPjQ/feOAZANsoNB8ARCjxd2ZngQFvkwcccAcN3dT4jOEjqXIhAWIPAbzfte2d8Lai1GaUHr
      +XvvE2cbCaMC9BCC5/akLzTxWwn+86WRxuiMZC0nuI88P4m47ylQYYjfCkm2NP6xFsERFzPU
      JGsJ/rO7Bi0zUHQWQ7Bnac83SDe7dJcV9oxP6zmfZCmkt6nxXJ/WiaCs42FGeClEFxA0GpiB
      IlnPGA1znKNNAg+6cYItfVrPBTv3ehCYYUa0GJIZm9aJFu54u1T3FeFSiJiq034+QPcTOksx
      tuvTavgkyyFJtlsHZWaGcCkkywzB8dYHb4OaTJEPLRrHWzTmPKI3L6OHhmxTkWwo9NCAMagN
      RdbPyreTMaiNhCzTAGT9Mu2+eG6j6S516FwLyXR5jdZm/CeNMaa8bk2RaYOoOjBM6XVj9LDM
      P9lQaJ3TuxqS3CzvZwaK3nJcXr+pUJvZg9f+JxC6r0i2IJhx6VwJ0VrTef1VLrx2eV87RIsd
      qErorxLdiAkvRci5AB1HJGuKaDOl3mhQPyZ3OrK60SOtuPjSJrwW4k3Xac0HoFPMMGfhUog7
      46NXIuKNh1P/6kYPLSRuRXN5MR6fNUTXOuDOopMe8Yaic20BW/rozR7hYofopsb3JdGVy+jt
      LdabIXFfIycF8VLvHtugBRiTowc55lYKFUj7CdFSD0yGtn38qiEdjNBJgjd/FtusorHIBxHy
      iEd8U+G6gnSmufO21/2EvOLTOprTW1O0puHClZhzL7YJX7+Ad6zOaryKhUEZQWAbTKU0qiQ3
      QlbXNTpbxXu6SdZXRMsxghDP9aAYEV3roLSBYY53rE37OflQGuKTAnvS58xpj6QbMho3vAwa
      pFm8m6gw6D74L9UxZCRbZfvmecqoAGM0pp8QXjP4R5u0TwQA+M+1kBWBXguhYmHXbPRaD1Ob
      5ewxyas3EuS0xCx3UFs5jaMPPmPwn2shjabzegTuuC2NQQ+gcTogGyiSOEYlI1x6IBwCz0Nt
      9shzGyrWTl4qUZDBqsmRjfa9DWF5rklTRV7YtL9xFq9qY1UM2a2cPEmIN0e0XjpHs+GTDxSd
      azHpIEdrhdIGUWgyDU5t2ypoSktdUTZCtBRhqh5ekdOLeygc5KSLIyDVKblS5ZdlvC6xqw7G
      5OS3MtJM48qAsy+9TGvOJ7qRYIwmvBahshStNYlSD9wAnzhUKKcrgFXJyRH4R+R7piOmbIMx
      RuPfepChhxoqNu3Tr3DudItkqYPKxiNJCPRmzOXFhObxNqICqysK/1gD2/VoPefQ+dZ5YpXy
      0JbrQkAxgqrAmHyn3KOd8o+gMIwM1I+fwioU0XqKKSDLUozJd/qPMRoxniJ1u917DIAKSD+g
      fbJN+2QL6drlW0X4tBs+lgWCcoGWD8opjz0paZ0+y8svnaN9LKD94hmC2rijF+W8M8kMctJG
      2BLrdkbSNwRzPuGVEHk0IE9i1NChNd8s93O3y1OMiK5EyKNNmr5EAOa2Jh9qslxjVcsqt2yH
      1okznPvGy5xp1B9WM3xikG3ELCwp/KCJKHQ5VX0vKgLbhTRLyYfg2IJsaNM43savCdJ1VXZi
      IbAP73qDZmtdLrwZMnviLP60DUaTZCAnPShgZAStk2eQUz6ed3+uEPdCvBgSZ9A8VifNVMmP
      VBE4NUPWT0kNuDM+0ncQ24N/kIItaR9vIYwhL8o6kEckjm1hCQtRGY25QC3EKy+/8s2pqanJ
      vTcuhkPMzw4jf9vbOXfo5//C8rvL5AaqrqTuO7z9dyFJkvKbQYsXfgei715n64dDvN+YIO5G
      pMOC+rEXkF9yGHx/haL2DH90oomcmWHCKsiHFWZnf5Ot/hbN4y0mfrVC8u4yt/QQa2ICWfNw
      fq1GterwpS9ZxDcTis/DYXcK56ealX9MSH9yiPb8VxGft/nq819heekqyQ9SJqa+jPeF6kNp
      iMeJ4T8PEb8kqFTuvaqsfN5i60bI9WiFqWdaNOck4mf/gv7REM/30Zsx6z88xFd+y+H60lUG
      vzDBH3+tyeGfZFz/zxHmV2b42ok6+btvc/WdBK/eZPbXC6J3Nxluvcu7SjPMFNnwX5G/fpjM
      DJn9HR/x+Qr6/1Vc//slnC/P8UJjjspDcLaxPmdY/vur9P4x5w++9nWK4QaDH1t85dcPE/79
      VQpbcuoPXmDilz/H1WshhZjhj09/jeFaj6iXIJ99ga98sSBay3jmqVnUWsT1G1s0/+CPP6Ih
      bPvTUxjCKx2yonyTtE6fI5i2d/9eYf/v+8m3suf3+113t/zfm/bD3PcTgI9kCNtbn3ugNxMU
      3p1ttX3N9vHe3zqju5nTePo9O2zv1z4Pu973lCXbiMlFaQ2+417v04fMQBFn0Hha7jv/wJZg
      M8hI+il2TSInP1rwwgHujYdqCTYGUxEfbouyAFPAE2GIHk+BPtQgK8ZBPO+55oHHqai5BLWH
      Yxs4wCOCEB9+gTqeWz8R+CijsHL3Z/7gGVphyPoZanO8z/8wLcTG3H1xdrekQ7Pz746/6T3n
      7mEp1Vn5LKqf8X48sweWVnbaXe+tW2PuSs67c84Ysizbs9vymOqxAN3PSjvUeKfxjmfZSWs+
      eBGcrV7n/F99h+FPhqyurrKxqZl5Sj6U6V145W9Y+G6frwb+PRdKw39aZ+sHCYtLK8w8tSf9
      MOM7f3MR76k64vOgfxDzncvLzMzdmafRir/5H/8Xtsy/oDZXWfnHjC/PzOx7qxmtWLjwHYb/
      ohn+xGHiC0/C977Eh1kEPxAKQ/fKBTpvrRD3EryZWZzPVwgv/keWNw8x50+N00H896/xnf/c
      45mnZrn+5gWuvrWM+bmD9bM+yeaQqS9NfLxlvQuSqMO3r0Ssv7tEvzhE+m6X670eKxubTEzN
      4PzSbv3Ff/s39zKEGdyZgDMvtWGQcP6vO6SbkngxJC0M/rE2s1VNuNgDrDJ6p6LoLq8ibEnz
      2CzRUkg6HNFsnCIYG0XMQKH6BlGkJH2NL3KiDU3z+YDkrQ7ClajlmHSY4/hN/EqOvq0ZaUO6
      FtPt9siBZqNOuh5z4Vvn8VwPXwpGQ0PaT4i7EQavNJ3XBBQGMeFx9qWXsYWh860LRDcV9Zom
      XOqB8GgEHnmqWI27WA3Dy4VHd2l8rxNny0XjpxxmmNJby2jOtxndSqEAdbNLN1bYc8FuOq2I
      bii0sUujWgbNpyWrKsHcFvjHWo/nAWyPM3/awsoiLixG5Knglf/2HNm1C8SxQp4YG2M3YsJ3
      kntNgSDphpz/T69y/vUQ79kmVgWE6+FgCK8scPFKhGw0QSuiuMfCayFUPdRalwtvXqS3liMn
      9xth1EoMbp1W4NGLeyAskuUI1VdEywoQYNs4Vehd7ZDEMenYEGMAe9KDQUK0nGCwqTdaeBVN
      p5uAyem83iHHAZ1wYTG6y4MJPNch3VJcfL0DwmHUj1lY6iEOWcgZSTBTWhztSQ+hFVG39xBa
      58mHGWpUkqOUIt5QZFlCGK8SHAvYu6svapKzp1u4QkDFRh6xiG6mOAL00BC+cZ7wreSRl99/
      OsAThqib4D/dRE4Z4uUevY2EfFjaqhhqOt0e/rP1e3wBKuAHTc5+o4WolCFvyVsdkjWFVwVu
      G7SwkdMScUQSZSlqMEJWxgWREqMSLi910IVVRgcZTbgYoQ556EpOcsuiNd+kfsQhWgwRrkSY
      jORmgueOLYA7y5cRKu6hzNi0XYDnSfyjkrxQ5MsKcUigbqX4RyT2tI+cursbRD7Mcao2UZrj
      HBV4RwOkI1CZxqmWYXpZEqMGo/LunxEPWSEEnvRonWzTu/Yq0VJInuYok5GR0Trd3HFG23HN
      rkBw8mWkzogWe4hCI2qSLInQz/rYj3AmaQYZC5cuIqabtBo+6jCoNEdUJc6YYkVnCauJwkLf
      ezpvVW3sPdwsJtcgHERFwWGBtCG80iFd6iEaLQJ/PMqMwQwMqRHUZyTGlBwt2UYPpur8+Utn
      EBVD+MYF4jVFy/e5+B/Oc/a/OQW6h8HGFgZD+dbf/oLogUa4DmjQjEi3EjpXOoyyhNk5ySgb
      UZ8UjAAKs6/j6lsp0VIXQY4aWJxqzGI2k53yWoUodwtqgixViCxFVCWQYO4Is/50QtgS/0jp
      6Jb3ofXiOXzXRnUXiPoudsWQDcwuV9C2n02ljNt1piR2oQiXFcL2Hu3OUWEI3zzP6kDQmjao
      fopKVtHCKSPbZjyyLMOebPDn/31AuhZ+sB1gb0jZ3nPJWlKSDFUFOstIb+WomzHy+Mu0jlhl
      KF3VxT/ikW4mZEPwj/rYVYEZZGhEWYGU3p/agFsTqM0Ub1oiCkO8lpSdsSpwKiAqVrkPXaEM
      abNtRNXBGuakQ4Oo2shJB60Nti1IxtfLo0H5BirGQdTGgBD4R3xsuyRfSjaSsoKOyHKAVSEd
      jPBsa9+95OTj2+59lBFhZRsrRM3DH4c0breTbZdu6W7NHpNnadxxvehBhqi6ZWD8WoLnyn19
      51FArcVkgzIk03Yl0oZkTWFP+kjXJtMZtu2WA9PoBzeExYudkqLClZw90cb+5HsdPJE4CIn8
      ePDAH6jgeJtg/mHldoAPxGdkHfIocUeX1ZrPyGz3k4V8CKMKWAeD4KHijgFgYOdNk2cJ4bUI
      IywEIOcCHAyjUemLYQz4QQAY4msLKD1CYCFcSXM+wNkbwF0Ycq2hWvr6H+AjoOBj/wqMdEa4
      FJWBUAYax09Bvkp8M0MeDQjmfKxxr8kHCrWl8ecCsqRLbyOl3mjhVg0qGyGn5U7aR4V8oIi6
      XUzFptloIYwi6kZQq9NqBGV5CoNKIqK1e+gD6FShh9A81qDeaCBdr9wevBmRrPVIbiTjwBaN
      WllFHm1SbwSYjYhkUzMah0eubijSQUrnr/6CZDNjNNSojYQ0y/YENRzgiUDVpn4swJ/0SLcy
      TJ4SvhUjj0jUO9GO+8pIZ3Ree5XOtRBjNKvf7QE5UTciSXroAqwPvtPDR2GIF0NMxcUpUqJu
      VIZ92hK9EZH0yxDN0TAl+m6MnHTvNWsv3/b5bY2wbOxKSnSlw129igpDPtRlkArlbk22HhHd
      UJihYiQkelMhbinyZBVdWBidE5w4S/1+yZMO8LHDqgismkeytEBwvI1TpJjUoCo9xKS/uwiv
      gAyamDjfOS7dfzQqs5GHDelQ431EevOPCiHKqK9RYaBq0CkEx+vooSLdymHaLUmyKh7+XP3e
      IZFaa9J+SpaWznBmZO76Gd4OZA/fvEAqfPxJG3HYAQz5rTLQXU7PIqvQXYzJdU6ep6g0/Riq
      4QAPgpFOUUNB3ffHbsQ2zeMt0s0uqS7tPFbVxZ/yEIeAik39RAvP9fCqAkxKdLVDeCUkf+Rf
      eIt8mJMNdGkHQpTeCzA+Zp9T5z2+AALpB7ROtLEqMBq8v2nbtj3qx88gjknOvxaisjpZN0LY
      Ps05Q5RRlqIoXSmaJ9o4prQYHuDJgk4VVGRpt5nw8KZyhBA78/lRwR1ze2/aR1QgXknxhEFI
      D6PTjyc45n1hSLOc2efauCamu2GwDxvSdBz2OeMxKkqbEUWOztIPLpo47ODtnZ0IB0/K8jNY
      tTHVbQutGJ8HrxbQOqZQSYo8Ill9J8ZUwZuUyEqKGkKr4RNfWwBh0zpxMACeNJhDFu5RB6sC
      lhvgT6dcfHMB70gLh5ykn1OfliV1+uTY2luAzlNcfxYHh+RKiHu0+WgtwRWb+nyd8OoCyrIJ
      TpzCMYpwaQFqAc1JgdpI8CYl/hGHy9c6dxrCMs2ekEcYsX+0j4q9m6R73woGizJKZzuNhSh/
      v6cSLMYR/ZU97L0H+EDkgwxRtUvG5I8b7233wozbS5Rtt/23AkaYnTbc6QPj31TEI98FotjT
      /yp7y1Ie75axfKZ7OsO9dyX/fh127/n3+70//T0e5ACPD+9t9/d0ZGtfug/X7h877vJSvXu5
      ymc6EMg4wGcaH/geHhmDHqQ7lmG7WnqE73BLAs5YHTDXGXrs8SmEg1e7c/trtGdV/oH3qli4
      NfuOkTwyZk9g9mP4vH4WURjSQVqu/6q7/ECjoUbrHGF7OILSyFkROFV735TjcSPX2Y7z3vb0
      cVSUfQ2sDx4Aej3iwptdPL8MaJF+aQlOkx55xcEMofXSGQSa8K/+Aj1RLoTzoeHUi+eQewbB
      qDAkSyHeXAurdmfF6M2IC98O8fxZMDmi5tM+0drXyXU/JopTvJpAvk8+B3i4UHHI5RsJYHPq
      xbPIms1omNG5dLHk27Q9WnOS8FoIwqZ9+ixqPcKbaSFrj7fseZbQuRJiMIjJJmeON0q6zeUO
      4bLC4h4yqaYweDLgzIvtcvFjMpLlHrnWmCqYoTVeMBuoWDROnkPapY9/mualuNlihC4McloS
      vn4eH4+mZ+jFq2BLWvNNnKqAnxq8qTpnXjwDJqPzxkWS/izi9irxTYVdm0XWclKVEF/p4X/T
      I7Bz4hsJRji0TrT3DbgDPAQUhtWbCfX5M6C6rCYpsmFjMoW6JXjlvzxL+K1X6RUGu+bDMCZZ
      6TESHsGjjIJ5XwiC+TYOGee/s4qZb5Qv1Krk1J+0ELp3rzWAIYk7vPatV7lwpUM2SEni+K7s
      EHqg6Hz7PK/+T/+exAjklIcpDKLmIExKb00hJ0v/7MvfCaHqkK6HhCt32hYsYeNUBWp9lc6V
      LsJ2SOLLxBsK67CNnPbxxyqGtuuRr0esrh8Y1B46CoO5LbCrDnalNIqOAGwXgSaOI9SWQtRc
      jE7QuOQ6w/R7vPbGa6jB43GrHBWGUWFwahJZs8pIQ2cc0FkRzM4FuFVDb/leMcEI5FyT9ulz
      tI83savvP6qF7dJqt2nOeJhROU9PlUL103FO5dpAFIZskJfBKn4T3/PuyGtUGPJC46BJByNE
      ReAHTWTNKUMzqxaiAupmXNKnw8OlbDlAiQoIq6RDMYAYt7+oOjQDH4xBVCXe1CxnvvEKjacl
      TtXGpAZXjFCPgZh4ZAzxUoeFNxZY3VToQtA6fQZu93as2KOBonPpImbyHq4QogJClCGRTtUu
      F787jFzWniW0QAgLx/YITpzFKzKi5QQ9SLGEM2YqFggHUgNSeuW17+GOyVNFtxvSXepgkPhz
      AbNyPHJNuYCmYiEcUFsKfauM/qJidszcB3iIqAi8aY+4e5l4M0dKDz1QmGFOsqEYGYPlSTzX
      hoohyzRyzkccKiPFHkfwjlURBI027dNtrFFG581SQ1hYEgtDmmWEV14j2TI4ldEHG8JGOkMb
      8GpuaeAyBp2lu7GgBdiuW2bcT7FdiSXK2FBdWNg2JInCdgQIG6diyAuBVwW1rqDq4c9ILCEY
      DTOSldXyTSMc5IyPIwT5QJEohXA8pFsuvCEnNwKnYlCpxnZsrJr3qV4DPFJD2B6Mhhq1nmAO
      u/jTHnqQImyvpLbZ0sgZH69mMzK6DEet2ehMkeZmpw0fGwqD2kxIb5VlsYVBm5I5Or2V350b
      dJ8l+ABPDB7XAPi0444p0EH1HuCzhDu2QW2bgy/Ak4gxI8PBB+Dh4u52gG1Lb6ZKQ8JYJTI4
      1izJrR4QOlOE3VLMbp+C30dESW2S7leQ/DSiwn3qLBi610LUQCP9BsFRh3gpRBlBY76FHBsQ
      zTAjXIwwhU3zeBNhUsKlLsKWtOYbpGsh3fUMP9jfRnsVJ9GKcKmLES6t401MNtZs83xazz8k
      lUidEV4J0QiC+VapC7D7R+JuD7/RKgXwkqws/4kGtigpEJWxCZ4eex0PNeFSh6xwad9LJVJn
      Cam2aDRaBL5HeGlXJVLtUYnMdlQiKVUiN1UZkMAuI/POhk9hCC8tIDyfxpxPrxuRDctOvC/P
      flay+o7zKTmKDEZnu+koFRHVWo9oKTnYCh1Dbyb0+hp/TtJbfI1oKUIVNlIYOtd2qSLjxcuk
      RmAXGVE3JryyALbE9FeJul3CxQTpuUSL0Y7KIkaz8K1XufDtUnEy7sYw4UOWEHYTom6MJ31U
      HBFv6ofyPMlyhBYusgbhtc6+do6XOpx/fYFUa+J1hesHNI+VbHRGZ1x4/VXC5V1bU3IjJBkI
      bJMRLif3qRKpxyqR7FeJNHaArGrUYIRJErzjY5XIwiLXI+QRSXIjwXYFco9KJALibogz36J1
      ooUYKhaulaqD+RB8F8LlnNbxOmqjR+vFV1DXLmJqkrSvsCoWeQF132U1VjBUpPlBXME27Gmf
      V74ZlHytFRsZNGkKiC5dwDB+exYGdTPDVEEJqM8IwsUcu1gFYSEPjVDCI3i2zmr3AvnQYI/n
      XzIIyAdJSYl4oo0ZplzsapwZQfv0GfQgIbr1cDo/gD/fxq8I0hsd6O+ezza69DZzZM0rQ3I3
      E9IB6OlZ2icCoqUQUZW7FI6A3srxZ1rMCsXlWN2HSuQtjdpS5Mam/dJZPNvGqkB2KydNYuLN
      Ee1tlchM0bkyVokcKFSWQaHJhuDVdi1x7RdfofWsRCURr/71BXrLXcJuQq5zVLZKNsiRMz6t
      +QbSFsRxRDIwMMzoLo/TqVXCpRhv/hRnT5/CcR55CPaTi4qAoWLhUge/0RpvD5eqMBR6/DU2
      5LdzvKN16tMWnW5Erg2zjRZeJSdaSdjZEin2KEoKm2CP4qQog3CxhCC/rUGUDN3isCAf5g/l
      cYQQ6I0unW5K63hrh9Xt8pulR0GuUzI9onXiHOdOt0hvXKZzpUN4I8USkGXZzhdstCdCzQz1
      fahEzgWcOd2mfbqFnLRJlkJGFY9Ww9+JtTTD91GJbDRKlUhbl1QbBSUz75UId67FmdOn8KuQ
      aZAzddovnuWVF88hawJLlIa2elAnWQwRkz7SFki/Tvuls7zyJ2fxXRujc/Lh6GD6swdmoDj/
      rdcQfpPms5LknS7Rxohmo44ZqJIesiLwfYlwbIQlSurHOQ8hLIQAUXMwRUqapRjbw7kb419h
      CK+EpIVHcMxHrfVYeKODNenjHxGorYcjlJ3dCLlwJaJ58tSe+b+g3mjgiTIePb+VEasUqhZO
      1cGe8Gg95zMyI0Ym3zGUOq5FlmakucGZlB9RJfJGzO2fQOU3JF894hCFuyqRX/1teDsaq0T+
      +gTxP0SkQ3ZUIvm8gHyLq4tXiW8mTP3bJq35r1Jk77L8zjLaVJDeBNYvTzD1mxOIX7Lo/0Dx
      ld/7Q4KnJIMfvEv8zgq6qPLC79VZ/7+vsvL9PvavzfBM8HDEO55EfBiBjK1/jLm+vI4Zatb/
      KWPmt6ZY+4ervP3uLYI/aFH9Wcbmjw4xOyN5eylkvW/4+sk/5hnP4uq1kOHPPE794dexhptc
      fSdm5ndfwP/C57h+cx35JY/iZ//K8EdD5NwclZ9mXP+7q6z3P8cfnjrFxM9Srv5f1xn+xOPr
      J17YJ0jxUfH2Uofk/xmif6gY/PgQxf+3yeAnDnPP+MzIKSo/qfDM/FcZfX+Fq9+NOHwk4OvH
      X2Dmd2b4kmOmdCs+AAAgAElEQVRR/YLE+2JBtJpR9yXJO1dZ+dEhvv611mNUiXw/dcL3S3s3
      FcN7XfcpwofmBi1Kb16x7bqyV2VxMyG9H5XI7eMKuyqRz/r7z7/fNXuPHxRjj+OSHFmQbe5R
      ibxbWe5y3/dTifxoRdy+qiKozzdR/ZSg0dwtUOUuad8vj3ulu1d+n+JO/0CosG/xt7eeXFdi
      7+H2f+91dz2uugRH7bun+7jbZEy8sL3ucCf93fLfqyxjCNsjqN75zA9cVPtAJfKTh4+sEvmE
      WOE+UvnvLgt7j21QMyYYKlPaNffh0FwUJZe84SHlWZQLoW13XaP1jp1A2PZd3bjN0JTTiYMv
      yJ0Yt7uolnW3XZ9C2Ng7RjS9q7xYtUuj09Dg2vYOS9xjsVrv9C1RahOMNQze23+3y/+BzZ+t
      RZx/rYv0JSMzwqrNcubFxgP7C8WLHaK+xiGHqs+Z060HqiyTJSxcU5z50zYCQ+evX0VVXLya
      RT4c0Tp5dr/1EEP0xnmsmTpUbBrPf8otyB8GhaF7bYFoI0cUgvaLLcIrHag6yMmA1vGyrtKN
      hG6iyvBYr0mzmpMMNEGjzawLagCNx2CZT97q0OkqBBrZaOOREsYp0vVoHi8FE80w48JfX8BU
      xP2pRL78jTZmkHD+P3VIA3esEgn+sdauSmTFwj+2VyVyluYxSW+sElmfP1Wa0wtNby1CNs7R
      OipJNhJMYUjeCuklKdJvMmsbomWFqNkIAc1Gi3StixYuDBJ662W6+lGH6EpIOkjJht6+BVDr
      dKnqqN7qEC718E6OFSsHgubxAK01ceciyji4ky+TLHVJhyMcv86Z3w8+sFo+zTDDlN5NRfN4
      m1GaYnSGrkAraCCnd3cD5bMN5BHJ+UFKc95HXYtKlcj1BJM/RpXIqseZb7awBhEXlxOMyJFH
      6zR9v1QLBTAw22gTPH2PbdBhf53v/B8h6/+0RXxjHW/2q3z5Nyrc+nHB5/65z8q7CeoHKbON
      F9A3u6wPYSXqMjE9g1rrsvJ9xfo/GWaPzjBxeIKJWhV+QWD9G1j8379NvKow1Slq/9pn4XLM
      zJc9rkdXGf6zZv1Hhzh74qvEb13H/OoEK0vXGZoh3d46M9Me1//+Kqp/i8/92ld45lcK3v2n
      ES/M16n8QkHyVhfH/yqeLbAouPb2BsVglSQr8ITh6rsJ4scG5zc8qo7kmac8Uj3k0M8G9P5h
      nXrjETOa3QcelU7wcLDJd954G6t6iPV+ysSEza3NAcMfrvP2O5t85XfnEGPrkXr3OomZoP0H
      TcyP1ojWbuF94TDDnxSs33gb/VMLOflotYInXA+HIVevhEz8Tp3KD9e59eOC5WtX+dzUV5j6
      QpXKL1WZ+tIEWzev35sYSwZNzr5UqkTaVYF6Z6wSKWB02zASNvKIRKixSmQ6Qj4L/tGxSuTW
      WCWyYeEfdaEwOLVZ/uy/q2MGKee/1QHXJr0NQUXQfK50yqIqsV2XwJeESyFUHHwM+QioCJqN
      JmpT4U5JpBA4G3fnLdU6xa4J0k2FqUpEzaY546CXwlJ/rBCMBhnJTVXSQD4uhfMnBKIyVok8
      fYbetVdRt6H90jm8quH8/3yh9PeyAQzJSop/7BSiAo2TZ/AHKdFSUqpE2s7jV4l8zid1bVqT
      HvGl86TrKYyd+pK3OoTxPbhBAZzqrqAdgL41VokUpUrk7LZKZLeHCFr4fskPg9EYPVaJ9CVm
      WHIGlc5wFxGTPp4D7rSH70vSYa9cNWmDxS73kDzqo7/dQf7JnzHrGuLNkqjVaEP9iKQXh+gi
      Jx/uqWUzIlmOMH2BWk+oH2sjUgg3TZnv7TLO2LYdkn5KtlVaRm1hMJXPdnyxsCX+tE24WKpE
      yqcNC69fwD/igCsRaLIBuFVIC2hu942KIM+yUiVypAhvKkT1calE2mOVSEV8JQRXkvcN9ZMe
      2SCDgeL8ax3qx9sfTSUyvpkgqqVRxgz2q0Q2xyqRomrjT0vUZoIegv+0v7MbY3TpTmsAecTH
      rdlkmwmqr7EnJbIKuhA791UbCY5bshVnGwkqK9P5kzZqLRmrF3rI8ejO1hJUquEQuJMSOV1+
      eZKbMdqU9xTDHGyHtJ/iuKWaZalKOdY9fsKmQI9UJVJr4rUEuybxp91SeXFYvozsShlW6No2
      KlN47m5d7apE6pLKZlIiH4NKpEoN1qHSLcerglpT4EqCaZdskJVKo2urgHWgEvlJwYFK5MeD
      B37PHahEPkJ8hqdmHxfu6LIHKpFPJvIh+316DvBQcMcA2KsSCUBhiLoh3kxz33wuzxTqFvj+
      gyoBGla7IfFmiqhYiKpLfb5ZSu0cYB9GxeOTSR0ZXdp/hgY518A/IvdpQyTLEZ7fRAwV4XKM
      M+nTCIIng8C4MKgkpnezZLFrzjd36FruHRCTJURLIWG3x2gsPpBuKlQSl7ycQ11yr2y7TFBy
      yaR9hdrMdq/pK1Q/K1nfBln5e7zlqG7G2LVZ6scaWENF1E0Y6VJJct81m2qsLLl7nA8PvleP
      AlnSI9Egp22ixYUypgCggGwl5MLr50kHmmixg7Bd0psRKnt4UWEPgpHRRO/08I74mH6XeGWX
      se6eluAk7iGPtdGbCZmuM9qKiG8oTKrIqz6dNy9ghEBUHNon2zhVSBYv0Ik13oTAfbaFYxQq
      y2FosI/6ZIshYq5J63gLa9s4Z0aMbutSabJmiJc7qGxEmirq86dIb0YgIFkxtL/RQq31EAh0
      xeHM6fbjJWD6DMD1m5zxS7cTKrsdKB8kRGtqHJaYo29B82SddKDItlJmJx/tLtDdYAmb9kvn
      EBXIN+xym57yxfyBX4DRMC1dEirAbUW03CO5qZDzZ8tYXqvk6MxvZdg1bydjU4B/rE37eEC2
      HBFei0hvafLbKcmmggo051t42xaSYkSaKVRf4Uw3y6Bm28YUGpMpVpcjTC3gzIvnkLZA3Yjo
      raTooSbdKrdZD/DxwqoIzEARXouoP98u44MLQ3Stg8HBGEN6S2N2PMUMo8da4j0Ye4LGix10
      RRL4pUuH3og++AugkhjGAcfulCReiZETAnN7xGioAYHfaCPzhHDxcqkf4FJ6Zw7zUlJ1HG5X
      n28jnfFcMs32fXssYVF/7hTNuXIffzTM6C7G+CfaiDwlt0RJvTfMyY3Bwy5DI08E5NrgHmy9
      fuzI+zEXr3SYff4MwUzZgUYFyKMBDDTpMMcUYB/WpIOcvBA4E85jLnWJkdF0L51HIWmfaCLG
      WmHC9j5gABQGrQ2tPyqFrEdGY13pICYl6uYCagjeZIBWMUlfIWeaeDtfO0MSh+RDSfNEC5Er
      uu90UBVB8GyzVJTcc2d7UiIO75nCCIGccem9E2Ed9pBH69Dv0fl2QqpHtObPoLohnUsKezpA
      Th94c36sKCi/tLdGqHdC8kxS9yWjisPssRazhcEpDJ7vgz3i8tICTs2n+QRMfwAY5qyqFA5D
      59JFgkYLCo2c9u9BjrtH+XH7GMQuE3NlrAu/T/HR0Lt0gbRaHwfO71Hq23PNXvmcu0knjYrd
      fE2m6CzFCDEiHTqce6m9I835WJQIHwMeNzfoTntsYxyldYdK6HbaypMhkQTsU44EdvqzdS93
      6PdV29t3/r1BJQLZOIWs7G8s673XfMB9ds5tF9SVNI8Z8tvQlHJ3wfsZ6PhPCva2x/v+/S6/
      nwh8wGD8WLqQ87BDJCsCeSTggPrqAA8b9zUA8qFGVMS+N/q2YqPzEAxWI10ucAEQDvaYfOuB
      8qnuVzXcSTMce6t+RqZODwujoQaxv11GptwIsSp3U4l8Mup3NKbUFLa9O3MoTKlzx70iwih3
      ZBb+6i9wG+doBf7OQ+nNmCgZ0T7demBLcPfSeVZzgTNRujkHJ85S/9CEuWU+vVzgTQiMMQTH
      ywX83jTxmGJRVByCY0+IpfIJR54lXPjfLnDq3/050i07UT5QhG+ex5t/Bb9qWLjU2VGJTNcj
      nJldEt7HhdFQ07l0nlQLLNvjzIulvUitRIQ3EkbFPWKCobQAYjmomzFmTmJ0SrQYkqUZI8sn
      WQ5L92dX0p4vDVsqDundVJiKRfN4G1Gk9JYjDA71RpN0OSItBM3jrXLnqDDUj5+j6dv0Fi+Q
      JKtjdcixAuTxFvlKRJLliIpH83gdtRKh+jny2RbBtjtGAc35Ns1Akq6EdJYipN0kWQ5RA/CD
      BmaYsZoo1MBgezbZSpdU54jJOu1tFcED7GBkNNFSSJbp3X39wpAkMcl6hvMs6FGK7fqgY5Kk
      x6ji4D8BKpG63yMdCprP19FZXi7iCwOWQ+vkOdL44j0MYUbTu6nwn2/jVVKSzZR4KQR3FunZ
      mFFO1O1CzcOrWpRSaoZ0IyY1DtKFaDEkvNQhKyyMVly8dpleN8Lzd+MDRrdzwksXOP+t80SJ
      wfflWH7JI08iwish0aYheHqWZDmi1w2JVlJs2yK89hqZvtMdwvYkeZ4Td0OijRxbjOhcfY10
      CM6Uh5z2cQQgbGxbEC9e3mGS+MyjYMeFJVkOMVUP37X37f4Fx1o058rtZ9vz0NlYJXKQYfqK
      1954jfQxqURu7/rktzKydY1aW2U102MRdoE8GiBMQnQvdmjdT4hXElJj0GlCYrrIikEGEq86
      Qg01jWdn6b4TEq0LpB+UGzwVgZyWyClDEkeoLEXWJLYr8WybNM3wXG/3bWs5NI+1SwNLRSCE
      IewukFU8RAGjPMWSAVJKvJpD1ldoU5q0g6Bx15A7M8wQjkXeV5if2iAcgkDCWhcjBI5llX5M
      SYLwbERhDrxgx8gHCeFihKh5ZElCXpT+WqwrpFtOG/euB52az5lveqRJj0wb0kThTgkSpfBq
      j9ZGMzKGuNtBZQZZA3dG0jrdZuH1V0m1wROQDjTC9mmfbH2wISxZ6RGcfoVWIEsK7G93EFMe
      yXJIqhV5IckGOe60D4naDSU0hnglwmiw/YDAE5gKJZnueG9/b5+1hEA4Ds44vG401KUCpG8z
      qpRKhKMsIVxUrG6mtF5sMtpIsaolE/HuUxiStRiMIt1MmD3awi1s0pvjtGNSWFF10Dol3VLk
      haAuIIEDV+MxRE3SOu0BAtFoYkxOpxjhS4nWClP1cMQ4bHX8T2yrRAYB+UZCNjD4Rx6TSuSx
      Fj7AMEX1Q6LFkBGlSGOqDSoOUUOBTf4BhrCxB6eoyXKnpyiVIKla5FsKAziORFRGqC2F7Unk
      pMSqGHpvnifWDv6zPr7vIwpNkqxisPBnfMwgx57edadN+wphe7s7Stveo2mK7ThQEWRKMTIp
      8Yrh3H91DgaKNM/xpmZxXRerUnLVqLTUMbA9iZyWgCFLYtLhCE/OIooRCId8oLBsjzwtHbuE
      ZeNNyyfWqe6xGsK2+4JbrgGF7ZUKnv1S6dOxxX6VyP5YJdJ/3CqRlD5mWxme9LGrBmMEtgC1
      nqAL8XGoRBrUckh+2Kd+9OHs3I90RufKRVIDs083nxw/80eIx20J/rTijm40dm54AAjksfZD
      NVpZtsvZl15hxBNoZTzAJxp3DIAnN6j9s93xRwa8A5XIh447JxJ7zphMlfvnT398Tgh6U4Ht
      YX/YfePCkNyISVSKsG2ajdYDD95sLWFkyx1jz5MECz6cSuRiiBoY3Cmf5vOS5J2IRGmCRgt/
      utxs0Jki6sZge7QaAelGTByXc/3mfIB6JyJRGdIPdnk+jaHb7ZAObZrzTWyT0lmKAYEf1NFb
      PdKBJh+OmG2conH0IbjFFIbuWxEqNTTmd0Nzy/J3EV5A6zkfKqDWuli1AFGkO0qkIwSnTrdx
      qyUvaLQYoSs2zUbz3iqR0XKCGZodtUetNdm2CqTZPp9hxuqOOsvIBgZj9Dh96UWY9cfpilK9
      T22OlR7HUkhlaOVYTdLsud84X7WpyPaE2OnNmM6ywg8ChMkIb5TMcFlWhl5SgBnoHaXJ7Qg+
      rTWmMGT9Utlyu1GzjYTeYoTqpw/eYI8bRtPrp/hBwOwRD70ZE8YJ0rWJFsPxbp0hvNQB28P0
      e4RLccmh6vvojZDwWki0ovDnfHqLCyRZWYHZWkRvw2CTEXYT1GZCXrEJjtWRro3v1/F9Sbau
      PrCIHwbZWkSUKKTNWNa1LH90rYMRbqlI2dck74S8+h/+Pb3NFNv2aB4LkFVQm/kOtXu8GKKM
      jV1khNfuERCzDbXcYeGKQs4Ieuua+pwkzXKaz0kuvxEi53ywPeo1Q2cppXG8js5WMcVY9fGI
      TfemwrUFcnqW5EYPURM4VQ97mIKsk61HjBBQ9ajbms61FDkjyPGQVUMyHGFXLE69eAbXLn15
      8nSVOHEJ/AZ11yN5q0O0nsIQnKOz5IshZibAr2lUITl7zObipQg56aEG43RzdUTaQw9hdTmm
      GTwmUteHCK1TtEqIDPhBE+fWKmZQEoxJv7UrcFcpQ1FNAeKwy9lvvoJdMaQrNsKTvHKiBUYT
      7Vl3pVsZ3nRAXRouXElQtZSsD6HW5VvWdVFJiBu0Hs7bH1ArCQxgFYUMxq7wxqAzaJxskg0z
      UpXiS4/6TL2cLAuBW3MI+ymnXjy3YysSFTEW/RtB5T6C4oEyIswPOPNiCykErRfP4FcNaabx
      ZJ2z3zgFmwnpIMf168x6EC4m5MOcNF1FDTQYjcbCm7ARGDJtsKc8jNFk6wmjQnLupbOwkZAO
      Rjv3EwM1/mporJq7M5Lt6YD/+t+dxS4yOm++xsVrEWEnQvU1ZpjR21jFFCNax1s0gwZmc5Ve
      nEDVI14qA7b1MKPXDYn7Fu1vnKN57NMRWCOqHu0/Okd7fpa4s1AGpwuPRqNONw7JtkNIK4I0
      U7sCh5VShzcXktbTPhhN582LeE+38LenhcUubSUFSL/FmRfPICsplxdjjNEkGzn1Rv2hPc/I
      GLAlzWM+3eVwv+Jj+QtTgJzewwBNqSGdC7lfiL1SviDSvgbuwxdo+yKrWqrFC6usADHm0NS3
      c4wZjT0swdnuoFOlWqQY5iAEJgiIlxaIVmyaJ8+gt7qEix2kEAgb8nHI4/Y8d/t+AP6xBr7J
      6Fy6SOLXaRyxUTe6JLmgdfpl/JshC0sKYVnU59s0JwW5McRZSYMnah5+DcJuwtmXXybajGnO
      t6m7gnyQ0VlaLad5ZkdF9xMNPUhRtwytwB3bNzzygcCy7d3Oawyqb2h+4yysXCZRis56B1WR
      nDvZApOx8Pp5xJE27fldunh7QtBLU9LDIFybdCvFmfNwag6ZAXROOnRoP0RKRG/aI9MOTlUg
      tgPyKwLHNmRZSm7Am7oz/FIphbOHupHCkG7myKBFUEnoLKl7qUQOMD+zmPiioPg3E0xNHmbw
      wyFT/hzmRxl8vmAlilFaI4818ScEn/tlB//pGRhusvxWxNaPCrwvOkTfCxkWgq8GdbaSZZLN
      HHk0YOpXLCb8Y1R/ts7VKME79gJzE4LC2r3f5zBEN1aofuHLvPC7cwhRwaocIuld5/pbXbb0
      v9I68YfUZxze/l5I8n2FM+EhKPiSH1D9pQrWv2q2hof5+teaeF88xPJ2ut8KmJkwXF28ijGC
      2X/7DF7tydsK+zD06JVf+Bwr3w25fmOdqUaTF47VGXx/hfCtBD9oYdNn859h5osF1/82ZGvo
      UP+9KZaWrmP+FdY3Esw/D3g7Xsf8dMj6D/o4hyHe6DN7ZJaNG1eJ+4bW8T9k4hdvEV6+yvqP
      K3z9xAscQpNhcWxm6qE9+2FnAnUz4voNRfBffB2Gawx+bDHlHeb64lVMVfL1RkClAjrLsH5j
      Fu8LguyW4vCYEt0MFNc3Bjzz2xO8fa3Der+gefLr4zs4/Or3vve9t35+P/jp7v9p8nc//1//
      8uLP89t3TzoajfakH/18tOfa0Wh0R3475+5yv3157fnbHed/Ovr5TjZ3SX/XdOUN7kz/BCHd
      Su9eP/9/e+8X40Z23/l+7MuZe2hRs1UTtrcqYSd9vOpY1VbbU9xpXzc3ciAGcq4oaIFpwQvM
      CA4Q6GmRfdt9DO7TPi02e4GFZxdYQDuAjZ4AEbqFWBCFHSVU7rQvOZjWsuRt3S7B3fBpWMSt
      QsRNHcxwhufG5fg+HPY/SSPJHqlb8vQXENQki4en/p86v9/v+/kk3bs9f/aLrfVN1OovumuZ
      fbFzvYfDXwxH/za/b//94hfDLPlFO1rdbmvnttqLbbez/2vdX6zeGfX/Z4/328O7P/lFe+Un
      oxfb+/7TmeMajdbg7LED8GdRT9Qc11hq/C/lgD2ixT8T5ry/cv/FfXGUT5dQIBycA0Dk86cn
      SFncF+0lJfKpn/WjDM1f5VQ0A4MeaIQQOM4TuAvt7MsOkiUIe/W9t4/30Cl/XWRGZYQULBxl
      kxNx7zbQ/ZTNbYMx6IGx+2E/KZEjGWMpoLpv4z7AFvVy83Ot9aMpke21InOvzT61jqY9BY7c
      NX31ODI6ZfHSFVulZAxTJ85+6nnn6FoTI2vMHvPQvYgL/2kBJ5gCMorlKnOnZncfAL2I1pJC
      Vhz86dovvQ7PpHJD6+oCcR+kN0VtxuPK5UVMQeBWRtsAULc6NK+3LSx9ts5wzQajwtkGUxVQ
      6f5QIskhWnqbbio491rD1qP0ElajCHnmTzh/MoCBpnlpnmTwGHeATBvS9YjuskKbDFGWMEgx
      JY/6tE93KULnIGdmkcLQXo5xxgN8RxNFqziVKrXAp7XUIjOW+KhVl9VUIydDZEFDwRCvt4jW
      tG2noLd+z5uuI4WmE3XBkTRO1i2TNl1FaTj/x+cQgwQ1sFek9lILbRwbjFvuEhuQZYHwpwgn
      BJ0bXbyKJI46drmTNUhjOsurJHFKMBZurbsjpzj3nTcQuebtt+aJewGOielEqzjOFMH4kGQj
      pn11leB1l7o0dJZXGRaK1E/N7XtN7K+k3JAMNOFMg+oRiVlvYwoB584EzH+/hTkxixCgolX8
      sEFYULSimGIfaq/sPyVS92Na762CmIKCYPZkg2AjItOG0zM2pcfkBjldp1ERj6BEpmuspTD2
      Dz2u/4+c+u+P885Ci9o//xb995dIBgPeX1Z883+v8v5fvwsfJ8R/W6Q2fZi/WHgHf2KSlfff
      Ye2nd+j9LUweGaf48wHv/HWH8a8EuIde4E70Lr2/06z8+C612a/S/m8t+Pguyz/+HPXfH2fp
      v3VQP72DeWkM+bKL748jXoSScOn/pMNf/tUSKh0w+WXJypUF1N8XKZqEpR8r7iwvM/nNBuOH
      NM3OGv4hw7vLPe7cXqb/+TGKH6/xzs2YdCOj9vs17qx0cb9cZbLiYv6uR/wTzVf/6TSFFwV3
      N9bZ+OBDlv9qibHfnmTtf3RQH+eIvMDhLxT46u/9AYVcYyjQ+1Eb/aJk+p88OULiXlEijdGs
      t5e5+0FG52+WGf/K7xLfWiJaXSF/eZxaGFD4PJhhytL/dZ2VjZTx8OuMC037x/tPiRRijC/9
      Y7jTG9h993loX2/ywuQ3mflda+lYECV85zDv/OVfPGYkuADyqC14kb6LnJDWj9OALyXBkQB3
      ZJMiKz7F3JDctSXUwSs1aifqhEeKtJaaJENonAhRN1q0V+JRlNcghI88InGNtu2Mfs/BUDsx
      8p3/YWvLDt3kUDtznn/zL/+EqgeLF68QqcTS5z2fcHoKx3WRFWut6JPR6nTxj0jSO9mo5lhS
      nfBthHpCEkzKB98Tc4M2GU7BoJJR1PFYSODZYh23WEQISFa6Nuqam+362edMouAwe+Y8579z
      DlnQRMsxlEPmzjQQvU0jYoOKE4JvNGh8Q5LEivDUHOdfbyAQOLmhWBpRIvd6MxRAFIrbrwca
      tWEIdyZ0GpuJUD9z9tGPnsWRBd5WJuKWO5z9p6JVmhOCrOwjS5AgcDyHQLr24VBr0BpTcKhJ
      H9230d7g2BSqZz18nIrHcCOmdd2QlSXS2UErLUB2N8OfCDDaZveBINmIaS6tEsxMAfaEcQwo
      I+xDez7qewEQDoFX5MJSyp++FiD6qyTYvBAhXDzRpX29RRzHBNPbt259J6H9XgeGCVnucnq6
      iroVI0oCMdBbtpGiLEjuKJKexj0qyYo7w/TPl8wgoXmpiTzqowoetQmP5IZCrQGOhNxSIl2n
      SHdDIQpD3LJECEGSpohxib9flMhdElvro0vuVrVh2k9hkLFwuU1wVD4GJVKDI4ylNpYF6UaC
      d0TasrdeTLMZE36rztTRAAeNxs4c6J4i3rAllUHFR61HaCMIjgU2zTrVeEcC3DyDko8ZKFRP
      I48EOOz4vV6CECPyZNkjPLJ9lU7XY1bvJLiuT3DMll5Gt+xdJTi6XXopCjaXSPUNwREPM9DE
      t2IMYut78W0FwhIiHcdiXqMbMdnPhhQPuwRHrYuFTpXti+MTVHy0NrYsdAC+ALU5X+/4T5SQ
      uJeQvE1ipzcRICsO6lZEeteWODolLCWyhAWk4BCMWMC7KZExTiXYc0okAEaT9g1exQNj97us
      jAiiaYpT9tA9u46fKhCmezHdWFM/+fRmiQ5kdUCJfDr6VDcopxJQPwiEHeg51v2UyMFnm5T+
      rGqLEnlwA3iiup8SmbPLFSJLFVEUkY2KK/zSkPZyZB9mRRG/IhGDhERbfx7XkYSz4TNrL/I8
      a78okVkakwys2Zm1oDSsrrSJ11NcLyCc9omX2xhHMjsdoPsKSnIbgbWPGhprfuYHu4/JrK9I
      +o9ghGV9xeKlRYQnCSZ8os4VdF5kajqAuzGiJJHjtiTNrQRUp0Oy9TbxxrNBBzzQp1eWxsz/
      lz+j1Ym23hvqhM6NGP+IJLm1QPt6C9UzJDeaxBuK7pp6NvKGckPn2gIXvn9hF0duqFOa33uT
      xXdaj7BGVDGiHBJOhxQBfzJACIdiwUG5PsLz8DwXgfViHA7BPAsrfqAnp4JgajokMTuu5o7P
      3OvnEBjUTXc0NZ4BgkTF4PjofoIQn5Yh/ek0zA3OxBRT5d31yQbwp6uY9eEjAmE5CDEKKowS
      xMwDAjzGGNJ1RfPSBVQuCY4cpEf/usgtS2TF3/VesSAQGDrXriDKIbXjdeQRH/9IYJMIl9tc
      ubpIvF64njEAACAASURBVJ7uU69H/RQOwaTEEcVd77uORyA9RKH48BPAGffR6Sqp1mQ6pXV5
      /oGOv6LkM3uywbk/OgdJTJI+n1HQAz1aw9wwHGhal+ZJCpL6iRqiNLKlKYBfkYDD1ISD/jDb
      7+7uVn5/gPKhNyjXC5g9ltC6fAGMwDu26clicCo+4nDRDo2kpCgEvhNSn1HEUYyszFJ8WOMH
      em4kXB/fAzCodfssEKsEMQaLl1PqJxp4JYMpuASTErPRpdsznJ72H9runqggcMdtMDTTCjWA
      6oRElFwcj8fwBt1J2CvspgJu4nF20iQ3aYIHHpZPVvttjrtpS7l1LGzOFo7SY4rAcET/3DoG
      fsU6jyetbYLl9nqQ2/4+RoX1QyiOn/T3M7DSB3qCGh3gsJMUev9im5jUZ+0Y2D4+t9eDgu3v
      42WDHuhAv6Z69Hm6SdTL2So71HrHPP9oRmAzeiyEwN1RnjjUGj1K7RTCUgQfSG4Ugnth2Qfa
      P1mYyPbVczjah1tDsJ3HRdmDXI9KIj2KGBu02+9hcA6ZTrfKeoXjbN8BctvHhx5uQ6OJrreI
      +xkiN1CW1MOA7nKLaLmD8EKC6QC93CJzR9CEgeH0t88hy/ZhuXPpTVY/dHDHBJmB+onTTN1L
      bry6AJUpQByQG58BZVrRungB//i/onbUg9wQXXuTpFCjcdJObqiVFleux1AwyLBOsW85XFOv
      Ngh8g0oE4Q6q6H5oaFIWL85DyUFOVJmdDbeeU+POIlH6iBNA92LiXkbj9XM4BYtMwvE5/do5
      ilojXmkQTrs0ow71U+eY8gStixdQKhudAHbaqfqts9SOeqioaYtSnOo2uXF2lmyQoq4rlGYH
      uXGIM1GlPntwQuypckO8EhHHKe6rtqgpidu0l2PcYLPG1zAsuNT/xTncwSoLS23cDx2qobSz
      RNpBhrV9329mkDAsOdRn6viVbSad6Svay11MIXj4M4C5m+F4UzhCUBQO1bCO/wAHBKMTmovz
      fPc//hldDVLeb1MH4PmSTGuipRbtjQynMKR5dRH9IfjjPrIiR+RGgVOCzvWFva8o+sxrmwAp
      gGHfFrcEYbjly2qjw7NIR9BdifGP1JCT0L2tEKNRQPvqAq3leH8Kg0bz/cYYigNNtNRk8WKT
      bHOYXpacbjTwi48IhImSwGyS13PD6nLLlvzdu5zjUDvRoDrpYIZiy3riXumBtj6gPYUZCii5
      hMdCxAuAELiH3RG5UaGNQRwc/HuvTQLkZtGRilFrNiGyu9LZQskOdUrr6jymFFCfDQlPnuPs
      a3O4gJsbhHBJbrf3PLN4aAztpUUWL71NZhzqZ84x91oD7sZbfS/u8Ah66E3KkVNwY4Hm9SY+
      EPcS6kFt+5ubtZeFoq2/lWeJ175Lq6NonAjsA0c+RMVd+NAlWe8ydaSOYwTJeoZbEnYDFezJ
      oAcZyR3IEFRLgrhgRqkXBzGF/ZI3XedPJmuo5QXivo8oGJK+Jr4+T6SgdrxIkmpkxcPcVQgv
      wMlj1O0EIR48Enia2qJE5qDvdLlyuY2sFGFMItAkWuA7ztaxe58rxMAA/2Abe+HFEpPyt8k/
      yMg/f5iv/7NvMv5yCSggfsPFH/M5/GIBd8zH9cY4/AUHOS4R/2sBt+zyAjmHD49h8pz8H3Lk
      l7/OdDDJmC9xCz/H/D2Mf3mK8d8Zx5e/S/mlw7i/M4X/UhFKY8y8WmOs7FJ8yk4Iz4PMxwMK
      Lwpe2JNtMdq//3icwyVhMbb/6DcZ/y2fksjRBtx/dJjDL5WBnNKhEq7jUvgcjI2PM+aPUyi8
      wO9OV/Ff3mOj4c/DCy+O+vwbPu6LP+dzL7p8fbaG82KO/vsC7hcEhcJhXL/8NCiRB3oaOqBE
      Ph3d9wxwsHkP9FnSc0SJ/GzrgBL5dPRQSiSMSHxRhBkIgpkqsixQtxXCcXDLu+mOuheTGRd5
      5KBS/knrl6JE/hJStyKiWCGnawQVQftay1pdTteQZWh32lDyqc3ObnG21K0O0YpCOJYmmdxu
      E9/RBDN1gooDxtrMyGPh3lWG5YZoRJIMZ6vo3irqjsYYgxOENEY+pep2RLSi8IOQ2WPyEXEA
      rZj/8yZiLCCYdG3pW6poX2/bBUZ0x3QjxRhDEtvGzUCj+8YWyvRGRMkDPXMyfcXi9RaO79C+
      dgW1HhNpCMMQWRa0ry5gCj6kq7RvWAonuSGKVxEyIJiWZBsRi0sK33doXVog1ZrmxQu8+V/n
      9zSGk95u01pR+CVD63oXvzJFOC3JNla3TdYGKZ1OF1/6tK81Uf1HZIMm6zGuF1gGKyCPBBid
      AIZoqYUzMUW63rUOzSWfqdKQrJ8w//0u8mgNk8aowRCxk+54oGdGeiPG3IU0VvhHpmCQkPWs
      Q1/tZB2BQOdDyM32s2FuyDZidArm7hSBmyFKPsFRSfsHTTJtcCdDgrW9DeKoWMEAVM8ywLyK
      R3prFbypras/JY+5186h04hWZu0rH54NarAc303tKIk0A426tUomAs595zzVSQk5tiwSn9rx
      AFEYorXG9bwDQ6dnUMPckBnB7PEa6nYbXfA5e2aO6oSgeekKplAkSxVJujv5sXb8LHOnamQ3
      r5AUfPxcMf/ni9YZRDiEx6YQL+zt/rYJlT7hjLQkyYGhuxITzNZ3PTeJEmT9DHEY4qj98BPA
      nZBkPWXB11qzeGkBtaMksiiwEA1jyJKEIVA70cAdKOKeZmqmTuNkDdVponoHw6BnTW7ZR0qX
      Ytm1fOA7CRkC33cQQLyRUT1+mvorkuROYi+AA02cDHHLPq7jYj40OJWAxvEa/ni45cG51/In
      fJyKi+tYkwaMRvUEsrKdmWz6Kc2rEf4rdWQZ1KP4AE4loB4mLFx8E4xAvlIjmHDIKhIhwJUB
      yVqb+bfm8Y9WCXwBYz5+QRFFXXAE7dsxzmRtfzwiD/RQORMhQSVh/vsL+EfqhIGgeWmRSAhq
      pxo4A0Xr8jwIn/qZKaJbHZyyxMlTLrx1AacScHZG0rq0QHMDwpONkWu4wJ/YW2NcGdaJL19h
      /pIhPG5h2u5RH390+Y9utnC8KQSK+be6CCfg7Kn643mDmh35/MB2oGyHU8R9Q5xRuZwxxiZR
      HQRzP5WepjfoJk5o9ALDNkxu041bCIhv2RR46Qi7z3fgpO47BjbLJfdS9/ZjRx/imx3cSohX
      FruOycfq4n0bvbD7b/GAksnNZQ7G/s++du2jewB0Oz+TE+EWD23XPn/QMbAfF7x7+7GjD/LI
      jr7vWKeDksgDPbaeZxjgJ/X9sU4A3dcj2p59bYx98L0vZyg323Oun6TcoNOUNE13l1b+su0c
      6OnJGLu/ze737ltMa/TmZP+IuviQxfdUZmcH8gcYPo/W8ZGQvM61JqtpBgaKnqQ+69O+GhHM
      hPgVuSsSrG60iIeSxolPpgOq95q83YzxJj1MbgjC+lacYVc7dwV+CeRsnYPwwR7KaJoX51ED
      EI7P2dfmoB+zcGmR+uv/egv8p251aC51LarqZANWOrR7CeHxBlUP4meBEvntOURuaF1+E+3U
      mTs5AiAONIuPQ4nUGxHddcO5Pz6PUzBENyOGA0PWzzBakzkGdbtFHFu6o/OhRg808XstdO7j
      OcbSHcuSuRN2PtYMDXKmzhuvzWLSmAuX2sgJidloE8UpXhDifqiJbyqaK6s0XIk/UMRriqEj
      OXvq4IR4mjI6QfUEZ//laa68tUCSpsTLbeI4obbrKiponDmHXmnacsn+0FIi4xhzd78pkbbc
      EUBtRHSWFV64fUcwuUEGdRoTj7BFydIMv2KxOAhB+I3ZUUmkIY7aRNdbtCNNOBOwutwhGQxZ
      vb7A4pJCTrh0rrfJCi6eKD6wMkiUJSK3AYnFaxGOI2hdnSfuZThlDzkhkWUXg8Epu6ilxYN4
      wlOWKPmIUsr89+dJAddxaJw6TXV8t8ubPBbi5orW0ip+xUdWirRvKlwBemBoXZ6ndUM9+Eee
      opxywLkzDbySDeDKIyFzJ3fXJwvHIzwmaV1rPvwEKJYE2SDbOnjj9zrEO6KCWT9DOJLgWMjp
      4yO3gL5mWCgiyh6zJ2sIrWi91yZ70KDQaIwAdEqSWWuV6is1vJIAUcQ57FoH4ii2UUZjDuAd
      T1laJ6TGo3GmgWc0Sf8BU9zY50LKAY25GvHtLsGpOc6/PrdNiRQu6UprfyiRO7MXHjQFbwzp
      wFA7+QhKpHe0SrEzT/Ma+AVDdz2hfrK65QXkTPioXpfWtQy1rpEVOP3aG4hBRPN6BynAPxJg
      bm7THQGS9VU6NyBLFG5ZUp127VV/zMHcNRQ3/Wgcg+opEm0IjjooYe3sDvT0JIRA5IZkLcEU
      nNHsifUI2oywpgbUcotVLfALGsfxEUKg1589SuTWX6N+6H6K2aREHnsEJRLA6JT49irZsMjU
      dIhXgrSX2A3i+BitWFUaGQT4BUt3dIRBpUN8p0i8voooyy26o0kV0YpiWICi6xMeDRAC0vWI
      1TsZ/rjELxUxuWBoEkzBtSR4bXAdgV8JPpNJdXtKiVyPWVUJvpwiGKW2p+sKp2IxqZYSKYhv
      jcifr2wTNHEkTr6DElnZhwyAwYgSOfKfMv3UUkc9hzRVOGWJ7sWsqk9JiTzQ3umAEvl0dBAI
      O9BnWgeUyOdE+0aJ3LSleV5zuYx5aB3p41EiVyKygaVEyjJ0rrdGLlsCeSQkCHxMP7E0yVwQ
      hFWk5+27Nd6vm/aaEpn1Fa1rTXTu0zjTQAxseaxbCQmngy1iZLfTQvU1bjlgdjakuAnSEBK5
      ywd27zTMDfFyk9ayonZijnDStXacRlCbqW8RLB86BBqOKJE425RIlSpWVxQyCAkCSXR9kXg9
      3qZJei7RUmvLEfpAz6lyQ3S9SWJgOEiI44j29SYIB3WzjRqVuQ6NJtpIkEdCpLSxgqyfsPC9
      79JdS/at+3ojon1TIYoCdbNDvNImWs9wjaa9HFnLxvwRJ0A6okTOhiFT07M0zpzdyq/mZ8DP
      bFmZXosRnqVJToWzNE41cA4e1p57iYIhTRL8iYBg3EHfhamwhl+C9I61zDSDhCyJiW60SZIM
      jCbqtHDLcl8tdkRBQKbQuSCcnYV+glepEk4H6A01mkx/FCHmgZRIGy6P12McIDz5BqIfkZkd
      y4EdOz4oTfpAz4cKgvDEOZLBPNHSInpQg1wgCjZOkOWbNSI+9RNncQ/Dlb+YJ0uniO8Y/CKk
      /YRhvj/u3m4loH6qwduXWiz+ICUYcxCVUUxjONyqFXhsSuRwRIlUd216ROPUHKdfm6M6LfGl
      j+4p9GCbJqkObJ2fb+WGaLmLOxEQhiHZIEMc1iR9WzbpjrkMcxs5TrSFZBRLLm7ZI5A+2V1N
      NjAPxOruhZKNGKUF4WwdvzgEIdBaobMMfAvNG+aPuAO4XkB4dAcl8miVQHpk9+TjuJWQ8GhG
      89IOmmT5oATyuVYBHAeaV1uYgqB+5jyOiWldexvXC6l5ArUe4ZYdTK/J/LrBD2uEM7MUC4bV
      MuhCiLtPQ2Gn7KCvNemqhOpsndpsSPvaIlduCGonz6LTmKzgPg4l0mw9MCB20wB36d7lDmaA
      nqj2xRt0E4OEwHGcLfTRJmBuiKUvblIhd+73nRTR/dLQjCLCZbvdNjFPdmhu+/cYlMj7V6L4
      oMebByx3oOdcBYFb3jmNuXsf76JC3qMHvbfXKgoHWdn5elexJ3AQCT7QZ1yPT4kEnJJDscAW
      HRBAlBzrBbPrdim26YK59RTaBGE4jnPfnWKYm9EdSWx7YB7omZI1ntred0NjqZCi5OAWBNlA
      2ztGaTTUeEZGBJv9dHYOH3Nj+/uoIdAwH1Ei0wyMwfECajM+C//lAsXxAIGxnjGn6qiOpUli
      rFFS/UQdV4DpRVz43hVcKQGD41VpnJjdtXFML6K1nCArDv5kDb+8/7fPA20r68csfm+e+h/9
      KbIsGBpN6/I8qQYcn3ooaV1rgXBonDlLstbGnaxvlU/ul4YDTfPqPEnf4JYDGmcauAWDWmlz
      5b0IxCNOAL0RE2/spkSagcF1JI1vn0cUUhb/0wXiZVA9w9zr5xAYopXuFtrImCH++BRzr78B
      JqV5cYG4J3FzRTdaRZSnmCoP0Spm8doqwbeL1Dzo3lrFFIrUTjQOZpT2UUNjoYaqp7eAd0Yn
      pHeg8UdnaV2cZzUGxwtAR8Rxl2HBJXgGUtZ1r0uiofaNGkmajfKaDO0bEVO/N4c3iB5+Auyi
      RBYE1Zk6WRqRrEcsXrxgGxyzZY1OJUCMlqvNPrgetCjscEmtrdJe6eAHASq6QjouQTjIio/0
      PIa5QjguSdSi64XI4wcnwJ4rBzCoqE1W8Am8ZGt2UJRcxGHNwsV5DIJwUtK53gLhQT8FYPFS
      Qv1kYyvnZu/7DuZuSrqmUaUuSe5SAygI/LJDshEz1PHDTwAhBMbsoERGEUbYKNvsydO4BUuI
      1Cst1MZOmmREcTK478o9xE6hCgwqzfAnwZ+s4gpjSx5zF1EskkYxqRF2RQ5yivZcWRrTut5G
      eD5p1CajiLoVwVqM9EKMTkiGHo1/XiP6wTym4DP3+nmStS6pNiSxwvEhXlP4M3vrDDHMDdGS
      tT6XDniTkvqZBot//qYtqvIcgukqwxWFyR8xBHImp+DmAq3rLdyCId5ImD1eRQiBX/Ys0xcQ
      QdUut2QRmXEvoRGMLCgKkCUJUdSBQUJqXBpBQLoe23lto0duXgLhCpJEoe9onCCEO9FBAeQ+
      SJQl9VO+nYyYqWFMRisfEkiJ1ikgELkmVQkGH1Gy1olpqpFhSBbHpBqCfZgKLbJNicQkxL0W
      7aUWQxzcgiEZpCR3YnQuEIhHB8IynRLHq5i8iAyCUUlkhjchdz3IZv2UeM0uFwQB/iYpfpAS
      La9isOxYGYT4JUGSxiiloOQTjPvowRCBITHgFkAlCY7j4ro+snJAnNlXSF5uSDYUwpOYQWJL
      YXuK+E6CNy6RE6NSSW1sBLYXo+5CMB3sWyTY9huSNCZWCVJO4ZRA5+AJiKNVcPwDSuTzogNK
      5NPRASXyQJ9pHVAinxM9KUqkAZvm/gwEqZ6EzCg36VfdLI+kRBqd0l7uogcGGYSER+Wv+FMA
      huhqGzFdtTTBEdnPOVr7xKBJejtmWHLB8GD6pNF0rrVIRol4/mTI7Cufpo/Ppp4EJdIMNO1r
      C0Rp0fpmktBdjjCHJfVvhOj1iPaK9fOpHQ8xfUU7ivHljm1qNJ1Om8QIarM1PEdg+gqlIaj4
      dG60Se5aOqOcqTP7FImhOo1ZuNyi6AQ0ztQwvZj2iAAZONBejq2Rc0FQP1m3hmuAGaSoXkZw
      NHgUI0yzePEKpugTTEripQ4qNTAw6NSGmM1Ak/ZSO1uZG9I0JU015NaESG1+BmAMrT9/k/nL
      ljJp+or5//om8YYerdDou6Nl0w1lyZS9zOKYjCHtpfb3tpyqM7qdLv6kLdHsXrdTYFt96du+
      mB0uxsbs6PfAbDkF2/UwmMHIgS63f+9q6zlWvNQk6hkwGe3lNu3rHcxhn2SlTeumorvSRfiS
      IJCIXLNwtYlwfFZH04oA6lYXpcExKQvXInQ/5cJ//jMWr3YwBYGckATSR62sMnyaU3i5oXWp
      iUGQ9WK6NyNaS11836d9tUmSFwmmA3yRsXorYZN6YAaaxbe+y/zFJiZ/lDluLybDZe4bIaaf
      woygKAydywu0elA/UUWttBkiwPGplqB1W+EIwVQwRXu5iygJZFCj8Xt2PtipSBgZXZk4xnV8
      BEOiH9rcbQbgh1W40yXRhng5plaRtOKYIHDoRgo9UMhXzzH3IBfqAoChc71lXa0HIMMqadxm
      9sx50qVFspJnTZxyyHCpeobWUoIcF2QlSVBIKE6fJigoWssZTtmg+ratqROnmT36fM5KiYJ1
      4/On69RmqjgFgckTFpY0xmiyXozug8mmYBL0HYMWq7iVYIv9JY/V8I8Yi1DNh6P3QpLUfu5V
      JNlahDddp/6Ut5ONJ6XUf69B9ViAOBpuESCFcJAlQeeq5vRr53YN7b0jVbJb2aNrgo0ZbhE3
      kt4qrcvztCPF0GjCV2tIkTHMJee+fRpuxySD0RXT8XFKwnp/Ar7nbrVZLLr4lSLqVowaGOS4
      D0bT+kGLtG/Qg5T2UosoLXL2O+ephYGtNdAZouRSFGAyjdrYLrjWWrO63OHCf3wTMVHDF4bW
      5TapNmitiJIMrySIoojVXgaDlPayIssNSnVRvQwvCGm8Vkf0YrTWDA2YfEiSKpqX2+hRW921
      vTd8fVIKjjeohZK402T+WhtKAqNTTEFgfmaozpylcbJGdqtFFCmyAYSzNZJehNq8MwsBeWYT
      4dAIx7OE0K1SWE28nlCdrT7dpMaCoP7aG8gS1oj3lkKUIOlnUARtDDpVZEIS7jgRRcmhOi23
      noEeHgjzJGbQJOlrgmM1VBRtN1QUUCgCGmOGUBDIIEROSlpXF4hLp5l7bY44atG63iKYeGPL
      ozGYlLSWWvhHQpzS6EA+7BIer1MtC5I0pbmstkEcABiiay3E0RphIWXnYeiNS85++w2SCcH8
      e130TB0cl9kTDaSwCXuucXnzews4QQ3fMThyisapOkZnaNVG5cVdD4bGZGQfppY5VXKpnWjg
      CQOl3S7Jz5OiGzGUA+rHfeI0pnlJEJ6oUn9VMX9rFeH51I4FuI6DcBzkpGNpkGK7tDG+0UEL
      Sf1kjX9/8X7zW6Mz1MCl/rShiEbTWlbIV2bxyzHxSpvmXU3tZB0ZR6hegvhQ4XryEx/4TW74
      XwAoIs6/cf474+PjlZ0LFL7gMnbo53T++l3efX+JzzkBteNfJ9d9iv6XmJzwSX/a5Z33YvxX
      aowXDe8steHFMb4aTBItt0n0gOnwm0z+9hhguPvTPl8Ka/RvR8jZP8DNBxR/a4rgdwRRZ4n4
      J4oxGSJf6tP6mxb6Y5gMpih+XuD/5mFWbq+Q/0OBwhd9ql+W5Pn/R///HTA+HTAuffRqzIeH
      JV/9JwWi/3uJtY27jP3Ol5CVMXq3Y+T/9odUvzLJ4KfvE92M0Qb8scMUDvmMey79dMDk16bo
      XG9xd9DHrczwza+N8f77S6z17jL+W1OMvbz3k8WDDwaILwgKhV/9svq5j/u0Li0SbdzlW/XT
      +IcNrWst1N/CH56qQ7rOO+++iylPcvpkncNG84O/epfCywFf/7LD+7c3+O1yifZfN4lu3eGr
      /+xbhF8aI/9Yoz8uEgTjDD5ISXOYCZ7yRERB0P9JRPNqk8HPD9P4wwb5367Q+ps2lAL+4Per
      6P+5xuHfmmK8XML0Fcs/Thn3xuDvDf2/M0xOB4/pDWqMTdffQQXcvuXtJvPtIkpufu9B9MB7
      /7/3u1uvxe4r88htYqfj7739YfTZA+mW9/b73nXK7/nu6PP72tpjPSlvUKNH5rajK/ROCuR9
      24QdlM9BSms9szSfh+3Xe/9+ytJpCsKxpKJP2qfYCZeox/Zs1uizA3Pc50T7bo6b25mx59ac
      9xP6/2sSDjnQU1dBPN/Bs0/o/2OtktZ2Ll04zqfeCGZgzUo32zGD0fDpk9odldc9EMa9ucg9
      JZp7dZHSO+ICn7RtdkGonwfl7KI9Csexs3lm97Y1gx0TFELgFOzMi+M4W+08C5dXM7B9dxxn
      ezi0o++P7GL8wxatWNnyx5Lk7JnGr54ukWsu/B//FvfUOd44GcIg5c3/898Svvan1I89eM64
      c7UJ4wGeEMhj9z9YGZ1y4d99F6RE5AYjfM69PvfUQXomjbnwH+YRk7bU0/UC5k7Vdz+vpDHN
      azFy0seZCJHes38imEFK63qLrJ8RxYrGvziL6rRtukFZ2giyAHU7or2ySqpihn6NupMRpZrw
      +BxVz+wfJXLnuvQVi5ebZANwj9V444RN0Ve327RXFOnaIwpiTBrTjBTnvnMOr2Sn0YwxqPWY
      aC1BBgHCKCKlrXN0aUhrqYMpONRnqqyutFHaUJ2pEx7x7FUh16zejNHHQ0xvleRORmiG6L6i
      vdTB4FE7UWPYi4iiVdRKSuDYgzvdiGkvRWQFqB1v2HQKhojDLqdfP49X0Fz4z/O2uIaEdqeD
      KXjUZqZQ64rw1Vn0RkRScBBaEa2lyGAWWdJ0VxLMQOOHs3h5Cl6IX0iIewa/jE0ZKHjUT9Rx
      SvZhy/El5/74PCLXLH5/nmh9Ciky2ssRoiQJJgXJRkz3+gL+qX9FIxREnZisIKifaDyTJ4Rw
      POa+/QbqRhMjfALPwT3RIDzqMv/WBZKBQQpB8OoswVHJ29/XyNkAdb09okRG+0qJ3CljIJhp
      IIXm31+0x5xTgODVOvJoyvxbj+AE61ThlGxQK3qvSXdFUXUcsuUWiQgJsfP1tdkp2pcXUGVB
      PCgSHhEka6u0bihq3wjBDLfadMc8KA1RvZRMaeS4tGHtiy0yx6eoIy5cVDgGaieqqGgBrRXJ
      zYzaiaq9Jd9u01ryCF63GzlVMfPfv4DRKU4lwBeGhbcWoSKhF7FgDG5fQdkjWWpD2Se+rQiP
      Sa5cfpupioPqucyd8mhebSJLBmdGUhSK7pLCGI2YkNDrML9U5E9Oze7eUMLB91yUUnRvtnCP
      BiS3Wyjt2eKhikSOe5hBinAczM0WrZLk/Jnwye/1JyGj6UQxtRPnkUccJBC/18SI7YgwgFrv
      kpUC5o5JWLNuzLIi0QND5/I86XSd2Vf3Ly/LqUgCJ2XxrbcplsNdCXPJrS54j8gFEiUXk9vx
      YPBKDSkMSumtYFYxHyKEJDga4BqDnLbR4dZSC+P61F/xaS+1iO+k240WigQTPnHURg/AL7sw
      NMRrNvAlypKgXEQXXIKjgc1L2ey0UsS9xE6F7gjAOJ6kcbKOFEDBQeQZsbI1rK4nCYKAcFqy
      2umQ5AIHs0WlnDoW4pXs8EpO+Dg7vSxzmzMUr222FVAdf/BQLTMZojAkVjbE7lcCAs+3ViGH
      i7ilIlopVC/BjFy1n1XpfkKW+8iJUcLiDxdprWjOvtbYMbQ0xCsJwXQVURDMnpnj3A5KJMJF
      Sx7bSAAAAmFJREFU7QclcofMQGNyh/qZOdDRVj4TGOI4YWq6+ghz3EqIL4Y0r7aIb3WJU/DH
      nS3PH8fzMSamvdQmc3zIrSVK1XdJ7iR2ODMtGfa3Uasg8KUkidrgS7tBi4JgWuI6Dr4j8Mck
      HgmtpRbRWozBWtmlPYVT9q3dyo4zQBQd/Ipk7vU59EqHOIVq4FMs2flhlyLyaEAatRFHqkxN
      B0jfwfF9nAIUt9JpxQj+5xBHbdpRhBYO4bSP69i2RGEbwanvpkQ3Ijo/bJJoQW16ijDwEY6D
      Uxp5HCFwyoLkrkKtK1zPxymKZ5rCk/UTKHs4BUhvtZlfbONPSLJ+gh5o+5BsbPWevxnxFQL6
      KcKXSM8h0xlDivs6c6Q3YuYvLqLWFKLgILBVaxiDMuCVne04wLt/+e7lycnJmQc1lKzfQiUf
      IOXX8CuH4IMEXrIpAR/1En6k/idy9hh+AW79qA2HfI4dkSQbCnXnI742e4xDow3xUS/hUMUn
      6Sn8ioReAhXblvpRm4SXqH3tGOQJtzqKQ77PF3/zi3zwdx/gvwzt/67wx31E4Yu2L0DSS/BH
      bSQ92zf/pY+4tfQjPnjZp/YVufXZSxWfQ0DSUyiVIKXEf/klPuIQh76w3ZZaaoPvI8QX8T24
      1fkRvOxz7Cvbt3S11CYBeOklvva1YxwCyBPaHcVL/mgb9BL8l0B9AF8EfqRG/X/5i/gvHXrs
      nfnRxx9x6AuPv/yn00ck+SH8AvBxQvu/28STl3yfYxOSj4BDhd3bHeyyfMG+vvX/3OI3xo/h
      v7RHXf4E2f38EfKfHsP/AnyU7+77/w/u0pEPR9mv4QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='164' name='QTD Data 2' width='192'>
      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
      AyY17YnuNmXcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='YTD Data' width='192'>
      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
      rimSzNAzfRXzoo+wDOFqj2BkZ27xNd8BdKdD4VvD8I7mviCAt2P2fPNBBoQhfScjfm2Rdjdh
      YGiY4PCkkWcAACAASURBVCEHPnQZ/d4odBWLqyukxmLgq7/jtX9coVBwefD+QVqLryHutnn4
      oTGsrwgeHvd5qVkn/cog5T8aJUszZDBM1InZY2Usra5QcB7gke+NUxAWv9Mx9bk67QuL/O6e
      QR479BgDZj3fXprhF134g0HkA4MM3G3RvrBC9cif8rA/wOKFNtGbFxkcHqN4t6bRaKC1RekH
      Bz6dz9Utwo1KI773dsQlBhmVLu1XGoRvxIxPPoYvUsK1mPavzqJ0Rvp2zJ5vPcyP/iQntYQz
      zI+OVCmXyri8x+h4hW43pPtWl7On62RfE8Rvdnn4uwHdtWUarZDRUpUD45L6379E9HZG9eCN
      e4T5D4xSLpUZeP89RicOkK62qb98juwbkvJ3B1n87TrB6MOESw1a5xXjk1Wsbkj95XOYgs/R
      H/8plYky/h8KXH+Ugbu7rL+zh8ofT1L+zoNY7wsqh36EfqNF/fwK4xOPMXrvHla6MY8EJcTd
      V3ToD+79g2+99tprFy5fiQ8+5v/Lly/3kujyiX//Hy6/HiWXex9Zrne5dym53Ov1l73Uu9zr
      f+hd6l3uXertWD7//Srb+uCK3za23etdTpLetu1u294HV/Rz28pXbnt7vz5PiKLoxvq1fZ97
      W/vYi16/3Fh8vX+8ksvJpW3H7PLlHcdpo43XFxuXX4/yNpIk2Xa8th27yzfp2G0b695G3y4l
      lxsLSx/Zlx3LXNHnSC1dbq1EV2l3Z5937G8fn8kkL+7EeJ8hDLaLq+OmmeQZ06+DuIFVUnNn
      3XOyPK/rhvbdGIz16exaP9Nzf/fk/5xj2/vZJ17lTrPtFjeu9vEp9nPb5j4eRvfJkVsxPc4M
      JgXxKaQQdRyTpD3cor/D7+nTwPQ1Y+gTK1EnyquGnG2Cv1dbHj53OUQbMKlGCCffn26esi4c
      F9v0cosgS+B7uaR4koI/5CGAOM7Jsu3kou7mx9rvR1dUHOV/izv3tDBpn6C1tj5vjkn/c9TN
      STzHEsSxQjg+TkF8pM/XJ8K+dh9+sbCTXNogmGCLZLre39tJqQ+BLKXbTftEGDvjUR+3LrkJ
      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
      u15/TE+tyd8BAM3hsMGLkvAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='164' name='YTD Data 2' width='192'>
      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
      AyY17YnuNmXcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Publisher Funnel by Page' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='CSV' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CSV Download' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CSV Data' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
