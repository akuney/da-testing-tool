<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='AfTAdvertiserReportbyAdUnit' path='/t/PreQA/workbooks' revision='1.3' site='PreQA' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='Only Full Time Frames' datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;False&quot;'>
        <calculation class='tableau' formula='&quot;False&quot;' />
        <members>
          <member value='&quot;True&quot;' />
          <member value='&quot;False&quot;' />
        </members>
      </column>
      <column caption='Breakdown' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
        <calculation class='tableau' formula='&quot;Site&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Advertiser&quot;' />
          <member value='&quot;Site&quot;' />
          <member value='&quot;Ad Unit Type&quot;' />
          <member value='&quot;Ad Unit&quot;' />
          <member value='&quot;Product Category&quot;' />
        </members>
      </column>
      <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
        <calculation class='tableau' formula='&quot;CVR&quot;' />
        <members>
          <member value='&quot;AOV&quot;' />
          <member value='&quot;ConvPM&quot;' />
          <member value='&quot;CPA&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;CVR&quot;' />
          <member value='&quot;ROAS&quot;' />
          <member value='&quot;RPC&quot;' />
          <member value='&quot;RPM&quot;' />
        </members>
      </column>
      <column caption='Aggregation Level' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
        <calculation class='tableau' formula='&quot;Week&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column caption='Week Start' datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
        <calculation class='tableau' formula='&quot;Sunday&quot;' />
        <members>
          <member value='&quot;Sunday&quot;' />
          <member value='&quot;Monday&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='aft_advertiser_report_by_ad_unit' inline='true' name='vertica.41285.366335358798' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='6.1' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;a.date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Ad Unit&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(a.impression_count) Impressions,&#13;&#10;&#9;sum(a.click_count) Clicks,&#13;&#10;&#9;sum(a.actual_cpc_sum) Cost,&#13;&#10;&#9;sum(a.click_conversion_count) Conversions,&#13;&#10;&#9;sum(a.click_conversion_value_sum) Revenue&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations a&#9;&#13;&#10;left join intent_media_production.entities e on e.id = a.advertiser_id&#9;&#13;&#10;left join intent_media_production.ad_units au on au.id = a.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.campaigns c on c.id = a.campaign_ID&#13;&#10;where &#13;&#10;        e.name in&#13;&#10;                (&#13;&#10;                &apos;Alaska Airlines&apos;,&#13;&#10;                &apos;American Airlines&apos;,&#13;&#10;                &apos;CheapTickets-Ads&apos;,&#13;&#10;                &apos;Expedia-Ads&apos;,&#13;&#10;                &apos;FlightNetwork&apos;,&#13;&#10;                &apos;Hotwire-Ads&apos;,&#13;&#10;                &apos;JetBlue&apos;,&#13;&#10;                &apos;Orbitz-ads-on-Network&apos;,&#13;&#10;                &apos;Travelocity-Ads&apos;,&#13;&#10;                &apos;United Airlines&apos;,&#13;&#10;                &apos;Vayama&apos;,&#13;&#10;                &apos;Virgin America&apos;&#13;&#10;                )&#13;&#10;and ((a.date_in_et &gt;&gt; &apos;2011-05-23&apos; and s.name = &apos;ORBITZ_GLOBAL&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2011-06-02&apos; and s.name = &apos;CHEAPTICKETS&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2011-06-22&apos; and s.name = &apos;EXPEDIA&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-02-27&apos; and s.name = &apos;VAYAMA&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-02-29&apos; and s.name = &apos;BUDGETAIR&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2012-11-21&apos; and s.name = &apos;HOTWIRE&apos;)&#13;&#10;or (a.date_in_et &gt;&gt; &apos;2013-03-03&apos; and s.name = &apos;KAYAK&apos;)&#13;&#10;or s.name not in (&apos;ORBITZ_GLOBAL&apos;, &apos;CHEAPTICKETS&apos;, &apos;EXPEDIA&apos;, &apos;VAYAMA&apos;, &apos;BUDGETAIR&apos;, &apos;HOTWIRE&apos;, &apos;KAYAK&apos;))&#13;&#10;group by &#13;&#10;&#9;a.date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end),&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;display_format&#13;&#10;&#9;&#13;&#10;&#9;&#13;&#10;union&#13;&#10;---------------------------------Hotel--------------------&#13;&#10;&#13;&#10;select&#13;&#10;&#9;a.date_in_et as Date,&#13;&#10;&#9;e.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Ad Unit&quot;,&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end) as &quot;Type of Ad Unit&quot;,&#13;&#10;&#9;s.display_name as &quot;Site&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;c.precheck_eligibility_type as &quot;Precheck Type&quot;,&#13;&#10;&#9;c.display_format as &quot;Display Type&quot;,&#13;&#10;&#9;sum(a.impression_count) Impressions,&#13;&#10;&#9;sum(a.click_count) Clicks,&#13;&#10;&#9;sum(a.actual_cpc_sum) Cost,&#13;&#10;&#9;sum(a.click_conversion_count) Conversions,&#13;&#10;&#9;sum(a.click_conversion_value_sum) Revenue&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations a&#9;&#13;&#10;left join intent_media_production.entities e on e.id = a.advertiser_id&#9;&#13;&#10;left join intent_media_production.ad_units au on au.id = a.ad_unit_id&#13;&#10;left join intent_media_production.sites s on s.id = au.site_id&#13;&#10;left join intent_media_production.campaigns c on c.id = a.campaign_ID&#13;&#10;where &#13;&#10;        e.name in&#13;&#10;                (&#13;&#10;                &apos;Alaska Airlines&apos;,&#13;&#10;                &apos;American Airlines&apos;,&#13;&#10;                &apos;CheapTickets-Ads&apos;,&#13;&#10;                &apos;Expedia-Ads&apos;,&#13;&#10;                &apos;FlightNetwork&apos;,&#13;&#10;                &apos;Hotwire-Ads&apos;,&#13;&#10;                &apos;JetBlue&apos;,&#13;&#10;                &apos;Orbitz-ads-on-Network&apos;,&#13;&#10;                &apos;Travelocity-Ads&apos;,&#13;&#10;                &apos;United Airlines&apos;,&#13;&#10;                &apos;Vayama&apos;,&#13;&#10;                &apos;Virgin America&apos;&#13;&#10;                )&#13;&#10;group by &#13;&#10;&#9;a.date_in_et,&#13;&#10;&#9;e.name,&#13;&#10;&#9;(case e.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else e.advertiser_category_type&#13;&#10;&#9;end),&#13;&#10;&#9;(case au.name&#13;&#10;&#9;&#9;when &apos;Orbitz Exit Unit - Firefox&apos; then &apos;Orbitz Exit Unit - Flights - From Homepage&apos; &#13;&#10;&#9;&#9;when &apos;CheapTickets Exit Unit - Firefox&apos; then &apos;Cheaptickets Exit Unit - Flights - From Homepage&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;(case&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%exit%&apos; then &apos;Total Exit Units&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%list%&apos; or lower(au.name) like &apos;%rail%&apos; then &apos;Total List Page&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%media fill in%&apos; then &apos;Total Media Fill In&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%trip.com%&apos; then &apos;Total Trip.com&apos;&#13;&#10;&#9;&#9;when lower(au.name) like &apos;%ifc%&apos; then &apos;Total Integrated Form Compare&apos;&#13;&#10;&#9;&#9;else au.name &#13;&#10;&#9;end),&#13;&#10;&#9;s.display_name,&#13;&#10;&#9;c.precheck_eligibility_type,&#13;&#10;&#9;display_format&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
      </column>
      <column datatype='string' name='[Breakdown Measure]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;    WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;    WHEN &quot;Ad Unit Type&quot; THEN [Type of Ad Unit]&#13;&#10;    WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;    WHEN &quot;Site&quot; THEN [Site]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;    WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
      </column>
      <column caption='Ref Day' datatype='date' name='[Calculation_6780307222813543]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='TODAY()-1' />
      </column>
      <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 4]&#13;&#10;    WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;    WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;DESKTOP&quot;' value='Desktop' />
          <alias key='&quot;MOBILE&quot;' value='Mobile' />
        </aliases>
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Calculation_6780307222813543]&#13;&#10;WHEN &quot;Week&quot; THEN &#13;&#10;(CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Monday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Calculation_6780307222813543]) = 1 THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Calculation_6780307222813543]))) END)&#13;&#10;    WHEN &quot;Sunday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Calculation_6780307222813543]) = 7 THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Calculation_6780307222813543]))-1) END)&#13;&#10;END)&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Calculation_6780307222813543] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Calculation_6780307222813543]))) THEN [Calculation_6780307222813543] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Calculation_6780307222813543]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Metric Measure]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;    WHEN &quot;AOV&quot; THEN [AOV]&#13;&#10;    WHEN &quot;ConvPM&quot; THEN [ConvPM]&#13;&#10;    WHEN &quot;CPA&quot; THEN [CPA]&#13;&#10;    WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;    WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;    WHEN &quot;CVR&quot; THEN [CVR]&#13;&#10;    WHEN &quot;ROAS&quot; THEN [ROAS]&#13;&#10;    WHEN &quot;RPC&quot; THEN [RPC]&#13;&#10;    WHEN &quot;RPM&quot; THEN [RPM]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[Breakdown Measure]' derivation='None' name='[none:Breakdown Measure:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\My Tableau Repository\Datasources\aft_advertiser_report_by_ad_unit.tde' schema='Extract' tablename='Extract' update-time='2/13/2015 2:59:10 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_7290813154107329]' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='268781' timestamp-start='2015-02-13 14:59:10.549000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.334566' measure-ordering='alphabetic' measure-percentage='0.388786' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Breakdown Measure:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;BudgetAir&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Delta&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Mobissimo&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Aeromexico&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AirFastTickets&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AirTkt&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Alaska Airlines&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Total Exit Units&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Travelzoo&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Vayama&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Webjet&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Airfarewatchdog&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Expedia-Ads&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;SmartFares&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Total Media Fill In&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cathay Pacific - Canada&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Jetsetz&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Virgin America&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;British Airways&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;HOTWIRE_MEDIA_FILL_IN&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Kayak&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Student Universe&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Travelocity-Ads&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Apple Vacations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hawaiian Airlines&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hotwire&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Orbitz-ads-on-Network&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Trip.com Hotels path&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;AirTicketsDirect&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Expedia.ca&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Fly.com&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;South African Airlines&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Edreams&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;One Travel&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Air Canada&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AirTickets.co.uk&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;OWW-ads-on-CTIX&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;TravelJunction&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Bookit&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Frontier Airlines&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Virgin Atlantic&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;FlightHub&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Kayak Software Corporation - Ads&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Travel Ticker&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;BMI&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Expedia IAB&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Gogobot&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Hawaiian Airlines - JFK Launch&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;JetBlue&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;LowFares&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;CheapOair&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Hotels.com&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Priceline&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Emirates Airlines&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Expedia&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotwire-Ads&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Starwood Hotels&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Trip.com Flights path&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;DealBase&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;LAN Airlines&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;TripAdvisor&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;BudgetAir.ca&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;KAYAK&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;LowCostAirlines&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Travelation&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;United Airlines&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cathay Pacific&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;La Quinta &quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;OneTravel&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Travelocity.ca&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Air Canada - Marketel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;American Airlines&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;CheapAir&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Total List Page&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Traveljunction&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Trip.com&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Webjet.ca&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Explore Trip&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;FareSpotter&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;FlightNetwork&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Globester&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hilton Hotels&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;ebookers&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Air France&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;CheapTickets-Ads&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Qatar Airways&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Only Full Time Frames' datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;False&quot;'>
          <calculation class='tableau' formula='&quot;False&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column caption='Breakdown' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
          <calculation class='tableau' formula='&quot;Site&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Advertiser&quot;' />
            <member value='&quot;Site&quot;' />
            <member value='&quot;Ad Unit Type&quot;' />
            <member value='&quot;Ad Unit&quot;' />
            <member value='&quot;Product Category&quot;' />
          </members>
        </column>
        <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
          <calculation class='tableau' formula='&quot;CVR&quot;' />
          <members>
            <member value='&quot;AOV&quot;' />
            <member value='&quot;ConvPM&quot;' />
            <member value='&quot;CPA&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;CTR&quot;' />
            <member value='&quot;CVR&quot;' />
            <member value='&quot;ROAS&quot;' />
            <member value='&quot;RPC&quot;' />
            <member value='&quot;RPM&quot;' />
          </members>
        </column>
        <column caption='Aggregation Level' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Week&quot;'>
          <calculation class='tableau' formula='&quot;Week&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column caption='Week Start' datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
          <calculation class='tableau' formula='&quot;Sunday&quot;' />
          <members>
            <member value='&quot;Sunday&quot;' />
            <member value='&quot;Monday&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='vertica.41285.366335358798'>
      <datasources>
        <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
          <members>
            <member value='true' />
            <member value='false' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='vertica.41285.366335358798'>
        <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
        </column>
        <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
        </column>
        <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;DESKTOP&quot;' value='Desktop' />
            <alias key='&quot;MOBILE&quot;' value='Mobile' />
          </aliases>
        </column>
        <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
        <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Advertiser Name:nk]'>
        <groupfilter expression='([Parameters].[Parameter 2] AND SUM([Conversions]) &gt; 0) OR (NOT [Parameters].[Parameter 2])' function='filter' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[none:Advertiser Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Advertiser Segment:nk]'>
        <groupfilter function='level-members' level='[none:Advertiser Segment:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_7290813154107329:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[vertica.41285.366335358798].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[vertica.41285.366335358798].[none:Display Type:nk]'>
        <groupfilter function='member' level='[none:Display Type:nk]' member='&quot;DESKTOP&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Data by Ad Unit'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Ad Unit:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Ad Unit:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Ad Unit Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='272' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Type of Ad Unit:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Advertiser'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Advertiser Name:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Advertiser and Ad Unit Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='148' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='128' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41285.366335358798].[none:Advertiser Name:nk] / [vertica.41285.366335358798].[none:Type of Ad Unit:nk])</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Data by Site'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Site:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Site:nk]' value='276' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.41285.366335358798].[none:Site:nk]</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Full Data Table'>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='real' default-format='C1033%' name='[AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Conversions])' />
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Conversions])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Cost])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Clicks])' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[ConvPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Conversions])/sum([Impressions])*1000' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Cost]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[ROAS]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Cost])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Clicks])' />
            </column>
            <column datatype='real' default-format='C1033%' name='[RPM]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Revenue])/sum([Impressions])*1000' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Type of Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type of Ad Unit]' derivation='None' name='[none:Type of Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conversions]' derivation='Sum' name='[sum:Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Cost]' derivation='Sum' name='[sum:Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AOV]' derivation='User' name='[usr:AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CVR]' derivation='User' name='[usr:CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ConvPM]' derivation='User' name='[usr:ConvPM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ROAS]' derivation='User' name='[usr:ROAS:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPC]' derivation='User' name='[usr:RPC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[RPM]' derivation='User' name='[usr:RPM:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.41285.366335358798].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Cost:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Conversions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CVR:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:CPA:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ConvPM:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:ROAS:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:RPC:qk]&quot;</bucket>
              <bucket>&quot;[vertica.41285.366335358798].[usr:AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[vertica.41285.366335358798].[none:Ad Unit:nk]' direction='ASC' />
          <sort class='alphabetic' column='[vertica.41285.366335358798].[none:Advertiser Name:nk]' direction='ASC' />
          <slices>
            <column>[vertica.41285.366335358798].[:Measure Names]</column>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.41285.366335358798].[:Measure Names]' value='88' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.41285.366335358798].[none:Ad Unit:nk]' value='276' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Advertiser Name:nk]' value='108' />
            <format attr='width' field='[vertica.41285.366335358798].[none:Type of Ad Unit:nk]' value='108' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[vertica.41285.366335358798].[:Measure Names]' value='bold' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.41285.366335358798].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.41285.366335358798].[none:Advertiser Name:nk] / ([vertica.41285.366335358798].[none:Type of Ad Unit:nk] / [vertica.41285.366335358798].[none:Ad Unit:nk]))</rows>
        <cols>[vertica.41285.366335358798].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Longitudinal Graph'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='aft_advertiser_report_by_ad_unit' name='vertica.41285.366335358798' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Only Include Advertisers with Conversions' datatype='boolean' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='true'>
              <calculation class='tableau' formula='true' />
              <members>
                <member value='true' />
                <member value='false' />
              </members>
            </column>
            <column caption='Metric' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;CVR&quot;'>
              <calculation class='tableau' formula='&quot;CVR&quot;' />
              <members>
                <member value='&quot;AOV&quot;' />
                <member value='&quot;ConvPM&quot;' />
                <member value='&quot;CPA&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;CVR&quot;' />
                <member value='&quot;ROAS&quot;' />
                <member value='&quot;RPC&quot;' />
                <member value='&quot;RPM&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.41285.366335358798'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Breakdown Measure]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;    WHEN &quot;Total&quot; THEN &quot;Total&quot;&#13;&#10;    WHEN &quot;Ad Unit Type&quot; THEN [Type of Ad Unit]&#13;&#10;    WHEN &quot;Ad Unit&quot; THEN [Ad Unit]&#13;&#10;    WHEN &quot;Site&quot; THEN [Site]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;    WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' />
            </column>
            <column caption='Include Prechecks Data' datatype='string' name='[Calculation_7290813154107329]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Case [Precheck Type]&#13;&#10;WHEN &quot;NON_PRECHECKS_ONLY&quot; THEN &quot;No Prechecks&quot;&#13;&#10;WHEN Null THEN &quot;No Prechecks&quot;&#13;&#10;ELSE &quot;Only Prechecks&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 4]&#13;&#10;    WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;    WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;    WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Display Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;DESKTOP&quot;' value='Desktop' />
                <alias key='&quot;MOBILE&quot;' value='Mobile' />
              </aliases>
            </column>
            <column datatype='real' name='[Metric Measure]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;    WHEN &quot;AOV&quot; THEN [AOV]&#13;&#10;    WHEN &quot;ConvPM&quot; THEN [ConvPM]&#13;&#10;    WHEN &quot;CPA&quot; THEN [CPA]&#13;&#10;    WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;    WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;    WHEN &quot;CVR&quot; THEN [CVR]&#13;&#10;    WHEN &quot;ROAS&quot; THEN [ROAS]&#13;&#10;    WHEN &quot;RPC&quot; THEN [RPC]&#13;&#10;    WHEN &quot;RPM&quot; THEN [RPM]&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Breakdown Measure]' derivation='None' name='[none:Breakdown Measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7290813154107329]' derivation='None' name='[none:Calculation_7290813154107329:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Display Type]' derivation='None' name='[none:Display Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Metric Measure]' derivation='User' name='[usr:Metric Measure:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Breakdown Measure:nk]'>
            <groupfilter from='&quot;Aeromexico&quot;' function='range' level='[none:Breakdown Measure:nk]' to='&quot;Webjet.ca&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.41285.366335358798].[none:Date:qk]</column>
            <column>[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[vertica.41285.366335358798].[none:Breakdown Measure:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Name:nk]</column>
            <column>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</column>
            <column>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</column>
            <column>[vertica.41285.366335358798].[none:Display Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[vertica.41285.366335358798].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[vertica.41285.366335358798].[usr:Metric Measure:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[Parameters].[Parameter 3]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' value='Include the following:'>
              <formatted-text>
                <run>Include the following:</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Parameters].[Parameter 3] * [vertica.41285.366335358798].[usr:Metric Measure:qk])</rows>
        <cols>[vertica.41285.366335358798].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Data </run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='4000' maxwidth='3000' minheight='4000' minwidth='3000' />
      <zones>
        <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='21' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='1000' id='20' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='98900' id='10' param='horz' type='layout-flow' w='100000' x='0' y='1000'>
              <zone h='98900' id='8' param='vert' type='layout-flow' w='90767' x='0' y='1000'>
                <zone h='98900' id='6' type='layout-basic' w='90767' x='0' y='1000'>
                  <zone h='43849' id='1' name='Data by Ad Unit' show-title='true' w='90767' x='0' y='1000'>
                  </zone>
                  <zone h='6671' id='2' name='Data by Ad Unit Type' show-title='true' w='90767' x='0' y='44849'>
                  </zone>
                  <zone h='15455' id='3' name='Data by Site' show-title='true' w='90767' x='0' y='51520'>
                  </zone>
                  <zone h='10094' id='4' name='Data by Advertiser' show-title='true' w='90767' x='0' y='66975'>
                  </zone>
                  <zone h='22831' id='5' name='Data by Advertiser and Ad Unit Type' show-title='true' w='90767' x='0' y='77069'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='277' h='98900' id='9' is-fixed='true' param='vert' type='layout-flow' w='9233' x='90767' y='1000'>
                <zone h='1550' id='19' param='[Parameters].[Parameter 2]' type='paramctrl' w='9233' x='90767' y='1000'>
                  <formatted-text>
                    <run>Only Include Advertisers &#10;with Conversions</run>
                  </formatted-text>
                </zone>
                <zone h='1175' id='12' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Date:qk]' type='filter' w='9233' x='90767' y='2550'>
                </zone>
                <zone h='2050' id='22' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' w='9233' x='90767' y='3725'>
                </zone>
                <zone h='2050' id='23' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' w='9233' x='90767' y='5775'>
                </zone>
                <zone h='2500' id='18' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Advertiser Segment:nk]' type='filter' w='9233' x='90767' y='7825'>
                </zone>
                <zone h='7975' id='16' name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' w='9233' x='90767' y='10325'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Longitudinal'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 3]</run>
            <run>&gt;</run>
            <run> by </run>
            <run>&lt;</run>
            <run>[Parameters].[Parameter 1]</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='800' maxwidth='1800' minheight='800' minwidth='1800' />
      <zones>
        <zone h='100000' id='8' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='13' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5000' id='12' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='5000'>
              <zone h='95000' id='2' type='layout-basic' w='69945' x='0' y='5000'>
                <zone h='95000' id='1' name='Longitudinal Graph' show-title='true' w='53967' x='0' y='5000'>
                </zone>
                <zone h='95000' id='6' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' w='15978' x='53967' y='5000'>
                </zone>
              </zone>
              <zone fixed-size='258' h='95000' id='20' is-fixed='true' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' w='14777' x='69945' y='5000'>
              </zone>
              <zone fixed-size='275' h='95000' id='3' is-fixed='true' param='vert' type='layout-flow' w='15278' x='84722' y='5000'>
                <zone h='6250' id='22' param='[Parameters].[Parameter 2]' type='paramctrl' w='15278' x='84722' y='5000'>
                </zone>
                <zone h='12500' id='21' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Segment:nk]' type='filter' w='15278' x='84722' y='11250'>
                </zone>
                <zone h='6250' id='14' param='[Parameters].[Parameter 3]' type='paramctrl' w='15278' x='84722' y='23750'>
                </zone>
                <zone h='6250' id='7' param='[Parameters].[Parameter 1]' type='paramctrl' w='15278' x='84722' y='30000'>
                </zone>
                <zone h='6250' id='16' param='[Parameters].[Parameter 4]' type='paramctrl' w='15278' x='84722' y='36250'>
                </zone>
                <zone h='6250' id='19' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='15278' x='84722' y='42500'>
                </zone>
                <zone h='5875' id='5' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Date:qk]' type='filter' w='15278' x='84722' y='48750'>
                </zone>
                <zone h='10250' id='23' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' w='15278' x='84722' y='54625'>
                </zone>
                <zone h='10250' id='24' name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' w='15278' x='84722' y='64875'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Full Data Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]' type='filter' />
            <card param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_7290813154107329:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_7940122120432406:nk]</field>
          <field>[vertica.41285.366335358798].[none:Display Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Ad Unit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Display Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Ad Unit Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Site'>
      <cards>
        <edge name='left'>
          <strip size='204'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Advertiser'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Calculation_0850103115759288:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Data by Advertiser and Ad Unit Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.41257.666202546294].[:Measure Names]</field>
          <field>[mysql.41257.666202546294].[none:Ad Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Ad_Unit:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser Name:nk]</field>
          <field>[mysql.41257.666202546294].[none:Advertiser:nk]</field>
          <field>[mysql.41257.666202546294].[none:Site:nk]</field>
          <field>[mysql.41257.666202546294].[none:Type of Ad Unit:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Segment:nk]</field>
          <field>[vertica.41285.366335358798].[none:Product Category Type:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Data'>
      <active id='1' />
      <zones>
        <zone name='Data by Ad Unit'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Ad Unit Type'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Site'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Advertiser'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Data by Advertiser and Ad Unit Type'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone name='Data by Ad Unit' param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Longitudinal Graph'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='216'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 3]' type='parameter' />
            <card param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' />
            <card param='[vertica.41285.366335358798].[none:Display Type:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 3]</field>
          <field>[mysql.41257.666202546294].[none:Calculation_4941214180119641:nk]</field>
          <field>[mysql.41257.666202546294].[none:Date:qk]</field>
          <field>[mysql.41257.666202546294].[yr:Calculation_0901219093823857:ok]</field>
          <field>[mysql.41257.666202546294].[yr:Date:ok]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Filter:nk]</field>
          <field>[vertica.41285.366335358798].[none:Advertiser Name:nk]</field>
          <field>[vertica.41285.366335358798].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[vertica.41285.366335358798].[usr:Calculation_4710503154146517:nk]</field>
          <field>[vertica.41285.366335358798].[usr:Calculation_9380408101708281:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='1' name='Longitudinal'>
      <zones>
        <zone name='Longitudinal Graph'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Longitudinal Graph' pane-specification-id='0' param='[vertica.41285.366335358798].[none:Breakdown Measure:nk]' type='color' />
        <zone name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Advertiser Name:nk]' type='filter' values='relevant' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Parameter 4]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Longitudinal Graph' param='[vertica.41285.366335358798].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Full Data Table' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Data by Ad Unit' width='192'>
      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
      BEDNS+IwlKJWbzTmJIZ8ctrj/IaU5DcRd6OrE4IacYfNIFL5HFN9cDbm3WFmGjoA+D6P5oOR
      URd00zIQtMU5OOZosZCOGkHfMohC6IcCE6BpghrBs/3iI0V34zXdCIMWRlmrK4sPuo1ZWXBN
      3lN6LFUCfWKaBPBsVNxWJMQUnIMGxW1jfr1B08CXJJMdcV34lR0LRbXOc2PFgFfZaKHVbNAM
      JUAQAFG565k3VUZiulmXJEolhBgWM8GrNPKb81EMEAsE00zThcrLb1dR7cmgKxzGlEIpJWMM
      EqUSkltPvWkPiMkyVHQVswnd6MqOZMNUdriQqHoNrwNPPpoHw2HDNzlhb2lgINBkfSV1DSIF
      QgqaAtFVxUfHZU+qOMjdn5M9SQ2QYAW8wUYL5mJ+2Rirar2VH2WtjhoZIiJA0IAkEUkz4dcs
      lmNpQtL0qrHUBMv7y7mtY5yLwuhItSkKrtPoKJ2AQ0AlRLY5yTALIpJmFtEbzUZhc6FabxS3
      vX+u9LVRPQFptpxYuMwNsezGL3ND/I+Vl7XMr53Lgql8urz3nw6H4XntzVg3Uu3Z9tyr9d4t
      qfC1ZnmqMsLsr3/zb5MLg1YqhafE7hf3nk9t6P24lLo76714OHkL4zNhaXKvftemBRWVt79k
      3e16U2XtYhJ0mvWfq+QNVX+1rn1MU2cGrJW4Z381a0P7pApDtW9/KZ8b2fWfvt6caVvU6ryu
      9ESJ4PzFM/NxMmCsUH/9H7/dnOEb7l0nevLiGRXj+W6nO7gqJU+0B2CQnxD6ykHRkb3OrL7K
      xjgUJ7r2Gtv74R7vWDMIYu3NeEBLibl2eKp38Rx2lYrDQJ0b/NVNXq4TFYiJ7++5+NbFvS8c
      wjgo7TuU37ylWS3v+eFhPN0p/feqmvPrc2oJFRr5K+VKMxTHDrUjPXv74J4flObDbmnvPqXU
      oSPNTfe51w6mBnP+t5/dQyn93g9KA2c6e/d5+c1b6i+XK0fb8cnmvn/y4xNHglvXpc6I3c/t
      DcJw3z/VR+4bXXJaz2XHISpMQHaqMmBqf4kOs0atQTpqxADEPgD0z/ZBJ9Wp3STNOJcj20g/
      7mOCKuClMDBlQyApaIQfq1nDORXK8v6SCIQKlBANSKyq1sdBirGUsf7kH45HMaIKylOtaF4t
      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
      13S9+v8BOB1f2pwcwtMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Data by Ad Unit Type' width='192'>
      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
      gv8DAgCnmFcJiwQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Data by Site' width='192'>
      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
    </thumbnail>
    <thumbnail height='64' name='Data by Advertiser' width='192'>
      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
      kUKKLTIvMQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='64' name='Data by Advertiser and Ad Unit Type' width='192'>
      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
      1s/QXzkD/Q7ybqp4ge+/wgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Data' width='192'>
      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
      706eV2rU61Ciz03+SoIJfvN2K1ThSQF/g28Qg7Hxzz8tZNqlUvG37/z02PGTOYd1IdMyYqxM
      i6cm+Cvzt2Bie63qR1vt7Se/cWCgU2bvTWYtD9pxybrQNhwcMsKiEYlEsqVHf+7qrFSCbf7V
      0yonX3jpp88++3WpYRvimW1uQtA40y4Vcqh0ZB2e6InjJ3mctn3ZvZvSMbVknRHCnJIC4+Wi
      TQwTP/n4E+FYeuDgcSIWhSqJpkgvBvNwPRWAtIcMpkalajL8P7l6AAAgpOSu4dGx/i8sB4qp
      TNrr92t1Gq/XazT2oPzNbGb/ESAife7v/7rJ4ajFjanF1mDnN4W0220OjPhctm4N1GVDdJXo
      LhvinhrIt3rbGR8bH7+3iPZ4nGKMuC9SY40Pr7zPAtmoemiLjrSv2k1mncedaNaLxh5tugpi
      7EKwCCU9i9k6+/D+8fuObdfyUxduUCoKFohLmYQAYpoQgbLKtkBw29ghmQiqpHxZrpJCuQAA
      ZNKZT5zAJsM0y+fOX9fpZdkSM6gjZ91RqBJHZPpCqbZrUHP2yoKe5LE5SCRXObp/bBPmMzs3
      x6oXQZBfYCNjW5ST79829cpLuXIsXz129MBDr6HT0cAdm1+PQorBnc7lOaje7BkdqUc9D6xE
      /9t3Xn/5PbUOjeQ4j+7t52JKu93WryffmzpzKR2wV9FREwtgjLigapSBP3z5rBTIaPY9WXY6
      YInszRf/eTWJatXC4ML8yWf+gV2ImIcsSjG8FIyTjD+Tq09M7HH40z6fI1TMrLz2Cgw2KvlM
      HpRqSN7iYmCHDvSlJJiRo8F6vnTiyMNemQdlzRNdb8kxuerOwnS+Cu404m+dvYbLiTVL8uif
      Pzaz6KkmQ3VgrNNZNWuB1ANaLiGmWzCnLG8tLK2mciFa1y9ktztRQ695opFkNVSpnPnd7EEd
      pRwdgerZ319AEp1Z4oyLpHoq4mIkPYMyes0TbZDCh7nSXJmh9RKYkCm0KKXrBQBgfP8RDcGv
      E7krP7+9d+KxHTSvlGezmtm79vj+PaMSXhsiUA6x22w2Xb8MIpH0SqRw5PgxUixQGCzNciqQ
      rg1qKEiA65tV2+qqmOolzQNDSmxuxoGgSC7kRWR6CGwq5bSKYKZfe3/iK09J2HAHVuZBYRql
      HCPABGKzCm6n9KxyKRDJHDgwWq0z6Vpz+6Ap6g9QYn4c1GxCFa0f2PX0U7JCwtcEsWqjHSu0
      hrdu0euk2Xgi2+Z1ooZmmLZIKOjp7RfoTBpKza0144GAmdR2leguG6L7FNZlQ6wjneMT8TlW
      bi3aGsWkwxcHa8kSWyzkgQAArNhWCvksjhNJn7spwNmlSKAAihEuALSuXbpQaDamL15tQoiM
      EAMAYLXZOCCLz0fcLicu4b339uTHH33maNXuLtpZ9dydRUfMs8wSKZ22BRmOnLk43a5kEoVG
      0OOiOrmx8F7cizcjhYbN4VOT/MlzVyvlTCKZnr67aDLSnVOCUhH/lTsLmdBqpo6QIvYDK9E/
      +NvXXjolppByYH4pLunpU3/1C4fiZQBst8vFkjNfGNuz88r7k4AgumebAUBkN699UKhz5aKr
      S7fucLW9cm7ZPPHNXNgxQHELQlPOfcVuTeFag2MlozJus9ps4YB79spUCtR89x+/Zrf6QE7z
      pVdeHemTeG0BRmp4/m+e7tiCrI/zk6dWUu1nnnpixRHWG2Rvv/GTaI2RsxL+cCsec2BszsWb
      jo7mRN9L1mcXjI8Gbr3VMOEx992loIqquarQYLwByDtWiLUBJp5IkGqS1lNnTv38QXOi9x0e
      XbhyDaVUrGq+xZGjBH/ASAMA4Fie96crFMbJ1bkKKca0GZo2AP/74iwTDTVbnDIbFLJrpHFU
      L0UAoH39dxdxlQps8Pu26NeGnjp9ii+huJVUGST277e4rXEFzlyY86bsVxGZRaZWHt23q1Pr
      sX4cjvmgN8MRi6FqnDKONssJplW1etK9lKgJ4Qib6WhO9L0kvdZ4A04k0jqSt+xMaJRCFsj3
      BGInHj3cuTtQPOS5Me/YNmiGGIDUabs1UJcN0VWiu2yI+z3RcpUa5nxkZ5u7dT2cLlNyKQAA
      QC13/cYyqVOu/beuzN+2ukJqrSqXSUcj0WoqwfC5oXARF8PWuwtCpYILAPmI88LNhXylwIdE
      fF7TvhrOF9I4LrTbPflcGsf/0J1YSf367GUuXyjBHtqGps6RjgUvXL9DwPVlf8LnD6uk/PfO
      XZOiLIcrfvv2LX2vkbMpkX35qHveFrT7QgYNNTM3hwAVf7Rw886MsaeDnugWG3K5vEHnCozJ
      g6770jkayukP3rl0/rK0f6RYrX9+bKAYmP/e2TM8QknWPB/czJjvnpdz2ti2x7nRVVyz5fR/
      v5oBRe1caVhLEjj/Rz/4z+HdxpWpy9/68Y+yTifeCkbzPKYx++s3pvRDosxdWxTX/Otz3zj3
      7m9JKfTub+oJFqKBqyF/REIPPfsnu1Z9qXblwptvxg1ofdlV01r6v/UXX+7MOmwUiZzChYFT
      v/gJefCbFffCkApcWFod7ic8OYEUxzanggYAYPLt1xfzBK1T7BlQvPjKz57/qz+7cWO50UAT
      DaBDDQvzxSIvWwj6/GJhyxcIqxHOH3iiewe2Nit5SkHtHB1DMZTL1AQ8tj0KTOyxyFRaWqui
      TUatSm00D4q47XK5pqE1MA+n9eq+QdOd6aXtu3eaaZ1apZBraYNaAQCAzmxBYZBVr4TztRPH
      Dis0Wq1GRcoUOr2OzXC27Ri2mPsUMkK5lhitNhooXIiTQftdw46DA30GNfXJKUGfPrU8w1fs
      HR8plUp8BGWzAQgWWgb6QIhH4gIMwzZnFpYhC4JKcDHG5SLjYyN6FQXjmiZT2Wbq1B3I53ZS
      2l4JJmw3qxWGJ8TQrhLdZUP8D6rlhMrcdceFAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Longitudinal Graph' width='192'>
      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
      y1RlZk4muh6VlzSvonKswWJTaq4DggZmfYfSZm81QML1i/VgTdbfa+/2V30K1JfVqXceUHMd
      Riy2yCdgnFsPFwLVVCwIZ19zoeFk1vZ8ZjA05EdFdkjMvur6GtpXfY+ZAOJQ/uZU8NYCNrws
      KkJ9I3rFQCUI/VWl7iC+3gqFXnuZlBDTK4tzX2jLobCeQX0kW5SlE+1pgk1ibHp4QoCmwMV2
      6A3kA2HmLtftxJnqlGJNZGO9lNTIUAVHOW7DXy/NDZttG7rm2IlfStym5bXyNV4p6b4wg8IZ
      zLJWgaYQtepUVAl7Fytfe7seX5U166Y3Ug5Xxm/CrqnxJSibWtNCNgcbOkBaeDZTBWJfNfzE
      dLQsEgjhOjw+lRTyalwF4xL+hYgV2/VEnIsqF3y3GJzMgk5odisphAlBJ+J4uyIOT0qOPDux
      AmaWipSvOAt+vtb4rXt+a12111W16U/lHXeoJxqp2MncE5BkHjNodtUXGlovuu6QcAKyiRTz
      Zm08v1urX/MKL5fkNT+0zInlVmNkbOa1SV+YlS9N5V4sWF86WfZUdb08rpxTnz1TWQ8c0gGq
      R2wryZSD7iBG+7cKE5fchnDawtQZTke5HVWFUKat/85p/YZ0Xj2bf2epBZ6yFt339Smt5iYF
      ELtcCUjhPahDcyarC9HphuU7hmhos6EVVqWKtZMeN4PhxZN8YoaYMD1LnuKWQsNnKwTbQf20
      qrRFESPtCyrPyuORnCUK+Y4zm5hlPruYaZE2OaedqmpOG6oumrIzNbdC8TDKHULC5+46Bd2e
      EGHLoqKC7IzVQxFrUk/oQoYLChRJGHlOGAawgyeaQ2jEmimXPbXueR1FGoier9Sr5ppCgvJl
      KRUvtTd88IDshM7gvUu9yVzKmK0XXdIoSFANlK4REWIGBdINJDrK/1a5/tnCZLtx4TcKpobi
      y8XTx9zKq8WiIapfPdsatCbP125enbL9cOFWOPte2fcWpxPyFTsGETGS0L9tIuFFr+IeDabd
      xhltthTdrDlE1CLbJg0hs8M1FTVzx8XccEUecMJ8AwMmDlcKVNOPtRc7J+2jU9Z6zm07PGTP
      rC+2BfyO79zwmiaDTJfHCebXrIptFDw41U5Yj7zQMCWZekL1ZIZjB9bSEo/XjYJDIUBgbrJe
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Longitudinal' width='192'>
      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
      t/vOz/rmE/8//WTkmCLbicUAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
