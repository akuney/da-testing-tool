<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://production-tableau-server-1.internal.intentmedia.net' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.1015.1338                -->
  <repository-location id='SCAHotelMarketMappingDashboard' path='/t/PreQA/workbooks' revision='4.0' site='PreQA' />
  <preferences>
    <color-palette custom='true' name='Red-Black-Green 1:1:1' type='ordered-sequential'>
      <color>#dd0000</color>
      <color>#000000</color>
      <color>#005500</color>
    </color-palette>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
        <calculation class='tableau' formula='1000000000' />
        <aliases>
          <alias key='10' value='Top 10' />
          <alias key='25' value='Top 25' />
          <alias key='50' value='Top 50' />
          <alias key='100' value='Top 100' />
          <alias key='1000000000' value='All Markets' />
        </aliases>
        <members>
          <member alias='All Markets' value='1000000000' />
          <member alias='Top 10' value='10' />
          <member alias='Top 25' value='25' />
          <member alias='Top 50' value='50' />
          <member alias='Top 100' value='100' />
        </members>
      </column>
      <column caption='Aggregate By' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
        <calculation class='tableau' formula='&quot;Day&quot;' />
        <aliases>
          <alias key='&quot;Week&quot;' value='Week (start day = Monday)' />
        </aliases>
        <members>
          <member value='&quot;Day&quot;' />
          <member alias='Week (start day = Monday)' value='&quot;Week&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='city_coordinates (intent_media_production)' inline='true' name='mysql.42037.770103807874' version='8.2'>
      <connection class='mysql' dbname='intent_media_production' odbc-native-protocol='yes' port='3306' server='production-slave-db-server-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='city_coordinates' table='[city_coordinates]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[city_name]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[country_code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column datatype='integer' name='[id]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' name='[state_code]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <drill-paths>
        <drill-path name='country_code, state_code, city_name'>
          <field>[country_code]</field>
          <field>[state_code]</field>
          <field>[city_name]</field>
        </drill-path>
      </drill-paths>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='Z:\Documents\My Tableau Repository\Datasources\city_coordinates (intent_media_production).tde' schema='Extract' tablename='Extract' update-time='2/24/15 9:59:36 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='59238' timestamp-start='2015-02-24 21:59:36.928000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Count of Hotel City IDs by combo' inline='true' name='vertica.42061.573032291664' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>&#13;&#10;SELECT &#13;&#10;&#9;ac.site_type AS &quot;Publisher Site&quot;,&#13;&#10;&#9;ac.requested_at_date_in_et AS &quot;Date&quot;,&#13;&#10;&#9;replace(split_part(split_part(ac.request_url,&apos;&amp;hotel_city_name=&apos;,2),&apos;&amp;&apos;,1),&apos;%20&apos;,&apos; &apos;) AS &quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;split_part(split_part(ac.request_url,&apos;&amp;hotel_country_code=&apos;,2),&apos;&amp;&apos;,1) AS &quot;Hotel Country Code (Request URL)&quot;,&#13;&#10;&#9;split_part(split_part(ac.request_url,&apos;&amp;hotel_state_code=&apos;,2),&apos;&amp;&apos;,1) AS &quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;count(DISTINCT ac.request_id) AS &quot;Total Ad Calls&quot;,&#13;&#10;&#9;count(DISTINCT ac.hotel_city_id) as &quot;Count of Hotel City ID&quot;&#13;&#10;FROM&#13;&#10;&#9;intent_media_log_data_production.ad_calls ac&#13;&#10;LEFT JOIN &#13;&#10;&#9;intent_media_production.hotel_cities hc&#13;&#10;ON &#13;&#10;&#9;ac.hotel_city_id = hc.id&#13;&#10;WHERE &#13;&#10;&#9;ac.ip_address_blacklisted = 0&#13;&#10;&#9;AND ac.requested_at_date_in_et between &apos;2015-01-22&apos; AND DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;&#9;AND ac.product_category_type = &apos;HOTELS&apos;&#13;&#10;&#9;AND ac.ad_unit_type = &apos;CT&apos;&#13;&#10;&#9;AND ac.hotel_city_id IS NOT NULL&#13;&#10;GROUP BY &#13;&#10;&#9;&quot;Publisher Site&quot;,&#13;&#10;&#9;&quot;Date&quot;,&#13;&#10;&#9;&quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel Country Code (Request URL)&quot;</relation>
      </connection>
      <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State Code (Request URL)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <drill-paths>
        <drill-path name='Hotel Country Code (Request URL), Hotel State Code (Request URL), Hotel City Name (Request URL)'>
          <field>[Hotel Country Code (Request URL)]</field>
          <field>[Hotel State Code (Request URL)]</field>
          <field>[Hotel City Name (Request URL)]</field>
        </drill-path>
      </drill-paths>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='Z:\Documents\My Tableau Repository\Datasources\Count of Hotel City IDs by combo.tde' schema='Extract' tablename='Extract' update-time='2/26/15 6:46:03 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='352848' timestamp-start='2015-02-26 18:46:03.324000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Market Mapping Funnel Metrics' inline='true' name='vertica.42034.577262094906' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>/****&#13;&#10;Queries below for MVT expirement - dashboard query&#13;&#10;****/&#13;&#10;/* All funnel metrics for market mapping split test */&#13;&#10;SELECT &#13;&#10;&#9;CASE &#13;&#10;&#9;&#9;WHEN ifnull(trim(trailing &apos;&quot;&apos; from regexp_substr(ac.multivariate_test_attributes_variable,&apos;&quot;HOTEL_MARKET_MATCHING_TYPE&quot;:&quot;(.*?&quot;)[,}]&apos;, 1, 1, &apos;&apos;, 1)), &apos;Not Found&apos;) = &apos;dynamic_algorithm&apos; THEN &apos;Dynamic Algorithm&apos;&#13;&#10;        WHEN ifnull(trim(trailing &apos;&quot;&apos; from regexp_substr(ac.multivariate_test_attributes_variable,&apos;&quot;HOTEL_MARKET_MATCHING_TYPE&quot;:&quot;(.*?&quot;)[,}]&apos;, 1, 1, &apos;&apos;, 1)), &apos;Not Found&apos;) = &apos;static_mapping&apos; THEN &apos;Static Mapping&apos;&#13;&#10;        END&#13;&#10;&#9;AS &quot;Market Matching Type&quot;,&#13;&#10;&#9;ac.site_type AS &quot;Publisher Site&quot;,&#13;&#10;&#9;ac.requested_at_date_in_et AS &quot;Date&quot;,&#13;&#10;&#9;ac.outcome_type AS &quot;Outcome Type&quot;,&#13;&#10;&#9;ac.hotel_city_id as &quot;Hotel City ID (IM Market)&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;,&#13;&#10;&#9;hc.name AS &quot;Hotel City Name (IM Market)&quot;,&#13;&#10;&#9;uri_percent_decode(regexp_substr(ac.request_url,&apos;hotel_city_name=(.*?)&amp;&apos;,1,1,&apos;&apos;,1)) as &quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;count(DISTINCT ac.request_id) as &quot;Total Ad Calls&quot;,&#13;&#10;&#9;count (DISTINCT CASE WHEN ac.outcome_type = &apos;SERVED&apos; THEN ac.request_id END) as &quot;Served Ad Calls&quot;,&#13;&#10;&#9;count (DISTINCT CASE WHEN (ac.outcome_type = &apos;SERVED&apos; AND ac.hotel_city_id is null) THEN ac.request_id END) as &quot;Long Tail Ad Calls&quot;,&#13;&#10;&#9;count(c.request_id) AS &quot;Clicks&quot;,&#13;&#10;&#9;sum(c.actual_cpc) AS &quot;Revenue&quot;,&#13;&#10;&#9;count(distinct(c.ad_call_request_id)) AS &quot;Interactions&quot;&#13;&#10;FROM&#13;&#10;&#9;intent_media_log_data_production.ad_calls ac&#13;&#10;LEFT join &#13;&#10;&#9;intent_media_production.hotel_cities hc&#13;&#10;on &#13;&#10;&#9;ac.hotel_city_id = hc.id&#13;&#10;LEFT join&#13;&#10;&#9;intent_media_log_data_production.clicks c &#13;&#10;ON &#13;&#10;&#9;c.ad_call_request_id = ac.request_id&#13;&#10;&#9;and c.fraudulent = 0&#13;&#10;&#9;and c.ip_address_blacklisted = 0&#13;&#10;&#9;AND c.requested_at_date_in_et between &apos;2015-01-22&apos; and DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;LEFT JOIN&#13;&#10;&#9;intent_media_production.ad_units au&#13;&#10;ON&#13;&#10;&#9;ac.ad_unit_id = au.id&#13;&#10;&#9;AND au.active = 1&#13;&#10;&#9;AND au.ad_type = &apos;CT&apos;&#13;&#10;WHERE &#13;&#10;&#9;ac.ip_address_blacklisted = 0&#13;&#10;&#9;and ac.requested_at_date_in_et between &apos;2015-01-22&apos; and DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;&#9;and ac.product_category_type = &apos;HOTELS&apos;&#13;&#10;&#9;and ac.ad_unit_type = &apos;CT&apos;&#13;&#10;GROUP BY &#13;&#10;&#9;&quot;Market Matching Type&quot;,&#13;&#10;&#9;&quot;Publisher Site&quot;,&#13;&#10;&#9;&quot;Date&quot;,&#13;&#10;&#9;&quot;Outcome Type&quot;,&#13;&#10;&#9;&quot;Hotel City ID (IM Market)&quot;,&#13;&#10;&#9;&quot;Ad Unit&quot;,&#13;&#10;&#9;&quot;Hotel City Name (IM Market)&quot;,&#13;&#10;&#9;&quot;Hotel City Name (Request URL)&quot;</relation>
        <refresh increment-key='' incremental-updates='false'>
        </refresh>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[% Diff in CTR (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(ZN([Calculation_7320130154009227]) - LOOKUP(ZN([Calculation_7320130154009227]), LAST())) / ABS(LOOKUP(ZN([Calculation_7320130154009227]), LAST()))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]&quot;' value='Clicks' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]&quot;' value='Interactions' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]&quot;' value='Long Tail Ad Calls' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]&quot;' value='Revenue' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]&quot;' value='Served Ad Calls' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;' value='Total Ad Calls' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]&quot;' value='% Served' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_2110203174314876:qk]&quot;' value='Served eCPM' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]&quot;' value='% Long Tail' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]&quot;' value='CPI' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]&quot;' value='Publisher CTR' />
          <alias key='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]&quot;' value='Average CPC' />
          <alias key='&quot;[vertica.42034.577262094906].[usr:\% Diff in CTR (copy):qk]&quot;' value='CTR Delta (Dynamic v. Static)' />
          <alias key='&quot;[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]&quot;' value='CTR Delta (Dynamic vs. Static)' />
          <alias key='&quot;[vertica.42034.577262094906].[usr:Calculation_5990210165800243:qk]&quot;' value='Ad Call Delta (Dynamic vs. Static)' />
        </aliases>
      </column>
      <column caption='Abs % Difference' datatype='real' default-format='p0.00%' name='[Calculation2]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ABS((ZN([Calculation_7320130154009227]) - LOOKUP(ZN([Calculation_7320130154009227]), LAST())) / ABS(LOOKUP(ZN([Calculation_7320130154009227]), LAST())))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Time Display' datatype='datetime' name='[Calculation_0190218150250114]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &apos;Day&apos; THEN [Date]&#13;&#10;elseif [Parameters].[Parameter 3] = &apos;Week&apos; THEN datetrunc(&apos;week&apos;,[Date],&apos;monday&apos;)&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='Calculation1' datatype='integer' name='[Calculation_1960204180402119]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Hotel City Name (IM Market)])' scope-isolation='false' />
      </column>
      <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
      </column>
      <column caption='Zero' datatype='integer' name='[Calculation_3000204141519622]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='0' scope-isolation='false' />
      </column>
      <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='% Diff in CTR' datatype='real' name='[Calculation_4500210163606712]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(ZN([Calculation_7320130154009227]) - LOOKUP(ZN([Calculation_7320130154009227]), LAST())) / ABS(LOOKUP(ZN([Calculation_7320130154009227]), LAST()))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
      </column>
      <column caption='% Diff in Ad Calls (Dynamic vs. Static)' datatype='real' name='[Calculation_5990210165800243]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(ZN(SUM([Total Ad Calls])) - LOOKUP(ZN(SUM([Total Ad Calls])), LAST())) / ABS(LOOKUP(ZN(SUM([Total Ad Calls])), LAST()))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
      </column>
      <column caption='Time Filter' datatype='string' name='[Calculation_7990218143826913]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='If [Parameters].[Parameter 3] = &quot;Daily&quot; and datediff(&apos;day&apos;,[Date],today())&lt;31 then &quot;Show&quot;&#13;&#10;elseif [Parameters].[Parameter 3] = &quot;Weekly&quot; and datediff(&apos;week&apos;,[Date],today(),&apos;monday&apos;)&lt;13 then &quot;Show&quot;&#13;&#10;else &quot;Hide&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Hotel City ID (IM Market)]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <aliases>
          <alias key='%null%' value='Null (Long Tail)' />
        </aliases>
      </column>
      <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='integer' name='[Interactions]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Long Tail Ad Calls]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
        </aliases>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' name='[Publisher CTR (copy) (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
      </column>
      <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Served Ad Calls]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
      <column-instance column='[Clicks]' derivation='Sum' name='[pcdf:sum:Clicks:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Interactions]' derivation='Sum' name='[pcdf:sum:Interactions:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Long Tail Ad Calls]' derivation='Sum' name='[pcdf:sum:Long Tail Ad Calls:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Revenue]' derivation='Sum' name='[pcdf:sum:Revenue:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Served Ad Calls]' derivation='Sum' name='[pcdf:sum:Served Ad Calls:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Total Ad Calls]' derivation='Sum' name='[pcdf:sum:Total Ad Calls:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[pcdf:usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[pcdf:usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[pcdf:usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[pcdf:usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[pcdf:usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[pcdf:usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;Static Mapping&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[% Diff in CTR (copy)]' derivation='User' name='[usr:% Diff in CTR (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation_4500210163606712]' derivation='User' name='[usr:Calculation_4500210163606712:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation_5990210165800243]' derivation='User' name='[usr:Calculation_5990210165800243:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <group name='[Top N Markets by Ad Call]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Total Ad Calls])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Hotel City Name (IM Market)]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='Z:\Documents\My Tableau Repository\Datasources\Custom SQL (intent_media).tde' schema='Extract' tablename='Extract' update-time='3/2/15 11:50:19 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_3000204141519622]' formula='0' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2096560' timestamp-start='2015-03-02 23:50:19.216000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Market Matching Type:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Dynamic Algorithm&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;dynamic_algorithm&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>%null%</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Static Mapping&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;static_mapping&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
          <calculation class='tableau' formula='1000000000' />
          <aliases>
            <alias key='10' value='Top 10' />
            <alias key='25' value='Top 25' />
            <alias key='50' value='Top 50' />
            <alias key='100' value='Top 100' />
            <alias key='1000000000' value='All Markets' />
          </aliases>
          <members>
            <member alias='All Markets' value='1000000000' />
            <member alias='Top 10' value='10' />
            <member alias='Top 25' value='25' />
            <member alias='Top 50' value='50' />
            <member alias='Top 100' value='100' />
          </members>
        </column>
        <column caption='Aggregate By' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
          <calculation class='tableau' formula='&quot;Day&quot;' />
          <aliases>
            <alias key='&quot;Week&quot;' value='Week (start day = Monday)' />
          </aliases>
          <members>
            <member value='&quot;Day&quot;' />
            <member alias='Week (start day = Monday)' value='&quot;Week&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='Static vs Dynamic Ad Calls City ID' inline='true' name='vertica.42060.725742847222' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>&#13;&#10;&#13;&#10;&#13;&#10;SELECT&#13;&#10;t1.*, t2.&quot;Count of Hotel City ID&quot;&#13;&#10;FROM&#13;&#10;(&#13;&#10;SELECT &#13;&#10;&#9;CASE &#13;&#10;&#9;WHEN  ifnull(trim(trailing &apos;&quot;&apos; from regexp_substr(ac.multivariate_test_attributes_variable,&apos;&quot;HOTEL_MARKET_MATCHING_TYPE&quot;:&quot;(.*?&quot;)[,}]&apos;, 1, 1, &apos;&apos;, 1)), &apos;Not Found&apos;) = &apos;dynamic_algorithm&apos; THEN &apos;Dynamic Algorithm&apos;&#13;&#10;        ELSE &apos;Static Mapping&apos;&#13;&#10;        END&#13;&#10;&#9;AS &quot;Market Matching Type&quot;,&#13;&#10;&#9;ac.site_type AS &quot;Publisher Site&quot;,&#13;&#10;&#9;ac.requested_at_date_in_et AS &quot;Date&quot;,&#13;&#10;&#9;ac.hotel_city_id as &quot;Hotel City ID (IM Market)&quot;,&#13;&#10;&#9;hc.name AS &quot;Hotel City Name (IM Market)&quot;,&#13;&#10;&#9;uri_percent_decode(regexp_substr(ac.request_url,&apos;hotel_city_name=(.*?)&amp;&apos;,1,1,&apos;&apos;,1)) AS &quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(ac.request_url,&apos;hotel_state_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(ac.request_url,&apos;hotel_country_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel Country Code (Request URL)&quot;,&#13;&#10;&#9;count(DISTINCT ac.request_id) as &quot;Total Ad Calls&quot;,&#13;&#10;&#9;count (DISTINCT CASE WHEN ac.outcome_type = &apos;SERVED&apos; THEN ac.request_id END) as &quot;Served Ad Calls&quot;,&#13;&#10;&#9;count(c.request_id) AS &quot;Clicks&quot;&#13;&#10;FROM&#13;&#10;&#9;intent_media_log_data_production.ad_calls ac&#13;&#10;LEFT JOIN &#13;&#10;&#9;intent_media_production.hotel_cities hc&#13;&#10;ON &#13;&#10;&#9;ac.hotel_city_id = hc.id&#13;&#10;LEFT join&#13;&#10;&#9;intent_media_log_data_production.clicks c &#13;&#10;ON &#13;&#10;&#9;c.ad_call_request_id = ac.request_id&#13;&#10;&#9;and c.fraudulent = 0&#13;&#10;&#9;and c.ip_address_blacklisted = 0&#13;&#10;&#9;AND c.requested_at_date_in_et between &apos;2015-01-22&apos; and DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;WHERE &#13;&#10;&#9;ac.ip_address_blacklisted = 0&#13;&#10;&#9;AND ac.requested_at_date_in_et between &apos;2015-01-22&apos; AND DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;&#9;AND ac.product_category_type = &apos;HOTELS&apos;&#13;&#10;&#9;AND ac.ad_unit_type = &apos;CT&apos;&#13;&#10;&#9;AND ac.hotel_city_id IS NOT NULL&#13;&#10;GROUP BY &#13;&#10;&#9;&quot;Market Matching Type&quot;,&#13;&#10;&#9;&quot;Publisher Site&quot;,&#13;&#10;&#9;&quot;Date&quot;,&#13;&#10;&#9;&quot;Hotel City ID (IM Market)&quot;,&#13;&#10;&#9;&quot;Hotel City Name (IM Market)&quot;,&#13;&#10;&#9;&quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel Country Code (Request URL)&quot;&#13;&#10;) t1&#13;&#10;LEFT JOIN&#13;&#10;(&#13;&#10;SELECT &#13;&#10;&#9;ac.site_type AS &quot;Publisher Site&quot;,&#13;&#10;&#9;uri_percent_decode(regexp_substr(ac.request_url,&apos;hotel_city_name=(.*?)&amp;&apos;,1,1,&apos;&apos;,1)) AS &quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(request_url,&apos;hotel_state_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(request_url,&apos;hotel_country_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel Country Code (Request URL)&quot;,&#13;&#10;&#9;count(DISTINCT ac.hotel_city_id) as &quot;Count of Hotel City ID&quot;,&#13;&#10;&#9;CASE WHEN count(DISTINCT ac.hotel_city_id) &gt;&gt; 1 THEN &apos;True&apos; ELSE &apos;FALSE&apos; END AS &quot;Multiple Markets&quot;&#13;&#10;FROM&#13;&#10;&#9;intent_media_log_data_production.ad_calls ac&#13;&#10;WHERE &#13;&#10;&#9;ac.ip_address_blacklisted = 0&#13;&#10;&#9;AND ac.requested_at_date_in_et between &apos;2015-01-22&apos; AND DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;&#9;AND ac.product_category_type = &apos;HOTELS&apos;&#13;&#10;&#9;AND ac.ad_unit_type = &apos;CT&apos;&#13;&#10;&#9;AND ac.hotel_city_id IS NOT NULL&#13;&#10;GROUP BY &#13;&#10;&#9;&quot;Publisher Site&quot;,&#13;&#10;&#9;&quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;&quot;Hotel Country Code (Request URL)&quot;&#13;&#10;) t2&#13;&#10;on &#13;&#10;&#9;t1.&quot;Hotel City Name (Request URL)&quot; = t2.&quot;Hotel City Name (Request URL)&quot;&#13;&#10;&#9;AND t1.&quot;Hotel Country Code (Request URL)&quot; = t2.&quot;Hotel Country Code (Request URL)&quot;&#13;&#10;&#9;AND t1.&quot;Hotel State Code (Request URL)&quot; = t2.&quot;Hotel State Code (Request URL)&quot;&#13;&#10;&#9;AND t1.&quot;Publisher Site&quot; = t2.&quot;Publisher Site&quot;</relation>
      </connection>
      <aliases enabled='yes' />
      <column caption='Hotel State Code (Request URL - Upper)' datatype='string' name='[Calculation_0540302181211770]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='UPPER([Hotel State Code (Request URL)])' scope-isolation='false' />
      </column>
      <column caption='Concatenated Name Country State' datatype='string' name='[Calculation_0860226103109649]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
      </column>
      <column caption='Multiple Hotel City IDs' datatype='string' name='[Calculation_1360302172850533]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' scope-isolation='false' />
      </column>
      <column caption='Hotel City Name (Request URL - Upper)' datatype='string' name='[Calculation_2800302172122168]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='UPPER([Hotel City Name (Request URL)])' scope-isolation='false' />
      </column>
      <column caption='Hotel Country Code (Request URL - Upper)' datatype='string' name='[Calculation_3700302181957556]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Upper([Hotel Country Code (Request URL)])' scope-isolation='false' />
      </column>
      <column caption='CTR' datatype='real' name='[Calculation_5190304104926536]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Concatenated Name Country State (copy) (copy)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Concatenated Name Country State (copy)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Hotel City ID (IM Market)]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State Code (Request URL)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Multiple Hotel City IDs (copy)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <calculation class='tableau' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='Z:\Documents\My Tableau Repository\Datasources\Static vs Dynamic Ad Calls City ID.tde' schema='Extract' tablename='Extract' update-time='3/3/15 10:50:40 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_0540302181211770]' formula='UPPER([Hotel State Code (Request URL)])' />
            <calculation column='[Calculation_0860226103109649]' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' />
            <calculation column='[Calculation_1360302172850533]' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' />
            <calculation column='[Calculation_2800302172122168]' formula='UPPER([Hotel City Name (Request URL)])' />
            <calculation column='[Calculation_3700302181957556]' formula='Upper([Hotel Country Code (Request URL)])' />
            <calculation column='[Concatenated Name Country State (copy) (copy)]' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' />
            <calculation column='[Concatenated Name Country State (copy)]' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' />
            <calculation column='[Multiple Hotel City IDs (copy)]' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='589477' timestamp-start='2015-03-03 22:50:40.774000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Unmatched Ad Calls' inline='true' name='vertica.42034.627704525461' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-with-failover.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>SELECT &#13;&#10;&#9;ac.requested_at_date_in_et as &quot;Date&quot;,&#13;&#10;&#9;ac.site_type as &quot;Publisher Site&quot;,&#13;&#10;&#9;uri_percent_decode(regexp_substr(ac.request_url,&apos;hotel_city_name=(.*?)&amp;&apos;,1,1,&apos;&apos;,1)) AS &quot;Hotel City Name (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(ac.request_url,&apos;hotel_state_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel State Code (Request URL)&quot;,&#13;&#10;&#9;regexp_substr(ac.request_url,&apos;hotel_country_code=(.*?)&amp;&apos;,1,1,&apos;&apos;,1) AS &quot;Hotel Country Code (Request URL)&quot;,&#13;&#10;&#9;au.name as &quot;Ad Unit&quot;,&#13;&#10;&#9;count(ac.request_id) as &quot;Ad Calls&quot;&#13;&#10;FROM &#13;&#10;&#9;intent_media_log_data_production.ad_calls ac&#13;&#10;LEFT JOIN&#13;&#10;&#9;intent_media_production.ad_units au&#13;&#10;ON&#13;&#10;&#9;ac.ad_unit_id = au.id&#13;&#10;&#9;AND au.active = 1&#13;&#10;&#9;AND au.ad_type = &apos;CT&apos;&#13;&#10;WHERE &#13;&#10;&#9;ac.requested_at_date_in_et between &apos;2015-01-22&apos; and DATE(CURRENT_TIMESTAMP at timezone &apos;EST&apos;)-INTERVAL &apos;1 DAY&apos; &#13;&#10;&#9;and ac.ip_address_blacklisted = 0&#13;&#10;&#9;and ac.product_category_type = &apos;HOTELS&apos;&#13;&#10;&#9;and ac.ad_unit_type = &apos;CT&apos;&#13;&#10;&#9;and ifnull(trim(trailing &apos;&quot;&apos; from regexp_substr(ac.multivariate_test_attributes_variable,&apos;&quot;HOTEL_MARKET_MATCHING_TYPE&quot;:&quot;(.*?&quot;)[,}]&apos;, 1, 1, &apos;&apos;, 1)), &apos;Not Found&apos;) = &apos;dynamic_algorithm&apos;&#13;&#10;&#9;and ac.hotel_city_id is null&#13;&#10;GROUP BY &quot;Date&quot;, &quot;Publisher Site&quot;, &quot;Hotel City Name (Request URL)&quot;, &quot;Hotel State Code (Request URL)&quot;, &quot;Hotel Country Code (Request URL)&quot;, &quot;Ad Unit&quot;&#13;&#10;ORDER BY &quot;Ad Calls&quot; desc</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[vertica.42034.627704525461].[pcto:cum:sum:Ad Calls (copy):qk]&quot;' value='Cumulative % of Ad Calls' />
        </aliases>
      </column>
      <column datatype='integer' name='[Ad Calls (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Ad Calls]' />
      </column>
      <column caption='concatenated name' datatype='string' name='[Calculation_1910224182001676]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL([Hotel City Name (Request URL)]) THEN &quot;_&quot; ELSE [Hotel City Name (Request URL)] END +&#13;&#10;IF ISNULL([Hotel State Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel State Code (Request URL)] END +&#13;&#10;IF ISNULL([Hotel Country Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel Country Code (Request URL)] END' scope-isolation='false' />
      </column>
      <column caption='In city_coordinates' datatype='string' name='[Calculation_6740210172648666]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL(ATTR([mysql.42037.770103807874].[city_name])) &#13;&#10;THEN &quot;No&quot;&#13;&#10;ELSE &quot;Yes&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Temp in city_coordinates' datatype='string' name='[Calculation_9300204165425142]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF ISNULL(ATTR([mysql.42037.770103807874].[city_name])) &#13;&#10;THEN &quot;No&quot;&#13;&#10;ELSE &quot;Yes&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State Code (Request URL)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Temp in city_coordinates (copy)]' role='measure' semantic-role='[City].[Name]' type='nominal'>
        <calculation class='tableau' formula='ATTR([mysql.42037.770103807874].[city_name])' scope-isolation='false' />
      </column>
      <column-instance column='[Ad Calls (copy)]' derivation='Sum' name='[pcto:cum:sum:Ad Calls (copy):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <drill-paths>
        <drill-path name='Hotel Country (Long Tail), Hotel State (Long Tail), Hotel City Name (Long Tail)'>
        </drill-path>
      </drill-paths>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='Z:\Documents\My Tableau Repository\Datasources\Custom SQL - 2 (intent_media).tde' schema='Extract' tablename='Extract' update-time='3/3/15 5:10:39 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Ad Calls (copy)]' formula='[Ad Calls]' />
            <calculation column='[Calculation_1910224182001676]' formula='IF ISNULL([Hotel City Name (Request URL)]) THEN &quot;_&quot; ELSE [Hotel City Name (Request URL)] END +&#13;&#10;IF ISNULL([Hotel State Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel State Code (Request URL)] END +&#13;&#10;IF ISNULL([Hotel Country Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel Country Code (Request URL)] END' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='77080' timestamp-start='2015-03-03 17:10:39.158000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='mysql.42037.770103807874'>
        <column datatype='string' name='[city_name]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='mysql.42037.770103807874'>
      <column datatype='string' name='[city_name]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[country_code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column-instance column='[city_name]' derivation='None' name='[none:city_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[country_code]' derivation='None' name='[none:country_code:nk]' pivot='key' type='nominal' />
      <column-instance column='[state_code]' derivation='None' name='[none:state_code:nk]' pivot='key' type='nominal' />
      <column datatype='string' name='[state_code]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
    </datasource-dependencies>
    <datasource-dependencies datasource='vertica.42034.627704525461'>
      <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column datatype='string' name='[Hotel State Code (Request URL)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column-instance column='[Hotel City Name (Request URL)]' derivation='None' name='[none:Hotel City Name (Request URL):nk]' pivot='key' type='nominal' />
      <column-instance column='[Hotel Country Code (Request URL)]' derivation='None' name='[none:Hotel Country Code (Request URL):nk]' pivot='key' type='nominal' />
      <column-instance column='[Hotel State Code (Request URL)]' derivation='None' name='[none:Hotel State Code (Request URL):nk]' pivot='key' type='nominal' />
    </datasource-dependencies>
    <datasource-relationship source='mysql.42037.770103807874' target='vertica.42034.577262094906'>
      <column-mapping>
      </column-mapping>
    </datasource-relationship>
    <datasource-relationship source='vertica.42034.627704525461' target='mysql.42037.770103807874'>
      <column-mapping>
        <map key='[vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk]' value='[mysql.42037.770103807874].[none:city_name:nk]' />
        <map key='[vertica.42034.627704525461].[none:Hotel Country Code (Request URL):nk]' value='[mysql.42037.770103807874].[none:country_code:nk]' />
        <map key='[vertica.42034.627704525461].[none:Hotel State Code (Request URL):nk]' value='[mysql.42037.770103807874].[none:state_code:nk]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <shared-views>
    <shared-view name='vertica.42034.577262094906'>
      <datasources>
        <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
      </datasources>
      <datasource-dependencies datasource='vertica.42034.577262094906'>
        <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
        </column>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[vertica.42034.577262094906].[none:Ad Unit:nk]'>
        <groupfilter function='level-members' level='[none:Ad Unit:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[vertica.42034.577262094906].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[vertica.42034.577262094906].[none:Publisher Site:nk]'>
        <groupfilter function='level-members' level='[none:Publisher Site:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='vertica.42060.725742847222'>
      <datasources>
        <datasource caption='Static vs Dynamic Ad Calls City ID' name='vertica.42060.725742847222' />
      </datasources>
      <datasource-dependencies datasource='vertica.42060.725742847222'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <filter class='quantitative' column='[vertica.42060.725742847222].[none:Date:qk]' included-values='in-range'>
        <min>#2015-01-22#</min>
        <max>#2015-03-01#</max>
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='% Dif Funnel Metrics - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run>% Difference (Dynamic relative to Static)</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run bold='true'>Note: </run>
            <run>&quot;Top Markets&quot; Total value is hard coded - may need to increase</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Time Display' datatype='datetime' name='[Calculation_0190218150250114]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &apos;Day&apos; THEN [Date]&#13;&#10;elseif [Parameters].[Parameter 3] = &apos;Week&apos; THEN datetrunc(&apos;week&apos;,[Date],&apos;monday&apos;)&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='integer' name='[Interactions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Long Tail Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Served Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0190218150250114]' derivation='None' name='[none:Calculation_0190218150250114:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[pcdf:sum:Clicks:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Interactions]' derivation='Sum' name='[pcdf:sum:Interactions:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Long Tail Ad Calls]' derivation='Sum' name='[pcdf:sum:Long Tail Ad Calls:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Revenue]' derivation='Sum' name='[pcdf:sum:Revenue:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Served Ad Calls]' derivation='Sum' name='[pcdf:sum:Served Ad Calls:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[pcdf:sum:Total Ad Calls:qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[pcdf:usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[pcdf:usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[pcdf:usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[pcdf:usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[pcdf:usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[pcdf:usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_2110203174314876:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.577262094906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Static Mapping&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[:Measure Names]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='auto' />
            <format attr='text-align' data-class='total' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' data-class='subtotal' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' value='center' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_2110203174314876:qk]' value='p0.0%' />
            <format attr='cell-w' value='80' />
            <format attr='cell-h' value='20' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='94' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='128' />
            <format attr='width' field='[vertica.42034.577262094906].[:Measure Names]' value='124' />
            <format attr='text-align' data-class='total' value='center' />
            <format attr='text-align' data-class='subtotal' value='center' />
            <format attr='height' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='40' />
            <format attr='height' field='[vertica.42034.577262094906].[:Measure Names]' value='26' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.42034.577262094906].[:Measure Names]' value='left' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='center' />
            <format attr='vertical-align' value='center' />
            <format attr='text-align' value='left' />
            <format attr='text-align' scope='cols' value='center' />
            <format attr='text-align' scope='rows' value='left' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]' value='*mm/dd/yy' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' value='Hotel City Name &#10;(IM Market)&#10;(Double check selections)'>
              <formatted-text>
                <run>Hotel City Name &#10;(IM Market)&#10;</run>
                <run bold='false' fontsize='8'>(Double check selections)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42034.577262094906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]</rows>
        <cols>([vertica.42034.577262094906].[:Measure Names] / [vertica.42034.577262094906].[none:Market Matching Type:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='% Diff Funnel Metrics' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run>% Difference (Dynamic relative to Static)</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run bold='true'>Note: </run>
            <run>&quot;Top Markets&quot; Total value is hard coded - may need to increase</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='integer' name='[Interactions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Long Tail Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Served Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[pcdf:sum:Clicks:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Interactions]' derivation='Sum' name='[pcdf:sum:Interactions:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Long Tail Ad Calls]' derivation='Sum' name='[pcdf:sum:Long Tail Ad Calls:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Revenue]' derivation='Sum' name='[pcdf:sum:Revenue:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Served Ad Calls]' derivation='Sum' name='[pcdf:sum:Served Ad Calls:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[pcdf:sum:Total Ad Calls:qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[pcdf:usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[pcdf:usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[pcdf:usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[pcdf:usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[pcdf:usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[pcdf:usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Fixed' ordering-field='[vertica.42034.577262094906].[Market Matching Type]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>&quot;Static Mapping&quot;</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_2110203174314876:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.577262094906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Static Mapping&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[:Measure Names]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='text-align' field='[vertica.42034.577262094906].[none:Date:ok]' value='auto' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='auto' />
            <format attr='text-align' data-class='total' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' data-class='subtotal' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' value='center' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_1120203173641127:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_4020203172415783:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_9350203173916315:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Served Ad Calls:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Long Tail Ad Calls:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Clicks:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Revenue:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:sum:Interactions:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_4680203174100086:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_2110203174314876:qk]' value='p0.0%' />
            <format attr='width' field='[vertica.42034.577262094906].[none:Date:ok]' value='80' />
            <format attr='font-weight' field='[vertica.42034.577262094906].[none:Date:ok]' value='normal' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='128' />
            <format attr='width' field='[vertica.42034.577262094906].[:Measure Names]' value='124' />
            <format attr='text-align' data-class='total' value='center' />
            <format attr='text-align' data-class='subtotal' value='center' />
            <format attr='font-weight' data-class='subtotal' field='[vertica.42034.577262094906].[none:Date:ok]' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[vertica.42034.577262094906].[:Measure Names]' value='left' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='center' />
            <format attr='vertical-align' value='center' />
            <format attr='text-align' value='left' />
            <format attr='text-align' scope='cols' value='center' />
            <format attr='text-align' scope='rows' value='left' />
            <format attr='text-format' field='[vertica.42034.577262094906].[pcdf:usr:Calculation_7320130154009227:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42034.577262094906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.42034.577262094906].[none:Market Matching Type:nk] / [vertica.42034.577262094906].[:Measure Names])</rows>
        <cols total='true'>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='% Long Tail' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>% of Ad Calls to Long Tail</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='% Long Tail - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>% of Ad Calls to Long Tail</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='% Served' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>% of Ad Calls Served</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='% Served - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>% of Ad Calls Served</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Average CPC' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>&lt;</run>
            <run fontalignment='1'>Sheet Name</run>
            <run fontalignment='1'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane id='8'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Average CPC - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Average CPC</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane id='8'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='CPI' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>&lt;</run>
            <run fontalignment='1'>Sheet Name</run>
            <run fontalignment='1'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='10'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='CPI - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>CPI</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='10'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Count of Multiple Hotel City IDs' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run>City, State, Country Combinations Mapping to Multiple IM Markets</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Static vs Dynamic Ad Calls City ID' name='vertica.42060.725742847222' />
          </datasources>
          <datasource-dependencies datasource='vertica.42060.725742847222'>
            <column caption='Concatenated Name Country State' datatype='string' name='[Calculation_0860226103109649]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
            </column>
            <column caption='Multiple Hotel City IDs' datatype='string' name='[Calculation_1360302172850533]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' scope-isolation='false' />
            </column>
            <column caption='Hotel City Name (Request URL - Upper)' datatype='string' name='[Calculation_2800302172122168]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='UPPER([Hotel City Name (Request URL)])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Concatenated Name Country State (copy)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Concatenated Name Country State (copy)]' derivation='CountD' name='[ctd:Concatenated Name Country State (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_0860226103109649]' derivation='None' name='[none:Calculation_0860226103109649:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1360302172850533]' derivation='None' name='[none:Calculation_1360302172850533:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800302172122168]' derivation='None' name='[none:Calculation_2800302172122168:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel Country Code (Request URL)]' derivation='None' name='[none:Hotel Country Code (Request URL):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Calculation_0860226103109649:nk]' />
              <groupfilter function='member' level='[none:Calculation_0860226103109649:nk]' member='&quot;__&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]'>
            <groupfilter function='level-members' level='[none:Calculation_1360302172850533:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='alphabetic' column='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]' direction='ASC' />
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Calculation_2800302172122168:nk]' />
              <groupfilter function='member' level='[none:Calculation_2800302172122168:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Hotel Country Code (Request URL):nk]' />
              <groupfilter function='member' level='[none:Hotel Country Code (Request URL):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Market Matching Type:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Dynamic Algorithm&quot;' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Static Mapping&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]</column>
            <column>[vertica.42060.725742847222].[none:Date:qk]</column>
            <column>[vertica.42060.725742847222].[none:Market Matching Type:nk]</column>
            <column>[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]</column>
            <column>[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]</column>
            <column>[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.42060.725742847222].[none:Market Matching Type:nk]' value='99' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.42060.725742847222].[none:Market Matching Type:nk]' value='32' />
            <format attr='height-header' value='32' />
            <format attr='width' field='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]' value='100' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42060.725742847222].[ctd:Concatenated Name Country State (copy):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]</rows>
        <cols total='true'></cols>
      </table>
    </worksheet>
    <worksheet name='Funnel Metrics' tab-color='#d7e9ff'>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='integer' name='[Interactions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Long Tail Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Served Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Interactions]' derivation='Sum' name='[sum:Interactions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Long Tail Ad Calls]' derivation='Sum' name='[sum:Long Tail Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Ad Calls]' derivation='Sum' name='[sum:Served Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Served Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Long Tail Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Interactions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.577262094906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Served Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Long Tail Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Interactions:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[:Measure Names]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='text-align' field='[vertica.42034.577262094906].[none:Date:ok]' value='auto' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='auto' />
            <format attr='text-align' data-class='total' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' data-class='subtotal' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' value='center' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Served Ad Calls:qk]' value='N' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Revenue:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='128' />
            <format attr='width' field='[vertica.42034.577262094906].[:Measure Names]' value='124' />
            <format attr='text-align' data-class='total' value='center' />
            <format attr='text-align' data-class='subtotal' value='center' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='text-align' field='[vertica.42034.577262094906].[:Measure Names]' value='left' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='center' />
            <format attr='vertical-align' value='center' />
            <format attr='text-align' value='left' />
            <format attr='text-align' scope='cols' value='center' />
            <format attr='text-align' scope='rows' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42034.577262094906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.42034.577262094906].[none:Market Matching Type:nk] / [vertica.42034.577262094906].[:Measure Names])</rows>
        <cols total='true'>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Funnel Metrics - Top Markets' tab-color='#f2e6e6'>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Time Display' datatype='datetime' name='[Calculation_0190218150250114]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 3] = &apos;Day&apos; THEN [Date]&#13;&#10;elseif [Parameters].[Parameter 3] = &apos;Week&apos; THEN datetrunc(&apos;week&apos;,[Date],&apos;monday&apos;)&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='% Served' datatype='real' name='[Calculation_1120203173641127]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Served Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column caption='% Long Tail' datatype='real' name='[Calculation_4020203172415783]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Long Tail Ad Calls])/SUM([Total Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='CPI' datatype='real' name='[Calculation_4680203174100086]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Interactions])' scope-isolation='false' />
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column caption='Average CPC' datatype='real' name='[Calculation_9350203173916315]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Clicks])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='integer' name='[Interactions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Long Tail Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Served Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0190218150250114]' derivation='None' name='[none:Calculation_0190218150250114:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Interactions]' derivation='Sum' name='[sum:Interactions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Long Tail Ad Calls]' derivation='Sum' name='[sum:Long Tail Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Served Ad Calls]' derivation='Sum' name='[sum:Served Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1120203173641127]' derivation='User' name='[usr:Calculation_1120203173641127:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4020203172415783]' derivation='User' name='[usr:Calculation_4020203172415783:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4680203174100086]' derivation='User' name='[usr:Calculation_4680203174100086:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9350203173916315]' derivation='User' name='[usr:Calculation_9350203173916315:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Served Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Long Tail Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Interactions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.577262094906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Served Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Long Tail Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Revenue:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Interactions:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[:Measure Names]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='auto' />
            <format attr='text-align' data-class='total' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' data-class='subtotal' field='[vertica.42034.577262094906].[Multiple Values]' value='auto' />
            <format attr='text-align' value='center' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4020203172415783:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Served Ad Calls:qk]' value='N' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_1120203173641127:qk]' value='p0.0%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4680203174100086:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_9350203173916315:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Revenue:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
            <format attr='cell-w' value='100' />
            <format attr='cell-h' value='20' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='87' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='128' />
            <format attr='width' field='[vertica.42034.577262094906].[:Measure Names]' value='124' />
            <format attr='text-align' data-class='total' value='center' />
            <format attr='text-align' data-class='subtotal' value='center' />
            <format attr='height' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='46' />
            <format attr='height' field='[vertica.42034.577262094906].[:Measure Names]' value='18' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='text-align' field='[vertica.42034.577262094906].[:Measure Names]' value='left' />
            <format attr='vertical-align' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='center' />
            <format attr='vertical-align' value='center' />
            <format attr='text-align' value='left' />
            <format attr='text-align' scope='cols' value='center' />
            <format attr='text-align' scope='rows' value='left' />
            <format attr='text-format' field='[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]' value='*mm/dd/yy' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42034.577262094906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='aspect' value='0' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]</rows>
        <cols>([vertica.42034.577262094906].[:Measure Names] / [vertica.42034.577262094906].[none:Market Matching Type:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Highlight CTR Delta' tab-color='#fff6be'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Highlight CTR Delta &gt;|20%|</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='real' name='[% Diff in CTR (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(ZN([Calculation_7320130154009227]) - LOOKUP(ZN([Calculation_7320130154009227]), LAST())) / ABS(LOOKUP(ZN([Calculation_7320130154009227]), LAST()))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='% Diff in CTR' datatype='real' name='[Calculation_4500210163606712]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(ZN([Calculation_7320130154009227]) - LOOKUP(ZN([Calculation_7320130154009227]), LAST())) / ABS(LOOKUP(ZN([Calculation_7320130154009227]), LAST()))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='% Diff in Ad Calls (Dynamic vs. Static)' datatype='real' name='[Calculation_5990210165800243]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(ZN(SUM([Total Ad Calls])) - LOOKUP(ZN(SUM([Total Ad Calls])), LAST())) / ABS(LOOKUP(ZN(SUM([Total Ad Calls])), LAST()))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Ad Calls]' derivation='None' name='[none:Total Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[% Diff in CTR (copy)]' derivation='User' name='[usr:% Diff in CTR (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_4500210163606712]' derivation='User' name='[usr:Calculation_4500210163606712:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_5990210165800243]' derivation='User' name='[usr:Calculation_5990210165800243:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation_5990210165800243:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[:Measure Names]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[:Measure Names]' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.577262094906].[usr:Calculation2:qk:1]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.577262094906].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:\% Diff in CTR (copy):qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[sum:Total Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.577262094906].[usr:Calculation_5990210165800243:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='computed' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' direction='DESC' using='[vertica.42034.577262094906].[sum:Total Ad Calls:qk]'>
          </sort>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Dynamic Algorithm&quot;' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Static Mapping&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[vertica.42034.577262094906].[none:Total Ad Calls:qk]' included-values='in-range'>
            <min>1</min>
            <max>15252</max>
          </filter>
          <filter class='quantitative' column='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' included-values='all'>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[:Measure Names]</column>
            <column>[vertica.42034.577262094906].[none:Total Ad Calls:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
            <column>[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
            <format attr='width' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='91' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' value='p0.00%' />
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_5990210165800243:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[vertica.42034.577262094906].[none:Market Matching Type:nk]' value='32' />
            <format attr='height' field='[vertica.42034.577262094906].[:Measure Names]' value='32' />
            <format attr='width' field='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' value='100' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' max='0.20000000000000001' min='-0.20000000000000001' num-steps='3' palette='Red-Black-Green 1:1:1' type='interpolated' />
            <encoding attr='color' field='[vertica.42034.577262094906].[usr:% Diff in CTR (copy):qk]' max='0.59999999999999998' min='-0.59999999999999998' num-steps='3' palette='Red-Black-Green 1:1:1' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' value='CTR Delta Filter &#10;(Type in Ranges)'>
              <formatted-text>
                <run>CTR Delta Filter &#10;</run>
                <run bold='false' fontsize='8'>(Type in Ranges)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[usr:% Diff in CTR (copy):qk]' />
              <text column='[vertica.42034.577262094906].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</rows>
        <cols>([vertica.42034.577262094906].[:Measure Names] / [vertica.42034.577262094906].[none:Market Matching Type:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Old vs. New Mapping' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Dynamic vs Static Mapping to IM Markets</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Static vs Dynamic Ad Calls City ID' name='vertica.42060.725742847222' />
          </datasources>
          <datasource-dependencies datasource='vertica.42060.725742847222'>
            <column caption='Hotel State Code (Request URL - Upper)' datatype='string' name='[Calculation_0540302181211770]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='UPPER([Hotel State Code (Request URL)])' scope-isolation='false' />
            </column>
            <column caption='Concatenated Name Country State' datatype='string' name='[Calculation_0860226103109649]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF ISNULL([Calculation_2800302172122168]) THEN &quot;_&quot; ELSE [Calculation_2800302172122168] END +&#13;&#10;IF ISNULL([Calculation_0540302181211770]) THEN &quot;_&quot; ELSE [Calculation_0540302181211770] END +&#13;&#10;IF ISNULL([Calculation_3700302181957556]) THEN &quot;_&quot; ELSE [Calculation_3700302181957556] END' scope-isolation='false' />
            </column>
            <column caption='Multiple Hotel City IDs' datatype='string' name='[Calculation_1360302172850533]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Count of Hotel City ID] &gt; 1 THEN &quot;True&quot; ELSE &quot;False&quot; END' scope-isolation='false' />
            </column>
            <column caption='Hotel City Name (Request URL - Upper)' datatype='string' name='[Calculation_2800302172122168]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='UPPER([Hotel City Name (Request URL)])' scope-isolation='false' />
            </column>
            <column caption='Hotel Country Code (Request URL - Upper)' datatype='string' name='[Calculation_3700302181957556]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='Upper([Hotel Country Code (Request URL)])' scope-isolation='false' />
            </column>
            <column caption='CTR' datatype='real' name='[Calculation_5190304104926536]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[Hotel City ID (IM Market)]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Calculation_0540302181211770]' derivation='None' name='[none:Calculation_0540302181211770:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0860226103109649]' derivation='None' name='[none:Calculation_0860226103109649:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1360302172850533]' derivation='None' name='[none:Calculation_1360302172850533:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800302172122168]' derivation='None' name='[none:Calculation_2800302172122168:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_3700302181957556]' derivation='None' name='[none:Calculation_3700302181957556:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City ID (IM Market)]' derivation='None' name='[none:Hotel City ID (IM Market):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Hotel Country Code (Request URL)]' derivation='None' name='[none:Hotel Country Code (Request URL):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5190304104926536]' derivation='User' name='[usr:Calculation_5190304104926536:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42060.725742847222].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42060.725742847222].[usr:Calculation_5190304104926536:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42060.725742847222].[sum:Total Ad Calls:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Calculation_0860226103109649:nk]' />
              <groupfilter function='member' level='[none:Calculation_0860226103109649:nk]' member='&quot;__&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]' direction='DESC' using='[vertica.42060.725742847222].[sum:Total Ad Calls:qk]'>
          </sort>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]'>
            <groupfilter function='member' level='[none:Calculation_1360302172850533:nk]' member='&quot;True&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Calculation_2800302172122168:nk]' />
              <groupfilter function='member' level='[none:Calculation_2800302172122168:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Hotel Country Code (Request URL):nk]' />
              <groupfilter function='member' level='[none:Hotel Country Code (Request URL):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42060.725742847222].[none:Market Matching Type:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Dynamic Algorithm&quot;' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='&quot;Static Mapping&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]</column>
            <column>[vertica.42060.725742847222].[none:Date:qk]</column>
            <column>[vertica.42060.725742847222].[none:Market Matching Type:nk]</column>
            <column>[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]</column>
            <column>[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]</column>
            <column>[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]</column>
            <column>[vertica.42060.725742847222].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.42060.725742847222].[none:Market Matching Type:nk]' value='99' />
            <format attr='text-format' field='[vertica.42060.725742847222].[usr:Calculation_5190304104926536:qk]' value='p0.00%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42060.725742847222].[none:Hotel City Name (IM Market):nk]' value='160' />
            <format attr='width' field='[vertica.42060.725742847222].[none:Hotel City ID (IM Market):ok]' value='152' />
            <format attr='height' field='[vertica.42060.725742847222].[none:Market Matching Type:nk]' value='32' />
            <format attr='height' field='[vertica.42060.725742847222].[:Measure Names]' value='30' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]' value='false' />
            <format attr='text-format' field='[vertica.42060.725742847222].[usr:Calculation_5190304104926536:qk]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42060.725742847222].[Multiple Values]' />
              <lod column='[vertica.42060.725742847222].[usr:Calculation_5190304104926536:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.42060.725742847222].[none:Calculation_0860226103109649:nk] / ([vertica.42060.725742847222].[none:Calculation_2800302172122168:nk] / ([vertica.42060.725742847222].[none:Calculation_0540302181211770:nk] / ([vertica.42060.725742847222].[none:Calculation_3700302181957556:nk] / ([vertica.42060.725742847222].[none:Hotel City ID (IM Market):ok] / [vertica.42060.725742847222].[none:Hotel City Name (IM Market):nk])))))</rows>
        <cols total='true'>([vertica.42060.725742847222].[none:Market Matching Type:nk] / [vertica.42060.725742847222].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Publisher CTR' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Publisher CTR</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Publisher CTR- Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Publisher CTR</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Publisher CTR' datatype='real' name='[Calculation_7320130154009227]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Clicks])/SUM([Served Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320130154009227]' derivation='User' name='[usr:Calculation_7320130154009227:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Revenue' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>&lt;</run>
            <run fontalignment='1'>Sheet Name</run>
            <run fontalignment='1'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Revenue:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[sum:Revenue:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Revenue - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Revenue</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Revenue]' derivation='Sum' name='[sum:Revenue:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[sum:Revenue:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[sum:Revenue:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Served eCPM' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>&lt;</run>
            <run fontalignment='1'>Sheet Name</run>
            <run fontalignment='1'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane id='6'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Served eCPM - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Served eCPM</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='Served eCPM' datatype='real' name='[Calculation_2110203174314876]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Revenue])/SUM([Served Ad Calls])*1000' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2110203174314876]' derivation='User' name='[usr:Calculation_2110203174314876:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]' value='C1033%' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' value='Hotel City Name &#10;(IM Market)&#10;(Double check selections)'>
              <formatted-text>
                <run>Hotel City Name &#10;(IM Market)&#10;</run>
                <run bold='false' fontsize='8'>(Double check selections)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='6'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[usr:Calculation_2110203174314876:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 26'>
      <table>
        <view>
          <datasources>
            <datasource caption='city_coordinates (intent_media_production)' name='mysql.42037.770103807874' />
          </datasources>
          <datasource-dependencies datasource='mysql.42037.770103807874'>
            <column datatype='string' name='[city_name]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[country_code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column datatype='integer' name='[id]' role='dimension' type='ordinal'>
            </column>
            <column-instance column='[city_name]' derivation='None' name='[none:city_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country_code]' derivation='None' name='[none:country_code:nk]' pivot='key' type='nominal' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[state_code]' derivation='None' name='[none:state_code:nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[state_code]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([mysql.42037.770103807874].[none:country_code:nk] / ([mysql.42037.770103807874].[none:state_code:nk] / ([mysql.42037.770103807874].[none:city_name:nk] / [mysql.42037.770103807874].[none:id:ok])))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Total Ad Calls' tab-color='#d7e9ff'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>&lt;</run>
            <run fontalignment='1'>Sheet Name</run>
            <run fontalignment='1'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='6'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[sum:Total Ad Calls:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Total Ad Calls - Top Markets' tab-color='#f2e6e6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Total Ad Calls</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Market Mapping Funnel Metrics' name='vertica.42034.577262094906' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='All Markets' caption='Top Markets by Ad Call' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='1000000000'>
              <calculation class='tableau' formula='1000000000' />
              <aliases>
                <alias key='10' value='Top 10' />
                <alias key='25' value='Top 25' />
                <alias key='50' value='Top 50' />
                <alias key='100' value='Top 100' />
                <alias key='1000000000' value='All Markets' />
              </aliases>
              <members>
                <member alias='All Markets' value='1000000000' />
                <member alias='Top 10' value='10' />
                <member alias='Top 25' value='25' />
                <member alias='Top 50' value='50' />
                <member alias='Top 100' value='100' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='vertica.42034.577262094906'>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (IM Market)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <aliases>
                <alias key='%null%' value='Null (Long Tail)' />
              </aliases>
            </column>
            <column datatype='string' name='[Market Matching Type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Dynamic Algorithm&quot;' value='Dynamic Algorithm' />
              </aliases>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Total Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (IM Market)]' derivation='None' name='[none:Hotel City Name (IM Market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Market Matching Type]' derivation='None' name='[none:Market Matching Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Ad Calls]' derivation='Sum' name='[sum:Total Ad Calls:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.577262094906].[Top N Markets by Ad Call]' filter-group='7' />
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Hotel City Name (IM Market):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' context='true' filter-group='3'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Market Matching Type:nk]' />
              <groupfilter function='member' level='[none:Market Matching Type:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[vertica.42034.577262094906].[none:Market Matching Type:nk]</column>
            <column>[vertica.42034.577262094906].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.577262094906].[none:Date:qk]</column>
            <column>[vertica.42034.577262094906].[Top N Markets by Ad Call]</column>
            <column>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</column>
            <column>[vertica.42034.577262094906].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[vertica.42034.577262094906].[none:Market Matching Type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[vertica.42034.577262094906].[sum:Total Ad Calls:qk]</rows>
        <cols>[vertica.42034.577262094906].[none:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Unmatched Ad Calls - Table' tab-color='#d6f2f8'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='14'>Unmatched Ad Calls</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Unmatched Ad Calls' name='vertica.42034.627704525461' />
            <datasource caption='city_coordinates (intent_media_production)' name='mysql.42037.770103807874' />
          </datasources>
          <datasource-dependencies datasource='vertica.42034.627704525461'>
            <column datatype='integer' name='[Ad Calls (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Ad Calls]' />
            </column>
            <column datatype='integer' name='[Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Ad Unit]' role='dimension' type='nominal'>
            </column>
            <column caption='concatenated name' datatype='string' name='[Calculation_1910224182001676]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF ISNULL([Hotel City Name (Request URL)]) THEN &quot;_&quot; ELSE [Hotel City Name (Request URL)] END +&#13;&#10;IF ISNULL([Hotel State Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel State Code (Request URL)] END +&#13;&#10;IF ISNULL([Hotel Country Code (Request URL)]) THEN &quot;_&quot; ELSE [Hotel Country Code (Request URL)] END' scope-isolation='false' />
            </column>
            <column caption='In city_coordinates' datatype='string' name='[Calculation_6740210172648666]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF ISNULL(ATTR([mysql.42037.770103807874].[city_name])) &#13;&#10;THEN &quot;No&quot;&#13;&#10;ELSE &quot;Yes&quot;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Hotel City Name (Request URL)]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Hotel Country Code (Request URL)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column datatype='string' name='[Hotel State Code (Request URL)]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Publisher Site]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Ad Unit]' derivation='None' name='[none:Ad Unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1910224182001676]' derivation='None' name='[none:Calculation_1910224182001676:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hotel City Name (Request URL)]' derivation='None' name='[none:Hotel City Name (Request URL):nk]' pivot='key' type='nominal' />
            <column-instance column='[Hotel Country Code (Request URL)]' derivation='None' name='[none:Hotel Country Code (Request URL):nk]' pivot='key' type='nominal' />
            <column-instance column='[Hotel State Code (Request URL)]' derivation='None' name='[none:Hotel State Code (Request URL):nk]' pivot='key' type='nominal' />
            <column-instance column='[Publisher Site]' derivation='None' name='[none:Publisher Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ad Calls (copy)]' derivation='Sum' name='[pcto:cum:sum:Ad Calls (copy):qk]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='Columns' type='CumTotal' />
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[Ad Calls (copy)]' derivation='Sum' name='[pcto:sum:Ad Calls (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[Ad Calls]' derivation='Sum' name='[sum:Ad Calls:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6740210172648666]' derivation='User' name='[usr:Calculation_6740210172648666:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[vertica.42034.627704525461].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.627704525461].[sum:Ad Calls:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[vertica.42034.627704525461].[pcto:cum:sum:Ad Calls (copy):qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[vertica.42034.627704525461].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[vertica.42034.627704525461].[sum:Ad Calls:qk]&quot;</bucket>
              <bucket>&quot;[vertica.42034.627704525461].[pcto:sum:Ad Calls (copy):qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[vertica.42034.627704525461].[none:Ad Unit:nk]'>
            <groupfilter function='level-members' level='[none:Ad Unit:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[vertica.42034.627704525461].[none:Calculation_1910224182001676:nk]' direction='DESC' using='[vertica.42034.627704525461].[sum:Ad Calls:qk]'>
          </sort>
          <filter class='quantitative' column='[vertica.42034.627704525461].[none:Date:qk]' included-values='in-range'>
            <min>#2015-01-22#</min>
            <max>#2015-03-01#</max>
          </filter>
          <filter class='categorical' column='[vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Hotel City Name (Request URL):nk]' />
              <groupfilter function='member' level='[none:Hotel City Name (Request URL):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[vertica.42034.627704525461].[none:Publisher Site:nk]'>
            <groupfilter function='level-members' level='[none:Publisher Site:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[vertica.42034.627704525461].[none:Publisher Site:nk]</column>
            <column>[vertica.42034.627704525461].[none:Date:qk]</column>
            <column>[vertica.42034.627704525461].[:Measure Names]</column>
            <column>[vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk]</column>
            <column>[vertica.42034.627704525461].[none:Ad Unit:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[vertica.42034.627704525461].[:Measure Names]' value='180' />
            <format attr='text-align' data-class='total' scope='rows' value='auto' />
            <format attr='text-align' data-class='subtotal' value='auto' />
            <format attr='text-format' field='[vertica.42034.627704525461].[sum:Ad Calls:qk]' value='N' />
            <format attr='text-format' field='[vertica.42034.627704525461].[pcto:cum:sum:Ad Calls (copy):qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[vertica.42034.627704525461].[none:Hotel Country Code (Request URL):nk]' value='152' />
            <format attr='width' field='[vertica.42034.627704525461].[none:Hotel State Code (Request URL):nk]' value='124' />
            <format attr='width' field='[vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk]' value='240' />
            <format attr='height' field='[vertica.42034.627704525461].[:Measure Names]' value='16' />
            <format attr='width' field='[vertica.42034.627704525461].[usr:Calculation_6740210172648666:nk]' value='108' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[vertica.42034.627704525461].[none:Calculation_1910224182001676:nk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[vertica.42034.627704525461].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([vertica.42034.627704525461].[none:Calculation_1910224182001676:nk] / ([vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk] / ([vertica.42034.627704525461].[none:Hotel State Code (Request URL):nk] / ([vertica.42034.627704525461].[none:Hotel Country Code (Request URL):nk] / [vertica.42034.627704525461].[usr:Calculation_6740210172648666:nk]))))</rows>
        <cols>[vertica.42034.627704525461].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='CTR Delta Exceptions' tab-color='#fff6be'>
      <style>
      </style>
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' />
      <zones>
        <zone h='100000' id='17' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='18' type='layout-basic' w='86667' x='0' y='0'>
              <zone h='100000' id='16' name='Highlight CTR Delta' show-title='true' w='86667' x='0' y='0'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='19' is-fixed='true' param='vert' type='layout-flow' w='13333' x='86667' y='0'>
              <zone h='7000' id='21' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Date:qk]' type='filter' w='13333' x='86667' y='0'>
              </zone>
              <zone h='5200' id='22' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' w='13333' x='86667' y='7000'>
              </zone>
              <zone h='5200' id='23' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' w='13333' x='86667' y='12200'>
              </zone>
              <zone h='7900' id='24' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' type='filter' w='13333' x='86667' y='17400'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Dynamic vs Static Mapping to IM Markets' tab-color='#d7e9ff'>
      <style>
      </style>
      <size maxheight='1000' maxwidth='1400' minheight='1000' minwidth='1400' />
      <zones>
        <zone h='100000' id='17' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='20' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='18' type='layout-basic' w='88571' x='0' y='0'>
              <zone h='100000' id='16' name='Old vs. New Mapping' show-title='true' w='73429' x='0' y='0'>
              </zone>
              <zone h='100000' id='23' name='Count of Multiple Hotel City IDs' show-title='true' w='15142' x='73429' y='0'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='19' is-fixed='true' param='vert' type='layout-flow' w='11429' x='88571' y='0'>
              <zone h='7000' id='21' name='Old vs. New Mapping' param='[vertica.42060.725742847222].[none:Date:qk]' type='filter' w='11429' x='88571' y='0'>
              </zone>
              <zone h='8300' id='22' name='Old vs. New Mapping' param='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]' type='filter' w='11429' x='88571' y='7000'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Funnel Metric Charts' tab-color='#f2e6e6'>
      <style>
      </style>
      <size maxheight='2000' maxwidth='1600' minheight='2000' minwidth='1600' />
      <zones>
        <zone h='100000' id='12' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97750' id='17' param='horz' type='layout-flow' w='100000' x='0' y='2250'>
            <zone h='97750' id='15' type='layout-basic' w='90000' x='0' y='2250'>
              <zone h='97750' id='11' param='vert' type='layout-flow' w='45000' x='0' y='2250'>
                <zone h='24387' id='30' name='Total Ad Calls - Top Markets' show-title='true' w='45000' x='0' y='2250'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='34' name='% Long Tail - Top Markets' show-title='true' w='45000' x='0' y='26637'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='37' name='Revenue - Top Markets' show-title='true' w='45000' x='0' y='51024'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='39' name='CPI - Top Markets' show-title='true' w='45000' x='0' y='75411'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
              </zone>
              <zone h='97750' id='13' param='vert' type='layout-flow' w='45000' x='45000' y='2250'>
                <zone h='24387' id='32' name='% Served - Top Markets' show-title='true' w='45000' x='45000' y='2250'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='36' name='Publisher CTR- Top Markets' show-title='true' w='45000' x='45000' y='26637'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='38' name='Average CPC - Top Markets' show-title='true' w='45000' x='45000' y='51024'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
                <zone h='24387' id='42' name='Served eCPM - Top Markets' show-title='true' w='45000' x='45000' y='75411'>
                  <layout-cache minheight='187' type-h='scalable' type-w='fixed' />
                </zone>
              </zone>
            </zone>
            <zone fixed-size='160' h='97750' id='16' is-fixed='true' param='vert' type='layout-flow' w='10000' x='90000' y='2250'>
              <zone h='3300' id='20' name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Date:qk]' type='filter' w='10000' x='90000' y='2250'>
              </zone>
              <zone h='2600' id='19' name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' w='10000' x='90000' y='5550'>
              </zone>
              <zone h='5900' id='31' param='[Parameters].[Parameter 1]' type='paramctrl' w='10000' x='90000' y='8150'>
              </zone>
              <zone h='2600' id='41' name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' w='10000' x='90000' y='14050'>
              </zone>
              <zone h='2600' id='43' name='Served eCPM - Top Markets' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' w='10000' x='90000' y='16650'>
              </zone>
              <zone h='3150' id='33' name='% Served - Top Markets' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' w='10000' x='90000' y='19250'>
              </zone>
            </zone>
          </zone>
          <zone h='2250' id='29' type='text' w='100000' x='0' y='0'>
            <formatted-text>
              <run bold='true' fontname='Trebuchet MS' fontsize='14'>Market Mapping Test Key Funnel Metrics - Top Markets&#10;</run>
            </formatted-text>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Funnel Metric Data' tab-color='#f2e6e6'>
      <style>
      </style>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='22' name='Funnel Metrics - Top Markets' show-title='true' w='46629' x='0' y='0'>
              <layout-cache fixed-size-w='2170' type-h='fixed' type-w='fixed' />
            </zone>
            <zone h='100000' id='16' param='horz' type='layout-flow' w='46456' x='46629' y='0'>
              <zone h='100000' id='21' name='% Dif Funnel Metrics - Top Markets' show-title='true' w='46456' x='46629' y='0'>
                <layout-cache fixed-size-w='1210' type-h='fixed' type-w='fixed' />
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='6915' x='93085' y='0'>
              <zone h='5757' id='18' name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Date:qk]' type='filter' w='6915' x='93085' y='0'>
              </zone>
              <zone h='4194' id='15' param='[Parameters].[Parameter 3]' type='paramctrl' w='6915' x='93085' y='5757'>
                <formatted-text>
                  <run>Aggregate By</run>
                </formatted-text>
              </zone>
              <zone h='4276' id='19' name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' w='6915' x='93085' y='9951'>
              </zone>
              <zone h='9704' id='10' param='[Parameters].[Parameter 1]' type='paramctrl' w='6915' x='93085' y='14227'>
              </zone>
              <zone h='6497' id='20' name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' w='6915' x='93085' y='23931'>
              </zone>
              <zone h='4276' id='23' name='Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' w='6915' x='93085' y='30428'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Unmatched Ad Calls' tab-color='#d6f2f8'>
      <style>
      </style>
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' />
      <zones>
        <zone h='100000' id='9' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='12' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='10' type='layout-basic' w='86667' x='0' y='0'>
              <zone h='100000' id='8' name='Unmatched Ad Calls - Table' show-title='true' w='86667' x='0' y='0'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='11' is-fixed='true' param='vert' type='layout-flow' w='13333' x='86667' y='0'>
              <zone h='7000' id='14' name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Date:qk]' type='filter' w='13333' x='86667' y='0'>
              </zone>
              <zone h='5200' id='13' name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Publisher Site:nk]' type='filter' w='13333' x='86667' y='7000'>
              </zone>
              <zone h='5200' id='15' name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Ad Unit:nk]' type='filter' w='13333' x='86667' y='12200'>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Ad Calls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Served'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Long Tail'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Publisher CTR'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
        <node-selection select-tuples='false'>
          <oriented-node-reference orientation='vertical'>
            <node-reference>
              <axis>[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]</axis>
            </node-reference>
            <page-reference>
            </page-reference>
          </oriented-node-reference>
        </node-selection>
      </selection-collection>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Revenue'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average CPC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='8' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='10' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Served eCPM'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='6' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[none:Ad calls:qk]</field>
          <field>[vertica.42034.577262094906].[none:Date:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Funnel Metrics'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='146'>
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Diff Funnel Metrics'>
      <cards>
        <edge name='left'>
          <strip size='230'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Total Ad Calls - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Served - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Long Tail - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Publisher CTR- Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
        <node-selection select-tuples='false'>
          <oriented-node-reference orientation='vertical'>
            <node-reference>
              <axis>[vertica.42034.577262094906].[usr:Calculation_7320130154009227:qk]</axis>
            </node-reference>
            <page-reference>
            </page-reference>
          </oriented-node-reference>
        </node-selection>
      </selection-collection>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Revenue - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average CPC - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='8' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPI - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='10' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Served eCPM - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='6' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Funnel Metrics - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='146'>
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Ad Unit:nk]</field>
          <field>[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]</field>
          <field>[vertica.42034.577262094906].[none:Calculation_7990218143826913:nk]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Calculation_0190218150250114:ok]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='% Dif Funnel Metrics - Top Markets'>
      <cards>
        <edge name='left'>
          <strip size='230'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[Top N Markets by Ad Call]</field>
          <field>[vertica.42034.577262094906].[none:Calculation_0190218150250114:ok]</field>
          <field>[vertica.42034.577262094906].[none:Date:qk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name:nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[yr:Calculation_0190218150250114:ok]</field>
          <field>[vertica.42034.577262094906].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
        <node-selection select-tuples='false'>
          <oriented-node-reference orientation='horizontal'>
            <node-reference>
              <fields>
                <field>[vertica.42034.577262094906].[:Measure Names]</field>
                <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
              </fields>
              <multibucket>
                <bucket>&quot;[vertica.42034.577262094906].[pcdf:sum:Total Ad Calls:qk:2]&quot;</bucket>
                <bucket>&quot;Dynamic Algorithm&quot;</bucket>
              </multibucket>
            </node-reference>
            <page-reference>
            </page-reference>
          </oriented-node-reference>
        </node-selection>
      </selection-collection>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Unmatched Ad Calls - Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[vertica.42034.627704525461].[none:Publisher Site:nk]' type='filter' values='relevant' />
            <card param='[vertica.42034.627704525461].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.627704525461].[none:Ad Unit:nk]' type='filter' values='relevant' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.627704525461].[:Measure Names]</field>
          <field>[vertica.42034.627704525461].[none:Ad Unit:nk]</field>
          <field>[vertica.42034.627704525461].[none:Calculation_1800130154906067:nk]</field>
          <field>[vertica.42034.627704525461].[none:Calculation_1910224182001676:nk]</field>
          <field>[vertica.42034.627704525461].[none:Date:qk]</field>
          <field>[vertica.42034.627704525461].[none:Hotel City Name (Long Tail):nk]</field>
          <field>[vertica.42034.627704525461].[none:Hotel City Name (Request URL):nk]</field>
          <field>[vertica.42034.627704525461].[none:Hotel Country (Long Tail):nk]</field>
          <field>[vertica.42034.627704525461].[none:Hotel State (Long Tail):nk]</field>
          <field>[vertica.42034.627704525461].[none:Publisher Site:nk]</field>
          <field>[vertica.42034.627704525461].[usr:Calculation_6740210172648666:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Highlight CTR Delta'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
            <card pane-specification-id='0' param='[vertica.42034.577262094906].[usr:% Diff in CTR (copy):qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
            <card mode='checkdropdown' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
            <card param='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42034.577262094906].[:Measure Names]</field>
          <field>[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42034.577262094906].[none:Market Matching Type:nk]</field>
          <field>[vertica.42034.577262094906].[none:Total Ad Calls:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Old vs. New Mapping'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.42060.725742847222].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42060.725742847222].[:Measure Names]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_0540302181211770:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_3700302181957556:nk]</field>
          <field>[vertica.42060.725742847222].[none:Count of Hotel City ID:qk]</field>
          <field>[vertica.42060.725742847222].[none:Date:qk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City ID (IM Market):ok]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City Name (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel State Code (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Market Matching Type:nk]</field>
          <field>[vertica.42060.725742847222].[yr:Date:ok]</field>
          <field>[vertica.42061.573032291664].[none:Date:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Count of Multiple Hotel City IDs'>
      <cards>
        <edge name='left'>
          <strip size='287'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[vertica.42060.725742847222].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card param='[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[vertica.42060.725742847222].[:Measure Names]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_0540302181211770:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_0860226103109649:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_1360302172850533:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_2800302172122168:nk]</field>
          <field>[vertica.42060.725742847222].[none:Calculation_3700302181957556:nk]</field>
          <field>[vertica.42060.725742847222].[none:Count of Hotel City ID:qk]</field>
          <field>[vertica.42060.725742847222].[none:Date:qk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City ID (IM Market):ok]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City Name (IM Market):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel City Name (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel Country Code (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Hotel State Code (Request URL):nk]</field>
          <field>[vertica.42060.725742847222].[none:Market Matching Type:nk]</field>
          <field>[vertica.42060.725742847222].[yr:Date:ok]</field>
          <field>[vertica.42061.573032291664].[none:Date:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 26'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[mysql.42037.770103807874].[none:city_name:nk]</field>
          <field>[mysql.42037.770103807874].[none:country_code:nk]</field>
          <field>[mysql.42037.770103807874].[none:state_code:nk]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
        <node-selection select-tuples='false'>
          <oriented-node-reference orientation='vertical'>
            <node-reference>
              <fields>
                <field>[mysql.42037.770103807874].[none:country_code:nk]</field>
                <field>[mysql.42037.770103807874].[none:state_code:nk]</field>
                <field>[mysql.42037.770103807874].[none:city_name:nk]</field>
              </fields>
              <multibucket>
                <bucket>&quot;TR&quot;</bucket>
                <bucket>%null%</bucket>
                <bucket>&quot;EDIRNE&quot;</bucket>
              </multibucket>
            </node-reference>
            <page-reference>
            </page-reference>
          </oriented-node-reference>
        </node-selection>
      </selection-collection>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Funnel Metric Charts'>
      <active id='43' />
      <zones>
        <zone name='Total Ad Calls - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='% Long Tail - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Revenue - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPI - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='% Served - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Publisher CTR- Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Average CPC - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Served eCPM - Top Markets'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='checkdropdown' name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
        <zone mode='list' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='checkdropdown' name='% Long Tail - Top Markets' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' values='context' />
        <zone mode='checkdropdown' name='Served eCPM - Top Markets' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
        <zone name='% Served - Top Markets' pane-specification-id='4' param='[vertica.42034.577262094906].[none:Market Matching Type:nk]' type='color' />
        <zone forceUpdate='true' name='' type='text' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Funnel Metric Data'>
      <active id='19' />
      <zones>
        <zone name='Funnel Metrics - Top Markets'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='% Dif Funnel Metrics - Top Markets'>
          <viewpoint>
            <zoom type='fit-height' />
          </viewpoint>
        </zone>
        <zone name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='checkdropdown' name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
        <zone mode='list' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone mode='checkdropdown' name='% Dif Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Hotel City Name (IM Market):nk]' type='filter' />
        <zone mode='checkdropdown' name='Funnel Metrics - Top Markets' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Unmatched Ad Calls'>
      <active id='8' />
      <zones>
        <zone name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='checkdropdown' name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Publisher Site:nk]' type='filter' values='relevant' />
        <zone mode='checkdropdown' name='Unmatched Ad Calls - Table' param='[vertica.42034.627704525461].[none:Ad Unit:nk]' type='filter' values='relevant' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='CTR Delta Exceptions'>
      <active id='16' />
      <zones>
        <zone name='Highlight CTR Delta'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone mode='checkdropdown' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Publisher Site:nk]' type='filter' values='context' />
        <zone mode='checkdropdown' name='Highlight CTR Delta' param='[vertica.42034.577262094906].[none:Ad Unit:nk]' type='filter' values='context' />
        <zone name='Highlight CTR Delta' param='[vertica.42034.577262094906].[usr:Calculation_4500210163606712:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Dynamic vs Static Mapping to IM Markets'>
      <active id='23' />
      <zones>
        <zone name='Old vs. New Mapping'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Count of Multiple Hotel City IDs'>
          <viewpoint>
            <zoom type='fit-width' />
          </viewpoint>
        </zone>
        <zone name='Old vs. New Mapping' param='[vertica.42060.725742847222].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Total Ad Calls' width='192'>
      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
      TALEHZ0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='% Served' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='% Long Tail' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Publisher CTR' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Revenue' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAfs0lEQVR4nO2dd2BUVb7H77n3Tu8zmZn0hDQghBAIhKKISJUm
      og+xoIi69odtcXfVxbI+BVzbPhfFCoq6uzYQpLiwgIIJLZR0kkmfZDJ9JtPu3HvP+yO8EGAy
      mclMkgHO5y9yy8mPzHdO+ZVzAIQQQyD6Cz7UBiAub5CAEBGBBHSl4TS1Hjtx0uLwQJaxtBkG
      eopCDmjriMGn02KIS84uPfzvJrOTMLbKcycsmn39wP06JKArDbEqXt+ky8zJk7vcMjabEsYN
      6K8D4XZxaNWG6EmgHgiyvx48EBefaHe687MSfy2t0yg4NM3avfikwjyvx8Pn8wfdTkSMEkBA
      EMM4HNzl8igUSrfTQvlohw/YmnQcZQYpEPAhFAqFg28oIjYJNIRB2NSg4/AEboqWCPk0wwq5
      OMEXdzo6ExI0brcbCQjRTdhzICQgRE+QHwgREUhAiIhAAkJEBBIQIiKQgBARgQSEiAgkIERE
      IAEhIiJQKINl6nQNqamJXgojWI/DizFep1Qm8dC4ViUffBNjAcgwGI4DAIbakJgjgIAYn7O6
      ugYwLjujID36ZoNFLgSNFiwrNU4qHOX3+wffyiGnZdWq+Oef58THD7UhMUegIQwnhXyORKUV
      8zCxTJWckkqS/OEZiQKxTCAQcDicQTdyiIEM4z112vLpZ0NtSCwSoAcieeLpM2ZiGKZW0gyL
      k+TVPk+iGhrE06Z5Kytpi4VUKofanNgimDgATiL1YBjmrazcy02U3Xmn9fMvhtqWmAPpo288
      lVXrbcqyYQWuIyWM0znU5sQWSEB9U91iGZ6T8l2pXrF0qfXrfwy1ObEFElAfQJY9aqTunJTW
      5vDiM2Z37tvHejxDbVQMgQTUB/7W1lKuelKG6sa8+F1VJtmihbbvvh9qo2IIJKA+8FTXuIfn
      aSS8hfmJP55uk918s2P7dkhRQ21XrIAE1AdVLdbcEakAALmQI+aRrW5WMnOGfcdPQ21XrIAE
      1AdHOryTMlQYhgEAbh6b+H1pq3zpUtu330CGGWrTYgIkoGBACI8a/RMzzjkPp+VoDtYYgVgs
      mjjR+e9/D61tMQISUDAoo8mlTlCLeV0/cggwOll2otGquPNO65dfQZYdWvNigUDBVMp15HhZ
      5rBkCoi4tL3DSbFuq0CqxAhe9rCUwTdxCKlsteVmJXYH4QEAS8Ylf1XSVHhzHj8313XokHjq
      1KG1cMgJ3AN53Q6fz200O43GjvbWZlen7cipszazwePxXFXR+CNt7onpF2Sw5CVK64ydXj+r
      vPtuy+bP0U4BAQUERBK5Uh0fryD5IlV6RpYqLvH6yfmahJSrLRp/tMVRlCLteQUAMGOkZm+l
      gYzXcpKSPMePD5VtMUKAIYzgCouKJmAYJhJKBt2eGIJmWEuHNU4lvej6ojFJL2wtWzAmUbVi
      heGN9YLCwqs50QxNonulQm/PUXAvFYdWysMwzODwctJSCZHYW1ExFNbFCkhAvVJSby3S8C8V
      EABgYX7itlN6AIDy3nstn36KXcUzISSgXjmiM43XBt4JaWauZm+lAULIG54Dadqn0w2ybbED
      ElBg/AxrPFOhyUwNeFfAIYbFicv1DgCAcsWKqznbFQkoMBV6R4bbxNVqAt4FACwZm/R9aSuG
      YYL8fNpsplpaBtfAWAEJKDAl9eYJChwjiN4eGJemKGu1+2gW4Lhy+XLLps2DaV7sgAQUmCO1
      pkKtIMj6nMDBlEzVL2eNGIYJJxZR9TraaBxEA2MFJKAAUDRrLqvQZAWeAHWzeGzSD6WtGIYB
      glDcfrvliy2DYl1sgQQUgHK9Pa2lWjByZPDHUpRCl482u3wYhomnTfOcOsXYbINiYAwRQEAQ
      QpfLBSFL0wzl9XS63B6Pm/b7fdTVEgUrqbcUUCZucnLwx3AA5uYl7DzTjmEYIEn5LUus//jn
      oBgYQwQQEOOxbtu+u6G27HSN3ufpPHHixOH9e7bt3n+89BTDMOxVkMNwVGcepySxEKJ+c0fF
      7y5v7wqpSmbPdh06xHR2DryBMUSgIYzgyoU4R6QgMNrjcgzLyQM4LhHxcZLDMMwVH3/2+Rlb
      Ta06MzWUCJdUQKolvNqOTgzDcB5POn+e/furLOUeBsLv90MIGdrn8fovuuVyuQK+csVwvMHy
      zAOvWb/5NsTnD1R3rNtV1fVvxuVqWL6c8XgGzLqYI/AkmiRJDMNwgsvnXXWnsZTUm/Nden5u
      HzPobiZlqI41WPwMi2EYLhSKp0937NgxkAbGFmgVdjHHGqz5rI07bFiIz3NJfFyqokRn6fpR
      fssttu9/uHqKD5GALsDrZzwen4xHAB4v9LcWj0364WRr178JqVR+yxLj/74Hr/TJYhdIQBdQ
      prdnUVZeWkgz6G6yNWKDw+vwnHNzyBYtojs63MXFA2NjbIEEdAElOksBZeSPGBHWWzgOZo7U
      /lxh6PoREIT22dWmDRuuBr8iEtAFHG+0jnK18fryQV/KvNEJO860dQ9bZFyccuVKw/o3rvjS
      HySg83gohqJZfmsjLysr3HfjxFwhl2iyuLuviKdNwwUC5+7dUbUx5kACOk+Z3p6rFWEUhYd/
      nhUAYOGYxB9PtfW8on5ilfXrf/jb2oK8eLmDBHSeYp15HNfDSUwEeH/+LFOz4w7Vmhj2/OKL
      EIvVT6wyvL4W0nT0zIwtkIDOU9pkG+U18obn9O91IZcckSApbbL2vCgoKODlZFv/ecUGWQMF
      U32dvx76rV3f1NhmMbU1V53VlR79raKquqquYdDNGzxcPtrPsNz6s/yRuf1uZHHBeYdQFwAA
      1f33d/5nv6+2NmIbY5FAPRAAfrfDT1MWq6uxqdGgb/F6nCcr6p1W0xVc2lymt49KlFI1Nfz+
      9kAYho1KlNabXC7fBQMWzuNpn11tWLuO9fkiNjPmCCAgAAiZUhOnjk9UcdXxacnpGZr41BnX
      FCQkpV3Bpc0lOsukYUq2sxOX9L8elyTwqdnq/dUX57bysrLE06ebP/zoynNPBxAQzuGPKxwr
      EIi1Wm1qWkpmWnJmzgitNj45QT349g0apU3WPI6PVKtB74n0obAgP+HHU/pLhaJY+l++s2c9
      pSf71yyEsPOXX9peeinWHEtoEo1hGOby0QyL8VrqeTnZETaVJBfgOKYzuS66DkhS+4dnje++
      24+dpmmzue2FPzv37KH1bf7W1r5fGESQgDAMw8602kclSX2VlZHMoLsAAKyYMuyTX+svvcVJ
      SFDcdpvxnXdCH8ggw9i372h98inpnDnxL78su/UWR4xtz4gEhGEYVqwzT8pQeSur+CPDi4IF
      pDBN0W73tloDZHRI5syGPl/n/v2htEO1tLQ+84y3oiL57++Jp14LABBPneo6fCimRjEkIAzD
      sFPNtoJkGWOzEfIoHIhG4GD55LTPDjdcegvguObppy2ffUYbTUFagH6/5csv2/+8RnnPPZrf
      P0OIxV3XcT6fm5buq6qK3MhogQSEOb1+FmJCl4OQyTAyOhmY12bFVbc7jM4A63ZCLo976GHD
      unW97fPqralpefy/WWdn8t/fExYUXJRYIl0w3x5LGY9IQFhZqz0vSUrV1fKyMqO1VRRJ4LcV
      pW4paQx4VzhpIkertW/ddtF11us1bXjf+NbbmqefVv3uAZwfYG8QYWGh5+TJ2ImNIAFhxTrL
      pAyVt6KSnxvpDLons0Zqj9Rb7J4AflcAQNwjDzu2b6eamrquQAjdJ0pbHnmEUMiT332Hl53V
      m5QBSQoKxrqPHYuiqZGABISdarHlJ8u9lZX9SAMKApfEF49N+ufR5oB3caFQ88zThtfXQsrP
      OJwd69ZZt3yR8MpfFMuWgb5ctbIF8x07dsSIT/JqF1BXHqqUT9JGI6mOsqd0YX7ivqqOiyIb
      3fBzc4XjC9teerHl8ccF+fmJ69dzkhJDaZY3YgRV3wBjIzBy5QgIQujcv5+2WMJ660yrPS9J
      xjocuFDQ51c/XARcYvYo7daT+t4eUC5fzh8xMunNv0pvvDH0HBIAgGjq1M6DB6NkZkQEWHTQ
      bsu2n4sL89KdrILrbnWRYntrLctXiCWSorH5g29iKEAIHdu3Wz7/gj9yRPyLL4Y+Fy7WmScN
      U/l0Ou6wjIHYbPXWwuQHPz9+y7gkHidAhARwOMrld/WjWen8eR1v/FUya9bgbxDrOnzYtnUr
      5qchQ0OaCRRMJbhC4AM8IeXzCeUqo74ZQtbqcDN+Kjaj8RBC588/O/f8nPrpJ5Ci3MUlob97
      ptWenyzzVlaGXkkYFhI+Z0pm3K7y9ug2y01OZh0O1uGIbrN9AiG0bNqkWrlS84dn49esSXzt
      fwKUNrMs02HoYBi/2+U0m21Ol9vpcPh8XpfHC2OwtJllnfv3Nz30EO10Qgip9vaGu+9hQjPS
      5qZWfFLCsqz+uee8dboBMtDU6b3zw2KKZqLbrOWrr6z/+ld02+wTb11dy9PPsCzbfSVgOgeu
      1qhxnBQIxUqlTCwUiCUSLpcn5IdRazdouEpKLF9sSXz99S53LUerlS1cYP7441C23j3TYhud
      JAMA+PVtnMSEAbJQJeLlJ8suzfGIEMmcOY7de+DgrsXs236ULVrYc9y8vCfR7hMnTB9sTFz7
      OiGTdV+ULV7srazy1tT0+XqxzjIpU8W4XBgZXilquCyfnPZlSWPPdOnIIRUKwOPR7YYothkc
      lqI8pSfOJg3XGc9vYXMZC8hTVmZ8593EtWtJpbLndUCSmiefML71Fgw6XYMQO9Nqz0uUUQ0N
      3LT0AZ2Nxkv5aSpRic4c3WZl8250/DR4wXl3SQknv+DVPXXv7D3b3fNdrgLyVld3rF2X+Ppr
      HE0A5w03K0uQP8b27XdBWrB7KAIHEj7pi1IQPggAgBVT0jf91sBGdcQRT5/euX//oI1i9q3b
      DmcUTcmK8zOwxnCuE7osBeTT6Qyv/CXh1Vc5CYEnLgAA5b0rHLt3BanJOt1i75oAeSsrohvE
      CEiaSigTcE81R7PYGRcIOElJ1KCk69Mmk9dm/6YD3Dsl/cHrMjYerOsS7uUnIKq5uf3Pa+Jf
      fombGuz0O1wgiHv4kY633u4te+a3OnPXYahUUzM3ZcAP0gMArLwm/dNDDdHtMKQLF9i3b49i
      g73h2LV7ryZv2nCtQsTNT5a5KKbW2IlddgLyt7e3/ek57QvP8zIy+nxYOGE8IRZ3/mf/pbea
      Le6TzbaCFDnr9WIsA8IvRe0Hw+MlGIZVG8JOaQ2CaOJE95GjA51iBlnWuGfvz8oRd01KxTAM
      APC76zI2HtAFXsbHLLTJpF/9rGb1av7w4aE8DwCIe/wxy6ZNzIUONx/NrNlW/qf5IwVcwt/c
      zElOGRx/LgDg3qh3QgQhGD3aU1oatQYD4a2s3OYSz5+SI+Gfi/aMTZHbPf56k+uyERBttbY+
      83v1qlWC0Xmhv0UqFIply0wbNnR/ZhDCd/eevWGEJi9RimGYt6qaPyIkOUaFMSlym5tqNLv7
      fjQ0AACDMIq17dhVPOaGpePP73t8rhM6qLs8BMQ4HPpnfh/34IPCwnHhviuZM9vf3u49dbrr
      x/3Vxja79/aic1tIDc4MuhscgLsnpwfMdu03/FGjfDU1LEVFsc2esG7315X2pTcWCrkXRE4L
      0xSmTl8AAbG07/TpMw6H1WTthJBtbW2tra5ob29rbusYIBODw7pc+t+vVt69XDR5Uj9eBwSh
      eeop49/eZX0+vc2z8aDuhQW5BH5uzKJ09aFvhxgVJmWoGs2udnvUNlEEOC6aMsV16FC0GryI
      tuLjJ3Mm3lRwcaoJAOCB6zIC7VTPUIb2douxranN2lxbWXzshNHQsvfQyfbWpsEPprJeb+vq
      Z2W3LBFPm9bvRrgpKeLrphk2fb5mW/nqucMVQm7Xdej3sz4f/v8p64MDgYM7JqZ9Xhw427V/
      yObPd2wfmERpCDed7Lhr3lh+oGyConRlIAFhgM/jyVRapQjwpPF5I3MEQmnh6EypQj3Ipc0Q
      wo433pDMmCGdPTvCpuS3L/uoxjNRyy9IOV934W/VcxLi+7eZSyRcP1x9qtlucUVt0OGkpdEW
      cz9KFvuk3WAtIxRzR8UHvAsACPC3I3niqdOuU8hVaamJarVyeM7wgvGTRuTkDM9Mi7p9waHq
      6/36NtnNiyNv6nCjvS1t+KyfPsZ6rHi9NdW8nP5vpdBvOAR+a2HyV0eaotUgAEByww3Ovfui
      1WA3n5S03D0plUv2+h0L9uUDAMfxITvQGkJoeu/vcY8+Evka2+DwvvefulfunSZISeoZPIp6
      In3ozM2LP1RrcnqjNh+Qzp3r3LUrWq110Wr1lJ08OyM/2KEzsbsK8545gxF4jTSpzhjR8SV+
      hl2zrfypWTkqMU/14IO2f31Dm88FNX21tf3YDjEq8DnE/PyEb09ErdCdiIvDcNzfEc2Fzgf7
      a5cnQY4g8MnDXcSogLq6H9lDD7+8veL5H8q+PtrE9isXAkL44UHd2BT5+HQFhmGERKK6b6Xx
      3XchhJBh2M5OQirrs5EBYnFB0u7ydg8VuLwwXAAA0jlznLuitqdnvclV+/OBadf04XWLUQG5
      Dh3ipCR/1w7mj074ZMWEZovnsa9K2+3ecNspqbeU6x0rrx3WPQ6KrrsO+ih3cTFtMJDqOEBG
      tJlLJIh45PThmu2ne025DxfxDdOd+/ZF5RB7COGGvTV3sM2CvrYriUUBQZY1b/yQv+K+baf0
      d0xMFXCIZ2bnrJiSvurr0h2n20KPA5icvrf/fXbNolwOcf6/CQBQP/mk6f0PPKdPD9X41c3S
      8clfH20+0WSNSnADF4tJtdpXH2BjkHCpNjgN+w5Mvm5Mn7slxaKAHDt3CieM/6zKedektC73
      AwCgaJjyo3vGH6k3r/72tDWEBTDNsC/+WP7fM7I0kouHcI5WI1u4wLB27VDNoLuRC7nvLCv4
      6Jf6dbuqeysfCx0AgHT+vMhTzCCEG/5Td5vhuCwE70nMCYilKOuWLcytdxTrzAvHXOD9lPA5
      Ly4aNS8v4aEvjh+sMQb51kKIfXq4YUS8ZHKGKuADssWLhWPH8aNaito/khXCv90+Nksrvn/T
      sRKdOcKuSDR5squ4JMLg/OkWu7++bkxOIqEK/NfrCQjXYrfbLRzI5AfLli8xlnlLOnbWSO11
      OYFLRc2dvv/5qUoqIJ+ePVwc6ESz442WjQd1/3v7OE7vDgzIshgAg19X1Rvtds9rO6tUIt6T
      s7K7g97hAiE0vPIX2U2LBGPG9K8FFsJHt5y488yOgoUzxNde0+fzsdUDMZ2djh3brTfMb7V6
      pmbH9faYSsxbf2v+2FTF/ZuOHW+0XnTX4qLe2F3z0qK8IOrBMAzgeOyoB8OweJngraUF49Lk
      D2w+9svZYP1rEAAA0gXz7RGENY7WW6Q4m2KoF04YH8rz0RFQh8PbFo3ooGXzZsWyZW8faHhy
      Zk7wTxfHwaIxiW8uHfPRL7o391R7/ecWwwwLX/6x/OHrM+NlwbwXsQmOgwX5iX+7fdzWk/oX
      tpbb3P2JdQjy872VlbBfwXmGhRt/0S3nG4XjxuKhlakE2mjc69h/4FBrc52uxWRqbzlVVnH0
      8MGTp8vKq+t6a8XhpVd/czrCaSBtNruLS3T51xAEnpcUknsmUS742+1jtTL+A5uPVbY5MAz7
      vLgxTSUK0nvFPmoJb92t+dflxD34+fG9lYZwuyJAksLx410lR/rxq3+tNaUohIrD+6QLF4b4
      SsCNxgnGa2cxYHd4hBKppV3v97sralvcTmtv0fgsjXjJuOTXd1ZFUnVg+mCj8r773t5X9+TM
      7NDHFpLA7yhKfWnRqHW7q176sfzXs6ZHp/e6uc7lAg7A7Nz49+8q3FvZ8ey3Zyyu8DbikM2f
      149zW2mG/eTX+pUjJKzLzU1PD9XUSy8BkqNJTNVqE1I0fJPJkT0qPzkt58brx6ekZQaJxt9U
      kEjg4LsTLeHa3QXV3OxvaDiqyclQi1KV4U3SAQAZavEHd43PVItfvmlUkMjf5YVCxH315rz5
      o+Mf/uLEzrIwHGDczEy/wRDuCfZ7qzpGJkjExfslc+aE8Q0Mtzo6SG28y+df/nFJeas93DYh
      hK3P/sFx/MTS9w8bnd5+vH5lY3dTa7aWPfF1qd7qZnrUpQfB9PHHtu07Qv8VPj9zx4fFHTZX
      48r7aHsYn2A0T/UWcsmXbxr1x2/PvL+8UCYIYyHqrayEPt9uGHdttlcl4kbRpCsDqYCzZmFu
      sc783A9lHooBAMMBIHBA4AAHgMfBRVxCyCVFPELIJYVcQsQjuSnj/F9vyc0crUnSyIWcnr74
      gPx0pq0oXSFuqqNTkgmpNHTbou8H+rnCsLOsbf2tY4jQUkEghC2PPy559PH79ps3rywSXX0n
      1YcFhJCFGMNCFkKGhQwLfTTrpmg3xbh8tJtiXBTt9jEuinZ66ebS8rYqHZWbj4tFXAIXckm1
      hKeR8jQSvlbKU4t5ChFXLuRAiN376dG/3zXO9+Z66bx5wnFjQ7cn+p/WzJGaU822zb81rJgy
      LJSR1H3kCKlS/dNILhmXdFHaNuJSAAAEwC75cgZecsOp6Y6dO63/+Ey0YKFw4UI3ixudvg6n
      t8PhO9lsMzl9Frff5qY6ffRNYxKlLNWiqxPkjw7PoNBHuy5C2R/I52fu33T0aL25zydZhmlc
      ubKjtuG/Nhz2+aO8gw6iC8blMm7c2HDPPc4DB9hLplAsy/pphmFZ+44dpg8/CrfxAVmwcEn8
      lZvy1u+uNgXaabsnzr17+bmjPq5xr7w2/YpZPcUauFCouv/+pPXrOw/+0vLY496Kyp53AQAk
      gQMMc/y0UzpvXtiNR8/OC4iX8Z+Ymf3C1jI/02tgD/r91s2fe5csK9c7ZuUGTttGRAUAAKlW
      a5/7k+aJVaaNG9v+vMbfdsGue/6WFowkyYSwP4XoTKJZnw9jWFwo6HkRQrjxoI5i2Md68ezZ
      /vUNY7evU0xYMjZpYi9hc0TUgSzrPnLEvPFDQeE45T33dO3sZtqwgZeVLZk1M9zWotMDUXV1
      zY8+ov/DH53797Oec0ExAMB9U4fVtDt/ORvgYBHW7bZt/cFww3yHxz9hmPLSBxADBMBx0aRJ
      KR+8z01ObnnoYds337Jut+vIUdE1U/rTWlR6IAzDIMNQunrH7t3uo0c5yUnSOXOFE4twHs/q
      oh764vibtxUkyS/on8wffYzLZH/0DXtiRvaIhDAcD4gowrhc1i+2OPfsERYVaZ9d3Y8WAggI
      Qlavb4+PV/soiLNepw9itFcsEnkZoJCK+vQDQYbx1dY6d+92Hz/OTU2TzJ1Tm5D9zoGG9+8q
      7N4rmbZaW1c9of/T2q3lHa8tGX25h64uayCEjNkMSLJ/R10FEBDttvy451D+yFQ7o8xKEleU
      lfu9dr2TTE9SFeSP9vl80tA8lZCmfTU1jt27PaWlW4lk5+Jlf5w3EudwMAzr+OtfeaPzH2uW
      vrYkP1kh6LMpRMwSyHFHcCUCUiRXU3Z/o66OL1czRndKgpLLF3E4HDrkg4YASfJzc/m5uZCm
      76+qfuE34+aVq+fmqIRFRd7KqmMzbstjOpPkl1/WDqIngedAEEIAAMv6aQbnXlhV3++U1k4f
      /cCnJc9ng7jjv/JnzPrdMe/7dxUqUOTrMifwKqxrUoLjHG6gPRn6h5hHvnxz/qs6XLzqqe20
      cuZIrVx4ZR5Bf1Ux2En1P57S76vqaLG6N60sQpGvK4DB/ggX5CeUtdqvH65G6rkyGIKynq7f
      iJbuVwZD0A0g6VxJoAA4IiKQgBARgQSEiAgkIEREIAEhIiLAKoz1e06cqsgYlkJBfpyUbGmz
      ehxGkUzJAM6wlIE6FxJxmRJAQBCyToet0yk2u4VyvqS5uYED3Sdq2nLSNPFx8hg8tRkxhAQU
      EORy+XKVFpAut59IT0uzmw2Tk1UQ5wgEgnAdj4grm2Ce6IAu44HeYApxeRHME41cxog+Qasw
      REQgASEiAgkIERFIQIiIOC8gn8tWUVlNMWiVjgiD8wIyGY1V5aVWF/ITIsLgvIAkUqlWpaR7
      3wsBgbiU8wIyG/TVDe0C7pCdXoO4HDnvSBRL5RlZmTwymG8auRYRF3FeQJ12W2NtZeboCTzG
      /uX3e6dNHGmm5Hy6w2B1Uw6Dj5QrFfJrJhYOoa2IGOS8gNSJKfEJBhkPx3BenJQvUmq9Fi/D
      cCRSKY37gUDB4wu8Xi+KxiN6cl5AbqeFJUU8LkES4nkLF2EYppTTDJt80ZElKBqP6Em3OKCf
      Bh5rs8lxfldDHCeDH3iDQPy/PiDUNTbyxCqlGNWrI8KgewgDUqmM4DH9OxwZcdUScycWIi4v
      0BQHERFIQIiIQAJCRAQSECIikIAQEYEEhIiIXst6IGRPnzzO5YsJroBymoUyJcQ5mWnJg2kc
      IvbpvS4MYl6Pp9NN2e12pYRzqq4jJ02TqFGhYCqiJ0EKCyGXy1XK4hKSU31Oy9R0JYORqLQZ
      cRHIE42ICDSJRkQEEhAiIpCAEBGBBISICCQgREQgASEiAgkIERFIQIiIQAJCRESQWBik/BRB
      kCwLMcjiBAEhRpKoch5xAUGi8cz2bd9p1QkWLyOg7Z1AolYpJk8Yh2JhiJ4EGcKARqUw2DpF
      PBLDcT6XA3DC7/czDDN41iFinmDBVJqmSfLiLgoFUxE9CTaJvlQ9CMRFoFUYIiKQgBARgQSE
      iAgkIEREIAEhIgIJCBERSECIiEACQkQEEhAiIoIEU2Gj7izB5bt8jJCAYpnUx+AJauVgGoeI
      fYKkc7ANjfXZI8fQNlOLuaXBgmWnxsnFAlTajOhJsGiXgM/3OCzxaZmeTuuobCXJ5aPSZsRF
      oNJmRESgSTQiIpCAEBGBBISICCQgREQgASEiAgkIERH/B2yQYy2zF37IAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average CPC' width='192'>
      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
      gAoECFD5f/waTLqXO3q8AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='CPI' width='192'>
      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
      gACR/wPB+eLp/+ZeqQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Served eCPM' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Funnel Metrics' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='% Diff Funnel Metrics' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Total Ad Calls - Top Markets' width='192'>
      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
      TALEHZ0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='% Served - Top Markets' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='% Long Tail - Top Markets' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Publisher CTR- Top Markets' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAcMUlEQVR4nO3deWATVeIH8Hlz5E7TpPdNKbRQKDcFBBVFcAXk
      EEVEYDlc5T4Kyw2CSkEW5PTgEBAQfgvKIqByqSsiC0KBAuVoKfRIjzTNfWcy835/1KWlDW3S
      SduUfZ//mk4mL+m3b+adARBCDEHqC2/qAiDNGwoQwgkKEMIJChDCCQoQwgmJYRiE0MV41BYD
      ACNw0MBFQpqTigBhPWZd9OTo7q34G95r28BFQpoT0qujAQZEIlEDFQVpjtA9EMIJChDCCQoQ
      wgkKEMIJChDCCQoQwgkKEMKJm34gsYTXLZqfUewM57MMxZNSQCbC89SOwnJH45cP8XNuAmSz
      0hJ54F9CAqxGo5UlKR5BkHgvBZ9gNNFBROMXEfFnbgIkEJIatfWPB9a4MB7LuEiMNdMwVMEv
      1rOhGqbxi4j4MzcBslroi/dpDMMeltgfPajSORuvUEjzgW6iEU5QgBBOUIAQTlCAEE5QgBBO
      UIAQTlCAEE5QgBBOUIAQTtz0RFN8ok0o38ICs8HuIkkJgQkFuNpIa02uxi8f4ufcrcqAMCFG
      fPGeKS5UIBbz+AJKKgBOO52RrUeDqUg1bgLE55MWiys5RpxXYrGzLtLoyHZiceFCg5lVosFU
      5HFuAmQ2Oc9kPho6/XM89WGJtbGKhDQn6CYa4QQFCOEEBQjhBAUI4QQFCOEEBQjhBAUI4QQF
      COEEBQjhxN1QhoBMDuPpaGA22AGfkhCYSICrDHS5kW788iF+zk2AGBcbGykJsTFOBYUBwBeQ
      Ij7e2klfQYOpSA3uV6aazU6dA3PYnBDgpMFhcMCYMKHOhAZTkercD6b+dLP6OtR8la1RyoM0
      M+gmGuEEBQjhBAUI4QQFCOEEBQjhBAUI4QQFCOEEBQjhBAWo2YAM44dfse0mQDiBR8l5gVKe
      kAICASkTEsEBlJCHotaUIITFixbrDhxs6oJU52YoQyggOiZIRSK+qtSIC3hiIRUqxZUqa0au
      MViKYtQ0nLm50GazXrlChoYE9O/f1MWp5HYwlSIhqzM5AUXYnSzjsOaWwpQWEirHYHH4XRX6
      vwBCqN27VzFxAr9166I5aaRcLurWrakL9Sc3AdKUW4+VV1+Hei/fjGFYCycKUBOgi4pc6nJh
      p04AgMjV6UVpc8OXLeW3bt3U5cIwdBPdDECo2/+1/O23AQAYhpHBwREfflD6wYd0SUlTlwzD
      UID8n0ujceTkiHv1fPQILy4udP7fS5YsYQyGJixYBe++dNdPQJZl9HpXucZVWkIXl9DFxXRx
      sUtTLundJ+idSU1dOh/THTwY+OZIQDw2F1TYvr1iwoTixYuj1q/HBYKmKhvm5wGCELpUKleZ
      mi4ppouL6eISV2kpa7VCl4sICCCDg8mIcCoiUvL8c1RkJC6RFM2aHTDwFSoysqkL7jOM0Wi9
      khE8eXL1XwAg7tPHpdGWrvwg4sMPANlkf0e/DpDhyBHDseOC5GQqMoIXGyvu0ZOMCMeFQsDj
      AdzNxTd46lT1lq2Rq9Mbv6gNRP/Nt7KhQwFF1fwVAEA2dAijKS/bsCF07ly3H0gj8N97IJdW
      qz/yr5gvPg9bMF8xdqy0Xz9BcltSLscFgid9WMKuXSBN227cbOSiNhDWZjP/8kvAwFeedAAA
      QDFhAsZC7VdfNVUntf8GSL1pc/B77+JCoedPAQCEzJih3rIFsmzDFazRGI4flw7oX/stDsDx
      0LQ5jnv3jCdONFrBqvLTAFmvXWPNJnGfPt4+kYqNESQlmc6cbYhSNSbW6TSe+F42fHidRwKK
      Cn//feMPP5p/v9AIBavGHwMEaVq9aXNIWprB7soq9q6lCgAI+ts72n37WLu97qP9mOnsWXGv
      noRE4snBuFAYsTpds2OH/fbthi5Y9Zdu5NfzhO6fhyTP9qEiI9f8eDftn5kFWu+2ZyQCAmSD
      BuoO+t24o+egy6U/fDhw1CjPn0IGBkamr1KtXu0sLGy4gtXkJkABMv6oZ0Nfey4iJZLfO0Ux
      KDV0xsCozvHixikQrSoznT4lHzPmPw80NMNuHNVp4bc3rE5vtqgGQDZihPmXf7s0mgYrZsOy
      /P67ILkdKZd79SwqMjJs6bKSJUtdWm0DFawmNwEiCJyhGZaBsRFiPg4YJ/1rjrl3SlBSEN7g
      S5shVG/YEDxtmgOQG8/mLPhLm7YRAaN7xL5/LIv1ppWB83hBkyaVf/5Fw5W04UCW1X59QDF2
      TD2eK0hKDJ4+vXjhItZi8XnB3HLTD6TX2b67YmdYDMP+bBtCDMvKNTIslMkbdmmz5dIlDAei
      1NQNZ3NGdIkOkfIxDBuUEnGryLjvP/njesVVjAd5QvxsH/3hQ4779/mtWjVkkX3PdvUqFRlJ
      hYfX7+mi7t0YrbZ4ydKIVR8R4ga/bripgSDEnC7IsJBhMRZiLMQgxBi2wbsZWIej/LPPQmbN
      zlaZbxUZXu8aXREXAMC8AYnnstWX83Senw3gePCMGerNm/1wFl8tIITar/YGjf9rvc8AAJC+
      PCBgQP/Cd98r37a9ocfL/OgmWrdvn/Tll/GQkPQf7iwa2IbAKysbksDXvt7h45N3Sw1etK34
      iYlEULDlQhM0buvNcfcuEAqouDguJwEABAwcGLt7FxURoZwxs+yTDS612lclrMZfAuQsKjL/
      fkE+cuT/XS7oGidvFVK9+Rok4a94NXne4UyHy9PLKAAgeMpkzY4dkK6+s5HTxdppv9tpBEKo
      2b07aMIEz6/UtcB5PNmQV2N37xJ27FC8YGHpRx85lUq3R9IMW+962i/GwiCE6vXrQ2bOVFmZ
      Y9eLv5qY6vYTTIkOHNY56qMTdz4Y2s7Dj5gMCRH37q0/elT+xhuPHizS2eYdzowPEacPT/HZ
      e/AFZ34+tNn4bdr48JyAIKT9+kleeMH6xx+qVauIQHnQxAlEy4RctTlTacgs1D9QW7QW57vP
      tXytS1Q9gusXNZD5119xmUzYqWP6D3fmDkgUUE9s643oEoUD7PAVpYf/MQAAxdtvG747xphM
      GIZBiP2Wo579z2uLB7XVmp33Sk0+ew+cQQi1e75SjB/vk+qnOgD0SR1vTV2+Pbjb6PWnXp/9
      5Y49pyGE43rF7Z2Uemx67zN3VD/cLK1HNdT0NRBrtWp2fhm9edPZO2UyIdW9haKWgwEASwYl
      T9xzOSlc2jEm0JPz4yKRYvRbmi+/DJo564tfc7OKDTvGdQsU8aa/2GrLzzlb3urcIH8w77lU
      KrpIKezSxVcn1FudN4sMmYX6G0qD3kpHBAo6RMsGj+g7PzIAL8jT7trF7DyrmDCeDOsBCHzD
      yE7TDlwVUHi/tmFevUrTB0iza1fg8GE2kXT7ucvbx3Wr88/JI/FPRnZ8b3/GznHdgiR8T15C
      OmCA8sSp5bsvdGgZtuWtLhW35+0iA0Q84nKeNjU+yAdvgyMItfv2KcaO9Uma75eZVx7P4pF4
      SpSsU0zg6B5xgSIKYFjlyVu1ili1ii4q0u7ZU/7FNsXYMZIXXtj8Vucp+zMEFNG7VbDnr9XE
      lzDHw4e2zBuyoUM3ns0Z/0y8XMTz5FmhAYKlg5LTDmW6GI9G3W+XWZYlDR9YcHlK34RHjTsA
      wPQXW3/279xG6KGok0tvsN+8VY/B42pYFu6/mP/+sVvvv9pu57hus19K7JsUqhDzcACqRRMA
      wIuODluyJGrdP6wZVwsnT6EK87eO7rL15/tX8rzoyG7KAEGWVa//JHTO7MwSc4ne9kp7L7rO
      usQG9k8OW3Pybh0vAeE3GcrVP9zdPC61m73Edj2z6m9j5MKkMOnZO6r6lN6n9AcPyke9yXFS
      mMpon/J1htrk2D0+tVWoxJPKDABABgeH/n1e2IL5qrVrHZ9v3TK8zdpT924qPe09asoAmc6c
      oaKj8MQ2a0/eXTSwLY57UXsDAN7uEWuyuY5lFj/pGAfNLPvu1k2l/svx3aLkouDp08s/+xQy
      TNWTvPtcyz2/53neNdAQWIvFfP68dMCAep8BQnjyVum0A1fffS5h9kuteaR3f1YAAD8hIWbb
      F/zE1uYZU1aH6VYez7pXavKkpeJ+MHVQN0VUqLhTNL9DK1mfdvLhqYqkKC8mdnmCMZm0e/cF
      T5my50LeS23DYhQib88AAFg5tN2BSwV3SozVfgUhVOqsE/Zc7hqnWDGkPZ8kMAzjxcQIkpNN
      p09XPTJIwu+bFHLkahGX98IJhPpvv5UNH1bvec0mO73wyM1zOeo9E1K7xsnrfRcFAJANHhyz
      Y7v41rW/X9g9f/sveTWWB9bkJkB2O6Mx0MlxAZFBfIUQF/CAhsZTE2WtfTeYCiHUbNsmH/2W
      0kWey1aP7VXPjlcBRawf2XHp0Vt6a+W2shDCc9nls/95ffng5OGdo6p+nkGTJukOHGBtj+04
      O6Zn3NFrRSZ702yjztK08ceTsiFD6vFcCOEfD7UTdl9+qW3YqmHtJXwfNIkIqTR86ZKOC+cs
      yD89a+tpZV1zaYgVK1ZAiG3/sbKPUiQkAoT4pds6nQOWaJ1qjb1QbS/V0/nltFRIDO4Vwb2U
      juxs48lTQTOmL/zXrTn9EyMD61+9BQioGIVw7al7g1IicAAYFm795f65bPWWtzpHyavXajif
      D10u25UMUZXWMo/EAcB+v69Jja+tB6GBGI5+R0VHi71fquxwMRvOZv/7Xtm6NzqlRMt82xlB
      hoZED365nV294OSDZ4SOgPCQJ53fTQ1kMtPXH1oYCNU6p85Eq82M2cYo1XZftVUgw6g3bAhN
      m3PilqpFkDglSsbxhL1aBqXGKzaezdZZnVP2Z/BJfMvozgFCNysZMAwLHDbMfP58tbGhIR2j
      LuSWq02NPYkRMoz+yJHAN1737lkQZpeaxu++HC0XbR3dpWLOgs8Bgug48PmP3u4x/cDVO0tW
      0mVlbm+JmuAm2njiBL9NG3NEzNeXCma82Jr7vw4AYFKf+EKtdczOSxN6t3jv+QT8yecE/50q
      VPXj4JH4pD7xn//7QSMP3ZtOnxb39HTeagWGhV9dyPvw+9vpw1PeSo2t5Z36RLuowBUzBy+m
      E+5Mnanbtx+6qs/sa9QAQQgdeXm6Q4eC3nln3al7U55PkAh805OJA7BmRIe9E1N7JdTdCSbu
      /YyrvNx+K6vqg32TQvO1ljxN4327OWM2a/fuU4wb6+HxEMJivW3yvgyT3bVrfPf44EaaI9ol
      Vr5g8sA1/aabrY6CiRMtly45CwttWbctFy8az5xpvJ5o1unU7dtvPn8+fNmySyq708U+nxTi
      w/MLKKKWQbSqAI6HzptbvGhx8NSp4md6VVSBBA6m9W215eec9W90bITBDQiheuNGxYTxhMyj
      KziE8PRt1Ze/PVw8qG0nz8ZwfKhXQpDjxcRlv/O2rHrFuGsndDgJqRSXSokAqQ8CZHG4/nHq
      XoiUHy0XRstFMXKhXMwjcPCo7xxCaLt2Tb1pk/Sl/rE7tttYbPOey5tGdW7o6rcWvNjYmE+3
      lixb5sjJVowbV9GD1zk2cO/F/EyloRH+QraMDEar9XCrKAjh0WtFp7JUu8Z391Wd7a2+SaF2
      mk37WfnpkqUV3SIVAISQZWG3Gf/x5CyprQRfzKk+2gchfFhuKdBalTqbUmct1Nl0FicLoYRP
      RsiEUYFC+e0M2ZXfOy9OU8THEDjYdDYnMlDwZvdYX76/eoEul3rLVpe6LHzpUlwkwjDsfpn5
      45N3t43p6lWvprdYu71g4sTozZvJ4LovuBWd6b9mq9e90dHDKraBQAi/u1585rZq81udK0eE
      uAfoSS9mtDrvHTySe/6K/e0JxU5CqbMa7TTDQjGf3DamK0n4xUwSCKHp5EndoUMRH37Ii47G
      MGzFsay+SSF9k0Ib7hXV6z/ht24tG1p33w+E8OAfhZceata+3qHq/31TgRDu+O2h1ema1e/P
      1k+D1IcQQmdennHduhYtE7p9+gFeZWo3hJCFGNGQ/99eAQAEvPIKLz6+eOGikGnTRD17TOmb
      MPdQ5jMJwd4OCHjIfivL8fBByNy0Oo+EEO6/mH+tUP+P1zs2UGG8BQB459n46Qeunb9f/mzr
      EKwhWmGs3a75YpsqPT1kxozQuWn44wsDAAD+k55HBG3aRG/erP16v27f/lAJLzVeceLGE4fY
      uGCdTtXHH4cvXVrnfTqEcPeFvBtFho9HdPCT9FTAAVg9vP2mszmlBhvm2wBBCC0XLxa++x4R
      pIj5/HOBT6dmNjRSIY/esMGlLitd/v64zmGHrhRaHN6sZvSMZsdO2eBBVEQdvfkQwp2/PcxR
      mVYPT6H841pflUzEW/5q8oJvb9IM6+YSFiDj902UFGhdBEszJCUTEGFS/GaB9Y6ytj4SV3m5
      euMmyLii1q8jQ3zZPm80gKJC0tKM339vmDfn5UGTDv5R8M6zLX14fnt2tu369ZhtdSx3ZCH8
      4tfcYr39w2HtySba9adOKVGyl9qGbjiT7aZ8TierM9FOFqoNdKAA55FYkQWmtpElPmEwFbKs
      /tsjRXPSpK/8JSI9vZmmp0LFiHTovLnPHP70x1OXtZbqX/1Zb9DlUqWvDl+6pPZJPyyEW3++
      X2Z0rBzSzm/Tg1VMp+kZV2ywu6mBCICpzS4ngzEAXHtgIiC0M1huIaHSsoHuVqZCh4O1WmO2
      b/NqLx9/JkhOTvh084iNX28/dWvBsE4+2fxLu3ef5PnnqdjaOi9YFm78KcfqcC0fnNyg/Qg+
      gQPwwdB2bj4ai5W+q7Q+KLEWaZwGi0trZawOplT7xC2icaFQMXbMU5OeCmRQ0MhlU24rdZlr
      NlWb/lEPjrw882+/KcaOqeXemWHhutP3nC5m8SDv5tY1oQAB5b+VZJMjedTUwZ2+VFHKGTOd
      hYVYfcdZIcOo0tPDFi2sZcoYw8KPT97FAZj/lzZN2EFfDyhAtUmNV7Cpz5SPmliybLnum29q
      jkV7Qn/osLBT51o2lmdYuOr72yIeMXdAYvNKD4YCVDscgOkvtvpSxY/+/DNXaaly9hxnQYFX
      Uz7ooiLjjz8GvTPpSRcvF8uuPJ6lEPMf9e02LyhAdWgTLpUJqXP5ppAZM4KnTC5dsVJ38GDN
      xfZuQZYtXb0m9O/zcJ775Uouhl1+NCsqUDjthYTmmB4MBahOAIC0AYnbzuXmaSzCdu2iP/+M
      NZqUM2c5HjyssyoyHDvGj48XtG/v9rcsC1ccv90yRPzucy2baXowFCBPBEv4K15tt+TITaON
      xvn84MnvhcyepUpP1+7dC51P7Ciiy8r033wbPHWK23BACLedeyATUpP6xDff9GAoQB5qExEw
      vnf80qO3aIbFMEyQlBTz2aeYiymcPsOek1OzKoIQln28NnTWLLe9GxDCEzdKslWmtP6JzTo9
      GAqQ515qG5ocGbD5pz/jAni8oEkTwxbMV69br9m5k3U4qh5sOn2aUCiE3brWPA+EWEa+7vCV
      wvTXUvxwXNlbKECeAgD87dmWZSbHd9eLH1U5/ISE6K1bcIFAOXWa/c6disddWq12376QmTPc
      1i75WsvHJ+9+8mYnYZPODvMV94Op3WIEWgdm0FpxIV9KgUAR/rDMnq921Dz4fwqBg/dfTZ66
      /2pckKhz7J978AKKUowdK3n2OdXatYL27YImTixbtz74vcmEVFrzDDqrc/7hG2te6xDs2b4i
      /s9NDWQ2O+0MFiQm4iLEMXIqRMHni/k9kwLi5Q2/za/fE/HI1SNS1vx4t1j/2PgGr0Vc9OZN
      pEKRP+6vgCDEfXrXfK6DZtIOZc7pn5gQ6sU6Hj/npgaSBfAZmsk3Mk4HDQFOQsZCY8EKXpGe
      DdH43b6CjS9CJlw0sO2iIzc/e7uLuMpqYkCS8lGjJH374hI3O2OwLFx+LGtwSkTPlk2w/rXh
      uAmQTme/VGM/3TKDzyY2PAU6xQS+1iVq5fHbq2vcCLvd3xlCuPWX+xEyQf32IfRn6Ca6noZ0
      jAyXCbaf82gx69HrxYVaq0+W4fobFKB6AgDMfLHV3VLj6duq2iN08YHm2PWiD4e1fwoa7TVV
      D9DT+B4bCkngHw1rv/c/+TU3KHokV23ecCZ7/chOTbukq+FUBqhft5A3nwuT8FCCvCAVUKuH
      p6w8nqU2uenj0Jgdi4/cXP1aikLs0d6PzVFlgADAbE6vvhMHwTAMiw0SpfVPXHjkRrWt721O
      Zt7hzLkDklrW2HX/aVIZIAEPL9U6UH7qoUfLoP5tw1b/cIf974avDAuXfXdrWOeo7i28+86v
      ZqcyQA+V5pxiq+WJU5+R2rzZPYYi8X0X8yGEEMJNP+XEB4uHdIx8+ppd1VQGSCGhBHJRq0DU
      LqsPAMD8l9tcyC0/f7/8mwxluckx+fnmOkfMK5UdiSUmJjEAv6B8Gr4wu0nwSHzNax3+tvdK
      oIjaOrrLU9lor6kyQAyEtAvjU4B2wrhQAU4RFqMdUpSYgGIBUWqgNcam2ce0GZGLeVtGdxbz
      yKe10V5TZYBoBoaHCfOURhskureSOgBh0OA4RfIFlJgPWjvpK9l6NJhapwjZU7U+rk6VAbI7
      YVKE8DcWY2jmTpFNICQZB0vbaNLgMDhhTJhQZ2KVaDAVeVxlgDq1DsjON7sghmFYVr652nF5
      pVxXZyJPpco2V47SIpPzBKgRhnijMi9RwQIBDtj/gZYn4kOVAbI7WD6PAGgsA/FGZYCEfFCg
      tpMEqoEQL1S9B7KKJDwhaqcj3qgMUNtYcWG+/oEB9UQjXqhyCaPw0BCRkEKXMMQLlf1Apy6p
      AIb5wRfQIs1JZYAgxFB4EG+533QtIULIANxpcTAUJakYTNU7ywxoMBWpzt0urRTesYUEUOTD
      AkOAlM8TkEIenhDuunJPhwZTkWrcBIih2dtKK8kjCQyU6mkS2o1OGBUq1BjRYCpSnftL2N1C
      S7VHCsoa+/tEkWYBjZ0inKAAIZygACGcoAAhnKAAIZygACGcoAAhnKAAIZygACGcuO+JlgoJ
      s4MVU4DFcQEOeTzCaHVZHWiuGVKd28FU4tXuQXfKGAlrI/gCoYgKFoMyjT0j1xiGtl5AHud2
      MJXJLXM4aVwoofR2xumgc0tg21gxdLJaM6qEkMe4v4RdumvAMCyryiPZBWYMw2jff5M60ryh
      SxLCCQoQwgkKEMIJChDCCQoQwgkKEMIJChDCCQoQwgkKEMKJ+55omZiUiCmTwc6SpAiHfD6h
      s7jMNrQoDKnO/WDqoK6Ks1mmlDgxxacEIp5cCAwG+9VcI1qZilTj5hLG0Ex2qb1DvKTU4DLZ
      WZ3GciXXhPF5NitbpEWVEPIY95ewK9n//QY11Z8LUnMKLRiGoQ0UkWrQTTTCCQoQwgkKEMIJ
      ChDCCQoQwgkKEMIJChDCCQoQwgkKEMKJ+55oHGAYAJCFGMAAhgGAsRB1QyNuuB9MHdkzSO8E
      Zr0V8HkyERkfTF68a8h4YCbRWCryOPeDqWUmFwshycNxDDqsjrO3TV3byuNleLAUXfKQx7i/
      hP10XVvtkdsPjBiGKfRoaTPyGFSjIJygACGcoAAhnKAAIZygACGcoAAhnKAAIZygACGcoAAh
      nKAAIZy4H8rAMKxf91B9mQkK+DIBERGAZ+ZZsgqtjVkypFl4YoBEFI5JeSyOkzh8qGd7tA2k
      rXa0tBmp5okBOn9Ly7oYBgICY50MllNAaAxsoBwtbUYe88QA6YzOqj/anGgcHnED3UQjnPw/
      ItpH50O+NREAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Revenue - Top Markets' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average CPC - Top Markets' width='192'>
      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
      RviZLUMf7Y/+x0VNvuaGHWP5V3ePjyrq+fMCa7rrm06iKoIxMgxUKAxmjLtf2rteSKz0M1jX
      D01k/3vI5M9d/j1uYm46StkWtm1s25Rt0zxPixIjibQo0ZLIiCItOUa9De8UHdt2DbHIdng9
      jmJOPrDHnRirbfA3nrUotLTLF6oTHVLiwMGPnv6fkYZ543M68gbyV8utAVdnvbu93u2WuN99
      Et3Ul/j+PHneLx6uv/suqb192iYbI5GJO+8M/ug+ce7czw8C6xbKa9Z0PZCh7tzTu6i7PZNR
      Gdou6LZVVJraOgSGOr17oEowxp+MKA+93itwzKJGz7cWN3TWn/yq49Gyqnn3K/uaahwZ1UwV
      9A0rW5c2VZ/0FAcZhhWL6QMDem+ffuiglVYoZLNuj/fb18nnnEOzrI1wIq8NJIo9E7neiVws
      p63prr/mrCaBY8yxsfF/v9P3Tze6zjuv7G2NaHTi9juC994jtrVN813xcbNtW1XV43/+aSZf
      MnXT+srf1rDsZ7cMbTmUtBH6at8ZIWTlcui439bKZiP/cpPy298d/RIzmRz+zndLvb2VXjWb
      JtHg64YMI/7Ag5yvxn/TTTTLIsOI3/+A99prpa7OSi+BcjQ4ghGE4D0/pAVh4u677Xw+ds+9
      jsWLjpEeCgIEytAM49uwwXnuuUNX/53U2Vm9bt2XPB+GMDAVxthOpVi//0tn9LBHIpgGTdNc
      IHA8z4QhDBCBAAEiECBApOIcqH/PTj7QxGmZvEFreaVj0RkiB3cygHKVeiDM2LZSyBuGERkZ
      skvZaCIDeySCqSr2QFJVleiSeezoWujXcpOh2mqJo3Vdn8nGgW8+WAcCRGASDYhAgAARCBAg
      AgECRCBAgAgECBCBAAEiECBApOJK9MD+ncgdcli5tGob2UTrkmUe6TTcXAIQqtgD8RROZnKm
      ZUVGDlpaMRJToBYGpqpYyohHDmmsS+YZ3aZMNRua08bRGEoZoAzUwgARmEQDIhAgQAQCBIhA
      gAARCBAgAgECRCBAgAgECBCpWAuLDvZTLr+T1tNFyyhm5szrhPvCwFQVA1RMp01GVpTxVN6Q
      GTOVKXhllmWhngq+oFKAMCsIGJuC28c4LFzKO2VJlnm4LwyUgVoYIAKTaEAEAgSIQIAAEQgQ
      IAIBAkQgQIAIBAgQgQABIhVLGWND/aZY7eHtRFa3S5k57YvgtjAwVcUAWcVc2pTUUiI6malm
      7L5Icl6dE2phoEzlneo5TqBtZ7U/JHqQmpnb6Jd52CMRlINaGCACk2hABAIEiECAABEIECAC
      AQJEIECACAQIEIEAASIVV6JH+nuoqoCLMaPJLIv01vZuuC8MTFXx74WZRTVv6B6PUxAcWiET
      n8zBHolgqopDGM2xIoWyObUxHJIcVV6PS5blmWwZmBWgFgaIwCQaEIEAASIQIEAEAgSIQIAA
      EQgQIAIBAkQgQIBIxVpY5FCPKflqRDQ0PsnZpZauM2QeamGgXOUeyCgpRc3tcYk8o+fSB6Mp
      qIWBqSr2QDQnuHg6X9Ca5s4fs41wc0BiKbgvDJSBWhggApNoQAQCBIhAgAARCBAgAgECRCBA
      gAgECBCBAAEiFVeikxOjlKO6ikPJnGYUlYbwPLgvDExVMUCx4SGqviUSG0a8U89NuvxNTh7D
      HomgTMUbCyVJRobq8dUyLONxV2FMwX1hYCqohQEiMIkGRCBAgAgECBCBAAEiECBABAIEiECA
      ABEIECByrFqYxVd5JXpCKVJGMTSnDUphYKqKAcrERnPOxlg2qiGaLio52tNaK0MtDJSpOIQJ
      okSZmtcf5EUnJ7mag16ohYGpPq+FYZxIJmlkV9cGeWb6sQpqYWCqIz3Q6GhEz8bGM8YpbA2Y
      dY4EyMljhfY214insDVg1jkSIKWgZSfjlo1OYWvArHMkQAzNSFjLlOxT2Bow6xw5jedYhkLM
      cV9eBgBFHX1FIkJWqWTKTkel9UI4CwNTHRnCogP9f3rjlbEM7AAETsCRADkcQlGz80rqFLYG
      zDpH5kCIYpoa6kq6efjLicgQ7fRKWM9oyCgoTS0L4L4wMNWRHkgtlibGhgN19Ye/VGLjqXwh
      raQz6cnJREzJq7BHIpjqqLMwhg21drilz8ql/mC9IfKOqlq2ZNRUSdUuh8QzsEciKHMkQIIk
      WqWibn12Ulbb3HL4H77Pn4AQrDGCckdV45ExnszKIlywAU7AUWdhVd7m+oBhWqewNWDW+TxA
      GA8NDhQM5BIrXmIGwFSfx4Wm2rsWScMjhoUEDi6UBscLNlcARKCzAUQgQIAIBAgQqXjOdWj/
      TuwOuexCgRGz0YHWJcs9EiwRgXKVb+uhcDKTxQwzOtBraWokpkAtDExV8SwsHjmkcS6ZY1TD
      RnohNKeNozGchYEycBoPiMAkGhCBAAEiECBABAIEiECAABEIECACAQJEIECASMUARQf7o4k0
      xmh0dPTA/r0lAzZdANOoWEwtKorJyMaBkV1DiZBHSGUKXpmFPRJBmUoBwizPY2z6mxcskarU
      bMYpS7LMw31hoAzUwgARmEQDIhAgQAQCBIhAgAARCBAgAgECRCBAgAgECBCpGKCxof6hsQTG
      aHh4qGfPp6oJu0uBaVQMkKXmlKI20rdn644dxXSiL5KE+8LAVJV3A2I5gbb94c7znTWZZHxu
      o1/maaiFgTJQCwNEYBINiECAABEIECACAQJEIECACAQIEIEAASIQIECk4kr0cH8PXRWQKT2r
      2VpeaW3vhr8XBqaq1ANhq6jmDd1XWzs2OqoVMvHJHNTCwFQVhzCa40QaRaMTwYZ6SXZ7PS5Z
      lmeyZWBW+H+rgNZmyfKZ0QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='CPI - Top Markets' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Served eCPM - Top Markets' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO2deWAURdr/u+a+cx+Tk5A7QLiPBAERPFEU8GZX
      xINzV5HVVdddV/T1FhB3dfHn+3NBVFRuUAQBAcEEEpJAgARykGMySWYy90zP0Ve9fwwkgfQk
      M+nJAdTnr3R3dfcz6W9XVz311FMAQoghEL2FN9AGIK5vkIAQnEACQnACCQjBCSQgBCcEvTgH
      ddwQ7fRGQE6nEwAQdFMQ1yO9ERAAQCaTBd0UxPUIagMhOIEEhOAEEhCCE0hACE4gASE4gQSE
      4AQSEIITSEAITiABITjB4on2OO1ag00EiQh1osthczlskXFJDmMrTyK3WR3JSfH9byVi0MIi
      ILOxrb5Bl65WFJ88ZbFbo0IFJpxP4E3Nl2pEkRkRsVGkx4OGMhBeWAQklkgghE4PHR4RJhTz
      xdAjV0qEtGRI1ggzzshFIhdF9b+hiMEJ6EVshtPpRDUQwgtqRCM4gQSE4AQSEIITSEAITiAB
      ITiBBITgBBIQghNIQAhOIAEhOIEEhOAEEhCCEyyDqW6HVdNmFWOEWKZ0eig+7Y5KGOIwtACx
      zGp1pKYk9b+ViEELi4BsVrNG25oZr9ToGEBYCNJudYlIp1ZbWyWKzoyJj0XhHIh2WAQkFIkA
      hjlcJIVbZWHRfDulDJUSmDR1+GgzTqNwDkRnUDgHghOoEY3gBBIQghNIQAhOIAEhOIEEhOAE
      EhCCE0hACE4gASE4gQSE4AQSEIITSEAITrAMpjpt5ka9RQIIuTLM4aGAxxGdlGpva8JEMqsV
      z0gb0u9GIgYvLALCHfbmVl1OYuj+IyfTEiMwzG0npKSrRVtTJY7OUifFUSicA3EFFgEJhAIB
      j2fFPbmZyVAoBi6LKkxG8hTykeNNDlKBwjkQnUDhHAhOoEY0ghNIQAhOIAEhOIEEFDCU0Yih
      JfeuMEgFxOC4ZceOhoVP0Tg+0LZcBW2x1M2Z466sHGhDBguDTkCERqNfu1azbDlttUqys12n
      Tg20RVfhLCtT3DZD9+57lNE40LYMCnqzYmFfAGnaWXzKsuUHSBAh8+ZFLl/OE4lcZ87Y9v6s
      mDZtoK3rAC8oDJ03l3G5Wl5/PX7tWp5INNAWDTADLyDabrft/dm2b58kPT1y6VJRamr7gqyS
      nBz9R6shwwDeoKgpIYSe6mpxRgZPLCZqa9vWfhz915du8uVjB/jBmL76qum55yBFJXy8NubV
      V8RpaZ2fBxAK+eHhlF4/gBZ2htRqBZGRQCTCMCz0kUeg223duesmX8N6IAVEWyxfHK1Rrf1X
      +PzH+SEhGNurLM/LwwtP9L9trDiLi2Xjx3klDni86Jf/avt5r7u8fKDtGkgGUkCXDhdsVY/f
      Wt5dBSPPm4QXFg6StxwvPCHPy2vf5Ekk6rfe0n34ETlo6sj+h0VANOluM1lMBr3L5TRZbBaT
      kWIgbre43B6TyRKsG0Oa2XKy/pU5ow9d0HtI2lcxYVISqdViDBOs+/YaSFGUXi+Mi+u8UxgT
      E/3iX1r+/nfG4xkowwYWFgG1aurLzlY47aaD+w4cP3nq7NniizUtlRXnDu/dUVhy3kVRJEly
      v7H13PkSqXpWrnpyWsTBSp9vMABAnJ7mqa7mfkeOeKqrRSkpQHBtt0M2apTqrrv1738wSKrJ
      foZFQDKlinC76uqbYhPiwpQyPuDzBUAkFETExgsEPCGPxwtGn2j/b+enTxkuEfIfGZ+4pURD
      Mz7/+/L8fLyggPsdOYKfOCGfNJH1UMicB4BIaPnhh+tRQ+6qKvOWLb23HHaFYWiaZtl/BRzH
      uznqD4TB+OhLG1utLu/mq9vKSxpMvgpTZnPj4sUMw3C8KUcaly0nDQZfRxmPp3HxErz4VH+a
      FBRaVr1Ze+997tra3p3OVpcAEJQ6phtKfz+dMGZ4tFLs3XwiL3lTYQP08RLwQ0MZtxsOaCOD
      xnHo8fDDwnwVACKR+u3/0a9dS7a09KdhHGHcbnfVxfg1q3VvvwNpny3RbhiAXhikqM0lzY/n
      p7S7fDJjlbiHajK7fJ0iGz3GVVrWXway4D57TjJsWPf+TEFEROxrf2v5+z969yQGBMevvypv
      nS5OT5dNnGDevDnQ0xuM+AAIqPlclTEyPjchtH0PAODxiUnfnGz0dYo8P29gm0F4YYE8P6/H
      YpKcHOnYsZbt2/vBpKBg3bNHNfs+DMMiFi60HzhAaDT+nwsh/PRwzQAIaOuJS/NuyeDzrnIb
      TkmPOqOx2Nzs/TvpyJGu8jO+vnF9DoTuc+clw4f7UzbiqYXWHTsps7mvjeIO2dyC8QWCqCgM
      w4BQGPPKK7r/eRv67TFptriNDqK/BeQ0GI8bmTuGxVyzn88Ds0fF7SzVsp4FRCKeQkmbTH1v
      IAuUwcCTyXj+hYHzJJLIJYvbPl7XVe4MhEbHIHIXWffsDpl9X3tDQpyVJRk+zLJtm5+nby5q
      fGxCUn8L6NCJ6vzxGTIRyyDu7JFxe8+1kDT7GyDPm4SfGJgxDWdpqXTMaP8HTeVTptBWq7v8
      bPseCGFRnempDcULNxQzvh0W/QlkGMdvxzpHOgAAIhYtsu3a7U8/wO4mSxrM0zKj+lVADElu
      Pad/eDx7pmm5WDBuSPjRi23sRwfOG4QXFMrz8/0vDwCIfulF/erVkKYhhBXNtmXflG4rbXrz
      /uHjksOKGwamHr0GV2mpdNgwcHU4Ck8sjn7pJd077/TYWth1unlWrlrI798wifMVDWEJsXGh
      Ul8F5k9M+raokWGzXjR0KHGprv+bQZBhiIYGUUpKQGeJ4uPlt0wu/2rLi1vOfHakZsXMjPfm
      jkgKlz04NnHrqaY+MjUgLDt2hsx5oGu1KskdIUoeYtuzp5tzSZr56WzL/aPisH7uxm8+2fB4
      /tBuvgXqEGmYTFTZYut6CAAgSkkh6uq8m26S/uxITTf+62BBNDQI1bGBBo7pbO5PIia8W2x8
      NEP5r8dGZ8Yqvb86S61strptriCMBXGBdjhIbZM4M7PrIQBA5PJl5u9/oNrYPwUYhh2tahuT
      FKaUCLH+FJBBb27w8MYkh3dfbEF+8saCetaaRp6fh/9egGGYCSeWfF2y/1xrWWOfd3acRUWy
      CRP8L29xEh/tv7jyh9MzR8R/8fiohK0bOr8wPADuGhbz87kBdjbaDxxQzpjpy63Fk0qjVzyv
      e/c91qfAQLi5qHH+xMvtkP4T0I7i+tnjkgX8Hu44Ij5Eb/fo7Sy9FXleHl5YeKnNsXjTqaXT
      Uv92T/YvFbq+MbYD58ki+QT2IbCu6G3uBV8WZatVG5+aMDUjSjE5n3E5nWVXuUDvzY37sbxl
      wFwSGIZhmG3vXtWse7opIB03jh8RYd+/v+uh8822MJlIHXK5HcLyOCnC1aIz6Fu0TqdT12Yy
      6HUUA20Wo8Pp0ukNvbOY8BAHK9vuGZXQY0kAwGMTkr5lcyryw8PL+OEvbyv/4MHciUMjxiSH
      lTWa+/RJMB4PbTELYq91Ovhi3aHql+7MnJWrFvB4mLc1/eKLbWvXwk7ZBEJlwiiluFrn6BOL
      /YCor+crVd0My2AYBgCIev4501ebqKtdJxDCrwrrF+Qle2tV2uFgEZBOqzl3sYomnT/u2Vtd
      W3Px4pkL1c3VVReP7N1RUl6FkyRBEIEafayiZVRatFLqV0tiRlZ0Qa3BSVybwmFbqfZb4ZBP
      RktSIhUYhgl4IC1aUdlqD9QY//FcvChKSwd8vj+Fq3V2vd0zOS2y805BbKxi2jTzd9+37wEA
      zBuTsK10wJrS1t27Q+6f3aNXgq9QRC5fpv/gw/ZJcIzLpalqaKmoiTuws+WNNxoXLdIsWcri
      j5EpFBShra3TZGWlW51uIRCIxHxMJIhNSrG4eRKBAHaJiekeCOH3J+tfnT3Cz/ICPm/WCPXu
      082PTrj8oWUYuPZgld7u+eyBTPrkcWziGAzDAAC358QeOK/LUasCssd/8MJCed4kf0pCiK0+
      ULXy9oxrHgwAIOyPf2xc+JTqzju8Pl8MwyakhK87VO2haLHAL2kGEUhR+MmiyKVL/Sksz8+3
      //KL9q8vM3Y743IBkegLSebDYzNECQmKKbcI4+KAWMweztF97MQ14RwtVpfFSXRTvkpjXLr+
      SEDxGDYX8cjnBRTNQAidBPX8d2X//rWaZhja5ap/YkF7MaeHeuTzgr4L9GhcsoQ0+Ywz6Uxh
      reHlrWd8/UZHYaH2lVc77/n4YNX+cy1BMDFA7MeP6z5aDf3+l9E47qqooGw2hiS9D4Wkrgr1
      YQ/nCGiqSoXW+tzmsqc2FG8oqK834LBLo2RzseaxCUkBXVMpEY6ID/29xmBweBZ9dWpGVvSy
      W1N5AACxmCcR01art5hEyItRSRqMfTJ7lbZaMQbyQ0N7LsnAfx2qfm5Guq/fKJs4EdKUs9Mk
      ybmj43eUsY/b9CnWnbtCHrifdf4CKzyZTJKdzVcqgUCw83Tzvblx13SDgtALuy07ZsPC8R8+
      mBsqFX58sOrR/3fi/Z8vFNebvIMSVidRUdMyKSc+0Ms+kZf8yaHqJZtKVszMuDdXfXkuBACy
      CRPxoiJvGQDAzOyYg5V90hdzlZdLcnP90f1P5S1jksPUIRJfBQAA0Sv/0rbuE3glGjghTErR
      sNXqDpq5fkBbLLTZFKhT1AtJMz+VNz8w6trnyH/jjTcCvhZJCoXCznsAADKRIEutunNY7OyR
      cSIB/2Cl7j9HagsvGQuq2/LU0rE5iYHeRSUR2tzk8ulpWVe8cF54Mqnt533KW2/1bqpDJJ8d
      qZ07puf+XaCYv/teces0oVrdfTE3Sf9z9/k37x8uEXbXoOHJ5bTN5jpTLhs9GrtSyxfXm8YN
      6cExFkSsO3eK09Kl/oUVXMPhC3oAwPSs6GsP9OI76mdIK0UzF6ub1j71d4ve2Iu7+IKh6brH
      Hm//ijMMs+ir4vbo2KDdhWG8qR16LPnFb7UbC+r8aeExBNG4eInt4EHvJu4hH15fQNP9FarL
      MPVPLqQsll6cSjPMwv8WNZudXQ/1oSMRkIR0zdvPLLwzJLI7l0Pg1wXChPj20CcAwPTM6F8v
      BHlmFtXayg8JAVKfw3ZezDjxy3ndo+P9auEBoTB+zWrz9z84jh7FMEwq5OeoVSV970z34q6u
      FsbG8lS96bGeb7aFy0VqtkHMvhIQpGndW28pZ86UT57sf5PNHwAAXpd0+54Z2TGHfE8M6h3O
      U6ek48b2KIv/HK19ekqKSODvv5Enk8WvWW3atMnx++8AgHljE7aW9JNDyLprlz/un65ACDcW
      1D+ZP4T1aJ8ICEJo+PRTQVxcyJw5fZF7QJ6Xhxd0CChSIaIYxuIM2L3ZDXjhCfmkHjxAjUbn
      xVb7zGx//dRe+ApF/Jo1pv//JX7iZLZapTW7+mFslSEId3m5bNy4XpzbanUbHZ5hcexVV58I
      yLJlC2U0RS5e3EeZKwQxMbTR2D4+AACYkh71W5XP0eNAgRRFtjSLktjjltpZe7DquRnp18Tm
      +gNfpYpfu8awfr2ntOT2nJj951t7a6m/4Md/l02c1HVWJIZhEELcQ0HfI0Jfn2z4w6RkX48y
      +OldHEeOOn47Fr9mtZ8jAL0AACAZluM+f146cqR3zx05MR/suzC7Syezd3gu1YkSEsHVPc1r
      OKOxMBCOSerZS8QKPyQkfu0a7YoVM55d9lo5eHBsQp+mibHu3h298gXWQ5uLNN+cbFCIBQBg
      Qj4vSimOVkqileJolThaKZGL+cV15pW3swR+eAmygFznzhk3/Dfhk0/6OvOSLC8fLyhsF1B8
      qNTkJJwExRosGyjOkydkPiaheoEQfnyw6vX7hnF56oKwsPg1a7QrXpCl3l2jz06PUfb6Ut1D
      trRAt1uYyOJJwT3U1hLNtqX5YgEPYhhJMW0Oj97m0ds9erv7Qotdb/c8MyWlu1q2F506X914
      j0ZT9/h8ork/PPSU3d7w1NOd96w7WHWgojUoF9c89xzR2t2lDlS0rtp9PiiTZUm9fsuTK9/b
      W8H9UqzQTlfD00/jpaWsR9cdrNpaouHyO9jCOdx4o7a1WVPvIiibzdba3ETS0GLU2XBc2+zz
      a01ZLC2v/i329X8I1bG9ek8CgyeXA7HYU1PTvufOYbG/BKMxQZnNjMPRPvDZFZJmvvjt0rLp
      qUH56Aiioma9/2rx6Vp7VU3PpX0AIWQNzoQ03fLP10PnzpOOGtX1qMHuOV5jeGBUPJffwVLh
      63Ut1Y1tuakxp0tKzXZbmBxrs2IErmm+VCOMTA+JDCe7LLbCuN0tL78SuWyphC1Ksi/wBq63
      vvlW0v9+4W1spUUrGk1OgmL871SzYv95n/KOO7uZhLr1VNP0rOgIedC+0dLoyMnjMna99tHc
      l58RxMZiFAUpClI0pKnOfwsiI8Xp7MNtBbXGtQeqvn12UuffDiFsW7dOkpGhvPuurmdBiH3y
      a/Xy6Wm96AR0hkVAUpmMIsmqmkZ1QpKLJASAkspFfFKYkJpldmEykch99WIrkKZbV72puufu
      zsmX+gHxkCGKyZPNX38TvuAJDMP4PDAqMaykwZyXGtHra0Kath04kPDxWl8FdDb3lhLN189M
      DG6bd+6Y+Lcn3Hvb9u0YxIBAgAn4QCAAfAEQCDCBAAj4gM/Hi4pD5zyguu++a24NIfyuqDFb
      rfr8aO2fbrucIxBCaNmylbE7olasYDW13ohrzK6p6ZFdDwVGLz5717SBjBs3tv1nvf8RAkGE
      Icn6BQs8DQ3ezZIG0xu7znG5IF5a2vLGKp9HPeT8L06cbjRzuQUrDMM8vaGoxdLdgAztdjf/
      7TX9unUMRXXe32jEF31VTFL0sxuLS68kObEfO9a4bDnt8fi63Z++KSnX9GZY4xqCICDa5RrA
      3CuuysqGRYsZmoYQEhT98PrLUUS9gGEY7WuvOc+eZT1K0czzm0t/Km/uva3dsrOs6fOjPeRY
      YWi67fPPm158qfMg3Uf7L3h7D1qz8+H1BQ436bpwof6PT1BWq6/rlDSYVnxXFpSnFgRHIk8i
      GcBUt+LMTOmI4ZatWzEME/J5mbHKc1pr7y5Fm81Ua6skO7vrIQjhxwerMmKUdw/vqy7CzOyY
      Q5W6brL9YRgGeLzIZ59VzpjR9Kc/kzodhmEugj7VYJ6SHolhWFyo9A+Tkt/bUtT65ltx777D
      9zHsBSFcd7D6hZk+o5cCYlDkX+YCACDi2Wdte370Tsi9PSfmQG+natj27lXddVdX/yeEcEeZ
      Vm/3LJkWnJ4XK3KxYGZOzK7TzT2UA0B1151RL6zQrlzprqg4WKmbmh7ZHhp7T6rKUHLm4sKV
      wnifPtVDlfr0aEVieJBWfOtFrcU9Q1nQcZ4+rfnznxmGcRHeINeAK2eGJOuffJK12i+qMy74
      8qSLoLoeCi7emFG3fzcimpvrn1z4h/f2tIeyMAShWfFC4559D60vaLO72c+i6IfWFxh8HO0F
      130N5EWSmytMTLLt+VEi5CeGyar1AU+acZ0+LR6a2rXabzDiH+6/+NFDI7uPFwsKSolwemb0
      7jM9VUIYhmGYUK22vf6eQnNJsHWztwej/2i1bMzohFl3rJiR/taPFaxZHLaXNk3PjIpQiINl
      8w0iIABA1PJl5h++p9oMMwIPcoUQWrZvD50395r9Vhf5yrazb90/PDJ4//HueWxC0vZSrYfq
      OccZhNj3Z/RPv/AYbTa3vvmW6cv/YjwQNn8+ACA/LTJGJdlepoVXD5HiHmrLqaYFPgIzescN
      IiAMw3gyWdSfn9N98P7k1IiCGiMMZMIhbTRSbQZxVlbnnQTFvLytfPG0oZmxfTVK1RWVVDg1
      I+rHMz3PfbY4iUYjPjolMmrlC9IRwz01NdErV7b7P1+YmbGttEljcnY+ZUNB/cPjE4MyXNjO
      jSMgDMNkE8bzVSp4/EioTNhNxsWu2H76SXXP3Z29zxDC936unJwaMS2jSxRwH/P4xKStpU0E
      1UOmsF1nmmflxvF5AAAQOm9e3LvvdA4fkIr4/5iV88/dFe35lgwOz7HqtjmjgxOw0M4NJSAA
      QNTzz5s2bJwaKzp80d8YRUhR9sNHlDNnduyBcNOJBgDA/EnJ/e+gCJEKp6RF/nS2u0qIpJkD
      Fa33jOjOp5ATp8pLDf/yeJ23Mv7scM2iqUOFPeUmCJQbSkAYhvFVqshFi3L2bDpysc3Pr5iz
      tFSckc5Xdnynjla1FdYaX74rizdA/q3HJyZtOaXpphIqqjNlq1XeBCvd8NTklJN1pvPNtnoD
      Xm903toHtemNJiAMw+RTp4TLhNjpkgt+TJuHEFq3bw+d29F8Ntg9/z5c8968XI6DslwIlYny
      UyN8ZYGBEH5frHl0fM8zpQR83qrZw97+qfL9fRf+fFsaj9u4KSss/yPCZa9r1GrqLxkMbY1a
      XbOmwUMxJn2LxWZr1PjVwxxYAADRf1n5WP3xdfsqeqyEaIOBMpnFGRneTQjh+qO1i6emhkh7
      eLn7mvmTkr8vZq+EmswuN0WnRin8uU5iuOyhcQlSIX9UYi+DJ7uHRUDGNv2lhkaJCDS2mPTN
      9Q2a6qrq5rrG+mP7dlVWNzoIwjPoV6YRhIdPef910dmyEzU9BEpb9/wYMmtWe/O53uisM+C3
      dZ0+1++EyUSThkawhktvKWl6KJAQ2LljElY/PLKPfOgsApJIpZChay5phDQukIeJeGKZQiyX
      iJMzh0mkQplIJBb3k1OEC5LMjBdXPvjJt8ecFy76KgNJ0vHbb4oZt13ehPBfv1Yv4xwiEyz+
      MCn5u+LGa9LWOgnqVL1parrPeDdW+m4EhsUlEBYVN3Na51WxMjAMwxIDs3gwkBgfNXpCznf/
      WPfoa4tkbCF5zpISSVYWX3H5W3BaY4EQ63WcfNAJl4vGDwn/5XzrrNyOx/HrBf0taZHivneL
      +8kN2IhuBwDsmampP4+dpV29Fi88gV3dHvJ6n0PmzvFu0gz89HBNe0DWIOGPk5I3F2naKyEG
      wh2l2r5IBNBrbmQBYRgWLhfdMTm7cP5K45df2g8f6dympvR6xmYTp6d7Nw9f1CeFy4dG+tUy
      7TciFOIxyWEHr8QXXGixhclFsb7TgPQ/N7iAMAybPzFpb6NT9c77lm3bbHv3tmvIunuP6t57
      vfWNh6L/e7xuya1DB1Ptc5kn8pK/LWokaQZC7LtizSN+9N77kxtfQDKR4KGxiZvOGuI/+tBx
      6JB16zYIISQI/PfjyunTvWV2lGknp0dGKwfRm91OpEI8MiH0UKXe4iTqDPiYpKBmquDMjS8g
      DMPuGxl34pLJQAL1u+86y0rNX23Ci4olw4bx5HIMw+xucmeZ9olJQwbaTJ8syB/y7cmGHWXa
      WSPUg6SH2M5NISCRgPf0LSnrj9YCkUi9ahXR2NC6alXonMvN540F9fPGJCgkwZ/lHSyilOLh
      8SEbCurvGdFDtqsBoBdBaIMwIrFHKJp5ekNxrd4OIWQoyn7smDdqsdXqmv/FCQ/Z3Rqxg4E2
      m3vLKc1AW8ECgIEn6nY6nTL/Fs8aVJQ2mr8+0bD6oQ6fLIRw1Z6KaRlRLJnbEP5xU3zCvIxO
      DIUQK2/qmLNR0+ZotrimZlx/PtLBw00kIADA8ulpnx6u8QYLQwj//WsN97m9Nzk3kYAwDEuN
      kqtDpceqDRiGnao3C/m83ISQgTbq+oZFQAxNOV1ul8tJUZTbQ7jdLgZCkvCQFOVy92te46AD
      AFg6LfV/j19yk/R/Os0kR/Qalr6rtu7iuUZzRpyi7HxjRFQ4ICyxQ8fbdReMbQaPMPKuO6fQ
      18+66F2JDZGMTQ57aWt5erRiSIR8oM257mGpgRQhYW7c3tTUmpgQC/gCHgAURfJ5PKlCyeMB
      jGEYv1eGHpwszE/Rml2Lpg4daENuBNi68RBSNCPwvZDMddqN7wzDwL6I77wJYV9spRv13Bgg
      9QSLm6sXhgg6SEAITiABITiBBITgxBU/EISnTh5n+NKcEaMGc2ADYrDRUQPFREfrWluvbw8P
      ot/pEFBR4XGJMgx90hAB0f61gnEpGQxPKBYiCSECoF0uQKlQSvmYhwo4vgxxM9NR33gIKkIp
      MDupbkojENdwRUAAxEUqyy+1hcuFDEXa7DhFekiSsONO3GGnGeh24R6CtNsDTl6JuLHp6LHz
      hRJAu90kbW6tPqexRAELIVXrTKYwkTs6aazDUGVo1ZGSmDtun0xRqJZCXOZKDQQhDbGcYbly
      EU+uCvW48JhYNcYXhMglfMCHGC3g85VhEQKB70VsEDclHTWQxaBrbG4VhccnRKrvvSOGz+df
      PYW/Izkjxbb0JuLmpKMNFB4ZBQFfLAAYAPw+W+4UcYPR8UUSCkWAJxDzUaAMIgA6BOT2uIek
      ZUpFqJGDCIAOuYj4vKrKSieBRsMQAdAhIIcDtxiacSQgRCB0dOPNDrs6MoKi0VAGIgA6OuSh
      qjB1fEqIKmiLESNuBm6i7ByIvgD1uRCcQAJCcAIJCMEJllEt3Gps0FtjlEIgUhitdj7pjElO
      s+k1QCQzW/HsDDSlHNEBi4BcLqdOp2cMDi2hUIoBD8NxUka6dU01VdKYrIQhCZTHgxrRCC8s
      AuLz+UKhUJ2QqmDEZotZQIGQCAVlUypHTzQ5CIVI5ELxQIgroG48ghOoEY3gBBIQghNIQAhO
      IAEhOIEEhOAEEhCCE0hACE4gASE4gQSE4AQSEIITSEAITrAMpjrMbXU6a4ySL48aYmzVELgt
      JiXLpmvAhBKz1Tk8O73/rUQMWlgERBCEwWDkWR0ag/Nidc3QRJWzVkW5DU3VF6Sx2cmpBArn
      QLTDIiDAA2KxSJ2QBlRx4SFyl9WoilJSNjx0wi0mmxuFcyA6g8I5EJxAjWgEJ5CAEJxAAkJw
      AgkIwQkkIAQnkIAQnEACQnACCQjBCSQgBCeQgBCcQAJCcIJlMJXyOFuMjuhQKUFDu5MQMERY
      tNppNfDEcrvNHqeO6X8rEYMWFgHpW7RVGoOeNoVkTTE3VJOkQ2llCLumpb6WH56qiggjUTgH
      4gosnzCpXO6l3dcAAABSSURBVE6RVFzSEJdRy5eHC4BAIhVKRMK4lAyxSCATCkUilIgTcRm2
      cA4IIYYB4HPNAxTOgWiHbd2dbrSDQFwN6oUhOIEEhOAEEhCCE0hACE78H73UebvEBZ6rAAAA
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Funnel Metrics - Top Markets' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='% Dif Funnel Metrics - Top Markets' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Unmatched Ad Calls - Table' width='192'>
      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
      /wfwCL4TNmLMTAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Highlight CTR Delta' width='192'>
      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
      SAq7e2vANXDEB60zCt9myGgwz0nWA2j+1szc4u7Rofje9qpzdPDsubHLH/y2ymoDPW9b50C8
      IrNr6ygksNm5lhZKDg3cv3XT77dMolvVTz7+JM9jb790mKScLIesb+5ihjhVqvcODNgfR0we
      KtGmrq6vbeAkCUHAjtsJl1eV2j6XvcHJ9UrZ6Q2QGMy1WrjTY6qCjXBwvOywGYQ79CiV7lqJ
      VoVq28RMYXM7d/TwULFCm6h9oMdSQb8vUK9W3R5nuVRhJDMWcNGNSrx/DDY6VrRXhWfub+xR
      mAFjTrvTEY1EmWZVkQQNdVmsTsdU8wrAy03W1mFE4DiajtY7Nk1oBSiCh51BVxfMo1TMQQDK
      lZupZDQcDtVK+XJTmDzUBYneXJnHPyPRzkqhMDnWX2qwGOn2u+wWlWhFZBdXdzSJ9UV6bEA1
      cbfLDpVL1YnJJ5LoAyX6zxsHSvRX8eRAif4C34QSzVSyEh5xIYqBYJIgBEPBzMoc6utzIB2H
      k2q3RdJua7caOu5xOeyqLPmDwS4V48eAqZcuXrvz0x+++q+/vpjq88uy/dwr551dVudYvHsT
      psIutLO6vS8J0uDYyGHrJLqavb5aOZy010HIaGyzksYxXCgeAzBx7qQlDgQAmLt5jRPlnWzt
      5//t53eufARguwrDUrN85MUfpMIuCwbMqx+974311ZrcyaHIB9eXh8NOg3LzTLtvaKKrdI6p
      j98JDJyVG9uKZm59pkRHX+qGRLcquWvz25ROB4dP6/RegxUVA0kPDIw+NZ1D5pm26V9fm9Mk
      ZiNT/sX//Ie1zQyE11GTK+SFcDwsqW3CMBuymQh7slvZn/79/whaqSP3RHj8vmgoYnBllmU0
      fGTt3gzl95w91h2JXl1bxb3tN89PevwiCfLXp6f9oaTfaWka7Whmfme9vFJxjb6VxLXtbG5s
      oD8RC9+aXQKWA6hcqVSK+xUWYjh5ZWm+wjuPT8Q67fr2bslaAAFDlR0ur0eHmvVKtVoZ9vcC
      h7s0f7fW1rtK5+BVhd3YRGGB25tn1RAYSS/fvu33u0fTlion861asSWKjXxTauueut5uSzwH
      dOX6jUZvf/+XkugHSrTMtzK5ipty2HA7S9P96YFWizX1DoyASnZ3cbfx0gtHUMhmAgPAqNjm
      UgNp7I/OZeqaA6lCnQc2oOzsZA+ND5ZrjIHgfYnuzuir5HfaHbgjsKKJ9cdDdKMa6xtGTM2K
      9qoI7NLm/tGx/u1swYZCmm6Uy7V4PGwjvdbdKO1nBB2l6w1/0KfyjMPtF1SzwzWGDh2zWxtN
      65VivdFUTDQe8OQqzaFk2HR6FKZWpYWJsWHrAZRZW8RcUcTkdcRRKxUnhnsrTQ61uwNuu0Ul
      WuKaa9mqE+ng7iBiKAbmcqBGpVIbnZj4JpTog+oc30489+ocB0r0nze+CSW6VcrcW88n0qMx
      LykJbZ6jITLoctgpzJhf2UokezAMQ4wORjoFQYpEQs+oVofx/nsX3n7jpXd/+zsq4AEG9eLr
      L3WrRPON/OxWI2FXmsCe29wamhg7OmGpLgIAgGuUPpmZj/ltqLvPJlVqHM+w5kg6yCnoi2es
      HFJh3r70jk71NzjGrTbiR9+qbd7CfKlyLhPzkoiv7+jY47nnH0NT+I+v3Xnh+OiHl294Kdzr
      8TKCNDA8OZjqYkL/9MKvQ+nzcn1L1ozNTKk37tCw6GuvnrFuoVnI3F4vw0IhMnIuhDCrOVqU
      5MH04PjI43dIPvyqZJ4RVDA/N3t9emru3q1rl68tLq1cujrVquSoUKqZ2/7dx5/Mzd798N1/
      f/e3F2XrHj0R+fV71+4smrgzEI1PpPtXV+cXF5e7NTJz7erWzq6JYiuLSyEXMjN1rVBvW7zX
      ZqeUdp1weHw+T7lczmX32/WsjLryuZxFCxjozG8WZb4VCHr294s0Jyxfv/DJtVuky7ufy1tv
      xcLtG/dXNymvNxKJOzFjJ18v727eujvflUAnqsrOxmaVbueWpliGhT2J5YXbS8sbFm/nW9VL
      ly4vr67sF6vlap1yOiUVqExpeuaW9CVVkx8q0TLPqIhDYWucbFAOrCNKvNyBbUS6N7aTydgd
      TpaXg16XIgssrwyNjDyWHX6F6hzVSgUjCE1VfRRerDJ69yQaGFqhVDJ1nZXNqN/1gERDuiUl
      uiNyixtZXWyhhMvjceoAZZrNSNBtYG6LbrD1YgfCKw0WiE0dc/tJgLqjkCq26SoV6Yv4LL2F
      PUClXMBsuIHa6WLGFe1HOu1Kk58Y74JEb68t4p+RaGetVPiMRJNunxO3qER3pPbyxp7TpuHu
      UNjvZUUFNdWnk+iDY7//vPHcq3M8WyX6GdaL+crQNO1ZNerPAM+vN37vfXtxcTEeCSGYXZZF
      G05qsqjohsuOobhdVNRwwFKGXldotPandla+P3rsN/PXwl6PpttfHH+p2+ocua171Y4/Tqk3
      5pZNzRiaGDsybrU8Q7td/mRzPuFAdPuAB7REyF6s7Q1G4rQCvZC2Whlu9vqVFi/znPD6j396
      //K7tkCUbssY33rhJz+xdNqgoXx8/xMUxf2BwR5ce29jOUKifipAi8JAbDId6Cad4+K/f65E
      G1uZSipOarboq69aOq/jARqNjbk6P+oyGKTHpuS3a3mAkIORwbHY09I5hDZXrVcLG/dyjM0X
      8/lsailfhb3xmBcHSqcs6b/4qx9b98MinHZ3gPIjEGCYrD/41mbuppvynuu3KgE/gMfnWF9q
      j8e8PQNjcnXzxsx0IJQMUJamUdTm7MhNyd5zPN7/yewvJZhyQIbb6VsqLQHLAVSt1QTdFgmE
      SAygprZXrimiksCAau12Q+UWc0vBwHChPeeIxxrtWsju32txcjtbl42BQBfpHKKmZrcyKCxw
      ewtcJ4AeGlm6eTMQ9IwPWtrfyAu1jXplr5TJ5+lw/M0TIU8yROwV52c2m33hgceepP5InWiu
      VW/LhswByG6n7CjQW80WRnkxQzEgROjoQ19y9Pyj6FaJbjK5tXptPJraq5cOxfuqbU6H8ZS3
      i4o4AACtw9cbvM0GE5SvI7AMXY+kBmFDtSKddTrtlXIu6QtDuixqmmLaKBQ2dFFFXNbdqOZ3
      6bZUrdOhWCLqIjoQoLlO0IG5o1FLUWya6/lF0u5SDNhLEAWmScJqIDBkdtiaIIzG0tYDaHdz
      BaPCiCnoiLNeKY4O9NQZHiEoH0VYFBJlubVeq05EE9U2R3NllAiEHY4aWxuKjx0o0d9dHCjR
      XeNAiX4U34QSTRe3V4sCoimnzpxu7K/DgTSq0DpAYAgGwMjs7idjEQy36Zqxnd0fTCVadN3p
      j7vdLor8ip7Nr71n853YLa38pyNn/vXGpxE3aBuBNw+fJ+DuSPT1KxdVPDQQIZe29jiaHT48
      cfyQ1fIMLTZ/aX0u6rABx6BTr5W4eoNXIl6/nfC/NGR1P971qx/Lmkk3Wm/+5G+KC5e2G4YJ
      m5TJJw+9MpJ6+jlrptG5ePdd00bpCHkuHvtoe62PRHXSy/PsYOLYYLALVezSB/8aSr8g1zdl
      Vd/IlHsTDs0We/ONLnKOabZwYfmmDzcTiXOEWrm7v0UQnuHo8ETi8Ur0wwBSBFbs2GClLfBt
      sd1CXfrW7M3tzB7lTxBeN8zs359HUYejJ+wRRaG6s8hoDggsj0xMnjvxFU8BpzCEBU5FZjRF
      4vj9UOjc5tZNP+U+N9CdwVqtpuLm5PDxeu1uX8h1Y+paMJwKOC3lT5GEK+QKoZA6kUxPL22x
      XIlmmaoKBl0iAFYDyNCNnf3SYF8/iajTVz/J6YmBnmAyHfN7ndYMQD6S+Hh7LRHsqZCmJHOo
      I4Q4grW9ezXZSAd/YJ0DybqW3dpGIIHbm28rATwwsTwzEwp6x60VCeH5al0UEoEetrmxV88f
      9tlOjLy2vHFxar3RH00/tmjgQ81GEVgVcQh0BWAkhYFsoWLHCQy3tduSx+Po6ECTZYfLRaKg
      ygiIrqA4icCAdPu91EOFqislWhTrKuIVxTphQzOV3ER8gJZ4AyYt7uj7AqX9jAwwHDY5BYS9
      zgckGmiKFemMYQv3y4WRaBoxJEnTdAhj2s2Y29WBXdbdqOR22opeKJZD0WQ67q212pwgNUvF
      seOnA+6nv8ibprG8t+B3BQTN8NsdRbbV7/WbuKsjNqu8MBrvhkRvrGCuMGoKGko1yoWRz0m0
      x4FZFBI1VeQ1QLf2CNJvg1Ev5Wf5Ro2tDcfHHps/eKBEfydwoER3jQMl+lF8E0q0oQmXL984
      fOwoiiIC144mksvztzumLRaNoAjsIHFJBUCV/eEY1qVS/ATUs6vv3d7++7/+y4sf/s7nstE8
      8cpbr3SbE725NJtt6of7AzOzi4aqDx8aP2aZRLeb5Y+n51y4Euo75UG5ufvrCICcgUAwFD8y
      bunscADA7enLnCBu7dT+6z/8j+zdy3kecziw+v720Zd+1B+zui/s/p2ZigifHondXMkdSlKz
      GyWSQAdHj3aXzvHhvwUGzsmNLUXVNzOVVILU0Ngbb5y1bqGR3767VYPk+pEzrzGlze1sSQW2
      4aGhL0vneHRjIWx0+JkbtzGDgwDJGISo6Jgpzc9u0jzk9PgcEIfjHme1ffbrFeV4FPV6g241
      JbZ8derW3/3dz2YXpj1B3wunuiiMDQCwAXP08BEP1OgbOqxUN29dnwmGU0FrR8MgGKkKdEsD
      SjYXGXKNnTzf2MvsZrfqDcZ6ANUbjUphj2nDLK/cnL6yzrlH+kIuiMvmqtYDCJjm5tZWHBeW
      lrcbOx3TPyQ1sg3eTKf+ogsSbWj7OzsoJHH7C7zst4cm5q7fCIY8h4YtVRrhW7WrV6/t0sbk
      YGBucePEoJ8TsiTMzFxv9qXT5JNzok1T383s2h12wwR2jMAclNCqdCDcSdg4tt2o7LMaMZQM
      BWM9BPalLzjdKtGqzK/vFHviYUPXKdLWYAQN2JLR7o4Yb9G000FwbYGgfB2RY+l6uGcA0i0p
      0ZosrGZyHjusARvhcLpJdH5hta+/x0DIVMyqEl0v7YsGRtfrbg+VCPlavNRqy4bEpccOYU89
      ev5zcM1Kg9c8TqJQro8P9bKSDlSh3hKGBvutB9De9jpGBRFT1FGqWSkO9iVoToBxyuPALAqJ
      miKuZ/J2uGP3BI2OCBEeBwbq1Xp6ePhJJPpAif7zxoES3TUOlOhH8U0o0VtL88VGHcBUoi8R
      dFO8KGe3N3t7UxqM4zYUqDLH1E0y4MAxHFZR0uv3/GF1qa8AplZ895OZX/ztX3/wu3f8bluz
      TbzxF290mxN99+Y1zJvA+EoLce6srI5MHjo5aVWK5BqlC1dnnUjbP3A2QogLGzlNkiNhSoao
      tywXjdhenV/a2BV4/a//7q+uXXxfVmGUdLL76yd++HdDUbcFA8aHv/nVqVe/d/P23Lnxngu3
      1s6MBFdzbRusD0+cGOrtolLAx+/98wMlWlK1je1KX4JUbfHvvf2CdQumof7mt+/F3bgRGDLp
      LO6gssXG6MjoobHHM8KHAeRzwlcWGlwjI9Y3bgiYAtlSYee1Ty6ojnjUg0LAqJcqKBXwuElR
      1z121+uvvWjdrS+DJ+DtSaQMvnpt+tZ/+S8/n52/6g37Xz7TRU0/AMD6+hpMsSdGk4t3FsYT
      vpvTU6FIb5CyNI0iGKmKdJ5vmVSjN0WMHju7cetKrdHoQF2kfRNmZ/T4+dXpD2uMsro010Fj
      KKrgGt9scMBSAEF2HLl9685WNp/22zoSd+Xqhrv/RLu0c503070/sv576hj6fmYXgSRub16Q
      A47okdmpqXDYa5lEV2/fvj23vB18+fTJicH1ucrSxq7Lpk5NXR8YGvxSEv3gk6kr9ZZo6h1F
      4nHCIamGy0F0ZMFA7HYU3Ji+EhsYjwS8igY8FAEA7PU+5v2i++ocEi0DWFcMXafstiYnqABL
      Rp5+yt+jaJRzbRUiEMDJIORzsnQ90pM2VNmKdKYpwup2jsJMDdgcLnc4GGg16oYmKTDVY+Gw
      wQdo0bTL7Vxc2nC7naYikG6vrCEyU+0bPWxxY2GrUXV4wxxdgSG03GgN98X4DmR2+BrNfwUS
      jZqihrqa1cJgb6LFCRBOueyodSGx0WjAMIyjME3TgHA7caheq6eHnkiiD5ToP28cKNFd40CJ
      fhTfhBJd2LqfpdV8NvcX33ut3W7v7+3jpCMa8scSPXO3Z2TDNtSXcFAuTlBgXW7V65g/lu6J
      fs3thXvFhdul8l8dPvO7+9d9DqgtE68feb3bnOjNpdmdutrnBkuFptrmRw4fOjFptTwDwxUu
      rd9FgdwTO+mGxd36/lalPJYa8lHxIwmrQmJm7f799V1ZEH700/985f1/jfSMtngB79Cx8ZdG
      e58uJpm6fHnxom7zQLDt1cFD7y9epyBOgigEhoaSJ4YC3aVzBAbOyfUtuaNt7lR7E2QHjX7v
      rS5IdK2xOVepeREJJnvdELtZzXeAbSQ2cij++N54+FVJAnfvzt2OIf3q399fWtswgdmubl2+
      NFWiBZZh6VL+yrXLH3905erUlfXNzb394vbmpm7dry8BAkG7tZ12uzC/d89GprK19fns/W6N
      oIY+cex4tdFst8XeiOv2jZlclbN4L4E5w54YjpiZSpayu7LlVV5m7+6tLue72N+IG8qRF99K
      pFIuHNZVieZVSeRdnkA4aIVBAwDb3A5/X7CnzpZtNhcw5Y4uqQbKMLmbmbmuSi11TD2/u9fi
      ler2nCiIVGxoZ+P+/cU1i7fzQm16bfr+3qoNd8c8QRfpEVTNprWub9wUv+TLfqRONM+wkgFr
      wm6xOTyQgkxN1mFVEmLJnlpxvwMwDNJwu50VOjik4XYnhCAej/sPxopulWhN5TPNRsTlKTUL
      6XCKkaQOQBPu7tI5GIZx2LFWi2VlI+hxcK1mKNEH9I4V6Yxtl5crhYiTQlECgkwIIbl2Per2
      iSae9Fgl0SzDUG4Xx7VbNK3KUio9zNDV3a2dwcPHA+6nMw9dk+/u3g26YzBKeEmPqoqyzHg8
      vXqHbQh8Otxr0Q0AQG5nC6P8iCnpKNWqlfuTUYYXAeZ0kzaLQqKuSZvVnCLTpCPstMGQzUOi
      oMk1+iLpx84LnwXQA/L79fHtIdEHJe4exXOvE41h2LOy+C1RojVNe4aN+o+O59cbD+ca09De
      eef9Q4OJDK0eHYxDKC5InVpxL5bo8YVjlP25PL66v3l7vfzD14/80z9dSiZtNEu8/cO3ulWi
      r37yQWLoWKeyTaPUztLK2NHJU0et7izjGqX3L99KeeHwkTdQJju3uCKp9uOH4tsF4S+//6pF
      I9ur8/PLm6amv/mTn0397n91YB/sIDG2+fovfm5NrTfe+/W/9I0dWdvce/XYwIc3V6MeGEHs
      vKSMHTk93I0SffHdX36mRHc669vV3gSpYYkf/MVL1i1UdpbuZEWE2z/20vc252eYtijr6Nj4
      xOT448/9ePhV1fdWG43G8k5ZlMX7czPv/Nu/L97faCrK8r3p+eVd6x50hcLu9sLystSWJC6P
      ePr3smt37853a4RyOm7dvoM4qOWFxXTCe3Pm2l7FKomGbXZdZkjCzssaBvTB8aNyc79YF46e
      OmXdAUxXjrz4hi8Uc6KqZirz82tMi3Hg2JcUtHiMFxSJ2WB45PDRWrXSkdrLy8uNtsHXC9M3
      7nRFolXTyO3u0bxS3Z6XRNHXM76zPn9vfsXi7XyrupVv7K3Nwzb4zr0VGIKqLYEw2lPXpsWn
      VudoMy2CcjSrjY4JI0YHghHC7tR1SRAVj9fvcVnKD+9WiTY1eT2Tj0X8uVxpdCjFcFIH2OIh
      S6f8fYFqIavChA0y2x3wOYnu1TuWlGi9I27sFvvjgVqTxUhn0OdeX99KJuOUy41YriHKMowN
      1hdWNr3BqB103D5fi1f9DswZCFh8m2DoBoRidoIQeL5Gsw5EcwaTkCrUW3zawn7OL5Df3bI5
      A+gDEl0v9yUjDC9BmNOJwxaFRFVqb+fqdlixuwNGR0QdPhzWG/VmX3rgSST6WRXmPagT/e3E
      c68T/Qzfwr49SvSzatSfAZ5fbzyysbCwJRAJh8FqMMrSjM/vXVzdHBtIIpidYfn+gV4EekZV
      7T7H3Mo7bbRH1OTX+3p/eeeyz4EDW+T7R16xfmKhoSu/+vV74+lYQ8ZGkp4r1++qmjE5efjY
      EavpHO12+f2VW72UzeaZ7LDrbVXZKOYHosl0/OhoOGm1ITev6Qi8td362S9+vDpzsWr4JZ6B
      WPq1v/0bKyTaNDof3v0N6e4VFPFsLPZvK/NRXOkgHgxBxlNnhrrZWPjxe/8c6D8nN7ZlRdnY
      qaXidg1LfP97XeRNmEbn32Y/sBtsNPlyCKaX6822LI4nJg5/iS7/cF7ryAIvyQvLa/dvXd5a
      XfuX9z6VBWZ1fePqh79dW1+pcpYZoWX4HI71Uma1sKYDmG/nXd6hXHXl7u6idQswgmMYQhBE
      LBalSNvw4VMDUffN61NFWrRoAUIIQ+Vwu6dMFxAYWdm/J6mCiTrndu5ad2Nnd3d5YYmn98q0
      PD97u9WWItG4k8CsK/Ve0sFKQsQTa7YbosJWeRbHPDJfmd7qmkQX93OMoNSzS7IkBXonspv3
      7y1YJtFC7drKpdXKdkPgG+1mgApCqNMJidPrM09XojsSnytW3W4KtWGQCXRDF2TVYTMRzG4C
      4HC6rGzG6IoDyTKjAluZrUcoT5mp9wUinCLrEB52dlEWrtls0tUiRFB+r4dwuFRZ4Bg6HE/p
      qmJFe9U1KVMvk4iuAZsNgVGMYto1P0nqiCtCWVuIAIBrVtsqxNIt0kHEQ779QlnS4J6Q1+H3
      WyODZqa0iSCwqIOYy1/jORLW3Z4k0ISmIPYFuzh2vbi/a3N4UVPWUSfTqKbiIVaQIZvDSSDW
      U1oZgWmLDQz3eOyUpKkw0Ol2qyfU+w0p0Qck+luIAyW6axwo0Y/im1CiG7n1u6t70d5hisQw
      U+GYJuQIEziC6rLdEwp6u5hWrGMnd3emUPjbE6//cvqdWMDBSY7vn/xet+kc6ws3t2t6nxfa
      KNNstT5x4tiZY1aLi7XY/IXlmzEnBlOjUUxczK3Qoj6SHJR1+O1xqznRd6YvQ67o1sr9n//8
      Z7/65f/2+wJkvN8sryRO/qfewNNT2U2j896tX1G+fl5RXuhNf7RyG5hK0hertJnD/eeHQ10o
      0R++8/8F0y8o9U1JVtYy1VTcruM9P/7hK9YtlCsLNyrtKNQyXaOotM911ArPH05NHkk+/iT1
      h1+VKgs6DH3y4cdbKys3bl29v7Rxf3F5c2V5ZSuzvNR17WaLwBHbXi0ra7oX112esUJj4/b2
      XLdGEMM8eupEqdbSVHVsIHJz+lq2wlp1wEYE3BEM85zoSTsIFyMwHJfrQGSDrVp3YDebnZv+
      6O7CaouT3KS5UWDu356em71baVoTxE3gdTgYWaW5KopgAXck4sSKvNoRq1fWb3RFojXTKO7l
      GKFT31uWJTk6eHRva2F2bsni7TxfzTSZYnlNRl3Hkv07tWyRYzyIcnX5mvAEEv3gU0cW8sVK
      KBRqiwoGVBtBdjqqZgIHgQEIdlHPRYnWVHGfoYNOZ4mupkMJVpZVgFpnrw/AcRxJ2Nptoa2Y
      HifOc4w/krCoRLf5+ma93B9KmSov6QaM2gWR9dkJDaHClNVBl6NrvG4jbRDLMnpHcXu9vGJG
      PHbD5rRbWtczd8pbHodH0k1Ilyt820cQAV/K1ARaFHoDXZDoUi5rI70IkHXEwTZrPbEQJ8rA
      RpI2yKoS3eH3Ws0w5bXBQOxIHYA7bHCLb/UEU48VVw6U6O8EDpTornGgRD+Kb0KJbuY359Zy
      4Z6+sNfBtjh/wCt1NKXNmgjmcZEmagd8fb/OEzjO0LWRsXEbZi/msq1mVTawkYGkP5wgia5f
      vqo7S7+6tvIPP3vrX35zORRE26LjL378drfVOTYWb2dq2mS/f3Zpk2nQEyeOnT5qtTwDUytc
      vHrr8ECYJXpBdQVxeufn1xJJP2IPfP91q6nEd2Yua4h9Y23353//1+/96z+mD53f2toI2PXI
      2MsT/VaqPBvv/fqf+8aOrW3t/eR753/74TUKYgXTASBo8vj5od4ulOiL7/7vQP8LSmNLlOWN
      nVpPjDCInh9+/2XrFiq7qzfWq2GUix55zaht3JxfhzHy8OHJp6dzqIpoYFQtn7l9/dOdzc33
      Ls3cujW9uTg/Nz8/dXNubn6xUa+HYrFquaya+vTH77dViG61JFGSmqVPp64trW5W603rjj5A
      s0ErsthulLa21t2xsXJ+6/9v77yC7Ljy834655vT3MmDicAg50gwZzAuw5IbbMpSKVmyXWX7
      wSpX6cEPrvKDXSp5XdJ6zY1cLjOXBEDknMNgco43p76dc/sB6yUkgUT3EqCxFL5HYM655/Y9
      3f31r//nO2fP+TfRtrNm43qMZCRZ6e9qPHvimPdyDowgItHE2ODlpUwuEIldOnHA0I35Qk2o
      17wPw9zVKAAAIABJREFUYH5hcWJ8ksP1omC5tvHZ/gNL+SKCsw0Jj2YODrI0BkMrVq+DMRaF
      LNPSUTLsSOUjJ/yaaDe7sFhXjeriqK5pjT3r5icHLlzy+gwk1Yqnz5wdH5tggwFJ02EA7nt0
      T4S0jh4++mXlHNdJtKkrNkzoUs20AY5humHYLqAx1AaQZZkwRoQ5OpcvchxnGer49PzmzRun
      JiYiIc4EOAYsjKQAgGmK8OWBbFObz5TisVC5UGxqapAUzXTRhJ8NSgAAkiiSJCbURdkEYY6S
      BT6cSDuWp5poiS9PLxWXd3Vkc3kMx2Cc1qV6gKVMmPI+DIkvSyYk1usEjgLHbmhuk4XK4vxS
      c2dviPXEf0WBh2CUIAjdsCxT12WRizXYusSLanNjg8dhAADymQWMCiJAtxFaqJUbkzFJ0QFG
      0TjsuSZaX1gqNsRDqmnDEMIGOFUW+Vq9sbnpy0z07bpB3j3pHPdM9I26R6J96x6JvlFfC4me
      H5GoVtqu2jDBV2vdPV0Xz55iIykCtjNL2fSyLtLRCYbjRa1r2c2RwO8g1zF+8tNfffvlp3/0
      v99Ot7CCxD793BN+a6Iri+OnJqotuFSCuemBgVWbNm7b4GWzQQAAqBUXPzlwkkS0xp4dUVQY
      ywpaZWltf+eMFHh0m9dtD08f2WfY7pXhhT/44zf2v/szFGMFB9YyY7te/pPetFemNTpwbqZk
      LAu70wJGK9nJvBhk6e0PPtEU85gVDAAAv37nR7HOXXppTFHV0alSc5pwqbZn9zzgvYfs1ODx
      oQxjV7vW3b8wfJrkwlPz+bVr169deUsSras1QbhybeTKmcN7P/mkppiSZgVI58TBA4OTi0NX
      Lw+NjR/e98nez47exsKOpYnh8dmMoptR1o01r84vTZw6fd5vJwMDA7nMIhGKTY6Mru1rPXP8
      8GzOK4nGMDwUTUCwXVjKUWwgPz14dXCUYYOConofwMLi0uCl07qmVUVtaWHy9KURiS9qplGr
      eB3GwvSYDshqqYBSwdmxIRshHrj/PqGSP3b8pPdhAABM180tLAqqWV0a13StrX/zwuTVs+e9
      VshItcLp02cnxsem5+aHxyZjieT0QiHBgkMHDsq3rIk2dSWbL3Eci+KUIgqJVEoWqqaLGIoE
      YzgMo4hr4jQrSkoq8YURdL/DjoWCIMAwKBTKrU0pUdEtgPh+7+bYNZ53XUcxQYilFLEeijdY
      3ki0XK/MLJXiIdZyXARFYJxhcJgicVGzQ5zXNAKJL8s2qkkCBAEUcig2oOi2rYmp5nbvEXf1
      SkF3UBR2JUWXhWqysQWFXFmzGpI+Av8K2UWUCiKu7iC0yJfTiaio6hBGEQjwSKJtS1/MlmgM
      wDjtWgaEMyQG1fl6uqnxayLR4N7CwrtPv2ck+rZ09RV1j0TfqK+DRDum9NHHh9Zv3oCiuFCr
      litFVTPYQDAaCnUsW+Z9jYsv8aXsu58e+e5LT7/543fSzYwgsU8997hfEn3i4CdEfBmt5i/M
      Fg2eX7Vp49b1Xss5+OLSp4dONaWCLtXYGnbOXBlXZCWVCDpk9OmHva7HO/jJ++FEau++U3/5
      H/9y7y9/qDtBhyLDNt+985meRq9LlIYunszIWE8cOXx5hkFVQ3NRil63+b4ePyT6k/fejHXs
      0CsTiqKMzZSbUrhLtz3zlNcVkuC6iR7O0nohtXy7sDBUFUTZgNeu27Cm/1YkGgAEh/RP9x0a
      vHT6yOED2boNA6c8O3z01Nm6+tVzOG6uUDiwrKPHtqwYCxKta4rZqVOnfRQjX1c2l5scH81X
      eMu01/W3nztxdNYziUZRNBCOIQBqaIhDjr1287YICaZzvCx49b8AgGRDw5mjB1zIrvCK7Zrj
      U4umbnCptm7PswcAkF3KTk1PIhheyCy6LoQwEcwQDh097pdE55cyomryuWld15et2ro0fe3c
      Bc/lHLXiufMXZ6amZMMqFgoYhooG0hBCjxw8dGsS7bpuqVCgGdqFYFmSSJK0bRsjCF3VYvGY
      x+uP77fxtiEbADh6uVRrSscl1bBcJBry8eAKABD5imZDOAIphhNgSFUWg9GEbXoi0YpQm8+X
      MeC4AA7HE+EAu7SUCQVoCyK9D6NeLVkQLgkCgkAYDGiOk1Q7wBAM42nL1OsyVKkiKCxFCLKG
      QzYbSTiGIkhaQ8rHnqmlfBalOMQ1HISS6tVkLCxrBkBJEoU8kmjHMjKFCoUCjGJsQ4dJFoMc
      URCSDTfPgvrGkuh7OdE36o7nRN8j0d9sfR0kul7JHzl5fs3qlSiCCKqJ2hrJBGRdzy0stLSk
      4w1tQW/vBX2JL2Z++fHB77389PvvvG8RGOSGnn3xKd/pHPs+JBOdjJo/O503avzabVu2b/Qa
      FFwrLn68/3hLOuRQTW59XtTkuYz+8rM7zwzMPf/kgx472ffh28FU+9DVKy99/43RY+9hzRuG
      Lp8LuHLf7ud7m7zaoIFzx5Yk9KGt/W9/8FmY0E1AiKq5afsDve0+aqI/evuHsc5demlcVuTR
      6VJTCgdMxwvPPuS9h8zE1cPXMqxRSPXv1PNjuVJV1MCGTVvW3ZJEB8PxUCg4OTExcPrAwuLC
      2NT0Rx98NjE/Z+nixPjktaEx74PwrlAk0NXZ57ouxoQf2LmzlJs8fvKs305yhcLk+Giuwtu2
      u3lt1+mjh2Y8k2gUQbhwDNhuuiFOEtjsXIEF9f2nBgr5jPcBpBubxqdmlnX3EI42OnTt8OET
      hUo9mG7v8Tx7AAC5TG56ZgqgNImBYjGrORTpiPsOHvFnooGbX8qImlHPzxq63rt+Z2Z64NRZ
      r6mBUq1w9vzFuelpybCKhYKgmBjJNUeJA/v235pEA9dVVNW1TQfAMIprskCQNIAh2zAc22KC
      YRy99SaSvkm0bcgmZKv1XLHc3NxqWYblIpGgPxMt1auaDXAYVszfmOhAJG7qnki0IvKLhQoG
      HMeFuGAAJyixzjc1NymyzLJehyHUyhZMEBhSq1ZT8agJ4bahQhDkz0RrclVQAhxnmYZtqCgT
      QhxDkLRU0scm6OVCDiU5BBg2TMoCn4iGFN0ACInBjkcS7VhGrlglUYCSDHBMFyFxxBUFKZFK
      /vMi0fdyom/UHc+J/uaRaNu275Ho3+rOHY1/UM5xfngh1NjRnuA0SXAQLD8/E25eRpMk54rz
      VU1WjIZ4aH58ONyxPESiqiSWamIqHuvs6UZ/V07NF5be3X/iey8/+cO/fyvdwghy4JkXnvRL
      ogfPH8so1JblyYOnBgpLS2u3bvFezmGo4i8/2MdAQrxjc1PQOnNxcHoq+9iTOxfy2gtPea2C
      2P/R24Fo4urI0ve++9L7P/87Jtqh6ZrFL2547Du9zV5t0LVzxxYlbMfq9nc+PrBtZcuZkSyG
      QJu2P+CLRH/8zo9+Q6JleXSm3JjEIbbjOT/lHJmJgSPXMpC4uOPxl+TC1KWr1zQb27Bp89r+
      W5loy9RhJlLJTF+8eObEkaNHjp8nKXx0YmpifDScaj5/7IhjyKfPX5BEYWR4+NSpY5WaJFay
      R44dq32Rv/IgCMWBrUuyHg8ijZ2bqoWZEyfP+e2ECYb5cp4ORCEI3bqu9+zxw94XFuIURxMI
      jiC5XB5Y9ooVvQgKanVj6w4f20Q2NrdePHk4szib43XIsSXdUoSaY5s1QfbeSaFQnJufJkii
      s3vFzMQYEUoykLLfp4m2gVvIZmXNEkoLpmEs37ArO3Pt9DnvJrp44dKVxfm5ZDp56eqgqes9
      a7a2JuhD+w98mYm+TqItQ3dgzNYV3XYh20RwEkchVTchGA2wlChKOArLmomjsOO6lu1SJGno
      qmnZoXAERX4zEf2SaNvUi1UhFKCr1XoqEVE00waI9zqK6xL4igNhFEWZhoEgsKbIbCjqMZ0D
      ACBJkq7Klu1gFBvk6EK+GAoHSZKCPd+LpXrVgghVFhzXwWCYYVnFcICpRuJJ7+8QTU3hJZWh
      SAjFSRSopgs5hqQY8ZiP1OxauYgQDAxMByYUUYiFA6puAhTHYOCVRNtmscyjkI1TjCwKEEYF
      WVKS5Fg8fo9E//PVPRLtW/dI9I36Okh0cXbwylTeMLCV63rMctYgwhQOKZKOQmZL1/IPf/r3
      kWQcCjS3xjma5UxTx0iuucEHoripavnFX35y5LvP7PzBjz+KxlkXir740h6/JHrg7OFFmWpm
      tKmSujAxuWHn9p2bNngdQHHxw73HkgGI7di2qgH9+OCJerXe3NKAUOEnH/a6Hu+Td38Wbuq8
      cObyH/35H7z35t+2r3xgbHyYNsobnvoXyxJeUdDJA58sSuCJnWvfen/f9lWtp4czKAy23vdI
      nx8S/cFbfxdbtksvj8uyODJdbkziMNf5recf9t7D4sjZz4Z4tDa5a89rkxcOLJYEzYK3bN2+
      flXvTf/+85/KNvVCoVyvVkeHzk/NLh46cmxw+FJmKXvy8KH5Qp2ksemJ6asDVy5fvfrpr/dN
      jg9duOQji+6LBKEY5Bi6g+h8sW/dTr4wfeT4ab+dsMFIvZxfWMpn8sVdm/vPHDkw7ZlEwxBg
      AuFUuqGwMDc0MlYsFuMsOl+WVclHOUdLW8fwtWtRBiwVJdu1z546VyyXk8loPlf23kmAY5Yy
      WZzAu/tWzU2OUZF0ENU/3XfAr4kuZrOyYYrljGmYq7c9mJsZOHHaa/S2VCssVgy5MNPQ0njx
      8oCgGAQT6UoHPvv001uTaMvUHQArkkLROACwZVmO66IIqikyHQjapu46jmFarm3MZSs9HU0O
      QDn2H7tdvyTasfRSVQpwlCBI8UhQ0U0bwMF/0u2XS6xXHQjDEEjRLYYidFVhgxFDV72gM00W
      85U6S2GWZXOROGTr9boU5CgbIjjGq2mQhJoNYYokO65N4WggEjc0VRLqkUTKO+DQFUkxHRJD
      IQQjUKBZLrBNWTViUR/vQ/hKCSEY2DUdhFAlIRIKqLoJITgMbK810aZe5iUMWCjJAMdyEQJH
      gCIrkVj0y0y0bd+ekrG7x0Tfq4m+UXe8Jvr6D//VdVeR6Nv1pb4BunNH4/NLxezQ2ZGckpuZ
      2rhjN0VillwzAQ4QtL+r9YP334ukO1KxCEtjEErUBTm/NN3Tv7GpwceKk5tqYvbU4cXFNzY/
      /Nfv/49V7R2qGXp+y9P+I+5OjhecFs4ez1WKi9n1O7bv8FzOwQtLHw0cI2AtndquC+MFIV9R
      nb7mHtVC96z2WhP96Xs/DyYbzpyf+dd/8b3Tn32gI3FRkQpzE6/8yz+Jcp4i7t4+8X8UmOOY
      yJ7+LW+d399GApkK5SuFrX2P9PrJif7w7R9eJ9GyJI7OVNIJDA50vuinnGMpe+XA3EJPEDeI
      ZleezQkV3nC2dG1f13JrEm1MjU/RFHzx0pWTZ85lZ0eHR0YHxuZc10UJamnsyqkLly9evHRw
      /74yLzkINjM16X1YX6QAHSzUctV6hsDw7padgjh7dOyM714ssHnrhgovOwC5b8uqc8d8lHNA
      wKXIMAI5VaFE40RVM1SlCGOcovHeP7+1vXN0eDyAyQslRZTMlatXANtoTwdGZ/Iee0gEIpqh
      5fiCDVEMjiS5aENqVQS19g4c9GWiHeCW8nnFsOVa3jKttdsfKswNnjxzxWNzSS5emr+Wr2Yq
      mpoKhGTLIsloTzR0YGDvl0Xc/Sadw9B0y0WAbTvAclwSg20XAgCiKYKv1QiKsUwTgVwIwUzL
      IggMAhBB/OPTyy+JdmyjpqoMQYiqGGGCumXaAOYIf3drTdMwDDF0Q7dcEkcNXaW5kGV4ItG6
      IZUkkSMIwzIRFMdQQjdUCkMdiOAIryZakeoWQDVFsS3DdZxgNAG5jiKLoWjcm4l2K0KZwkkL
      wDiCOY6FwTBAMNvSVdMMMz4C/wS+CmMUDCwXxjVFCnKsbpoAxhHI8UqiHasq121Lw3CGQBAX
      xlHIVXU1xIa/zETfRg8E7o5yjnsm+kbd8XSO2/WTu657l5Bo0zTvhmHcJbpzR+MGEj1z7fJM
      meMisQg3dfVUtGtjNEAqdb535RoCvVMPVgvZK/smp76/acf/OPheW5Ssm6GXtz/n10S/97Mf
      tqzZHceUQ2euVvKFzfft2rXF63ZxtfriB5ePJCjApXb00MKJ2YWLkxef3fLQXE1/ZaNXgPvR
      L98MpjtmR0efeP2NU7/6Adm6Ljs/XZ8fefyN/9DXeOsbkGtrey++y4Z75kqL2xqTeycngFHu
      TvfMVUu7Vj7R5ycn+r2f/6/rJFqS6iPTlXQCQ4Ldr7z4qPce5hdO7V2oodL4/Zu+b9bHjk4N
      6ja0ve++Da23JNGWSbH04OXLp85dUBV5ZHjo9JlTJw4dLIua94/3K0EoZer5aj1fE7Ptrbsl
      Ye7gsL88CgDAsu6e4auXHJhwXOjhXRtOH/lsKuvZRLsOQYZSkXShNBsNJgUhTxNEVTbvW+Fj
      h5uOrp6xkSGICqCWmkintGq+f/VGlMA9pnO4AEiGI8vlilhEMbpSz3U2tIkOlyScjy7v80ui
      S/m8aloKX7JMa/P9jxfnrh07dcljc0kqZBXHFBdbUx2XZgccF3pyy+srErF9lz6+dU60bRmC
      qFAUYZgOhgDHBY4LgGMzHOe9sMH3joWOVVUklqBkTQrSnG5ZDoBZz+71uhSpbgMUgVzDhigC
      NXSNZgO65olE64ZcUSQaxQzbZOkQ5LqKLrMki6O4d6ClyqJu2oqiOi5gKJxmGAQlxHqVC0W8
      mGjXsQr1YpCNQ67pAqCZFgwskgwCx1BNM0T7yCoR67X/Z6IxTVGCHK2bFoAx4FheSbRt8KqK
      QjaKkgiE4BhhWrpmqAEmdK+c45+v7mw5BwDAcRzL0EoVng0EOOYfTFXL0B0IxbFbL8kAANi2
      DUGQ9xJ929TyFSGdis1NzXJhjiRonGK8Z+pcl8iXbYQmYUvQbNcyOY6ladpxHC/DsE0tW6gl
      Y0EXIUyFF3XXNnQUdiyIbPJcayDUyqqNMCTGskwhlwUwrGg2BjnJxiYM8ernTE2uiHoiwhVK
      NRSYKEm7ACFxnKZ9/PCVYp4JJyyFtxFKFmokhuAUSzKMx6MBALAMdSFbCdAIHYzTOFQXRN10
      WJr8ogvYP9hs5dTAXFHQNqzqgUzFNGzRQYKobdu2i9EEG9y4qs/7N/Go0QsnPzg38e/eeO5X
      7+9f0ROeWlBffu2lVNjfsp6Dez+02LYw4EeWyrCuppZ1P/PEYx7bKpJ0/sxJypEbtz1bunrY
      Jej9+0+/8YevLJZM7xPoxJEDoZaey2fO/9mfvvH2j/6mb/fLciXbwDp5BdvQ6zVj9fjBvWUn
      sLaJPnR5evumvpPHL7jAXb/rsS2rOj32AAA4cfxTPNDn6kUxNzFXwxMpVjGo1159nvJ8S1ga
      v3JkpObkBzq2PNPCCgeOXLNcs3flxod3b77paf35+YHiZN+6bRtXdsO2rshKMZ/HCBLBKUWo
      KYosiD7Ke72rsX1ZKhoRJaM9zazYcH8iRFwd8Lq93m/FBaMEbKSaWuLJ5sceuV8qLS6VJI9t
      VaEsO3hPT48l1ZOtncVsZtmylkxB3LLB66aZAIDO7p5Kudbbs6xYKCaaWt16tnvV+pGpfGuD
      DwYYjcZNXXIgDMXw0cGRh/a8sLa35erly75MNAYjGI7RFB5MtRM4/tSTjwdJZ3B43GNzqVYs
      qwhhCYF4oyHVFN0Np1p2bl49PXxVvWVNtJ9xfqHunr0y/N71NVVGcQr1fMe5qSRJ8r4c8evU
      nfNA39iFhfdI9I264yQaQRBZrFd5IdnQ6GVv1C/SdRONIJ4cNwDAsfTFfKWlqWFhboFjCJRg
      CIYlfJrozMKMjbIsapdFnaWIYDDAMAwMw16GYRnqYq5CITYeiKG2ImggyBC2qTkYEwl4rUZ1
      XVcURdd1Axw3OT7ChWIugpliNd7URhOeziVFEnCak0UxGAz8ZvcqSbUBTBEEw/j44Uu5DBdL
      mVLNQiipXiVxhKQDFMt6PBrXVa/XVUkIxhsshTdc1DQtjqG+aJn25/caHMeHhkf5UiZfrKoW
      EggHHIXnAqEcr+151EdGmi8tDp3/n59e+es//9Z/+6//fduD6zKLyre/80pD1F9KK+qo4/PS
      5uXpkdPnFmdm4u2dz+95ymNbVZYvnjtVrRR2PvJiZvgkEmsdPn/h0cd3Xhxc/PaLXjuZGjx/
      cnBufmbuP/+nf1/JzZ89d4k3HUSuPPfdP/Y2gZx3fvrDVdseOXdl8PvfevzHP/tVfwM6WSdU
      vrj+vse3r7l5ttxNdeLEXozrA0ZByIzN8WSyISBp+Hdf/xbpdfIAqZr7wZvv7V7ZKC51qfnx
      YnZB1KHulZsef3DrLUw0hhOxWKRQKJRLBRQmAOwUCsWlhdlypX57bm83kwkTbelYMV/s6u3Y
      vPWhVJQeGBz220m5LK9bvaxWLvStv++xRx/QarmlouixrVovyjaxakXP5OhosmUZX+FXLO/W
      dfOfVut+iSwHOKoYDrHT81mYiXV3NMZCwe6OxmLZY9Ie3Lt8hWXbGGSpJtLV0QRhVEtX//rl
      bQNXrvg10QRJMDQRbuoiCWLPU0+EGWhwxLuJLgyOzXI0ZkCkKdUokmjq3bRr69q50YEvi7i7
      6X+4jlMsV5IJf+sufoec6Dskv3ECmqqgOPlNNdF3LlzhG0ui75noG3XHa6IdxzF1VTdtCMUZ
      EgcAKLJMMgwMgKbIuuWgCMIwt57Cvki0oUqq6dR4qbUlNTkyzkWCDM1RLIv5iWoQBIGhcNWE
      GAoTBVGUlWCAY1nW46OlZagL2TJHwkw4KZQzsgFcx45HAjZMRYI+TLQg1KtVvq2tNbMwxwWD
      FUGFLTXd2oF7u6TJomCahmrBARLMLhUwyKW5AEkzFE6wfm6mxewSF2+wpKqJ0CJfoXGEoIM0
      5/VoAAAsXZ5eyKOOwcYaLLmqOwhF0RxDfdGV9YYdCxdG3z94Lt2xPEDjei1rQSQTjYRxt8or
      igUwR1FM+NEnnqB9Rmd8ic4d+KWRvp9fuJqObv/1/uNdLcxM0X711RcSnuNRHVt/8yc/f2h9
      6yJYtqkde3fvaU2splqW7Xn6cY89qIpy7fJ51eAD4eW71jdeGpxE9foR2Y6z1LOenfjU4IUT
      5y4Mjub+6r/81a8/fCtfcjY/tDsBCWWT2dDjhUQ7H7z15toHnx8fvPL04w/PzUy3JYPX5ubn
      Z6bXbH9kmx8TfebsQZTuBlZZzIwu1OlEOiAq8GuvvEB7XquZmRw8O1bb2MZpRDSF2RcuX8tk
      Mh196x574JYmmqQ72tulelVSZGCbNkIzJFGv1iLRIM1wOIoQNPc7x7jcVB1dy6161saCgqi3
      Jun+TbuTYXLYs+MDAMAIsby3q7m9k0ZtlIm2tbY9dP8OtZYp1LxulaLWS5KNczhBEMhCtrxm
      VVemqrZGWTYY9T4MB8CuZXV3t+Wy5Y7Wjk07tonl3NBkrjXldcfC3uXLs1NDwUSDyJca2vp0
      iHr8scfW9rWPDA35MtE4jJA0ydJEuLmHJIknH3s4ymIj49Mem0u1YkmBMEvhXbItihfK4u7H
      9mzfvGZpauQeib7l3yso9lVNtCzLvmLtvjb9PpHou2QC3TPRN+rrINGmppiO60AoS32+1kLX
      9X+69OJL5JdEi7XS5EJxTX/PxOR0JMTiJEuyAdJnBa1QKaiATEYDtVpNFOVwOMRxnHf2yvO8
      ItSCiSag1yULEWtVDHZMmOpsa/I4ANd1eL5e4/mOtrb52emG1g5ZEFAIUKGQxzNJEnjDMBQL
      bowHZuazBOIwgZBhA5ogOM7HJS23NBdMNJti2UQYoVqiCZRig3Qg4P1omJo0PpsL02g41Uxj
      UKVaVQ0nyNEcx930728s5xg5O7ygOGRjIkRTuC1VFmoOAeR4IgVbRknSd+x+KMLcZsBDscHM
      wrn+rub5sYGLhl3I1F95/dXGuI+X2ACAX3/8Qbx99crW0NufHkVNPdTY8uKzz3hsa6jCT37x
      KxYWmeRKFlH40sLFa9k/+rPvZAqq9wk0OXDus0OHZDvw+h/94a8/fIsMtmmOQwnV5/7tX3pb
      1+689/MfbXjkpdGBSysamX1Xcps7AwNzNVPm12x/dOf6mxcj31Rnzx5GqC7IqghLQwsCm2wM
      8hL47msv0ZjXczIzOXhhtLYi4Yzk5GaqduDYEABmW++6px7ZcUsTzfT29uKwaxqGwFdk0zVE
      PhyLG7quqkowyOnG7V8bizpSqqWvVs4tlJWnHnm4MRkaGfUdSN3U1KyI1apk0GzwkYfuc5Rq
      puyVRONUoK+rvbuzK8QxFEXgTKi7t30pW9+4zut+lwAAB0bZUIwkSVWsdnZ0ptJpEsdXrOr3
      fCOHl/evXJq4FkqmXYyjMUdz0RWrNqxf0TE6MuzXRNMsw7FEtG0FRZFPP/FoIkiN+jDRhaIM
      MEvSXNRRBcNBY+m2HVvX5WbGfJPo302/xyT6G22if29I9D0TfXfq6yDRruvmsplkuum3xRSW
      rioWFGBI17ENyyFwDADg2IaqO8wXFOo6juODROuCbDllWeiMN07mZ4MEQRBBmuJwn7SpnF+C
      qDCHO5myCDtWJBLmOM77oyUv86pWY9hG2BIkB6Ng1zAlG+FSnFcr5roOzwsQBELB4NzMVDga
      rcuWa4jp1g5PVN11pnITGIrJNrS8oYOXeUmp0FTIcACDkRzlx0QvzgaTLaZQMlG2XikyBEqy
      ISYY8H40TFMaK2TjNEExKUstCZaLwliIYjjqVibateTjR473rOiTZUHk5f4tu6pTlzIqGkIM
      XeIrFhULBVDEAa5hGyjA0M1bt/p9XPpHOjf4KzP6oFC+2hqKnh89SrH0Iq+/su3FFHvzsX6R
      jhw+qMGBFG1XbVzIZ9hE+vln9nhsaxjiz8++F3DL0aZHIXVRsbR8tfTM5qcuTZ7ds87rerzJ
      a+fPT+Zrufyf/em/yk5efvvDChOgwqDesvH5HatbbtncdUxRWlLRuKJrndHoL86+S4F6RYUn
      olHZAAAJQklEQVQZHOvvenBHuw8TffHiCYjsgOyauDS0KHHJxlCtbr/26oss4fW5OFsYHshW
      lOrYmuV7aqWrMMZMFWabU6ufXLn9FiYaACSdiszMZwxdiYRDqqZLhoM7OsEEaJajUGDZFowz
      GGybhnE9v8z7F7upOtIrbGXJQoOCUqFJen3nrsZAYCI35bef3p7uVDLGRZIAwh7YvQM2xXzF
      a000jnN9qfZoqNnVazROMEzDyqbe0bmL6YSPUnaA4DiK9/f3FAoFGyUjoUAqFkMxKpUIeWnt
      uPZQbomFreVNvYqF9KY6ulPd963es7apYyo37tdEMxwbYIlYez9NUU888kAqwkxOzXpsLsnF
      kgZQW22INvJiMR1rt2F227K15crUF21aeY9E/0a6qaIIgcBfyUTftRt03PF1YbfxuekumUCW
      Zfn6UrflCASD/gjW1ya/R8O7PifRIl8jGUrR3SD7u9t1vyS6XsmPzOQ2rV8j8DVdEXE6QAVC
      lE9rxZeyCqCCuF0SLcfQotFwMBj0zl6r1aou82SoAWg11SXFarFzWVtdsbzvOuW6TrXGQwBE
      IuGJ4cFANKHbcJzDIDJIeXsNLvBVx7brutsYZacX86ZYJbkwxQVYigoGfFSoLc1NhRvaDaFg
      IixfzjMERgcibMjH0bBNbWouy+IgmGy25UpdcxwHhAPMF50bn18qxPz0vuFMNBmHLEWsyVQ4
      moyH+EJeVjU6mKAIR6xUyooTCVC77nuAuE1FHVwoXq9cBbb6N3/7g+0bey4PFV5+/dXmpI9c
      UgDAp7/+OLFs9erupsP791maRsVSL73wvMe2hir87K13Sae2YuvTbTHsg3f+vmKF9+zuG+WD
      rzy60WMn41fPnJvMVzP5v/yLPzxz5qQKuEiINPKT61/4N30NXs5G54O33iRCTbwFXnv6gRNH
      jmzdsGJqZmZ6bGTF1od3b1zucRgAgEuXTwI8Azu8sDCwKIdSTeFKzfjOay+zhNffa+jM4RMz
      QhKTydRyOTME4XS5XG3sXL3nsV037eLzf2zo6jd0g7RV29TjsaisqNfTW2EIFEpVV5e4aDyV
      buS40O2aPQAA2KrHG3uqpVI6GetbvbWlKT456dtEt7S1qRJfKlUC8aYH7t+JO0qu7NlEU4EV
      vcva2toq+WypxqdaulIhIpZeloj4eBKEUZLAyNWr+/L5YltLmkARnOaCkYShKR476F+1OhyN
      JIJMuVRiAkFeRx95+KH1K7tmJif8mmguGAxyZKJzDU1TTz36YGM8ODXt2UTXCrwJUxCE4kSI
      oxqa2thI4/Yt62uZae0eif5y6ZqKYiTic0XRV/zQr013dsO5206ib++k/J1HYhiG97+HYMS2
      za8Yl42iqK8P/drk92h41+ck2lCl+aVCW0cH9hXOQl8kGgDg2vrY5GJvz7LJiYkAQ2I0RwfC
      fk10rZhVARXAzLmCQOFILBoJBoPe2Wu1Ws3OT3HJ9tZ0rFIuFYrVdCIkWVhTymtRous6lUq1
      Uq32dHeLfFU3zbpiN4RJQIa815LOTY7ILtXdEp/NVFBbpTkORkmSZgOMj3KaxdnJSLrDqOcN
      lONLeZZEaS7ChkM+SLQqXptYbAgRVLQxTKPFUlnR7XCQvbWJrmYmNZf+xU/eCjekOESRFCjS
      kBJyUw7C9KzZuqzRx65V3nXtzLGzc2JryPp078F4S7q4UHzh1Zdakv4+a/++TxMdq0JOvegQ
      uYlRLBT/1vPPemxrqOJb73zw5M7Vug1PD1/Z+9l+vm7abGTbxnVNqW0eOxm/evbIsaMaiHCN
      Xad++dO+J1+dvnr2XHZs3XN/0ZvySl/i0WBmhj979MC8gtQmLpENvaZQ3v7oM6u7b82yf6uB
      a+fc0Tzs1sWFgYwaTjZFymX1269+K+A5niM3OzY5X7l0fHTNfU9zTvbo6QkEsVJtK556dOct
      TDROstViJZlOtjanQ7FEKhHUdZvhwqEAG43ekdkDAEimmzAYSDZGU/RjD+xqbUnNznp1fL9V
      W1ubLgtUNKXJ2q6d22hY90GiKW5FzzJegxO0q7lIJNnSt3z5ltU9vmJrUYIOxtI0TWt8oW/V
      6uL0IB1pCMdSpuY10mRxZnx8JtvX3c5Fk4htNLZ1rd+0saezbXZmxvswAAA4jARDwRBHJrrW
      0RT1+IO7mlKR2bl5j82lWrEoObChNbU1C7WSi9CJpratG9cIhYUvM9H3SDQAQNc1FCW+oom+
      a0sAfm9I9PVcwbthAv1/IdF3w+PnTfV1kGhdEQ0bOBAWZD+fqjzPh0IhU5N1gLHkrbe880Wi
      Na2mO0i2XulraL02PxSmaIqKcEyY8FnOUczMWXgoHQ+WisUaLyYSsVAo5J29loWyKBWj0U5T
      LSiApmEXuJoOcemAj3KOUqmQz1dXrVohVMtEMCpUS7mF+dbeVUEvFth1BucHUqGkYMEtAfbK
      wjjsagwdZehwAKdDjA8iNT81Fm3q1PmcgQaqhQxHYUwwxkXCPki0pY3mZw21Fol2spAmO6hl
      21GGCzE3fzF8g4leGj87vCCaaGMiDDsqcIFpQbyqtySjYmG+YAZa2+I7N3qFs1507tqvBsRI
      kHQ6Atibh3+2efna+Qr/6vZXmoKeXmL/VsePHXLopm0rm97ff5KBHTgQfeVbL3psaxjCL868
      /3Bnx4lpw+SHcqpuampzssV1nOc3eXXio5dPnx1ZhFWpdfnyvW/9uH3nIxdOn+NQK9rW52UC
      uY7pmvyPjh8PhdNPLeucqBQ3N8Tna7mJa/t7Ox+8v6vf+/k0MHjeGckjkCDMXc5o0VRLrFgQ
      X3/91YC3eA7Xda+NHzxT1h/uaLMg7MTo3rwkQQAkYiueXbv7puf1DSaaDqxYviLIUBCAuFAM
      g10AQCgSMVQJ4Ew0gNd4r87Uo7qaVvenmlGMqcn15S3dmzp3tEcb5kpzfvuJJxo4GlEMwIUi
      u3Zt5zCrUPVezhFY2dQlmg5s1tvTvV0Ny9e19ccZOhxo9D4AnGRw2KZZZnE+0792HYnjLEM1
      pSJ83ROJdlzramZ+ZVNnkuEMmMIcpWzAD/bvXt/akynP+UJqBIKGo5FwgEr1bmJo5smH7mtt
      TMx5NtGyXJQAQUNuxYQbSCjIJjvSq7d1rpOFRe0LIMA9Ev0b6aaGIoT3XbpvqrvWRN85Ev1/
      ASUGwXsmHaG3AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Old vs. New Mapping' width='192'>
      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
    </thumbnail>
    <thumbnail height='76' name='Count of Multiple Hotel City IDs' width='164'>
      iVBORw0KGgoAAAANSUhEUgAAAKQAAABMCAIAAABswIv5AAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAGeUlEQVR4nO3cfUwTZxzA8Z/eUrQLxoIv1YKBus7qsIgvjSzq
      MGa6hUWHG806KoRRB0I1tmMomcYlpsKcrpUII+YY48aU0EwcGVGMi+i61VSr1jGsgvWlVAE7
      y+xyapPT/YEiDFCxDb48v89/fZ4rd9yXu7Z3DcPu3bsHiAzDn/UGoKGDsQmCsQmCsQmCsQmC
      sQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmC
      sQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQmCsQnyykATDodj
      KLcDDYFh+E/vAudwOKRS6bPeisfD0zhBMDZBMDZBMDZBBhXbZdIpejJYBlimvwn0RPxNZTk9
      9x97vCij3/3JeQ/qlTqTq+uRz1KcrVIoVNlb6i5zA4wM/NFrQPHaam38oJ+FnoDffaS0sNR8
      Hbr3L3ucLjX74P/7m/P+uXeH0dTERbzetVjDzqKmWRsrV4SY1m/Y/dvC/AToM8IP/DTOXa7b
      kq1SKBTKtNXFFl/PKVf9g5lc+pQPAMDXZNqcqVQolGm5xeZ2LsBVv3Rc+6saY9dn9SxL7+be
      WRLRZ8mT+/bBB2uXd080nzsXIps9jcebPE8+7tQpe38j8DSxLYb7J3GdyQU3DtAVvre/3lNd
      li5uP2I64Hq43PGa7097pudUVupmew7SP18A7tQPW0133y/Zs6ckRWAuMtZdH/S6X26Ryz7L
      eUvE6zHi4xTquaP6LjknfWPy9NFU92OWZcPCwgAAhlMUXL12rZ8RCPw0PlGnDz30S+G6Y2cv
      AvT6E4ya/BplthWnrRwvmaPKSoyCRtrKAlueqSzvWuBCC8DYQa+eID4LrY7XdpqC9gMHH7sn
      zk7n6i0TE1dlGeftyyh29Zwbm7hxW0T9/p9+tTiPVm5up0o/BMBX/MFoPGYx3H9rZlAAPGLH
      8fn8GzduAETCXY6DiRMm9DMCgb5m/9Pa6oMRUXNmi1wtLb2n2IaCNO2ujjc3GI2pbwDcvnNH
      MmUKBXaz2cddrtIplAUNbEDrfvnFa6urq6u3J0c89hCJkcXeOXOiye+/YLZ2xMXF9jcCgcYO
      W7B8sejf+i9VK7/rjIiA1vPnuwPyEzR5i0ce3axSZDDtM9I0yybwEzR5i8c7SjOU6/cPX5yn
      SeAHtG7yuEy67o9avVHx6jXTbFtUqk2/j1F9PJ/f3wjgjZCgGKobIb6DZQemZiRHPu3z8Qra
      i4O1dQjmPnVpwCM7KPAWJ3ruYGyCYGyCDHhR5fbt20O5HS+6F2J34ZFNEIxNEIxNEIxNkEHc
      9bLuTN1p7TUiSiooSBIFeYvQE/A5qgyG+pZbVLgsWatdMonirtTq9TUtfl5kQvb6tNhQAJ+9
      orCkwfVwkUEd2XINwzAMo5EDiJIKGIZhsPSzwdmrjNaJOUVM+bb37ppMf7DgNBlrRigMtGHF
      OEtFnRMAbJVGy7gVhnI6N+7qjxWHvACB3s8Gd01+fg07Kfqe+6IwJWMUU2aVaxiN3F2Tn18D
      SQUFScIOS9n2MvM1Py9clpiZmSQNDcIvS7qzNpt46TeyUABYlEcvAvDWN3vE8pmjeaPj5VN3
      1drdH4kFAgG031+e4vNDAILzmu19dYG+nM5dMLLvlKe+5Nu/pFqaoXPjrtYYq+z4xbPAsR4P
      hLhN69SpqWrttvorHLAsCwKBAAAoioK2tjYA8bKVCR3MmnT1N+fkedld9ziDEVsklYYCj8fr
      O+O12ZzgPfyVOlW95ZAHWKezLQjrI93NmzfZ087wtSUM/cXcvx+co3vz1G/bapfl0wydH9e4
      XV/rBgj4NN4LRVH9DePbuCATCoUgFMVN4AFER4ugrrmZL+GD1+sFEHAcB0KREJyW5rAZqmge
      QHT8rLG1VlvbUpEwmB+9hEIhgMfj4TodzV1HsEAiGQNuq+UK57PsyErVVTmDuDpyxcTGXrdZ
      LvrBd+aMk5JKJYKYGJHTfrLT32mxnh0TGysCsVh8/bT1oh+4DntjW6hEIoTgHtmi+e/OPFxe
      9Xn2Cfm0+18bFSevTWkt2rspvZYKl6Vok8VBXB25+PM/Xe0sLMysvUWFz0nLXygAaumqJL1e
      q67kRSZkfyIGgCXZq1p3FGbW3aLCZcm5yqkAj/jywgtxZf85cenSpaioqGe9FY+HV9AIgrEJ
      8h9LupKB7XLN+AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 26' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='Funnel Metric Charts' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Funnel Metric Data' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Unmatched Ad Calls' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CTR Delta Exceptions' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dynamic vs Static Mapping to IM Markets' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO2d13scWXbYb+WqrlydIxqZBPNwOGHzrlba1SrZ
      8kqrlf1JnyV99ovf/ej9H/xiPUnWg23psyXbkndXO7Oz5OQZDiNAgAAaQAOdc3fl1FV+aA6H
      w4BAokGy0b+HGXa81dUHVef++tS5kO/7YMyYpwV+3hsw5uVmHEBjnol7AfTpe2//08/fttxd
      T2e+vbySe9KD60vXfv6rD+V22/38nna7bSvNXKF+/zmbm5ueJW8VG497g/7y8upDd7m2IavG
      /Zu9eiFfaW9ublbym3r/3hvq7Uq1o99/jt4qfHxr/f7Ndru92yca88ygg/+t5Svf+8rpv/rr
      v/7Wd36tml9dW9sWE+nTGeF6rj4hQKvbNRyFpuZPqoa/vniVTc5+56sXL1++QqFQR+6JidnX
      z5+8fetWePbi3/31X85863e96iqgpHd++fZ3v/V1nI9cffcXs2dff/XM7Nv/8N+mz71W1uD6
      hle3SdArtLX+7GRyY6c6MZlVDHDj43dcKjodpZbXSn/053+e+/CtyznzYprcaeo//NGP5EYx
      r5G//OlbZ9PY3K/96bms9Hd/81cXXzvrsnOEsgGEbPnux6lkaqXYITCws3zdp8ObN999/evf
      WcsVfvjHP2bx8eH28Lm3T11Lv31n7eylN//xb/4yPpmlpLRv9j5+//L7H3xcrHQuLKROnTnf
      NM1eYavQsRLRIACQgLn5rpOOiIt3lgEA5y6+9tm7vxKjiSDtvfP+1Wsr2xOpWDYubq2vWJgY
      FGgAXD6avLmcJ+3a5Xcuf3z1RlcxOMRe3cjHJzLFakdrNz2MERC3WN5u6S6BQNFoNBKJbBbK
      uNNra30AQHNnI5uJuUx4K5fzzGY8nV2vu/LGp++8f/XazUUfYy8sTNfLxW6j/MsrH+YLlWgi
      nZnIOGq9VOs8z908ukCDWVhpe9NBqHAA/O3PPvizH/9utanCwAV9S9bdQIBiAziAMavverYP
      XM1FA4lI0O9bqgUZvVofpeNhqVEt2oAUaaSpWK4m4wyP+zaEkQge0NqVgBQLsni9pQUoVNcN
      S5ddmPrwV//8xrd+o373Iyd09vVz07121/NcFIaXrr37z+9e/w//8T8lOHhtYycR4luak03F
      Ta3X6qq8KAIf6Joh8WTP9HEEGLqm9no4w6OQHxLYruk5hgr1bQsQEo32dEtVtJm5WRSGnvfe
      HkGg8TR+zLMwTgvGPBPjABrzTKDPewPGvGTUc9dvt4nGxtL5k9MmTI4DaMyB6ZbyfCJ+9f0r
      fvLCOIke80yMc6CXHtu2hz2E4zhPemgcQC89u3y7RzDEOIDGPBPjABotXO3DDz/eqTQffcTU
      eobtDf59/fr1Sj5vPvCo1uvulCr5fP5Ao3VrhfEsbLRwNRti3/vff2VLJ0XCxCB/ZWU7MT/j
      qS1fM1wp+5VXTk8Ekf/7D/906dIb9uoykNseTOzkKtMn0029zyL+zQ/fyjcsnI38xZ/9Ib7n
      aK49noW99GiaRtP0vRuu9tGnS8EQt7iyc/HcnK12ynVZSk0EYEtrdwAtEjgh4F4gGFq8sdrq
      7Oh9fC4e9DEuEmF7monAOOZ0NRcBKH3q1Mz9o4uu64FA4NGhG6XtcQC99HwpgIbDkwIIjHOg
      Mc/IOIDGPBPjABoDgGt+8sknlXobAFCpVO7/N5fL3f/3kxjPwsYAgJIYhim17Ru3b0B67//k
      GwtfuyTg9uX3bxTLJQ+gb7x64YkvPcrtHHP0aO3Kcr7K0kyxsI3hGIIFvvbmpUefFo/HGRzW
      EZqFQryUjEbjsgP92x9/7+adfIBldnn/cQCNOK1SJTE9h1qWrintRkXVH/+jRDweBwCcD0YB
      AHytBAg2JDCK0p2bnWVZStf1x74KjEtaR4A9pvG+t5nLpaZmLV31PA8BPskJ6G7V4fZHHy3O
      zaZvfvy+L0mdjcbk+bML0+knTePHR6BRB4KnZucAADjL7u8FGIE41VpZ020xziUzhK4qu739
      +Aj0svN8RSJ6fyOGugVjhodlWUcwxJMONPcCiKbpXr0AuLTbycNsvJRbEmJZqG/SKLRRrolS
      xDd7DkwFKR+X4lsrS7HsCQp2YeAqHi43KjxPl3ZKocRENh1/dIxevaAhgcpW+dypdNPAYtIB
      /lx69QLgwvWNra5pnjl/gUQO8LHlVn27IYtYX5yYr27npqdnDvDip2KwD3ny3s1aqSRFpXrT
      SMakoY776BFodXWVCxAdo5+NcOuVDumqBqAkngxw0ZDw+GPJAK1dkQHnyhU0IMmdBkvhDkKF
      Re7RI5Dvuesb21/kQHKjCIj0znoOIpoBxLcs0+1W1g1gdyrBkFTvGb6vN/UmQrUwBFim0e41
      tV5b6yPtYo5PZgIo26yVHhtAcqO4rACs3v5ps/Xrv/6tA+0apVnyCa5UalMcbDkeiRzAfHLB
      SGtxGWBew7Cv3z6KABrswxuX/64u4zgnfP+NmZ/99AqC9peAp/R6gUjWUurVmvoX//5PsOFu
      iFcqVRKnJy08tJZbUV2UYIhYiL/12dXY7LmQkN3llZ+8+xY2+Y0kZTflYqfZwSCHC6fCIvfo
      M13bqdVryE9+8pP7dxWLlfRERmJJVTfFYHgiEzUsiKdxH6EYHACcTKcnuQCim04wHHFNPRiL
      hyUxlswECNS19FAiI3CPdwaRYJSJpRkcJKLhA+2JAMtv3l2LJaJ9349GoxhygKtL5VbNBFgq
      EYtOzGYiArvfLPKZKBarDM8Gg8FoNBJPTriuNZmOM7yQW1nOzJ1OhsVwKBxPxg7xFwDHcXD8
      ocoLCEURHyESYRaBMMsD4XAwFovRBGr14UhQ2OXdJrNZRdFJCsEpLhwUJJFHCZoJkBj2cMwj
      KAZDDyTRg+Pt9ZvriVBAdRAG0jVEJO2mBgJqt5vKpCDfoQKCKBzF1zBm/7wQSTQAgKf9n/30
      CsIwkGfOz88vf/RZTuOiSCN58XcwTdYaO2hoplsuiMLCULf1sDj6acERFLc/adxhD+04zpNS
      9S8CiBRS09M9juN81yzXW6mZhRQT6ZbzYY7oo/EAAlCRK6kvTY8LmqYHWZ5vdnEmJJs2D3ux
      +Xly75c+JQiCyI0S4JIcce+eeqUshsVmy4xHxYee3GmWclv1mfk5kXvMwaNarRKwn6+0I9Fg
      gCBFcbeTDgCAoqiH7llfX0/FxJaGCJhVUlygt0maR2BAsZGg8PCTB/iem9sqRHncwkN2t+zA
      pGOoiRDXcymJxUny8XvuSyLx1KlTDz2cjoUBAIC/lxrPzU3v/kleKAZZ3unp6C/fu0lJggP1
      xWEGELiX8idvvff3DRnHOf67r0699Yv3YdS7A/pqT6bCE7baqNXUP/3T365VW6VaR5Y/NtRu
      AEd3mhYfjQbh3npBmcom+gC9sDDtmvrN25XpTGrPAHoEr1yupsJkqeoQYbTZaLKwrphQt74T
      nT4dFCYe+xrXcRqN+tbN5eCZ3wTdigNQy3JTPFRoORIbetJIo2yiMZLKZtL1ZuPsuVNm348x
      JLH3i54JNpTc3FmT4tNCFMUDNCkkJydlgaF02/7o8q+SJyQ2yififQgNoCjy6qsXgKv5rmXb
      dmqaQAMBt1vhE0xUYk3T7Pf7JM3MR8PAdfce+GHg6elJihGTEc3xbIHjUBskJmbcMN15sjPC
      CCqTSsbOzG1UVSoW8yAKhfoUzyV3nbeMTfShYZrm3k8aAoZhPHoKO1xM09zjFDY20S8vvu/3
      +/2hDuF53pOG+MJEAwByuRzUd3meJ1i60TYxYKEoWq8UJEmqNLvTcyerheKpU/MHHb5vqUsr
      66nJ+U6jPDNzMJv3LCb6XhJta7HsXLNaPAKRCADI5XL3P2OhUEin0wAARVHuW6h6va52W7Lp
      TU5m+C+rqUqlMiirAAAAV6u03XiE38+gw57GQxC09zTeVipXrnycmU75dxbxWEY3LUhrA4Lz
      jG6Iwa/eLZiNsk7HHk6z90F+eTl1+jVj87MrV4sT0zPYQTrNPYuJHiTRAgWuffDuVlM7ggAa
      7MPVjQ02QO7cuYXE56UbH23VzfnpcGGj4grxP/sX32h0dLnVnRCxdz/6tLhVSiVZq6vohDgr
      gpIrhG69t7hlzM8ngNKWZr6yzwB6jnyRAzWqVTHE3rydj/OYRXIsAlTHIVG0XinwHF/XfIGC
      WZb94k9k3/QtdXF5Haf5uaTQ6dNh7gC5rGsqt5ZWRTEoq8r8whnqQNEHQKFQ0HsNITHnWcpT
      bPlBGezDG4v5VCRQ3C6RobREuqVKJxIVXLNvoYHpMOVQUiO/Kpt+iMcrdTUcC/bVdsfGjV5z
      Znam26x0TSibinZqRT4xn9xHAD1fkThOol96xgE0FI6ViX7kt7BDxnGcR38LGzCyHui+iUY8
      w/Fx2/PPLhw4/T8Qj5poAMDm5ubU1NQXty25qiMx8ZAPGI+dxpcLW0Yfi7BYvqnSsOV4GB3A
      dzHRAzZWF5lQ1pZrgKRa5ZYUZhCcCwrMvkz0iDFIoo1eNTt30VXlIxhxYKJvf/jzTs+AmNBv
      vD733vtXc/k80dc7XVX1qbSI5Gp6Oi4Vt8o//rM/oYZ5WV5QCm6WGvVqq9xQUKvNiunCVnkX
      Ez2gUi6yfRr3tNrmJgTjXcdlsU5QeOLcaZQDaGCiLY1WlR7JPqai5dAZmOhQLBFOBACKyjr4
      13/8O7fvbCeCxNv//NaJ118Jkp4QBwESCQmhgxiJp6FULjEBFvHxJEoHIJ4OZv04v4uJHhCL
      p2zfozlukuVaLVmSOIzcrf5iZHOgo2dsose8lLwoJrpd2TZxsVMtkAQR4ggNCTQ3SnNnJzo6
      0NodtN9rm7Bj6pOzc3K703dtnudD8fh+ToGDmujGdjWbDYOAxB+kt/Czm2hgyQgtmY57avil
      BINPCtlQPH6vCLrXrEIEaTpYRKJdrd2wiPhBSsL3yWOn8dXSdktxTp2Y2djI+bYqW0hIYvas
      iV5fucmGpzy95UJotdKIRXkI54I8vbeJbldaO+pyR6eI7hYhRj1ebFxbNUG72XLblvfDr0xp
      Vhg0NhCl/P6N7akwemfR+MEf/N5+YmFQEx0E1Ke31n/921/dxyu+4NlNdIA0+walazUw/AAa
      fNLKzbt8JoaYMsymf/u7l976xbuhELu01O5tVVtk7M9/9P2jWfSFp1DFZ4q5xcuf5r5+fiYW
      kRavf7ZnTXS5VOT6jGf1jNq6DKS65UeIVpA//aTnfxEAUjxuKswM4lLhN9v521JiMg8HzpzN
      rmy2vhmjdYCECaKPxh0I+vH3IqsVNZlw9nkk4cKpV6KU5sBJcOALUGJTp24trWamE7Kq4Acp
      iAafJ9Gm3IQDFMUkDjr0UzD4pAWCxgM0hQIEQQCEnT67gACX0ripSLbXxzwfHPBzPCWag04m
      WMua/8G3QzAMR6MRyDnV3usbSCTTlufxEcmPfPX+EWiX54+T6JeesYkeCmMTfYgcUxM9uLAw
      AJkIRves/rmTw/01fmCiNYSCbCgWu1cELbdqEEGaDhoWaVfrNG08JtLN0lbLIT2je/LkSQAA
      AFaxKKdSYQDsjZX18NSpgcvudruCsK9i1mFP4yEIOo4menBhYUVvd1UokUkfwYhKs3RXAZXF
      NT4VQSwFZpLf//ar77zzfijIrCx3evl6m4z8yQ/OlyrNzbZu9bqllU+3LWEqRTbXK6H5hUZt
      Qyu3Mi1NLa+1DfD6pVcdQggPNzaelVEOILlVEyNxGhYhlFWsoa8HAABgQ8lzETJIBIgATaIA
      hmEAoQunTiDAJXVuIjwhe6hHcASBzyZo8sSc1SmIEJeMUFZ0Uu6DaOiCP6m6OJMUzsA45bjw
      QSpfng8jmwMdPcfaRI8ex8etvxAmevSgabrbrOar3RAF+RTb6SopkQBcSqKH+JH3aaI71e27
      O43MxFQyer9rh9/pdEXx4esP98kLURM9evBSyNupdXqt6IWvufXGu2/9cvIbfyTRQ+y0si8T
      /buvVKrtQkOubv/CJYOEtlUxhclMLBULPXUAPUdGOYCalSJGs8m41KkVSYb//u/9UEeHW9Sx
      LxNN8Chae/PSRRZo2y1NotKxdj8dlxRlt05yLyzjJPql54Uw0ccn5Rwex9pEP0WLu1hwv42C
      nm+LO8JVcEbqGfa5k7MHePHBOVB3jnqluF2sEAHu7OcXau5srps+4GiJYQiGYUylCyie3LUh
      732el4ne3Nx8+hZ3AOw3gJ5vizuW9VavrvKZ+LADCBykO0dbhTEMU9uVK7/c2Mg3fusPfuR7
      niI33v/Zr7jZeRFSpViawukTJ17cdij17dV3P77zRQBx4dRG/u7k3Gm4b1drzQBFxRIn+lst
      iEZtB4SEgNaHwxPpvq3WmjJFHaBNyr1yjglIa9eoA1YCP0s5x8BEB3z99W9Oa9ZRnF8O0J0D
      asViMTcUQhGf52s0gWmex4uJC5dwPpnJ3f5EoEmUOVg7wCMmMjH/fYIfJ9GHxthEjxTHZ1ow
      NtFD4X45xzHsE+052rUbK4Ik4CTD4F6pqWB9g2IFGPb3URO9GE7NGL2a6eOerVMY8qQ+0QPR
      P7IBBI5xn2gYowUakUKRlburX710brvc8pyebELdWn7PmmjLMqu1equ0gRPEh58tzc9k46ns
      Y/tED0T/KAfQIIlOigEinI4Fn9jl7xDhwqmN/GowOSPGUTzADvqWiiylWfb7v3w7dTLExYRU
      0h12SXTflDu6Dxq1ZCyymdsiGQbSrGR21o3Qe9ZEEwRuWXZmatr20D/8V9OeY9jg8dnPQPSP
      k+iXnhfCRI8e45roQ+SY1kQf5z7RAIB6udBS7XSQLikubHQxikERaM/uHAMsrVPrGI1aPR6T
      HB+PhoRHp/FGt77ZtEY2gMCx7hMNAAAchShANEy12WgKmN1WHKW9d3eOAR7s7Ny+paN4odWb
      TEajocdsgGnareZIJ9HHuE80AABoDpqNMbWyLnAc3tcmJ6Y9de/uHAMois+eOVer10/HRKv/
      +CBBcELkxyb68Bib6JFibKIPkWNqogeqlEFMzcVRgoAthWEFA8LmJpJDGnT/JrrTKNa6Hs9g
      g96xla27Lh1nMO/pqlrHNdFDYaBKPRKZXzjx8XvvCTRo9hwYh4cXQPs10X/+e5VK48adYjCg
      ve9yMO5TRq3QA5defQNmRf6l+k5eqo09IANVygu00a4HownU7lGC5Hre8Ebcr4lGaRRFv/HN
      19VWRTb9WCzoqe0piDQcaJjXjAyFcRL90jM20UNhbKIPkWNqogflHBNBsqH0VcvGrS7GR2RZ
      feXcUyz4sTefm+iQ3tHvd+eoVquxWGwYwz3IuDvHUBiUcxRvrXeQJC8GCKMeC4QxdIh/rEqz
      tLlT3by5IqXTiLzZ6ofiUfKdn/4/mA/HeKzT0WFOInwlHJu5eP7lWHp2T0Y5gAblHF+7dHar
      Khu2jdkMTyOkkBreiGwoeY4LBVECCtAsHm/3HBjH4oLoU5JEQZphyhYUlWZRdHR2+8jmQEfP
      sTbRx8fbjh4vhIn+8oWFIbneskxZtsH8/HwxtwxRPE2gKNov5OuSRAdCMciGNK09MzNdKpUB
      sPSu2TVMSWKbbTMTCrDJKeaBhb169cJGRWZYZm5q79+BH+LZ+0T3jW5kYiHIH0WjL8/Wby8t
      x7PznqU+sDyZW6m04/HI8MZ97DS+tL2pe2icJ7eaKu6oGMWgKLTPmuheowBhVLXSiEcFzYEy
      iejeJvqBCwu3b36w8uvfe6Wt4TAEF4oFjNEpDMYwo1jQca+70ZEZVV8ptlOTM+VyEUHMdtXn
      goQYneh1O+u5FaJjv37h5IPvLDtBo1Z+igB69j7RJOp0V9fffO3sQYd+Cgqrd2InX33nb/4z
      lD6VXb11c3ErMj8vAKVR0/FI9F9+7ztHsA33CYaCnUJjfath9fsAdduKIzeL+6yJ7utqYf1j
      j4oxosBJu4U+8pOf/OT+jWKxkp7ISAIzc+KUpWkIhgm8AHsOIwRpHNBCGIUghuenMlnZgX/w
      nVc6iitQHh+dRFzbR7FoLIrDUCiaEliCYZgHh4mnp3yzq9q+wDEPb8KuBFh+8+5aLBHt+340
      GsUOcm0hgmIwBGCvn545ESCOIm/lJGlz+XZy8kQ6kyZxVJIiM/PTARyNxhMBhk9Eh1KX7TjO
      Yz1QfmuDommJZW2EwIEbz85HhIDVhyPB3aqLep2m48IsR0XSs17fj0aDybC4iwcaJ9EvPWMT
      PRTGJvoQOaYm+l5NtNUFGOdAyOm5qb1f9gwgCOI5xtKdu7GJWc9SHxDQbrXaicXCAIDaznqh
      pYVCsUw69lA2V6vVIFu1IUqIxBkcqlarsZiYWy1n5yb3bNExNtFDYZBEu0pF7fMe5A07gAAA
      pbXl2Pwr7/73/wKSC5n1pcU7+dDsrACpzZqOh6O/+dpUqdal4/MfvvW/7kaZrowJUV4ubLKJ
      E4kYn+bwxZraq6xJwnJuvRCfmVlZarF8MrfJnJh+cbssjOwpbMBg2W+Acx6EnJydHOpYpml6
      jnFneRXHKYzlPa3V65mhTNLu1j0f0z3kwnzqzp110/MpisURS9OhYFRUGiUMRmw2tZBi88U2
      ArmO0ZMNOBSVtHbFc2EpeyK6a7vo5ysSRzyAjpKxiR7zUvKimOiBRZUkqdrqsiSWmD4zsNK1
      YoMn7XxdyaTTrVopGM8+0N14X4xN9BGb6EF3DjEo4STNU9D6do2BLYwLY4i3t4levsnHZ41O
      aWCiXzk/v1OVYyH+0Wn8YPd+kUQPLOrSz/+rjCcop8ekzgys9M5aMxlF0OTFlY9+lvnKj8o7
      SwcNoLGJPmITPejOUai1aLSZuXSBKLe1XrFet2GrsaeJjkaC68UK6d8z0f/4TpcmsVjo4qPP
      HOzeL3IgzzEWl5ZFUST5cD1/14bZWFSAgek4pNEttwxvIpNp1UpSbOIpjkCAS9e2FgkuPJE8
      WHWVayq3llZFMSiryvzCGQo7WGeLQqGg95qhiZNBdqiXpN5jsA9xPIBxgqc2e10znE1ZnZrv
      Y5qHXDxzYhiDPioS+6Z8bTEXlHgMJ0SaMFGulV+KzZw1GtttCz01l93l3dZXbtlegGFgCCGq
      5frF116pVyo8/5gjEACgUCiMk+iXnrGJHgpjE32IHGsTHYBdlOY6untyarhrzu3fRGeyMxHx
      ix+VG9WqGIs9+E10Op0DXWH4XEx0r1Xbro10i7tBlicAE46RrUZ92AEE9m2iP/r538PhDGnL
      FsxA6nZVprIzCa1SgCOT/fKKHZw6k42/+AuvcFLQK9ZH9hQ2oFAo0CgwIKzdUc4MudH4/k10
      SBTbmiUEMBiGEWB1ug5GYTSJ6arVB4DkBM9UZ2b229HxeYnEZnmnpvVHPICOkmNtokeP4+PW
      XwgTPXocfTkH2IeJrm6v7jS0UCSezcQfUqLVSgVyVBsKCNEEi0OVSiUeF9dWSlMnpvcs53gu
      3TkeNtGjx9GXc+xuon/njdlCpUMnT773s79djrOdHibFhN5Ojk0upOLCBI/fqCq90mpQWFpb
      207Ozt651eKE1NoGuzAzxJ9BnpqHTfRIcpTlHGBPE30yvbi4ZvT9AMXimKVpIBST5FoJQxCb
      TZ/OcFs7TXhQzqHD4XhQbZU9Fw5OLsT43co5nqNIHJvoUWBsoofC2EQfIsfURA+6cwQg0/Fx
      2/OHvez3Pk20gQVJyB48urlyU8ychmxFeDZtODbRQ2HQnaOit7NzF121ewTLfu/HRBfkDmiu
      wcEM4Srt8pa1WHnl7OQzBtBzYfRNtNyqbdW6NGyqBoSz3FQ4oKPS8I5A+zTRoWSqWanYMB7m
      A3KjhPJJzzNP7Ns7P8rYRI8IYxM9UoxN9CFyTE30oy3uUDZkud7p+WEthdyrF2QHgzE8GZEA
      AJqiUCx7gCLcp2VsoofCoy3uOladk/jhBZDcKF7OmQtp+p1/uBbMZKpVJZpgPaW108Umooza
      qtl0lPU7k2e+fv7k0K3msBl9Ez1Iok9NhD9vcSfDlOD64NT8sNa+7NULNhwo1ZuQLuMsr6uG
      FJFIYBUaVjou6d16x8Z53KWDyUTk0CaDYxM95pl4IUz08Uk5h8exNtE0TVtq+/bK1omF2VpD
      dU2Z5/l4mPvk2gpJYZ7jzp86Ua72BvfbhmL6eAB2mq1uKJ5s1euxeLRYqsyfOsuSj0mq+pa6
      tLKempzvNMr7L7Qb8OwXFgJLJhhR95AjqIm2tc7San7u1FmGuLehd27f4COpVOyB7giupToQ
      Qx3mV/7oNH59fT0VE1saIhJuvqmywEV52rOcPVcs1DtVGbBRFsmXWq6tkyjUx+hYSHx0Gu97
      bm6rgD5w2wOec/v6rYbRZ/u95T71+989X6i0BQaG+vbiTacim4P7UxFhfn5+6eZVIsDduHb7
      N3/3u1fefu/Xvn3xs5u5Sxcfc+lTfnk5dfo1Y/OzK1eLE9MzB7q069kvLAyQ5vp6g42LR1AT
      7Xme77mL1z9tV/J1pf9bP/w3pVLJUTs7xeDdtVyCMXsmd3ZGXNqRKcjAxUka7lFsZAiNz71y
      uZoKk6Wq0/Z7lufZqiryc7k7S3uuWHj1g3ew7FdLyk7L8ggIefXCQqmhPPaZruM0Gg+YaK1T
      W9uu0kIwRKFt0/EsY24qWWhYwNUkBs+3zDhLDO4nEGACHPf0jmJFo+F6vZmIx4qlytypM086
      Ai0ur+M0P5cUOn06vGuviYe38pkvLDTlJhyQdNM+gpporVvP7dRwgoD7JoSSsYk5uVHkCEix
      4XKrE5dItWt5wO4jFIWCTk8XeSLAR58xoX6sSCwWi6mYWKxrBOTWVSsSwLhkslPY6ljIyZld
      rw+25OV8e24+26xWXdc1lC4djEsc/ViRWCwWx0n0oTE20SPF8ZkWjE30UKBpWm5Wtpoa7auK
      jSIYdnZhftiD9uoFDQlANhSPf3FW6tZKqBTt1ZvJpHD9+sYrrxz+Ui/PxUSbSmtluzmyAQQA
      UBQ1l9s4M9Oor3IAAAzISURBVJU8eXJueXn1CEaUG8VlBXiVzlu2EyJ1H+Z7tvej3/raWz/7
      KR9PXvn4Hb2DFnLXfEyKZjNvXjiKhiHDI7e20bNG9wgEAGA5fn52lheYbrVIMuwRjMiFU69E
      qW2sFCfwndWbk/OTPgwjpJCeng7yDE1jromwlAdB/Z7LHcH2DJXp2WlruzFOol96XggTPXqM
      a6IPkWNaEz0w0Z7ZRXHWwUhfroWypyK7Nnh7FgYrFm7W5GQyGRa/dIbSVJVimF61GojFVm9c
      ZcRwJBxnSL/aMpkAyjDMYGHDTrOys1NOTJ8M8/c2Mrd6Byb5qYkvrXGmqupDK0k8dhpfKeZN
      D5vMJDc3N12j10dolib2NNH38fvm9RvLUlCgGFFgqWM3jQefm+gTk/GdUlfr9+aTgm07Qx1R
      aZYUR9q49st/KrsnFyZ27i4aIDQxLbmyRXPo6uL27/+7PzVsz62u3by2iGHW1nZv/uwJ0u41
      dPD7v3Gp0nH6vl9YW3prpyH49fT532qXStMp5/+9vVncyk9ORnxDb/UDgtexcZpE6G9+9zu7
      mNVqpWr4GO5037+2+YNvnC01tLt31vc00ffxbVNuFlsmiAq2wGaf9LRRDiCMpLKZVKlSFaQg
      bjulamfqxBCXKwT3VixMyiVHyhAe7DFnzuNUCMZslTIDNHruAk8AQOEwK0wSbB8n4UhYSU4m
      tWaZBzQgONiuwyhGkdTpk7xEz6IBUpxbSIU5l+gGGSaaivhqLwFwrK8DnLZ6HVXXPBSC4cf/
      vBOLxYw+EKKJ36ClcqWcmT4RFciOtd/PAuMUH5kIBjkf3q074MjmQEfP2ESPFGMTfYgcUxNt
      G8r1pZxAuh3FC4giZrXI0NxUKji8QZX69q3NxlQ2Dfmeopkz05MfvftONJmlaVK3PMw3eSms
      dlu6h/Icq6sKQ6IkH9ba9a2dfEgQPIxhYGO96Z2bCjoerCg6hgMUCxhyl+VZrdO0SSkalBrV
      YqdWCYTjC3Mz0OcfdngfCjzBRHeb1aVcYWQDCACAU6zvmiTFW41aY1s9PRmVpOHqRBinUEe5
      fXcTam8oHkmFJ2VZpuD1Lje5vrWeEr27b1397lezV9dlsd/AExcIuIf6JZYN6LJMCNSVWzsx
      VO7agZ+WNkOgp/k8xIkJxi2tb5ji3GyURHpbq+12iEIR0t/abpyaG1Zt7n4gKUqSpBHPgXq9
      br1cEiMx3TSNXjeanhLYIaYLnmutbeyEg5zj+iiKMkLI0noEChwfabS6QSHgOZ5umiiG+Qhm
      aipDIgQX1tp1nGElmqg0OhAEoSju+w4AMAQhMIZhsNduNAguSBOoY6oQKfAE0FzEd3XPdgNS
      yDGej0iU241SUxnZANJ1/XlvwhGxS4Z7BEOM7CnsSep9eDyvWRgEPXEmf1jAMPykIUY2gAAA
      95PoVtu0CSpKOkNPohs7S1ut7EQS8j1Vs6amJj794EokkQkESMP2MM9kpZDWaxt9jOMYQ1Vp
      EiG5kNZp1Do9CsdoEnVsmORJ2IcV3Z7MJD775INwYsK1XYLCU4nE8Lb8Kei1assbpVEOoPtJ
      NIw6hqqRYnDYSTSCUair3FnbAp0t1SOp8ISsKGR1o8dlc1u5pOiv/er6t9+YuLYhi/0mHjuH
      wzIKKgxDGapiI0ijbpRWN6QzC9bGLYs7kchESYK6/dFlSJxMpaQXLYBIkhIlcWRzoAGDJJoP
      RizX0budoSbRpml6rpXbKoYk9l4SzQctXSYQ4Phwoy0HBerBJNrSVJpECTaodZoBhuqqNs9Q
      lq7DGOz7MITgoshVdjZpIby6dCeWzUw8IYCel0hUOs1ya5xEHx4j/Gv8LkOMbAAdH55vPdAo
      50ADVUr5SnDiXDmfQyGbYwSIk+YnkkMasZ6/s5RvTc7OMzhc3V7DoicESKvLelxi+ghNkyjL
      HkVh5NEw+iZ6oEq1dufG+x9YOHIihm9Ueki1MbwAsjTZcdy33rlyKorXNd9pwaSSa1t0hPUQ
      CCdj2W9eernroB9ksHtHOYBsy4YAlMksnH01aRtqr92cPiX1tCFmKuHsQhquvf7qWcf15yHI
      g7G+nkADArAUD/IN96jV1FAZ7N6RzYHGJvpohhjZI9DYRB8ix9RE30+ifSyI0bTVrQw7iW5s
      ryzvtNMzCxHK295c97kkBdxQiNNtYCpdTmBVRedFUdHMdCI6pG04YkY5gO4n0beu3YpMJDKC
      P+wk2tYVx3E/+ez6LKNVVAhuq7CqXsWCk6JT3ymZwvSEBL/31s/E6TMjE0AjmwOBz+sNJAbn
      pGCj1YNdg5eknmZ/qVvP4WGapqXJW8V6NMzbjoeiKIBh2PMa9UpD62dCLM5KNIH2HVM2+ocY
      QM+3pHVkA2hsoo9miJENoOPD2EQPi4eSaF+rQ4Aiw5Hh5UCltSWFFHZufUbHM3qtMXP+DOr1
      PccUpLDh+LHwy7cgxpO4e+1dh0rKhjrKAfTlJDoOaxWImUQ6neEFkKHauY2rjm3USnWouGEy
      vIhYVqOwrpAnp1Ox8BtDGvfooUlssdblAu4on8IeSqJxYAdYXtaHlUQDAAxF0fp9zLMNDwWW
      6UAQRweUbougGBfC4sM5Aj2XU5ip9TwY7/TUkQ2gsYk+miFG9hQ2NtGHyNhEBzGaguVqzyXD
      qeTwcqBHa6LfvXI5TENkfAHWa6pPBwUWcoxQPIUhB2s3+8IyygH05SQ6OZWMTAns7burwwug
      R2uijXZtq+sF+qJVulUyAlPZKN1XKz3wyqmhN60+GkY2BwKPJNESz2Cw15Ct4ZnoR2uiHa1t
      WG7f8xEU9tx+H0IhRw/G0/jhHYHGJnoojE300QwxsgF0fBib6GHxkIk2qqsuHgmnEkNMop+2
      O0etUYcJJsgQaIAjYfej9y6L068meCyZHNamPjuD6zZHOYAeMtGUq3m+q64NMYl+6u4cHE1t
      lOpKQ/5ssfHaqyfMXm17YxuZCr3IATS4bnOUT2EPJdFI3+QEsTdME/3U3TkwAjMcGOkbFM3I
      hot5OhYQDV1Jp/buyfccT2G9Xm9kA2hsoo9miJE9hY1N9CFyrE10ELc0NKTK7SDmHrGJ7nWb
      8WiICyY2794k+QiFgGRmAh4RBX2PUQ6gQRLdt42LJ1J3cgRw1CM20T4Th+y7hWbfkRWewT/4
      ZPUrdDgTGqmrw0Y5gAZXvmWzWd9DpqYynm1gsHf6zBDzTZLh+HByWmIdN4uiqNuHXFfnONH3
      QhzHwriQCI5U9IARFoljE300Q4xsAB0fxiZ6WMit+tJmMSvAuZaHYyimdZl0vNc1X7twZkgj
      fmGiXaNnAZaAKg01FaGWVis4bF549bWeqruaAuGBAOYBhNRtdyIZG9LGHA2jHEAITulKd71a
      aSFJyLPmgly13cNdb3gjPmii1+TAG6cjrhOIJafLNUNtrvyP//mLE/OhfqNeUsiJk+HSco4I
      J1/2ABrlU5hr6eWmnArzsmHrpsOTGEKi7Z6ZiAyrz+aDJroPUI4mbNsOBkVFMby+4XmwZjks
      gVgu7LgGieOK4WbT8WccdLzg3FAYm+ijGWJkT2FjE32IHFMTPUii8b4RjqcqjQ4J9GAsW200
      Lw1tueTG9krDpyDV4YMMieEAI2CteitXzUzPBQjYVhQLINOTmVFy0aMcQIMkmuWQrWKnb7Wa
      nZJHpV1ziMtA2brSUNW7V+/Mnp01uzWEiLwyzViOe/nyu7PTotvQu32UT2TCxPA24agZ2RwI
      fJ5Eo57JClJXMTHfFCIpS1d4nh/GcIPuHD5KqIpi90GAQGEYJjF4c7ucTER12yEgqA9gVhTx
      Qz3hvBA10ccn5RweYxM95qXkRTHRWruynK/2VfPMN968fvnt7PzZSn4jFmTKPU2z8ThuWIEw
      g+gYE8/dXcQxLBiJK92aC8ivvbnw9s8/IVATlSZOT0dXNhs84eh9FId9DMPm5ubq+TsbbYDB
      3qvnD6yA6/k7IJxd+/AzVOTOX7hAIgd6tffBh5+wsJO58JXla9cSAowlziWFIf6xDky04zjf
      /PqblbXFnbYqRdMsZldaVjgkZpKxfD7ft/Se3qdonMJJniFMx9csJxoUHVPrGXajWo9EIgEC
      4sIpEn0Jsu0vAqhVqiSm51avXHYBkHsy5KjNeqVSBghFxsLxNkK2trYlGiC0J0mSoXQBDKuy
      bPkWAK4sa75VCXITudXNRld1WGp2cvLatU88hJ6bm7M02fKCntV6iu3zbEPt9SyA+kpDNvok
      c4AIquXX8+XmpanQVm5tp95Uy41oYDopSE+xGftkYKJ32i4MgKHKDkytLN0Ic+id5Wp0ZirG
      9G1EaHcqc1OTNz69XJKRianJVu4aEZq/g9gB2+t6Pq0V1jajYjT4g9jLceXh/wdHj6F1LMuT
      4gAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
