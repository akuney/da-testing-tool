<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xml:base='http://107.22.220.242' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.13.1231.1350                -->
  <repository-location id='HotelMetaAdvertiserReport' path='/t/PreQA/workbooks' revision='1.6' site='PreQA' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column datatype='string' name='[Advertiser Segment or Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Advertiser Segment&quot;'>
        <calculation class='tableau' formula='&quot;Advertiser Segment&quot;' />
        <members>
          <member value='&quot;Advertiser&quot;' />
          <member value='&quot;Advertiser Segment&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;All Advertisers&quot;'>
        <calculation class='tableau' formula='&quot;All Advertisers&quot;' />
        <members>
          <member value='&quot;All Advertisers&quot;' />
          <member value='&quot;Aeromexico&quot;' />
          <member value='&quot;Air Canada&quot;' />
          <member value='&quot;Air Canada - Marketel&quot;' />
          <member value='&quot;Air France&quot;' />
          <member value='&quot;Airfarewatchdog&quot;' />
          <member value='&quot;AirFastTickets&quot;' />
          <member value='&quot;AirTicketsDirect&quot;' />
          <member value='&quot;Alaska Airlines&quot;' />
          <member value='&quot;American Airlines&quot;' />
          <member value='&quot;American Airlines Fare Sale&quot;' />
          <member value='&quot;American Airlines Vacation&quot;' />
          <member value='&quot;Apple Vacations&quot;' />
          <member value='&quot;Aston Hotels&quot;' />
          <member value='&quot;BMI&quot;' />
          <member value='&quot;Booking.com-ads&quot;' />
          <member value='&quot;bookit.com&quot;' />
          <member value='&quot;British Airways&quot;' />
          <member value='&quot;BudgetAir&quot;' />
          <member value='&quot;BudgetAir.ca&quot;' />
          <member value='&quot;Caesars&quot;' />
          <member value='&quot;Cathay Pacific&quot;' />
          <member value='&quot;Cathay Pacific - Canada&quot;' />
          <member value='&quot;CheapFareGuru&quot;' />
          <member value='&quot;CheapOair&quot;' />
          <member value='&quot;CheapOair-Canada&quot;' />
          <member value='&quot;CheapTickets-Ads&quot;' />
          <member value='&quot;Crowne Plaza&quot;' />
          <member value='&quot;DealBase&quot;' />
          <member value='&quot;Delta&quot;' />
          <member value='&quot;Edreams&quot;' />
          <member value='&quot;Emirates Airlines&quot;' />
          <member value='&quot;Expedia-Ads&quot;' />
          <member value='&quot;Expedia-Meta&quot;' />
          <member value='&quot;Explore Trip&quot;' />
          <member value='&quot;FlightHub&quot;' />
          <member value='&quot;FlightNetwork&quot;' />
          <member value='&quot;Fly.com&quot;' />
          <member value='&quot;FlyFar&quot;' />
          <member value='&quot;Frontier Airlines&quot;' />
          <member value='&quot;Globester&quot;' />
          <member value='&quot;Groupon-Ads&quot;' />
          <member value='&quot;Hawaiian Airlines&quot;' />
          <member value='&quot;Hawaiian Airlines - JFK Launch&quot;' />
          <member value='&quot;Hilton Hotels&quot;' />
          <member value='&quot;Hipmunk-Ads&quot;' />
          <member value='&quot;Holiday Inn&quot;' />
          <member value='&quot;Holiday Inn Express&quot;' />
          <member value='&quot;Hotels.com&quot;' />
          <member value='&quot;Hotwire-Ads&quot;' />
          <member value='&quot;Hotwire-Meta&quot;' />
          <member value='&quot;Indian Eagle&quot;' />
          <member value='&quot;JetaPort&quot;' />
          <member value='&quot;JetBlue&quot;' />
          <member value='&quot;Jetsetz&quot;' />
          <member value='&quot;Kayak Software Corporation - Ads&quot;' />
          <member value='&quot;La Quinta&quot;' />
          <member value='&quot;LAN Airlines&quot;' />
          <member value='&quot;Marriott Hotels&quot;' />
          <member value='&quot;Melia Hotels-Ads&quot;' />
          <member value='&quot;Mobissimo&quot;' />
          <member value='&quot;Momondo&quot;' />
          <member value='&quot;One Travel&quot;' />
          <member value='&quot;Orbitz-ads-on-Network&quot;' />
          <member value='&quot;Orbitz-Meta&quot;' />
          <member value='&quot;OWW-ads-on-CTIX&quot;' />
          <member value='&quot;Priceline-Ads&quot;' />
          <member value='&quot;Priceline-Meta&quot;' />
          <member value='&quot;Qatar Airways&quot;' />
          <member value='&quot;Red Roof Inn&quot;' />
          <member value='&quot;Rocketmiles&quot;' />
          <member value='&quot;Room 77&quot;' />
          <member value='&quot;Skyscanner-ads&quot;' />
          <member value='&quot;SmartFares&quot;' />
          <member value='&quot;South African Airlines&quot;' />
          <member value='&quot;Starwood Hotels&quot;' />
          <member value='&quot;Student Universe&quot;' />
          <member value='&quot;TAM Airlines&quot;' />
          <member value='&quot;Tingo&quot;' />
          <member value='&quot;Travel Ticker&quot;' />
          <member value='&quot;Travelation&quot;' />
          <member value='&quot;Travelocity-Ads&quot;' />
          <member value='&quot;Travelocity.ca&quot;' />
          <member value='&quot;Travelstart.&quot;' />
          <member value='&quot;TripAdvisor&quot;' />
          <member value='&quot;Tripping.com&quot;' />
          <member value='&quot;Trivago&quot;' />
          <member value='&quot;United Airlines&quot;' />
          <member value='&quot;Vayama&quot;' />
          <member value='&quot;Virgin America&quot;' />
          <member value='&quot;Virgin Atlantic&quot;' />
          <member value='&quot;Webjet&quot;' />
          <member value='&quot;Webjet.ca&quot;' />
          <member value='&quot;Westin Hotels&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Graph Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
        <calculation class='tableau' formula='&quot;Impressions&quot;' />
        <members>
          <member value='&quot;Cost&quot;' />
          <member value='&quot;Average Position&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;Clicks&quot;' />
          <member value='&quot;Impressions&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Graph Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Clicks&quot;'>
        <calculation class='tableau' formula='&quot;Clicks&quot;' />
        <members>
          <member value='&quot;Cost&quot;' />
          <member value='&quot;Average Position&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;Clicks&quot;' />
          <member value='&quot;Impressions&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Graph Type]' param-domain-type='list' role='measure' type='nominal' value='&quot;Year over Year&quot;'>
        <calculation class='tableau' formula='&quot;Year over Year&quot;' />
        <members>
          <member value='&quot;All Time&quot;' />
          <member value='&quot;Year over Year&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
        <calculation class='tableau' formula='&quot;Site&quot;' />
        <aliases>
          <alias key='&quot;Campaign + Ad Group&quot;' value='Campaign + Ad Group' />
        </aliases>
        <members>
          <member value='&quot;All&quot;' />
          <member value='&quot;Advertiser Segment&quot;' />
          <member value='&quot;Site&quot;' />
          <member value='&quot;Campaign&quot;' />
          <member alias='Campaign + Ad Group' value='&quot;Campaign + Ad Group&quot;' />
          <member value='&quot;Total Network&quot;' />
          <member value='&quot;Product Category&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping Sort - Core Metrics]' param-domain-type='list' role='measure' type='nominal' value='&quot;Cost&quot;'>
        <calculation class='tableau' formula='&quot;Cost&quot;' />
        <members>
          <member value='&quot;Cost&quot;' />
          <member value='&quot;Impressions&quot;' />
          <member value='&quot;Clicks&quot;' />
          <member value='&quot;Revenue&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping Sort - ROI]' param-domain-type='list' role='measure' type='nominal' value='&quot;CPA&quot;'>
        <calculation class='tableau' formula='&quot;CPA&quot;' />
        <members>
          <member value='&quot;Revenue&quot;' />
          <member value='&quot;ROI&quot;' />
          <member value='&quot;CVR&quot;' />
          <member value='&quot;CPA&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping Sort - Table]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
        <calculation class='tableau' formula='&quot;Impressions&quot;' />
        <members>
          <member value='&quot;Impressions&quot;' />
          <member value='&quot;Clicks&quot;' />
          <member value='&quot;Cost&quot;' />
          <member value='&quot;Click Conversions&quot;' />
          <member value='&quot;Click Revenue&quot;' />
          <member value='&quot;Average Position&quot;' />
          <member value='&quot;CTR&quot;' />
          <member value='&quot;Click CVR&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;Click CPA&quot;' />
          <member value='&quot;Click ROI&quot;' />
          <member value='&quot;Click AOV&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Grouping Sort - Topline]' param-domain-type='list' role='measure' type='nominal' value='&quot;Cost&quot;'>
        <calculation class='tableau' formula='&quot;Cost&quot;' />
        <members>
          <member value='&quot;Cost&quot;' />
          <member value='&quot;Average Position&quot;' />
          <member value='&quot;CPC&quot;' />
          <member value='&quot;CTR&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
        <calculation class='tableau' formula='&quot;True&quot;' />
        <members>
          <member value='&quot;True&quot;' />
          <member value='&quot;False&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Product Category]' param-domain-type='list' role='measure' type='nominal' value='&quot;Meta&quot;'>
        <calculation class='tableau' formula='&quot;Meta&quot;' />
        <members>
          <member value='&quot;Total&quot;' />
          <member value='&quot;Flights&quot;' />
          <member value='&quot;Hotels&quot;' />
          <member value='&quot;Meta&quot;' />
        </members>
      </column>
      <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-11-30#'>
        <calculation class='tableau' formula='#2012-11-30#' />
        <range min='#2011-05-22#' />
      </column>
      <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
        <calculation class='tableau' formula='&quot;Day&quot;' />
        <members>
          <member value='&quot;Day&quot;' />
          <member value='&quot;Week&quot;' />
          <member value='&quot;Month&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Time Span]' param-domain-type='list' role='measure' type='nominal' value='&quot;52 Weeks&quot;'>
        <calculation class='tableau' formula='&quot;52 Weeks&quot;' />
        <members>
          <member value='&quot;52 Weeks&quot;' />
          <member value='&quot;All Time&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
        <calculation class='tableau' formula='&quot;Sunday&quot;' />
        <members>
          <member value='&quot;Sunday&quot;' />
          <member value='&quot;Monday&quot;' />
        </members>
      </column>
      <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
        <calculation class='tableau' formula='&quot;Yesterday&quot;' />
        <members>
          <member value='&quot;Yesterday&quot;' />
          <member value='&quot;Reference Day&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='budget_data_meta' inline='true' name='budget_data (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;cast(NULL as float) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;&#13;&#10;&#9;&#9;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, performance.&quot;Eligible Ad Calls&quot;, performance.&quot;Non-Learning Impressions&quot;, performance.&quot;Filtered Ad Count&quot;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;cast(NULL as float) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;&#13;&#10;&#9;&#9;from intent_media_production.hotel_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, performance.&quot;Eligible Ad Calls&quot;, performance.&quot;Non-Learning Impressions&quot;, performance.&quot;Filtered Ad Count&quot;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Meta&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;sum(acapra.filtered_ad_count + acapra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;sum(acapra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;cast(null as int) as &quot;Click Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;View Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Click Revenue&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Meta&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;sum(acapra.filtered_ad_count + acapra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;sum(acapra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;cast(null as int) as &quot;Click Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;View Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Click Revenue&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et&#13;&#10;&#13;&#10;&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Advertiser Count]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Advertiser ID])' />
      </column>
      <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Average Budget]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Total Budget])/[Advertiser Count]' />
      </column>
      <column datatype='string' name='[Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN &#13;&#10;(CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Monday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 1 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))) END)&#13;&#10;    WHEN &quot;Sunday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END)&#13;&#10;END)&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Percent of Budget Used]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Total Budget])' />
      </column>
      <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
      </column>
      <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\aft_advertiser_report__budget_data copy 1.tde' schema='Extract' tablename='Extract' update-time='2/14/2014 7:40:39 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='7881815' timestamp-start='2014-02-14 19:40:39.849000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.458564' measure-ordering='alphabetic' measure-percentage='0.312155' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Advertiser Segment:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hotel Chain&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;OTA Tier 1&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Meta&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;International Airline&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;OTA Tier 2&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Domestic Airline&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Color:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Delta&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Delta &quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Emirates Airlines&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;SmartFares&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;TripAdvisor&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Aeromexico&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;CheapTickets-Ads&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Domestic Airline&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Explore Trip &quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;FlightHub&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Starwood Hotels&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Airfarewatchdog&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Fly.com&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Globester&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;OTA Tier 1&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cathay Pacific - Canada&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Orbitz-ads-on-EXPE&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Priceline&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;British Airways&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Kayak Software Corporation&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Virgin Atlantic&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Apple Vacations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hotwire-Ads&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;INDEPENDENT_HOTEL&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;OTA Budget&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Vayama&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;AirTicketsDirect&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hawaiian Airlines&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;OTA Tier 2&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Travelocity.ca&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;South African Airlines&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Air Canada&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Explore Trip&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;FlightNetwork&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Chain&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Student Universe&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Travelocity-Ads&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;BudgetAir&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;LAN Airlines&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Webjet&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;BMI&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;JetBlue&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Jetsetz&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Virgin America&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;CheapOair&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;OWW-ads-on-CTIX&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Alaska Airlines&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hawaiian Airlines - JFK Launch&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;DealBase&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Qatar Airways&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;BudgetAir.ca&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Mobissimo&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;OTA_BUDGET&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Orbitz-ads-on-Network&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Webjet.ca&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cathay Pacific&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;One Travel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Air Canada - Marketel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Expedia-Ads&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;International Airline&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Travel Ticker&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;American Airlines&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;United Airlines&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Air France&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Frontier Airlines&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Meta&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Travelation&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Advertiser Segment or Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Advertiser Segment&quot;'>
          <calculation class='tableau' formula='&quot;Advertiser Segment&quot;' />
          <members>
            <member value='&quot;Advertiser&quot;' />
            <member value='&quot;Advertiser Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;All Advertisers&quot;'>
          <calculation class='tableau' formula='&quot;All Advertisers&quot;' />
          <members>
            <member value='&quot;All Advertisers&quot;' />
            <member value='&quot;Aeromexico&quot;' />
            <member value='&quot;Air Canada&quot;' />
            <member value='&quot;Air Canada - Marketel&quot;' />
            <member value='&quot;Air France&quot;' />
            <member value='&quot;Airfarewatchdog&quot;' />
            <member value='&quot;AirFastTickets&quot;' />
            <member value='&quot;AirTicketsDirect&quot;' />
            <member value='&quot;Alaska Airlines&quot;' />
            <member value='&quot;American Airlines&quot;' />
            <member value='&quot;American Airlines Fare Sale&quot;' />
            <member value='&quot;American Airlines Vacation&quot;' />
            <member value='&quot;Apple Vacations&quot;' />
            <member value='&quot;Aston Hotels&quot;' />
            <member value='&quot;BMI&quot;' />
            <member value='&quot;Booking.com-ads&quot;' />
            <member value='&quot;bookit.com&quot;' />
            <member value='&quot;British Airways&quot;' />
            <member value='&quot;BudgetAir&quot;' />
            <member value='&quot;BudgetAir.ca&quot;' />
            <member value='&quot;Caesars&quot;' />
            <member value='&quot;Cathay Pacific&quot;' />
            <member value='&quot;Cathay Pacific - Canada&quot;' />
            <member value='&quot;CheapFareGuru&quot;' />
            <member value='&quot;CheapOair&quot;' />
            <member value='&quot;CheapOair-Canada&quot;' />
            <member value='&quot;CheapTickets-Ads&quot;' />
            <member value='&quot;Crowne Plaza&quot;' />
            <member value='&quot;DealBase&quot;' />
            <member value='&quot;Delta&quot;' />
            <member value='&quot;Edreams&quot;' />
            <member value='&quot;Emirates Airlines&quot;' />
            <member value='&quot;Expedia-Ads&quot;' />
            <member value='&quot;Expedia-Meta&quot;' />
            <member value='&quot;Explore Trip&quot;' />
            <member value='&quot;FlightHub&quot;' />
            <member value='&quot;FlightNetwork&quot;' />
            <member value='&quot;Fly.com&quot;' />
            <member value='&quot;FlyFar&quot;' />
            <member value='&quot;Frontier Airlines&quot;' />
            <member value='&quot;Globester&quot;' />
            <member value='&quot;Groupon-Ads&quot;' />
            <member value='&quot;Hawaiian Airlines&quot;' />
            <member value='&quot;Hawaiian Airlines - JFK Launch&quot;' />
            <member value='&quot;Hilton Hotels&quot;' />
            <member value='&quot;Hipmunk-Ads&quot;' />
            <member value='&quot;Holiday Inn&quot;' />
            <member value='&quot;Holiday Inn Express&quot;' />
            <member value='&quot;Hotels.com&quot;' />
            <member value='&quot;Hotwire-Ads&quot;' />
            <member value='&quot;Hotwire-Meta&quot;' />
            <member value='&quot;Indian Eagle&quot;' />
            <member value='&quot;JetaPort&quot;' />
            <member value='&quot;JetBlue&quot;' />
            <member value='&quot;Jetsetz&quot;' />
            <member value='&quot;Kayak Software Corporation - Ads&quot;' />
            <member value='&quot;La Quinta&quot;' />
            <member value='&quot;LAN Airlines&quot;' />
            <member value='&quot;Marriott Hotels&quot;' />
            <member value='&quot;Melia Hotels-Ads&quot;' />
            <member value='&quot;Mobissimo&quot;' />
            <member value='&quot;Momondo&quot;' />
            <member value='&quot;One Travel&quot;' />
            <member value='&quot;Orbitz-ads-on-Network&quot;' />
            <member value='&quot;Orbitz-Meta&quot;' />
            <member value='&quot;OWW-ads-on-CTIX&quot;' />
            <member value='&quot;Priceline-Ads&quot;' />
            <member value='&quot;Priceline-Meta&quot;' />
            <member value='&quot;Qatar Airways&quot;' />
            <member value='&quot;Red Roof Inn&quot;' />
            <member value='&quot;Rocketmiles&quot;' />
            <member value='&quot;Room 77&quot;' />
            <member value='&quot;Skyscanner-ads&quot;' />
            <member value='&quot;SmartFares&quot;' />
            <member value='&quot;South African Airlines&quot;' />
            <member value='&quot;Starwood Hotels&quot;' />
            <member value='&quot;Student Universe&quot;' />
            <member value='&quot;TAM Airlines&quot;' />
            <member value='&quot;Tingo&quot;' />
            <member value='&quot;Travel Ticker&quot;' />
            <member value='&quot;Travelation&quot;' />
            <member value='&quot;Travelocity-Ads&quot;' />
            <member value='&quot;Travelocity.ca&quot;' />
            <member value='&quot;Travelstart.&quot;' />
            <member value='&quot;TripAdvisor&quot;' />
            <member value='&quot;Tripping.com&quot;' />
            <member value='&quot;Trivago&quot;' />
            <member value='&quot;United Airlines&quot;' />
            <member value='&quot;Vayama&quot;' />
            <member value='&quot;Virgin America&quot;' />
            <member value='&quot;Virgin Atlantic&quot;' />
            <member value='&quot;Webjet&quot;' />
            <member value='&quot;Webjet.ca&quot;' />
            <member value='&quot;Westin Hotels&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Product Category]' param-domain-type='list' role='measure' type='nominal' value='&quot;Meta&quot;'>
          <calculation class='tableau' formula='&quot;Meta&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Flights&quot;' />
            <member value='&quot;Hotels&quot;' />
            <member value='&quot;Meta&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-11-30#'>
          <calculation class='tableau' formula='#2012-11-30#' />
          <range min='#2011-05-22#' />
        </column>
        <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
          <calculation class='tableau' formula='&quot;Day&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Time Span]' param-domain-type='list' role='measure' type='nominal' value='&quot;52 Weeks&quot;'>
          <calculation class='tableau' formula='&quot;52 Weeks&quot;' />
          <members>
            <member value='&quot;52 Weeks&quot;' />
            <member value='&quot;All Time&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
          <calculation class='tableau' formula='&quot;Sunday&quot;' />
          <members>
            <member value='&quot;Sunday&quot;' />
            <member value='&quot;Monday&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='advertiser_data_meta' inline='true' name='advertiser_data (copy)' version='8.2'>
      <connection class='vertica' dbname='intent_media' expected-driver-version='7.0' odbc-connect-string-extras='ConnectionLoadBalance=1' odbc-native-protocol='yes' one-time-sql='' port='5433' server='production-vertica-cluster-1.internal.intentmedia.net' server-oauth='' username='tableau' workgroup-auth-mode='prompt'>
        <relation name='TableauSQL' type='text'>select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;cast(NULL as float) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Flights&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.air_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;&#13;&#10;&#9;&#9;from intent_media_production.air_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, performance.&quot;Eligible Ad Calls&quot;, performance.&quot;Non-Learning Impressions&quot;, performance.&quot;Filtered Ad Count&quot;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;cast(NULL as float) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;cast(NULL as float) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Hotels&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;performance.&quot;Eligible Ad Calls&quot; as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;performance.&quot;Non-Learning Impressions&quot; as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;performance.&quot;Filtered Ad Count&quot; as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;sum(acapra.click_conversion_count) as &quot;Click Conversions&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_count) as &quot;View Conversions&quot;,&#13;&#10;&#9;sum(acapra.click_conversion_value_sum) as &quot;Click Revenue&quot;,&#13;&#10;&#9;sum(acapra.exposed_conversion_value_sum) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_ct_advertiser_performance_report_aggregations acapra&#13;&#10;right join (select&#13;&#10;&#9;&#9;&#9;aggregation_level_date_in_et date_in_et,&#13;&#10;&#9;&#9;&#9;advertiser_id,&#13;&#10;&#9;&#9;&#9;ad_group_id,&#13;&#10;&#9;&#9;&#9;campaign_id,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count+acisra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.impression_count) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;&#9;&#9;sum(acisra.filtered_ad_count) as &quot;Filtered Ad Count&quot;&#13;&#10;&#9;&#9;from intent_media_production.hotel_ct_impression_share_report_aggregations acisra&#13;&#10;&#9;&#9;group by aggregation_level_date_in_et, advertiser_id, ad_group_id, campaign_id) performance&#13;&#10;on acapra.date_in_et = performance.date_in_et &#13;&#10;&#9;and acapra.advertiser_id = performance.advertiser_id&#13;&#10;&#9;and acapra.ad_group_id = performance.ad_group_id&#13;&#10;&#9;and acapra.campaign_id = performance.campaign_id&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, performance.&quot;Eligible Ad Calls&quot;, performance.&quot;Non-Learning Impressions&quot;, performance.&quot;Filtered Ad Count&quot;&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Meta&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;sites.display_name as Site,&#13;&#10;&#9;sum(acapra.filtered_ad_count + acapra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;sum(acapra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;cast(null as int) as &quot;Click Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;View Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Click Revenue&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;left join intent_media_production.ad_units on acapra.ad_unit_id = ad_units.id&#13;&#10;left join intent_media_production.sites on ad_units.site_id = sites.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et, sites.display_name&#13;&#10;&#13;&#10;union&#13;&#10;&#13;&#10;select&#13;&#10;&#9;entities.name as &quot;Advertiser Name&quot;,&#13;&#10;&#9;&apos;Meta&apos; as &quot;Product Category Type&quot;,&#13;&#10;&#9;(case entities.advertiser_category_type&#13;&#10;&#9;&#9;when &apos;AIRLINE_DOMESTIC&apos; then &apos;Domestic Airline&apos;&#13;&#10;&#9;&#9;when &apos;AIRLINE_INTERNATIONAL&apos; then &apos;International Airline&apos;&#13;&#10;&#9;&#9;when &apos;HOTEL_CHAIN&apos; then &apos;Hotel Chain&apos;&#13;&#10;&#9;&#9;when &apos;META&apos; then &apos;Meta&apos;&#13;&#10;&#9;&#9;when &apos;TIER_1&apos; then &apos;Tier 1&apos;&#13;&#10;&#9;&#9;when &apos;TIER_2&apos; then &apos;Tier 2&apos;&#13;&#10;&#9;&#9;when &apos;OTA_BUDGET&apos; then &apos;OTA Budget&apos;&#13;&#10;&#9;&#9;when &apos;OTHER&apos; then &apos;Other&apos;&#13;&#10;&#9;&#9;else entities.advertiser_category_type&#13;&#10;&#9;end) as &quot;Advertiser Segment&quot;,&#13;&#10;&#9;ad_groups.name as &quot;Ad Group&quot;,&#13;&#10;&#9;campaigns.name as &quot;Campaign&quot;,&#13;&#10;&#9;acapra.date_in_et as Date,&#13;&#10;&#9;&apos;Total&apos; as Site,&#13;&#10;&#9;sum(acapra.filtered_ad_count + acapra.impression_count) as &quot;Eligible Ad Calls&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Non-Learning Impressions&quot;,&#13;&#10;&#9;sum(acapra.filtered_ad_count) as &quot;Filtered Ad Count&quot;,&#13;&#10;&#9;sum(acapra.impression_count) as Impressions,&#13;&#10;&#9;sum(acapra.click_count) as Clicks,&#13;&#10;&#9;sum(acapra.actual_cpc_sum) as Spend,&#13;&#10;&#9;cast(null as int) as &quot;Click Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;View Conversions&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Click Revenue&quot;,&#13;&#10;&#9;cast(null as int) as &quot;Exposed Revenue&quot;,&#13;&#10;&#9;sum(acapra.auction_position_sum) as &quot;Auction Position Sum&quot;&#13;&#10;from intent_media_production.hotel_meta_advertiser_performance_aggregations acapra&#13;&#10;left join intent_media_production.entities on acapra.advertiser_id = entities.id&#13;&#10;left join intent_media_production.ad_groups on acapra.ad_group_id = ad_groups.id&#13;&#10;left join intent_media_production.campaigns on ad_groups.campaign_id = campaigns.id&#13;&#10;where acapra.date_in_et &lt;&lt; date(current_timestamp at timezone &apos;America/New_York&apos;)&#13;&#10;group by entities.name, entities.advertiser_category_type, ad_groups.name, campaigns.name, acapra.date_in_et&#13;&#10;&#13;&#10;&#13;&#10;</relation>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[advertiser_data (copy)].[sum:Spend:qk]&quot;' value='Cost' />
        </aliases>
      </column>
      <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Auction Position Sum]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Auction Position Sum] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Auction Position Sum] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Auction Position Sum] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Auction Position Sum] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Auction Position Sum] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Auction Position Sum - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Auction Position Sum] END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Average Position % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Average Position - Ref Day]-[Average Position - SDPW])/[Average Position - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Average Position - Ref Week]-[Average Position - PW])/[Average Position - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Average Position - MTD]-[Average Position - PMTD])/[Average Position - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Average Position - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - MTD])/sum([Impressions - MTD])' />
      </column>
      <column datatype='real' name='[Average Position - Negative]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='5-[Average Position]' />
      </column>
      <column datatype='real' name='[Average Position - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - PMTD])/sum([Impressions - PMTD])' />
      </column>
      <column datatype='real' name='[Average Position - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - PW])/sum([Impressions - PW])' />
      </column>
      <column datatype='real' name='[Average Position - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - Ref Day])/sum([Impressions - Ref Day])' />
      </column>
      <column datatype='real' name='[Average Position - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - Ref Week])/sum([Impressions - Ref Week])' />
      </column>
      <column datatype='real' name='[Average Position - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Auction Position Sum - SDPW])/sum([Impressions - SDPW])' />
      </column>
      <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Average Position - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Average Position - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Average Position - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Average Position]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ISNULL(sum([Auction Position Sum])) or ISNULL(sum([Impressions])) THEN&#13;&#10;NULL&#13;&#10;ELSE &#13;&#10;sum([Auction Position Sum])/sum([Impressions])&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CPC % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([CPC - Ref Week]-[CPC - PW])/[CPC - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[CPC - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - MTD])/sum([Clicks - MTD])' />
      </column>
      <column datatype='real' name='[CPC - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - PMTD])/sum([Clicks - PMTD])' />
      </column>
      <column datatype='real' name='[CPC - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - PW])/sum([Clicks - PW])' />
      </column>
      <column datatype='real' name='[CPC - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - Ref Day])/sum([Clicks - Ref Day])' />
      </column>
      <column datatype='real' name='[CPC - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - Ref Week])/sum([Clicks - Ref Week])' />
      </column>
      <column datatype='real' name='[CPC - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - SDPW])/sum([Clicks - SDPW])' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([CTR - Ref Week]-[CTR - PW])/[CTR - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([CTR - MTD]-[CTR - PMTD])/[CTR - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[CTR - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - MTD])/sum([Impressions - MTD])' />
      </column>
      <column datatype='real' name='[CTR - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PMTD])/sum([Impressions - PMTD])' />
      </column>
      <column datatype='real' name='[CTR - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - PW])/sum([Impressions - PW])' />
      </column>
      <column datatype='real' name='[CTR - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Day])/sum([Impressions - Ref Day])' />
      </column>
      <column datatype='real' name='[CTR - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - Ref Week])/sum([Impressions - Ref Week])' />
      </column>
      <column datatype='real' name='[CTR - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks - SDPW])/sum([Impressions - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[CTR for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
      </column>
      <column caption='Campaign and Ad Group' datatype='string' name='[Calculation_8291016103909586]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Campaign] + &quot; - &quot; + [Ad Group]' scope-isolation='false' />
      </column>
      <column datatype='real' name='[Capped CTR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [CTR] &lt; 0.1 THEN [CTR] END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Click AOV]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Click CPA Filtered]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Click CPA] &lt; 500&#13;&#10;THEN [Click CPA]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Click CPA]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' />
      </column>
      <column datatype='real' default-format='p0.00%' name='[Click CVR]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
      </column>
      <column datatype='real' name='[Click ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Click Revenue]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Click Revenue] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Click Revenue] END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Click Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Click Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Click Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicked Conversion Value Sum - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Click Revenue] END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Clicked ROI % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Clicked ROI - Ref Day]-[Clicked ROI - SDPW])/[Clicked ROI - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Clicked ROI - MTD]-[Clicked ROI - PMTD])/[Clicked ROI - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Clicked ROI - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - MTD])/sum([Spend - MTD])' />
      </column>
      <column datatype='real' name='[Clicked ROI - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - PMTD])/sum([Spend - PMTD])' />
      </column>
      <column datatype='real' name='[Clicked ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Clicked ROI - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - Ref Day])/sum([Spend - Ref Day])' />
      </column>
      <column datatype='real' name='[Clicked ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Clicked ROI - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Clicked Conversion Value Sum - SDPW])/sum([Spend - SDPW])' />
      </column>
      <column datatype='real' name='[Clicked ROI for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Clicked ROI - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Clicked ROI - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Clicked ROI - MTD]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Clicks]&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Clicks] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Clicks] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Clicks] END' />
      </column>
      <column datatype='integer' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Clicks - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Clicks] END' />
      </column>
      <column datatype='string' name='[Color]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date by]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[Date of Month]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;month&apos;,[Date]))' />
      </column>
      <column datatype='date' name='[Date of Week (Monday Start)]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;week&apos;,[Date]-1)+1)' />
      </column>
      <column datatype='date' name='[Date of Week (Sunday Start)]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;week&apos;, [Date]))' />
      </column>
      <column datatype='date' name='[Date of Week]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Week Start]&#13;&#10;WHEN &quot;Sunday&quot; THEN [Date of Week (Sunday Start)]&#13;&#10;WHEN &quot;Monday&quot; THEN [Date of Week (Monday Start)]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Eligible Ad Calls % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;    WHEN &quot;Day&quot; THEN (sum([Eligible Ad Calls - Ref Day])-sum([Eligible Ad Calls - SDPW]))/sum([Eligible Ad Calls - SDPW])&#13;&#10;    WHEN &quot;Week&quot; THEN (sum([Eligible Ad Calls - Ref Week])-sum([Eligible Ad Calls - PW]))/sum([Eligible Ad Calls - PW])&#13;&#10;    WHEN &quot;Month&quot; THEN (sum([Eligible Ad Calls - MTD])-sum([Eligible Ad Calls - PMTD]))/sum([Eligible Ad Calls - PMTD])&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Eligible Ad Calls]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Eligible Ad Calls] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Eligible Ad Calls] END)&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Eligible Ad Calls] END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Eligible Ad Calls] END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Eligible Ad Calls] END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Eligible Ad Calls] END' />
      </column>
      <column datatype='real' name='[Eligible Ad Calls for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;    WHEN &quot;Day&quot; THEN [Eligible Ad Calls - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Eligible Ad Calls - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Eligible Ad Calls - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Exposed Revenue]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Exposed Revenue] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Exposed Revenue] END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Exposed Conversion Value Sum - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Exposed Revenue] END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Exposed ROI % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Exposed ROI - Ref Day]-[Exposed ROI - SDPW])/[Exposed ROI - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Exposed ROI - MTD]-[Exposed ROI - PMTD])/[Exposed ROI - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Exposed ROI - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - MTD])/sum([Spend - MTD])' />
      </column>
      <column datatype='real' name='[Exposed ROI - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - PMTD])/sum([Spend - PMTD])' />
      </column>
      <column datatype='real' name='[Exposed ROI - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - PW])/sum([Spend - PW])' />
      </column>
      <column datatype='real' name='[Exposed ROI - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - Ref Day])/sum([Spend - Ref Day])' />
      </column>
      <column datatype='real' name='[Exposed ROI - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - Ref Week])/sum([Spend - Ref Week])' />
      </column>
      <column datatype='real' name='[Exposed ROI - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Conversion Value Sum - SDPW])/sum([Spend - SDPW])' />
      </column>
      <column datatype='real' name='[Exposed ROI for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Exposed ROI - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Exposed ROI - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Exposed ROI - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Exposed ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Exposed Revenue])/sum([Spend])' />
      </column>
      <column datatype='real' name='[Graph Metric 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 1]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='real' name='[Graph Metric 2]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 2]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Advertiser Selection' datatype='string' name='[Grouping Parameter (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Advertiser Name]&#13;&#10;ELSE &quot;Total&quot;&#13;&#10;END' scope-isolation='false' />
        <aliases>
          <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
          <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
          <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
          <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
          <alias key='&quot;VAYAMA&quot;' value='Vayama' />
        </aliases>
      </column>
      <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
        <aliases>
          <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
          <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
          <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
          <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
          <alias key='&quot;VAYAMA&quot;' value='Vayama' />
        </aliases>
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impression Share % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Impression Share - Ref Day]-[Impression Share - SDPW])/[Impression Share - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Impression Share - Ref Week]-[Impression Share - PW])/[Impression Share - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Impression Share - MTD]-[Impression Share - PMTD])/[Impression Share - PMTD]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Impression Share - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - MTD])/sum([Eligible Ad Calls - MTD])' />
      </column>
      <column datatype='real' name='[Impression Share - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - PMTD])/sum([Eligible Ad Calls - PMTD])' />
      </column>
      <column datatype='real' name='[Impression Share - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - PW])/sum([Eligible Ad Calls - PW])' />
      </column>
      <column datatype='real' name='[Impression Share - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - Ref Day])/sum([Eligible Ad Calls - Ref Day])' />
      </column>
      <column datatype='real' name='[Impression Share - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - Ref Week])/sum([Eligible Ad Calls - Ref Week])' />
      </column>
      <column datatype='real' name='[Impression Share - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions - SDPW])/sum([Eligible Ad Calls - SDPW])' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impression Share for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Impression Share - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Impression Share - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Impression Share - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Calls])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Impressions - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Impressions]&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Impressions] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Impressions] END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Impressions - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Impressions] END' />
      </column>
      <column datatype='integer' name='[Impressions - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Impressions] END' />
      </column>
      <column datatype='integer' name='[Impressions - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Impressions] END' />
      </column>
      <column datatype='integer' name='[Impressions - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Impressions] END' />
      </column>
      <column datatype='integer' name='[Is Leap Year]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF YEAR([Ref Day]) % 4 = 0 THEN&#13;&#10;    IF YEAR([Ref Day]) % 100 = 0 THEN&#13;&#10;        IF YEAR([Ref Day]) % 400 = 0 THEN&#13;&#10;            1&#13;&#10;        ELSE 0 END&#13;&#10;    ELSE 0 END&#13;&#10;ELSE 0 END' />
      </column>
      <column datatype='date' name='[Last Date to Show]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN &#13;&#10;(CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Monday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 1 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))) END)&#13;&#10;    WHEN &quot;Sunday&quot; THEN (IF DATEPART(&apos;weekday&apos;,[Ref Day]) = 7 THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-1) END)&#13;&#10;END)&#13;&#10;WHEN &quot;Month&quot; THEN (IF [Ref Day] = DATEADD(&apos;day&apos;,-1,DATEADD(&apos;month&apos;,1,DATETRUNC(&apos;month&apos;,[Ref Day]))) THEN [Ref Day] ELSE (DATE(DATETRUNC(&apos;month&apos;,[Ref Day]))-1) END)&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Last Day of Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE MONTH([Ref Day])&#13;&#10;WHEN 1 THEN 31&#13;&#10;WHEN 2 THEN (IF [Is Leap Year] = 1 THEN 29 ELSE 28 END)&#13;&#10;WHEN 3 THEN 31&#13;&#10;WHEN 4 THEN 30&#13;&#10;WHEN 5 THEN 31&#13;&#10;WHEN 6 THEN 30&#13;&#10;WHEN 7 THEN 31&#13;&#10;WHEN 8 THEN 31&#13;&#10;WHEN 9 THEN 30&#13;&#10;WHEN 10 THEN 31&#13;&#10;WHEN 11 THEN 30&#13;&#10;WHEN 12 THEN 31&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If MONTH([Ref Day]) = 1 THEN 12 &#13;&#10;ELSE MONTH([Ref Day])-1 END' />
      </column>
      <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
      </column>
      <column datatype='real' name='[ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' />
      </column>
      <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
      </column>
      <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='[Ref Day] -7' />
      </column>
      <column datatype='real' name='[Sort for Grouping - Core Metrics]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Sort - Core Metrics]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Revenue&quot; THEN sum([Click Revenue])&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Sort for Grouping - ROI]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Sort - ROI]&#13;&#10;WHEN &quot;Revenue&quot; THEN sum([Click Revenue])&#13;&#10;WHEN &quot;ROI&quot; THEN [Click ROI]&#13;&#10;WHEN &quot;CVR&quot; THEN [Click CVR]&#13;&#10;WHEN &quot;CPA&quot; THEN [Click CPA]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Sort for Grouping - Table]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Sort - Table]&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Click Conversions&quot; THEN sum([Click Conversions])&#13;&#10;WHEN &quot;Click Revenue&quot; THEN sum([Click Revenue])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Click CVR&quot; THEN [Click CVR]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;Click CPA&quot; THEN [Click CPA]&#13;&#10;WHEN &quot;Click ROI&quot; THEN [Click ROI]&#13;&#10;WHEN &quot;Click AOV&quot; THEN [Click AOV]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Sort for Grouping - Topline]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Grouping Sort - Topline]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='p0.0%' name='[Spend % for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN (sum([Spend - Ref Day])-sum([Spend - SDPW]))/sum([Spend - SDPW])&#13;&#10;WHEN &quot;Week&quot; THEN (sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])&#13;&#10;WHEN &quot;Month&quot; THEN (sum([Spend - MTD])-sum([Spend - PMTD]))/sum([Spend - PMTD])&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - MTD]) - sum([Spend - PMTD])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - Ref Week]) - sum([Spend - PW])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Spend - Ref Day]) - sum([Spend - SDPW])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - MTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Spend]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - PMTD]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DAY([Ref Day]) = [Last Day of Month] THEN&#13;&#10;  //need entire previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  THEN [Spend] END)&#13;&#10;ELSE&#13;&#10;  //need up to that day number in previous month&#13;&#10;  (IF YEAR([Date]) = [Year of Previous Month]&#13;&#10;  AND MONTH([Date]) = [Previous Month]&#13;&#10;  AND DAY([Date]) &lt;= DAY([Ref Day]) &#13;&#10;  THEN [Spend] END)&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - PW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= DATEADD(&apos;day&apos;, -7,[Ref Day]) AND [Date] &gt; DATEADD(&apos;day&apos;, -14,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Day]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - Ref Week]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - SDPW]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF DATEDIFF(&apos;day&apos;,[Ref Day],[Date]) = -7 THEN [Spend] END' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend for Time Frame]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Spend - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Spend - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Spend - MTD]&#13;&#10;END' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Title with Time Frame]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN STR([Ref Day])&#13;&#10;WHEN &quot;Week&quot; THEN &quot;Week Ending &quot; + STR([Ref Day])&#13;&#10;WHEN &quot;Month&quot; THEN &quot;Month to Date up to &quot; + STR([Ref Day])&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Year of Previous Month]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF MONTH([Ref Day]) = 1 THEN YEAR([Ref Day])-1&#13;&#10;ELSE YEAR([Ref Day])&#13;&#10;END' />
      </column>
      <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
      <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
      <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
      <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Graph Metric 1]' derivation='User' name='[usr:Graph Metric 1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Graph Metric 2]' derivation='User' name='[usr:Graph Metric 2:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Action (Advertiser,Grouping)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Advertiser]' />
          <groupfilter function='level-members' level='[Grouping Parameter]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Grouping,Date Axis)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Grouping Parameter]' />
          <groupfilter function='level-members' level='[Date Axis]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\psf\Home\Documents\data\Tableau\data_extracts\Default Site\aft_advertiser_report__advertiser_data copy 2.tde' schema='Extract' tablename='Extract' update-time='2/14/2014 8:04:16 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_8291016103909586]' formula='[Campaign] + &quot; - &quot; + [Ad Group]' />
            <calculation column='[Date of Month]' formula='DATE(DATETRUNC(&apos;month&apos;,[Date]))' />
            <calculation column='[Date of Week (Monday Start)]' formula='DATE(DATETRUNC(&apos;week&apos;,[Date]-1)+1)' />
            <calculation column='[Date of Week (Sunday Start)]' formula='DATE(DATETRUNC(&apos;week&apos;, [Date]))' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='7881815' timestamp-start='2014-02-14 20:04:15.650000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.16005' measure-ordering='alphabetic' measure-percentage='0.658475' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Ad Group:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;MVMC&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Domestic&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;TopO-International&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;HVLC&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;LVHC&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Int&apos;l - Top 50 Dom Dests&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;HVMC&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;TopO-Domestic&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Domestic-Domestic&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;TopO-TopD&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;MVHC&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;International-Domestic&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Int&apos;l - Top 50 Int&apos;l Dests&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;LVMC&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Int&apos;l - Any Domestic&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;MVLC&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;International-International &quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;International-TopD&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Domestic-TopD&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Int&apos;l - Any Int&apos;l&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;HVHC&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Color:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Delta&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Delta &quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Emirates Airlines&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Student Universe&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Aeromexico&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Domestic Airline&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;FlightHub&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Travelation&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Airfarewatchdog&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Hawaiian Airlines&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;OTA Tier 1&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;United Airlines&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cathay Pacific - Canada&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Orbitz-ads-on-Network&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Qatar Airways&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;British Airways&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Jetsetz&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;One Travel&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Apple Vacations&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;INDEPENDENT_HOTEL&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Kayak Software Corporation&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;OTA Budget&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Webjet&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;AirTicketsDirect&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Hawaiian Airlines - JFK Launch&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;OTA Tier 2&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Vayama&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Expedia-Ads&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Travel Ticker&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Air Canada&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Explore Trip&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;FlightNetwork&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Hotel Chain&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Travelocity-Ads&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;CheapTickets-Ads&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;South African Airlines&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;BudgetAir&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Orbitz-ads-on-EXPE&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;BMI&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;LAN Airlines&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Webjet-ca&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;CheapOair&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;SmartFares&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Alaska Airlines&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Virgin America&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;DealBase&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Starwood Hotels&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;BudgetAir-ca&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;OTA_BUDGET&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;OWW-ads-on-CTIX&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cathay Pacific&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Priceline&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Air Canada - Marketel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Fly-com&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;International Airline&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Travelocity-ca&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;American Airlines&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Hotwire-Ads&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Virgin Atlantic&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Air France&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Globester&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Meta&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;TripAdvisor&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[advertiser_data (copy)]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[advertiser_data (copy)].[usr:Graph Metric 1:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[advertiser_data (copy)].[usr:Graph Metric 2:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Grouping Parameter:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;POS US and Canada 2012 - MLM&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;TripAdvisor&quot;</bucket>
            </map>
            <map to='#1e1e1e'>
              <bucket>&quot;Total&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;AirTkt&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;BudgetAir&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;CheapTickets-Ads&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Domestic Airline&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Flights&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;POS US and Canada 2012 - ACA&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;POS US and Canada 2012 - MTY&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Expedia&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Fly-com&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;International Airline&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;POS US and Canada 2012 - CJS&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;POS US and Canada 2012 - PAZ&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Kayak&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;POS US and Canada 2012 - LEN&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;POS US and Canada 2012 - VSA&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Priceline&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;HOTWIRE_MEDIA_FILL_IN&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Kayak Software Corporation&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;OTA Tier 2&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;POS US and Canada 2012 - GDL&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;POS US and Canada 2012 - TAP&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Vayama&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hotwire-Ads&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;OTA Tier 1&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Orbitz&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;POS US and Canada 2012 - CUU&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;POS US and Canada 2012 - SLP&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Expedia.ca&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;POS US and Canada 2012 - CPE&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;POS US and Canada 2012 - PVR&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;POS US and Canada 2012 - MTT&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>%null%</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;POS US and Canada 2012 - AGU&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;POS US and Canada 2012 - MXL&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;POS US and Canada 2012 - MEX&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;POS US and Canada 2012 - ZIH&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;TRIPDOTCOM&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Travelocity&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Travelocity-Ads&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Trip.com&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;LowFares&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;POS US and Canada 2012 - HMO&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;POS US and Canada 2012 - TGZ&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;POS US and Canada 2012 - DGO&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;POS US and Canada 2012 - TAM&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;POS US and Canada 2012 - LMM&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;POS US and Canada 2012 - ZCL&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hipmunk&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hotwire&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Meta&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;POS US and Canada 2012 - CUL&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;POS US and Canada 2012 - REX&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;POS US and Canada 2012 - MID&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Webjet&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bookit&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;KAYAK&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;LowCostAirlines&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Orbitz-ads-on-Network&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;POS US and Canada 2012 - HUX&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;POS US and Canada 2012 - TRC&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;OneTravel&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;POS US and Canada 2012 - LAP&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;POS US and Canada 2012 - VER&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;CheapTickets&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Expedia-Ads&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotel Chain&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hotels&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;POS US and Canada 2012 - BJX&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;POS US and Canada 2012 - MZT&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;FareSpotter&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;POS US and Canada 2012 - CUN&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;POS US and Canada 2012 - SJD&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;CheapAir&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;CheapOair&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;POS US and Canada 2012 - CEN&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;POS US and Canada 2012 - OAX&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column datatype='string' name='[Advertiser Segment or Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;Advertiser Segment&quot;'>
          <calculation class='tableau' formula='&quot;Advertiser Segment&quot;' />
          <members>
            <member value='&quot;Advertiser&quot;' />
            <member value='&quot;Advertiser Segment&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Advertiser]' param-domain-type='list' role='measure' type='nominal' value='&quot;All Advertisers&quot;'>
          <calculation class='tableau' formula='&quot;All Advertisers&quot;' />
          <members>
            <member value='&quot;All Advertisers&quot;' />
            <member value='&quot;Aeromexico&quot;' />
            <member value='&quot;Air Canada&quot;' />
            <member value='&quot;Air Canada - Marketel&quot;' />
            <member value='&quot;Air France&quot;' />
            <member value='&quot;Airfarewatchdog&quot;' />
            <member value='&quot;AirFastTickets&quot;' />
            <member value='&quot;AirTicketsDirect&quot;' />
            <member value='&quot;Alaska Airlines&quot;' />
            <member value='&quot;American Airlines&quot;' />
            <member value='&quot;American Airlines Fare Sale&quot;' />
            <member value='&quot;American Airlines Vacation&quot;' />
            <member value='&quot;Apple Vacations&quot;' />
            <member value='&quot;Aston Hotels&quot;' />
            <member value='&quot;BMI&quot;' />
            <member value='&quot;Booking.com-ads&quot;' />
            <member value='&quot;bookit.com&quot;' />
            <member value='&quot;British Airways&quot;' />
            <member value='&quot;BudgetAir&quot;' />
            <member value='&quot;BudgetAir.ca&quot;' />
            <member value='&quot;Caesars&quot;' />
            <member value='&quot;Cathay Pacific&quot;' />
            <member value='&quot;Cathay Pacific - Canada&quot;' />
            <member value='&quot;CheapFareGuru&quot;' />
            <member value='&quot;CheapOair&quot;' />
            <member value='&quot;CheapOair-Canada&quot;' />
            <member value='&quot;CheapTickets-Ads&quot;' />
            <member value='&quot;Crowne Plaza&quot;' />
            <member value='&quot;DealBase&quot;' />
            <member value='&quot;Delta&quot;' />
            <member value='&quot;Edreams&quot;' />
            <member value='&quot;Emirates Airlines&quot;' />
            <member value='&quot;Expedia-Ads&quot;' />
            <member value='&quot;Expedia-Meta&quot;' />
            <member value='&quot;Explore Trip&quot;' />
            <member value='&quot;FlightHub&quot;' />
            <member value='&quot;FlightNetwork&quot;' />
            <member value='&quot;Fly.com&quot;' />
            <member value='&quot;FlyFar&quot;' />
            <member value='&quot;Frontier Airlines&quot;' />
            <member value='&quot;Globester&quot;' />
            <member value='&quot;Groupon-Ads&quot;' />
            <member value='&quot;Hawaiian Airlines&quot;' />
            <member value='&quot;Hawaiian Airlines - JFK Launch&quot;' />
            <member value='&quot;Hilton Hotels&quot;' />
            <member value='&quot;Hipmunk-Ads&quot;' />
            <member value='&quot;Holiday Inn&quot;' />
            <member value='&quot;Holiday Inn Express&quot;' />
            <member value='&quot;Hotels.com&quot;' />
            <member value='&quot;Hotwire-Ads&quot;' />
            <member value='&quot;Hotwire-Meta&quot;' />
            <member value='&quot;Indian Eagle&quot;' />
            <member value='&quot;JetaPort&quot;' />
            <member value='&quot;JetBlue&quot;' />
            <member value='&quot;Jetsetz&quot;' />
            <member value='&quot;Kayak Software Corporation - Ads&quot;' />
            <member value='&quot;La Quinta&quot;' />
            <member value='&quot;LAN Airlines&quot;' />
            <member value='&quot;Marriott Hotels&quot;' />
            <member value='&quot;Melia Hotels-Ads&quot;' />
            <member value='&quot;Mobissimo&quot;' />
            <member value='&quot;Momondo&quot;' />
            <member value='&quot;One Travel&quot;' />
            <member value='&quot;Orbitz-ads-on-Network&quot;' />
            <member value='&quot;Orbitz-Meta&quot;' />
            <member value='&quot;OWW-ads-on-CTIX&quot;' />
            <member value='&quot;Priceline-Ads&quot;' />
            <member value='&quot;Priceline-Meta&quot;' />
            <member value='&quot;Qatar Airways&quot;' />
            <member value='&quot;Red Roof Inn&quot;' />
            <member value='&quot;Rocketmiles&quot;' />
            <member value='&quot;Room 77&quot;' />
            <member value='&quot;Skyscanner-ads&quot;' />
            <member value='&quot;SmartFares&quot;' />
            <member value='&quot;South African Airlines&quot;' />
            <member value='&quot;Starwood Hotels&quot;' />
            <member value='&quot;Student Universe&quot;' />
            <member value='&quot;TAM Airlines&quot;' />
            <member value='&quot;Tingo&quot;' />
            <member value='&quot;Travel Ticker&quot;' />
            <member value='&quot;Travelation&quot;' />
            <member value='&quot;Travelocity-Ads&quot;' />
            <member value='&quot;Travelocity.ca&quot;' />
            <member value='&quot;Travelstart.&quot;' />
            <member value='&quot;TripAdvisor&quot;' />
            <member value='&quot;Tripping.com&quot;' />
            <member value='&quot;Trivago&quot;' />
            <member value='&quot;United Airlines&quot;' />
            <member value='&quot;Vayama&quot;' />
            <member value='&quot;Virgin America&quot;' />
            <member value='&quot;Virgin Atlantic&quot;' />
            <member value='&quot;Webjet&quot;' />
            <member value='&quot;Webjet.ca&quot;' />
            <member value='&quot;Westin Hotels&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Graph Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
          <calculation class='tableau' formula='&quot;Impressions&quot;' />
          <members>
            <member value='&quot;Cost&quot;' />
            <member value='&quot;Average Position&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;CTR&quot;' />
            <member value='&quot;Clicks&quot;' />
            <member value='&quot;Impressions&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Graph Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Clicks&quot;'>
          <calculation class='tableau' formula='&quot;Clicks&quot;' />
          <members>
            <member value='&quot;Cost&quot;' />
            <member value='&quot;Average Position&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;CTR&quot;' />
            <member value='&quot;Clicks&quot;' />
            <member value='&quot;Impressions&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Grouping Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Site&quot;'>
          <calculation class='tableau' formula='&quot;Site&quot;' />
          <aliases>
            <alias key='&quot;Campaign + Ad Group&quot;' value='Campaign + Ad Group' />
          </aliases>
          <members>
            <member value='&quot;All&quot;' />
            <member value='&quot;Advertiser Segment&quot;' />
            <member value='&quot;Site&quot;' />
            <member value='&quot;Campaign&quot;' />
            <member alias='Campaign + Ad Group' value='&quot;Campaign + Ad Group&quot;' />
            <member value='&quot;Total Network&quot;' />
            <member value='&quot;Product Category&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Grouping Sort - Core Metrics]' param-domain-type='list' role='measure' type='nominal' value='&quot;Cost&quot;'>
          <calculation class='tableau' formula='&quot;Cost&quot;' />
          <members>
            <member value='&quot;Cost&quot;' />
            <member value='&quot;Impressions&quot;' />
            <member value='&quot;Clicks&quot;' />
            <member value='&quot;Revenue&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Grouping Sort - ROI]' param-domain-type='list' role='measure' type='nominal' value='&quot;CPA&quot;'>
          <calculation class='tableau' formula='&quot;CPA&quot;' />
          <members>
            <member value='&quot;Revenue&quot;' />
            <member value='&quot;ROI&quot;' />
            <member value='&quot;CVR&quot;' />
            <member value='&quot;CPA&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Grouping Sort - Table]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
          <calculation class='tableau' formula='&quot;Impressions&quot;' />
          <members>
            <member value='&quot;Impressions&quot;' />
            <member value='&quot;Clicks&quot;' />
            <member value='&quot;Cost&quot;' />
            <member value='&quot;Click Conversions&quot;' />
            <member value='&quot;Click Revenue&quot;' />
            <member value='&quot;Average Position&quot;' />
            <member value='&quot;CTR&quot;' />
            <member value='&quot;Click CVR&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;Click CPA&quot;' />
            <member value='&quot;Click ROI&quot;' />
            <member value='&quot;Click AOV&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Grouping Sort - Topline]' param-domain-type='list' role='measure' type='nominal' value='&quot;Cost&quot;'>
          <calculation class='tableau' formula='&quot;Cost&quot;' />
          <members>
            <member value='&quot;Cost&quot;' />
            <member value='&quot;Average Position&quot;' />
            <member value='&quot;CPC&quot;' />
            <member value='&quot;CTR&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Only Full Time Frames]' param-domain-type='list' role='measure' type='nominal' value='&quot;True&quot;'>
          <calculation class='tableau' formula='&quot;True&quot;' />
          <members>
            <member value='&quot;True&quot;' />
            <member value='&quot;False&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Product Category]' param-domain-type='list' role='measure' type='nominal' value='&quot;Meta&quot;'>
          <calculation class='tableau' formula='&quot;Meta&quot;' />
          <members>
            <member value='&quot;Total&quot;' />
            <member value='&quot;Flights&quot;' />
            <member value='&quot;Hotels&quot;' />
            <member value='&quot;Meta&quot;' />
          </members>
        </column>
        <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-11-30#'>
          <calculation class='tableau' formula='#2012-11-30#' />
          <range min='#2011-05-22#' />
        </column>
        <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
          <calculation class='tableau' formula='&quot;Day&quot;' />
          <members>
            <member value='&quot;Day&quot;' />
            <member value='&quot;Week&quot;' />
            <member value='&quot;Month&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Time Span]' param-domain-type='list' role='measure' type='nominal' value='&quot;52 Weeks&quot;'>
          <calculation class='tableau' formula='&quot;52 Weeks&quot;' />
          <members>
            <member value='&quot;52 Weeks&quot;' />
            <member value='&quot;All Time&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Week Start]' param-domain-type='list' role='measure' type='nominal' value='&quot;Sunday&quot;'>
          <calculation class='tableau' formula='&quot;Sunday&quot;' />
          <members>
            <member value='&quot;Sunday&quot;' />
            <member value='&quot;Monday&quot;' />
          </members>
        </column>
        <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
          <calculation class='tableau' formula='&quot;Yesterday&quot;' />
          <members>
            <member value='&quot;Yesterday&quot;' />
            <member value='&quot;Reference Day&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='advertiser_data (copy)'>
      <datasources>
        <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
      </datasources>
      <datasource-dependencies datasource='advertiser_data (copy)'>
        <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
        </column>
        <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
        </column>
        <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
        </column>
        <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
        <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='quantitative' column='[advertiser_data (copy)].[none:Date:qk]' included-values='all'>
      </filter>
      <filter class='categorical' column='[advertiser_data (copy)].[none:Product Category Filter:nk]'>
        <groupfilter function='member' level='[none:Product Category Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[advertiser_data (copy)].[none:Time Span Filter:nk]'>
        <groupfilter function='member' level='[none:Time Span Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
    <shared-view name='budget_data (copy)'>
      <datasources>
        <datasource caption='budget_data_meta' name='budget_data (copy)' />
      </datasources>
      <datasource-dependencies datasource='budget_data (copy)'>
        <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
        </column>
        <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
        </column>
        <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
        <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[budget_data (copy)].[none:Advertiser Filter:nk]'>
        <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[budget_data (copy)].[none:Product Category Filter:nk]'>
        <groupfilter function='member' level='[none:Product Category Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Action 1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Impression Share' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Grouping,Grouping Parameter' />
        <param name='target' value='Impression Share' />
      </command>
    </action>
    <action caption='Highlight 1 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Topline' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Grouping Parameter' />
        <param name='target' value='Topline' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Advertiser Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[advertiser_data (copy)].[none:Title with Time Frame:nk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='date' name='[Reference Day]' param-domain-type='range' role='measure' type='quantitative' value='#2012-11-30#'>
              <calculation class='tableau' formula='#2012-11-30#' />
              <range min='#2011-05-22#' />
            </column>
            <column caption='Aggregated By' datatype='string' name='[Time Frame]' param-domain-type='list' role='measure' type='nominal' value='&quot;Day&quot;'>
              <calculation class='tableau' formula='&quot;Day&quot;' />
              <members>
                <member value='&quot;Day&quot;' />
                <member value='&quot;Week&quot;' />
                <member value='&quot;Month&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Yesterday or Reference Day]' param-domain-type='list' role='measure' type='nominal' value='&quot;Yesterday&quot;'>
              <calculation class='tableau' formula='&quot;Yesterday&quot;' />
              <members>
                <member value='&quot;Yesterday&quot;' />
                <member value='&quot;Reference Day&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Average Position % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Average Position - Ref Day]-[Average Position - SDPW])/[Average Position - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Average Position - Ref Week]-[Average Position - PW])/[Average Position - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Average Position - MTD]-[Average Position - PMTD])/[Average Position - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='n#,##0.0;-#,##0.0' name='[Average Position for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Average Position - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Average Position - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Average Position - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CPC % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([CPC - Ref Day]-[CPC - SDPW])/[CPC - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([CPC - Ref Week]-[CPC - PW])/[CPC - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([CPC - MTD]-[CPC - PMTD])/[CPC - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [CPC - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [CPC - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [CPC - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([CTR - Ref Day]-[CTR - SDPW])/[CTR - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([CTR - Ref Week]-[CTR - PW])/[CTR - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([CTR - MTD]-[CTR - PMTD])/[CTR - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[CTR for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [CTR - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [CTR - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [CTR - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Clicked ROI % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Clicked ROI - Ref Day]-[Clicked ROI - SDPW])/[Clicked ROI - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Clicked ROI - Ref Week]-[Clicked ROI - PW])/[Clicked ROI - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Clicked ROI - MTD]-[Clicked ROI - PMTD])/[Clicked ROI - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Clicked ROI for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Clicked ROI - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Clicked ROI - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Clicked ROI - MTD]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Eligible Ad Calls % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;    WHEN &quot;Day&quot; THEN (sum([Eligible Ad Calls - Ref Day])-sum([Eligible Ad Calls - SDPW]))/sum([Eligible Ad Calls - SDPW])&#13;&#10;    WHEN &quot;Week&quot; THEN (sum([Eligible Ad Calls - Ref Week])-sum([Eligible Ad Calls - PW]))/sum([Eligible Ad Calls - PW])&#13;&#10;    WHEN &quot;Month&quot; THEN (sum([Eligible Ad Calls - MTD])-sum([Eligible Ad Calls - PMTD]))/sum([Eligible Ad Calls - PMTD])&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Eligible Ad Calls - MTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF DATETRUNC(&apos;month&apos;,[Date]) = DATETRUNC(&apos;month&apos;,[Ref Day])&#13;&#10;AND DATEPART(&apos;day&apos;,[Date]) &lt;= DATEPART(&apos;day&apos;,[Ref Day])&#13;&#10;THEN [Eligible Ad Calls]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Eligible Ad Calls - Ref Day]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ([Date] = [Ref Day]) THEN [Eligible Ad Calls] END' />
            </column>
            <column datatype='real' name='[Eligible Ad Calls - Ref Week]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Date] &lt;= [Ref Day] AND [Date] &gt; DATEADD(&apos;day&apos;, -7,[Ref Day]) THEN [Eligible Ad Calls] END' />
            </column>
            <column datatype='real' name='[Eligible Ad Calls for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;    WHEN &quot;Day&quot; THEN [Eligible Ad Calls - Ref Day]&#13;&#10;    WHEN &quot;Week&quot; THEN [Eligible Ad Calls - Ref Week]&#13;&#10;    WHEN &quot;Month&quot; THEN [Eligible Ad Calls - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Eligible Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Exposed ROI % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Exposed ROI - Ref Day]-[Exposed ROI - SDPW])/[Exposed ROI - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Exposed ROI - Ref Week]-[Exposed ROI - PW])/[Exposed ROI - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Exposed ROI - MTD]-[Exposed ROI - PMTD])/[Exposed ROI - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Exposed ROI for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Exposed ROI - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Exposed ROI - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Exposed ROI - MTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN ([Impression Share - Ref Day]-[Impression Share - SDPW])/[Impression Share - SDPW]&#13;&#10;WHEN &quot;Week&quot; THEN ([Impression Share - Ref Week]-[Impression Share - PW])/[Impression Share - PW]&#13;&#10;WHEN &quot;Month&quot; THEN ([Impression Share - MTD]-[Impression Share - PMTD])/[Impression Share - PMTD]&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Impression Share - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Impression Share - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Impression Share - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Spend % for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN (sum([Spend - Ref Day])-sum([Spend - SDPW]))/sum([Spend - SDPW])&#13;&#10;WHEN &quot;Week&quot; THEN (sum([Spend - Ref Week])-sum([Spend - PW]))/sum([Spend - PW])&#13;&#10;WHEN &quot;Month&quot; THEN (sum([Spend - MTD])-sum([Spend - PMTD]))/sum([Spend - PMTD])&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend for Time Frame]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Spend - Ref Day]&#13;&#10;WHEN &quot;Week&quot; THEN [Spend - Ref Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Spend - MTD]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Title with Time Frame]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN STR([Ref Day])&#13;&#10;WHEN &quot;Week&quot; THEN &quot;Week Ending &quot; + STR([Ref Day])&#13;&#10;WHEN &quot;Month&quot; THEN &quot;Month to Date up to &quot; + STR([Ref Day])&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Title with Time Frame]' derivation='None' name='[none:Title with Time Frame:nk]' pivot='key' type='nominal' />
            <column-instance column='[Eligible Ad Calls for Time Frame]' derivation='Sum' name='[sum:Eligible Ad Calls for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend for Time Frame]' derivation='Sum' name='[sum:Spend for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ref Day]' derivation='Day-Trunc' name='[tdy:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position % for Time Frame]' derivation='User' name='[usr:Average Position % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position for Time Frame]' derivation='User' name='[usr:Average Position for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC % for Time Frame]' derivation='User' name='[usr:CPC % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CPC for Time Frame]' derivation='User' name='[usr:CPC for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR % for Time Frame]' derivation='User' name='[usr:CTR % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR for Time Frame]' derivation='User' name='[usr:CTR for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI % for Time Frame]' derivation='User' name='[usr:Clicked ROI % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicked ROI for Time Frame]' derivation='User' name='[usr:Clicked ROI for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Eligible Ad Calls % for Time Frame]' derivation='User' name='[usr:Eligible Ad Calls % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI % for Time Frame]' derivation='User' name='[usr:Exposed ROI % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed ROI for Time Frame]' derivation='User' name='[usr:Exposed ROI for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share % for Time Frame]' derivation='User' name='[usr:Impression Share % for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share for Time Frame]' derivation='User' name='[usr:Impression Share for Time Frame:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend % for Time Frame]' derivation='User' name='[usr:Spend % for Time Frame:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Eligible Ad Calls for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Eligible Ad Calls \% for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Impression Share for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Impression Share \% for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CTR for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CTR \% for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CPC for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CPC \% for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Spend for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Spend \% for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position for Time Frame:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position \% for Time Frame:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[advertiser_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[advertiser_data (copy)].[sum:Eligible Ad Calls for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Eligible Ad Calls \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Impression Share for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Impression Share \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:CTR for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:CTR \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:CPC for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:CPC \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[sum:Spend for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Spend \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Average Position for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Average Position \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Clicked ROI for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Clicked ROI \% for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Exposed ROI for Time Frame:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Exposed ROI \% for Time Frame:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Name:nk]'>
            <groupfilter expression='SUM([Eligible Ad Calls for Time Frame]) &gt;= 0.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Advertiser Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[advertiser_data (copy)].[none:Advertiser Name:nk]' direction='ASC' />
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[advertiser_data (copy)].[:Measure Names]' value='73' />
            <format attr='text-format' field='[advertiser_data (copy)].[usr:Clicked ROI for Time Frame:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-format' field='[advertiser_data (copy)].[usr:Exposed ROI for Time Frame:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[advertiser_data (copy)].[:Measure Names]' value='60' />
            <format attr='band-color' scope='cols' value='#d7d7d7' />
            <format attr='width' field='[advertiser_data (copy)].[none:Advertiser Name:nk]' value='124' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[advertiser_data (copy)].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[advertiser_data (copy)].[Multiple Values]' max='1.0' min='-1.0' num-steps='2' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#ff0000</color>
                <color>#f43030</color>
                <color>#e95d5d</color>
                <color>#df8585</color>
                <color>#d4aaaa</color>
                <color>#cacaca</color>
                <color>#9b9b9b</color>
                <color>#777777</color>
                <color>#565656</color>
                <color>#383838</color>
                <color>#1e1e1e</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='cols' value='#d7d7d7' />
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='2' />
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[advertiser_data (copy)].[Multiple Values]' />
              <color column='[advertiser_data (copy)].[Multiple Values]' />
              <lod column='[advertiser_data (copy)].[tdy:Ref Day:qk]' />
              <lod column='[advertiser_data (copy)].[none:Title with Time Frame:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([advertiser_data (copy)].[none:Advertiser Segment:nk] / [advertiser_data (copy)].[none:Advertiser Name:nk])</rows>
        <cols>[advertiser_data (copy)].[:Measure Names]</cols>
        <subtotals>
          <column>[advertiser_data (copy)].[none:Advertiser Segment:nk]</column>
        </subtotals>
      </table>
    </worksheet>
    <worksheet name='Average Budget'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='budget_data_meta' name='budget_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='budget_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Average Budget]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Total Budget])/[Advertiser Count]' />
            </column>
            <column datatype='string' name='[Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Average Budget]' derivation='User' name='[usr:Average Budget:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[budget_data (copy)].[none:Color:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Color:nk]' />
              <groupfilter function='member' level='[none:Color:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[budget_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[budget_data (copy)].[none:Time Span Filter:nk]'>
            <groupfilter function='member' level='[none:Time Span Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[budget_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[budget_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[budget_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[budget_data (copy)].[none:Product Category Filter:nk]</column>
            <column>[budget_data (copy)].[none:Color:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[budget_data (copy)].[none:Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[budget_data (copy)].[usr:Average Budget:qk]</rows>
        <cols>[budget_data (copy)].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Position'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Average Position</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ISNULL(sum([Auction Position Sum])) or ISNULL(sum([Impressions])) THEN&#13;&#10;NULL&#13;&#10;ELSE &#13;&#10;sum([Auction Position Sum])/sum([Impressions])&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Average Position:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Average Position:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[advertiser_data (copy)].[usr:Average Position:qk]' field-type='quantitative' max='5.0' min='1.0' range-type='fixed' reverse='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[advertiser_data (copy)].[usr:Average Position:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Average Position:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Average Position:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Average Position:qk]' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Average Position:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Average Position:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='shape' value=':filled/times' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:Average Position:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='CPA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPA]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Click Conversions])' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[CPA]' derivation='User' name='[usr:CPA:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Click CPA:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Click CPA:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:CPA:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='CPC'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CPC</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[CPC]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Clicks])' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[CPC]' derivation='User' name='[usr:CPC:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Grouping Parameter:nk]'>
            <groupfilter function='level-members' level='[none:Grouping Parameter:nk]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Grouping Parameter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:CPC:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:CPC:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:CPC:qk]' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>CPC:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:CPC:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='shape' value=':filled/times' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:CPC:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='CTR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CTR</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:CTR:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:CTR:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:CTR:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>CTR:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:CTR:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='shape' value=':filled/times' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:CTR:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='CVR'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>CVR</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[Click CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click CVR]' derivation='User' name='[usr:Click CVR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Click CVR:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Click CVR:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Click CVR:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Click CVR:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Click CVR:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:Click CVR:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Clicks'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Color:nk]'>
            <groupfilter function='level-members' level='[none:Color:nk]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Color:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Clicks:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Clicks for Topline'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Clicks</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Grouping Parameter:nk]'>
            <groupfilter function='level-members' level='[none:Grouping Parameter:nk]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Grouping Parameter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[none:Date Axis:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value=''>
              <formatted-text>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>CPC:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:CPC:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='shape' value=':filled/times' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Clicks:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Comparison 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Graph Parameter 1]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> and </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Graph Parameter 2]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> for </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Advertiser]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Graph Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
              <calculation class='tableau' formula='&quot;Impressions&quot;' />
              <members>
                <member value='&quot;Cost&quot;' />
                <member value='&quot;Average Position&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;Clicks&quot;' />
                <member value='&quot;Impressions&quot;' />
              </members>
            </column>
            <column datatype='string' name='[Graph Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Clicks&quot;'>
              <calculation class='tableau' formula='&quot;Clicks&quot;' />
              <members>
                <member value='&quot;Cost&quot;' />
                <member value='&quot;Average Position&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;Clicks&quot;' />
                <member value='&quot;Impressions&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Graph Metric 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 1]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' name='[Graph Metric 2]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 2]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Graph Metric 1]' derivation='User' name='[usr:Graph Metric 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Graph Metric 2]' derivation='User' name='[usr:Graph Metric 2:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='parameter-ctrl'>
            <format attr='title' field='[Parameters].[Graph Parameter 1]' value='Left Axis Metric (Blue)'>
              <formatted-text>
                <run>Left Axis Metric (Blue)</run>
              </formatted-text>
            </format>
            <format attr='title' field='[Parameters].[Graph Parameter 2]' value='Right Axis Metric (Orange)'>
              <formatted-text>
                <run>Right Axis Metric (Orange)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 1]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 1:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 2]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 2:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[advertiser_data (copy)].[usr:Graph Metric 1:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 1]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 1:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 2]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 2:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' y-axis-name='[advertiser_data (copy)].[usr:Graph Metric 2:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 1]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 1:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 2]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 2:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([advertiser_data (copy)].[usr:Graph Metric 1:qk] + [advertiser_data (copy)].[usr:Graph Metric 2:qk])</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Comparison 2a'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Graph Parameter 1]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Graph Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Impressions&quot;'>
              <calculation class='tableau' formula='&quot;Impressions&quot;' />
              <members>
                <member value='&quot;Cost&quot;' />
                <member value='&quot;Average Position&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;Clicks&quot;' />
                <member value='&quot;Impressions&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Graph Metric 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 1]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Graph Metric 1]' derivation='User' name='[usr:Graph Metric 1:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[Parameters].[Graph Parameter 1]' value='24' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[Parameters].[Graph Parameter 1]' value='-90' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Graph Metric 1:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value='Grouping'>
              <formatted-text>
                <run>Grouping</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>&lt;[Parameters].[Grouping Parameter]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 1]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 1:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Parameters].[Graph Parameter 1] * [advertiser_data (copy)].[usr:Graph Metric 1:qk])</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Comparison 2b'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Graph Parameter 2]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column datatype='string' name='[Graph Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Clicks&quot;'>
              <calculation class='tableau' formula='&quot;Clicks&quot;' />
              <members>
                <member value='&quot;Cost&quot;' />
                <member value='&quot;Average Position&quot;' />
                <member value='&quot;CPC&quot;' />
                <member value='&quot;CTR&quot;' />
                <member value='&quot;Clicks&quot;' />
                <member value='&quot;Impressions&quot;' />
              </members>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Graph Metric 2]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Graph Parameter 2]&#13;&#10;WHEN &quot;Cost&quot; THEN sum([Spend])&#13;&#10;WHEN &quot;Average Position&quot; THEN [Average Position]&#13;&#10;WHEN &quot;CPC&quot; THEN [CPC]&#13;&#10;WHEN &quot;CTR&quot; THEN [CTR]&#13;&#10;WHEN &quot;Clicks&quot; THEN sum([Clicks])&#13;&#10;WHEN &quot;Impressions&quot; THEN sum([Impressions])&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Graph Metric 2]' derivation='User' name='[usr:Graph Metric 2:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[Parameters].[Graph Parameter 2]' value='-90' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[usr:Graph Metric 2:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value='Grouping'>
              <formatted-text>
                <run>Grouping</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>&lt;[Parameters].[Grouping Parameter]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>&lt;[Parameters].[Graph Parameter 2]&gt;:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Graph Metric 2:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Parameters].[Graph Parameter 2] * [advertiser_data (copy)].[usr:Graph Metric 2:qk])</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Cost'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run bold='true'>Spend</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Auction Position Sum]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Average Position - Negative]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='5-[Average Position]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ISNULL(sum([Auction Position Sum])) or ISNULL(sum([Impressions])) THEN&#13;&#10;NULL&#13;&#10;ELSE &#13;&#10;sum([Auction Position Sum])/sum([Impressions])&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Capped CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [CTR] &lt; 0.1 THEN [CTR] END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Click AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[Click CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Auction Position Sum]' derivation='Sum' name='[sum:Auction Position Sum:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position - Negative]' derivation='User' name='[usr:Average Position - Negative:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Capped CTR]' derivation='User' name='[usr:Capped CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click AOV]' derivation='User' name='[usr:Click AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click CVR]' derivation='User' name='[usr:Click CVR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Auction Position Sum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position - Negative:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Capped CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Click AOV:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Click CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Click Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Click Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Exposed Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Number of Records:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Cost:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[sum:Cost:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.0573683977127075' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Spend:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Data Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'> Performance by </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[Parameters].[Time Frame]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ISNULL(sum([Auction Position Sum])) or ISNULL(sum([Impressions])) THEN&#13;&#10;NULL&#13;&#10;ELSE &#13;&#10;sum([Auction Position Sum])/sum([Impressions])&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Click AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[Click CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date by]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column caption='Advertiser Selection' datatype='string' name='[Grouping Parameter (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Advertiser Name]&#13;&#10;ELSE &quot;Total&quot;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='C1033%' name='[Spend]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date by]' derivation='None' name='[none:Date by:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter (copy)]' derivation='None' name='[none:Grouping Parameter (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Spend]' derivation='Sum' name='[sum:Spend:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click AOV]' derivation='User' name='[usr:Click AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click CVR]' derivation='User' name='[usr:Click CVR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Spend:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CTR:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[advertiser_data (copy)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[advertiser_data (copy)].[sum:Impressions:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[sum:Clicks:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[sum:Spend:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[sum:Click Conversions:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[sum:Click Revenue:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Average Position:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:CTR:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Click CVR:qk]&quot;</bucket>
              <bucket>&quot;[advertiser_data (copy)].[usr:Click AOV:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='natural' column='[advertiser_data (copy)].[none:Date by:ok]' direction='DESC' />
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[advertiser_data (copy)].[:Measure Names]' value='92' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[advertiser_data (copy)].[:Measure Names]' value='34' />
            <format attr='width' field='[advertiser_data (copy)].[none:Grouping Parameter:nk]' value='100' />
            <format attr='width' field='[advertiser_data (copy)].[none:Date by:ok]' value='108' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[advertiser_data (copy)].[:Measure Names]' value='bold' />
            <format attr='text-align' field='[advertiser_data (copy)].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Text' />
            <encodings>
              <text column='[advertiser_data (copy)].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([advertiser_data (copy)].[none:Date by:ok] / ([advertiser_data (copy)].[none:Grouping Parameter (copy):nk] / [advertiser_data (copy)].[none:Grouping Parameter:nk]))</rows>
        <cols>[advertiser_data (copy)].[:Measure Names]</cols>
        <subtotals>
          <column>[advertiser_data (copy)].[md:Date by:ok]</column>
          <column>[advertiser_data (copy)].[none:Date by:ok]</column>
        </subtotals>
      </table>
    </worksheet>
    <worksheet name='Eligible Ad Calls'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Eligible Ad Calls]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Eligible Ad Calls]' derivation='Sum' name='[sum:Eligible Ad Calls:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Color:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Eligible Ad Calls:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Impression Share'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run bold='true'>Impression Share</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Auction Position Sum]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Average Position - Negative]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='5-[Average Position]' />
            </column>
            <column datatype='real' default-format='n#,##0.00;-#,##0.00' name='[Average Position]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF ISNULL(sum([Auction Position Sum])) or ISNULL(sum([Impressions])) THEN&#13;&#10;NULL&#13;&#10;ELSE &#13;&#10;sum([Auction Position Sum])/sum([Impressions])&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Clicks])/sum([Impressions])' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' name='[Capped CTR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [CTR] &lt; 0.1 THEN [CTR] END' />
            </column>
            <column datatype='real' default-format='C1033%' name='[Click AOV]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Click Conversions])' />
            </column>
            <column datatype='real' default-format='p0.00%' name='[Click CVR]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Conversions])/sum([Clicks])' />
            </column>
            <column datatype='integer' name='[Click Conversions]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Clicks]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' name='[Exposed Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Auction Position Sum]' derivation='Sum' name='[sum:Auction Position Sum:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Conversions]' derivation='Sum' name='[sum:Click Conversions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Clicks]' derivation='Sum' name='[sum:Clicks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Exposed Revenue]' derivation='Sum' name='[sum:Exposed Revenue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position - Negative]' derivation='User' name='[usr:Average Position - Negative:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Average Position]' derivation='User' name='[usr:Average Position:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CTR]' derivation='User' name='[usr:CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Capped CTR]' derivation='User' name='[usr:Capped CTR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click AOV]' derivation='User' name='[usr:Click AOV:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Click CVR]' derivation='User' name='[usr:Click CVR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Auction Position Sum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Average Position - Negative:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Capped CTR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Click AOV:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[usr:Click CVR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Click Conversions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Click Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Clicks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Exposed Revenue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Impressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[advertiser_data (copy)].[sum:Number of Records:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Impression Share:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Impression Share:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[advertiser_data (copy)].[usr:Impression Share:qk]' field-type='quantitative' max='1.0' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Cost:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[sum:Cost:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:Impression Share:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Impressions'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run bold='true'>Impressions</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Ad Group]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Campaign]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='integer' name='[Impressions]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Ad Group]' derivation='None' name='[none:Ad Group:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Campaign]' derivation='None' name='[none:Campaign:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Impressions]' derivation='Sum' name='[sum:Impressions:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Ad Group:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Ad Group:nk]' />
              <groupfilter function='member' level='[none:Ad Group:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Campaign:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Campaign:nk]' />
              <groupfilter function='member' level='[none:Campaign:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Grouping Parameter:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Grouping Parameter:nk]' />
              <groupfilter function='member' level='[none:Grouping Parameter:nk]' member='&quot;All&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Grouping Parameter:nk]</column>
            <column>[advertiser_data (copy)].[none:Campaign:nk]</column>
            <column>[advertiser_data (copy)].[none:Ad Group:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[sum:Impressions:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[sum:Impressions:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[sum:Impressions:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Impressions:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[sum:Impressions:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.1226881742477417' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Impressions:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Impressions by Adv'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Impression Share</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='real' default-format='p0.0%' name='[Impression Share]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Impressions])/sum([Eligible Ad Calls])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Impression Share]' derivation='User' name='[usr:Impression Share:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Color:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:Impression Share:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Percent of Budget Used'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='budget_data_meta' name='budget_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='budget_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Advertiser Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Color]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Advertiser Segment or Advertiser]&#13;&#10;    WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;    WHEN &quot;Advertiser&quot; THEN [Advertiser Name]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN DATE([Date])&#13;&#10;WHEN &quot;Week&quot; THEN DATE(DATETRUNC(&apos;week&apos;,[Date]))&#13;&#10;WHEN &quot;Month&quot; THEN DATE(DATETRUNC(&apos;month&apos;,[Date]))&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='real' default-format='p0.0%' name='[Percent of Budget Used]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend])/sum([Total Budget])' />
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Advertiser Segment]' derivation='None' name='[none:Advertiser Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Color]' derivation='None' name='[none:Color:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Percent of Budget Used]' derivation='User' name='[usr:Percent of Budget Used:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[budget_data (copy)].[none:Advertiser Segment:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Advertiser Segment:nk]' />
              <groupfilter function='member' level='[none:Advertiser Segment:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[budget_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[budget_data (copy)].[none:Time Span Filter:nk]'>
            <groupfilter function='member' level='[none:Time Span Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[budget_data (copy)].[none:Advertiser Segment:nk]</column>
            <column>[budget_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[budget_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[budget_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[budget_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[budget_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[budget_data (copy)].[none:Color:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[budget_data (copy)].[usr:Percent of Budget Used:qk]</rows>
        <cols>[budget_data (copy)].[none:Date Axis:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='ROI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='real' name='[ROI]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Click Revenue])/sum([Spend])' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ROI]' derivation='User' name='[usr:ROI:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Click ROI:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[usr:Click ROI:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[usr:ROI:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Revenue'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>&lt;</run>
            <run bold='true'>Sheet Name</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE (IF [Parameters].[Advertiser] = [Advertiser Name] THEN &quot;Keep&quot; END)&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Click Revenue]' role='measure' type='quantitative'>
            </column>
            <column datatype='date' name='[Date Axis]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Frame]&#13;&#10;WHEN &quot;Day&quot; THEN [Date]&#13;&#10;WHEN &quot;Week&quot; THEN [Date of Week]&#13;&#10;WHEN &quot;Month&quot; THEN [Date of Month]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Date Filter for Full Time Frames]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Only Full Time Frames] = &quot;True&quot;&#13;&#10;THEN (IF [Date] &lt;= [Last Date to Show] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END)&#13;&#10;ELSE &quot;Keep&quot;&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Grouping Parameter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Grouping Parameter]&#13;&#10;WHEN &quot;All&quot; THEN [Advertiser Name]&#13;&#10;WHEN &quot;Campaign&quot; THEN [Campaign]&#13;&#10;WHEN &quot;Campaign + Ad Group&quot; THEN [Calculation_8291016103909586]&#13;&#10;WHEN &quot;Site&quot; THEN [Site]&#13;&#10;WHEN &quot;Advertiser Segment&quot; THEN [Advertiser Segment]&#13;&#10;WHEN &quot;Total Network&quot; THEN IF [Parameters].[Advertiser] = &quot;All Advertisers&quot; THEN &quot;Total Network&quot; ELSE [Advertiser Name] END&#13;&#10;WHEN &quot;Product Category&quot; THEN [Product Category Type]&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;BUDGETAIR&quot;' value='BudgetAir' />
                <alias key='&quot;CHEAPTICKETS&quot;' value='CheapTickets' />
                <alias key='&quot;EXPEDIA&quot;' value='Expedia' />
                <alias key='&quot;ORBITZ_GLOBAL&quot;' value='Orbitz Global' />
                <alias key='&quot;VAYAMA&quot;' value='Vayama' />
              </aliases>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Filter]' derivation='None' name='[none:Advertiser Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date Axis]' derivation='None' name='[none:Date Axis:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date Filter for Full Time Frames]' derivation='None' name='[none:Date Filter for Full Time Frames:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Grouping Parameter]' derivation='None' name='[none:Grouping Parameter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Click Revenue]' derivation='Sum' name='[sum:Click Revenue:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[:Measure Names]'>
            <groupfilter function='level-members' level='[:Measure Names]' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Advertiser Filter:nk]'>
            <groupfilter function='member' level='[none:Advertiser Filter:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]'>
            <groupfilter function='member' level='[none:Date Filter for Full Time Frames:nk]' member='&quot;Keep&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[:Measure Names]</column>
            <column>[advertiser_data (copy)].[none:Advertiser Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Date Filter for Full Time Frames:nk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[none:Date Axis:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[advertiser_data (copy)].[sum:Click Revenue:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='false' />
            <format attr='break-on-special' value='false' />
            <format attr='show-null-value-warning' value='false' />
            <format attr='omit-on-special' field='[advertiser_data (copy)].[sum:Click Revenue:qk]' value='true' />
            <format attr='break-on-special' field='[advertiser_data (copy)].[sum:Click Revenue:qk]' value='true' />
            <format attr='show-null-value-warning' field='[advertiser_data (copy)].[sum:Click Revenue:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[advertiser_data (copy)].[none:Grouping Parameter:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true'>Color:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Grouping Parameter:nk]&gt;&#10;</run>
                <run bold='true'>Date Axis:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[none:Date Axis:qk]&gt;&#10;</run>
                <run bold='true'>Click Revenue:&#9;</run>
                <run>&lt;[advertiser_data (copy)].[sum:Click Revenue:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.3073563277721405' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[sum:Click Revenue:qk]</rows>
        <cols>[advertiser_data (copy)].[none:Date Axis:qk]</cols>
        <show-full-range>
          <column>[advertiser_data (copy)].[Date Axis]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Tornado - Day'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend&#10;</run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[advertiser_data (copy)].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> vs. </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[advertiser_data (copy)].[none:SDPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D SDPW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend - Ref Day]) - sum([Spend - SDPW])' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend - D SDPW]' derivation='User' name='[usr:Spend - D SDPW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Spend - D SDPW:qk]' scope='cols' value='Spend' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Spend - D SDPW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Spend - D SDPW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[advertiser_data (copy)].[none:Advertiser Name:nk]' value='160' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[advertiser_data (copy)].[usr:Spend - D SDPW:qk]' max='11.09' min='-11.09' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[advertiser_data (copy)].[usr:Spend - D SDPW:qk]' />
              <lod column='[advertiser_data (copy)].[none:Ref Day:qk]' />
              <lod column='[advertiser_data (copy)].[none:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[none:Advertiser Name:nk]</rows>
        <cols>[advertiser_data (copy)].[usr:Spend - D SDPW:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - MTD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend&#10;Current MTD vs. Previous MTD</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D PMTD]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend - MTD]) - sum([Spend - PMTD])' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend - D PMTD]' derivation='User' name='[usr:Spend - D PMTD:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[advertiser_data (copy)].[none:Advertiser Name:nk]' value='160' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[advertiser_data (copy)].[usr:Spend - D PMTD:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[advertiser_data (copy)].[usr:Spend - D PMTD:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[none:Advertiser Name:nk]</rows>
        <cols>[advertiser_data (copy)].[usr:Spend - D PMTD:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tornado - Week'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Spend&#10;WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[advertiser_data (copy)].[none:Ref Day:qk]</run>
            <run bold='true'>&gt;</run>
            <run bold='true'> vs. WE </run>
            <run bold='true'>&lt;</run>
            <run bold='true'>[advertiser_data (copy)].[none:SDPW:qk]</run>
            <run bold='true'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='advertiser_data_meta' name='advertiser_data (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='advertiser_data (copy)'>
            <column datatype='string' name='[Advertiser Name]' role='dimension' type='nominal'>
            </column>
            <column datatype='date' name='[Date]' role='dimension' type='ordinal'>
            </column>
            <column datatype='string' name='[Product Category Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Product Category]&#13;&#10;WHEN &quot;Total&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE IF [Product Category Type] = [Parameters].[Product Category] THEN &quot;Keep&quot; ELSE &quot;Remove&quot; END&#13;&#10;END' />
            </column>
            <column datatype='date' name='[Ref Day]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='CASE [Parameters].[Yesterday or Reference Day]&#13;&#10;WHEN &quot;Yesterday&quot; THEN TODAY()-1&#13;&#10;WHEN &quot;Reference Day&quot; THEN [Parameters].[Reference Day]&#13;&#10;END' />
            </column>
            <column datatype='date' name='[SDPW]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='[Ref Day] -7' />
            </column>
            <column datatype='string' name='[Site]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Spend - D PW]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Spend - Ref Week]) - sum([Spend - PW])' />
            </column>
            <column datatype='string' name='[Time Span Filter]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Parameters].[Time Span]&#13;&#10;WHEN &quot;52 Weeks&quot; THEN&#13;&#10;//Pull 52 weeks from the beginning of the last full week&#13;&#10;    CASE [Parameters].[Week Start]&#13;&#10;    WHEN &quot;Sunday&quot; THEN IF [Date] &gt;= DATE(DATETRUNC(&apos;week&apos;,[Ref Day]))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    WHEN &quot;Monday&quot; THEN IF [Date] &gt;= (DATE(DATETRUNC(&apos;week&apos;,[Ref Day]-1)+1))-364 THEN &quot;Keep&quot; ELSE &quot;Exclude&quot; END&#13;&#10;    END&#13;&#10;WHEN &quot;All Time&quot; THEN &quot;Keep&quot;&#13;&#10;ELSE &quot;Exclude&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[Advertiser Name]' derivation='None' name='[none:Advertiser Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Category Filter]' derivation='None' name='[none:Product Category Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ref Day]' derivation='None' name='[none:Ref Day:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDPW]' derivation='None' name='[none:SDPW:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Site]' derivation='None' name='[none:Site:nk]' pivot='key' type='nominal' />
            <column-instance column='[Time Span Filter]' derivation='None' name='[none:Time Span Filter:nk]' pivot='key' type='nominal' />
            <column-instance column='[Spend - D PW]' derivation='User' name='[usr:Spend - D PW:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[advertiser_data (copy)].[none:Site:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Site:nk]' />
              <groupfilter function='member' level='[none:Site:nk]' member='&quot;Total&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[advertiser_data (copy)].[none:Date:qk]</column>
            <column>[advertiser_data (copy)].[none:Time Span Filter:nk]</column>
            <column>[advertiser_data (copy)].[none:Site:nk]</column>
            <column>[advertiser_data (copy)].[none:Product Category Filter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[advertiser_data (copy)].[usr:Spend - D PW:qk]' scope='cols' value='Spend' />
            <format attr='subtitle' class='0' field='[advertiser_data (copy)].[usr:Spend - D PW:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[advertiser_data (copy)].[usr:Spend - D PW:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[advertiser_data (copy)].[none:Advertiser Name:nk]' value='160' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='0.0' field='[advertiser_data (copy)].[usr:Spend - D PW:qk]' num-steps='2' palette='tableau-red-blue' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='legend'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[advertiser_data (copy)].[usr:Spend - D PW:qk]' />
              <lod column='[advertiser_data (copy)].[none:Ref Day:qk]' />
              <lod column='[advertiser_data (copy)].[none:SDPW:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[advertiser_data (copy)].[none:Advertiser Name:nk]</rows>
        <cols>[advertiser_data (copy)].[usr:Spend - D PW:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Advertiser Data Table'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>Sheet Name</run>
            <run fontalignment='0'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1700' maxwidth='1600' minheight='1700' minwidth='1600' />
      <zones>
        <zone h='100000' id='14' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='9' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
              <zone h='100000' id='2' type='layout-basic' w='99750' x='0' y='0'>
                <zone h='94467' id='1' name='Advertiser Data' show-title='true' w='88542' x='0' y='5533'>
                </zone>
                <zone h='5533' id='10' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='26419' x='0' y='0'>
                </zone>
                <zone h='5533' id='8' type='title' w='73331' x='26419' y='0'>
                </zone>
                <zone fixed-size='160' h='94467' id='3' is-fixed='true' param='vert' type='layout-flow' w='11208' x='88542' y='5533'>
                  <zone h='4588' id='13' param='[Parameters].[Product Category]' type='paramctrl' w='11208' x='88542' y='5533'>
                  </zone>
                  <zone h='4588' id='5' param='[Parameters].[Time Frame]' type='paramctrl' w='11208' x='88542' y='10121'>
                  </zone>
                  <zone h='6058' id='6' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='11208' x='88542' y='14709'>
                    <formatted-text>
                      <run>Yesterday or &#10;Reference Day</run>
                    </formatted-text>
                  </zone>
                  <zone h='4352' id='7' param='[Parameters].[Reference Day]' type='paramctrl' w='11208' x='88542' y='20767'>
                  </zone>
                  <zone h='6117' id='11' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='11208' x='88542' y='25119'>
                  </zone>
                  <zone h='8588' id='12' type='text' w='11208' x='88542' y='31236'>
                    <formatted-text>
                      <run fontsize='9'>You must set &#10;</run>
                      <run bold='true' fontsize='9'>Only Full Time Frames = False&#10;</run>
                      <run fontsize='9'>for this page</run>
                    </formatted-text>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Advertiser Tornados'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Advertiser Tornados</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1500' minheight='1600' minwidth='1500' />
      <zones>
        <zone h='100000' id='5' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='12' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='4188' id='11' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95562' id='8' param='horz' type='layout-flow' w='100000' x='0' y='4188'>
              <zone h='95562' id='6' param='vert' type='layout-flow' w='89333' x='0' y='4188'>
                <zone h='95562' id='4' type='layout-basic' w='89333' x='0' y='4188'>
                  <zone h='95562' id='1' name='Tornado - Day' show-title='true' w='30565' x='0' y='4188'>
                  </zone>
                  <zone h='95562' id='2' name='Tornado - Week' show-title='true' w='28267' x='30565' y='4188'>
                  </zone>
                  <zone h='95562' id='3' name='Tornado - MTD' show-title='true' w='30501' x='58832' y='4188'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='95562' id='7' is-fixed='true' param='vert' type='layout-flow' w='10667' x='89333' y='4188'>
                <zone h='4875' id='13' param='[Parameters].[Product Category]' type='paramctrl' w='10667' x='89333' y='4188'>
                </zone>
                <zone h='6438' id='9' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' w='10667' x='89333' y='9063'>
                  <formatted-text>
                    <run>Yesterday or&#10;Reference Day</run>
                  </formatted-text>
                </zone>
                <zone h='4625' id='10' param='[Parameters].[Reference Day]' type='paramctrl' w='10667' x='89333' y='15501'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Budget and Impressions'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser Segment or Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'> Budget and Impression Metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1200' minheight='1200' minwidth='1200' />
      <zones>
        <zone h='100000' id='1' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='13' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='0'>
              <zone h='100000' id='2' type='layout-basic' w='99667' x='0' y='0'>
                <zone h='6500' id='14' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='30857' x='0' y='0'>
                </zone>
                <zone h='6500' id='12' type='title' w='68810' x='30857' y='0'>
                </zone>
                <zone fixed-size='160' h='93500' id='3' is-fixed='true' param='vert' type='layout-flow' w='13712' x='85955' y='6500'>
                  <zone h='4166' id='17' param='[Parameters].[Advertiser]' type='paramctrl' w='13712' x='85955' y='6500'>
                  </zone>
                  <zone h='4166' id='34' param='[Parameters].[Product Category]' type='paramctrl' w='13712' x='85955' y='10666'>
                  </zone>
                  <zone h='5166' id='33' param='[Parameters].[Advertiser Segment or Advertiser]' type='paramctrl' w='13712' x='85955' y='14832'>
                    <formatted-text>
                      <run>Group by Advertiser or&#10;Advertiser Segment</run>
                    </formatted-text>
                  </zone>
                  <zone h='6749' id='7' param='[Parameters].[Time Frame]' type='paramctrl' w='13712' x='85955' y='19998'>
                    <formatted-text>
                      <run>Smoothed by</run>
                    </formatted-text>
                  </zone>
                  <zone h='5249' id='19' param='[Parameters].[Time Span]' type='paramctrl' w='13712' x='85955' y='26747'>
                  </zone>
                  <zone h='5249' id='18' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13712' x='85955' y='31996'>
                  </zone>
                  <zone h='4166' id='30' param='[Parameters].[Week Start]' type='paramctrl' w='13712' x='85955' y='37245'>
                  </zone>
                  <zone h='10166' id='35' name='Clicks' param='[advertiser_data (copy)].[none:Color:nk]' type='color' w='13712' x='85955' y='41411'>
                  </zone>
                </zone>
                <zone h='31083' id='16' type='empty' w='41703' x='44252' y='6500'>
                </zone>
                <zone h='31083' id='20' name='Clicks' show-title='true' w='44252' x='0' y='6500'>
                </zone>
                <zone h='30584' id='21' name='Average Budget' show-title='true' w='44220' x='0' y='37583'>
                </zone>
                <zone h='30584' id='22' name='Percent of Budget Used' show-title='true' w='41735' x='44220' y='37583'>
                </zone>
                <zone h='31833' id='24' name='Eligible Ad Calls' show-title='true' w='44252' x='0' y='68167'>
                </zone>
                <zone h='31833' id='31' name='Impressions by Adv' show-title='true' w='41703' x='44252' y='68167'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Comparison'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'>: </run>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Graph Parameter 1]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'> vs. </run>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Graph Parameter 2]</run>
            <run fontalignment='0'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' />
      <zones>
        <zone h='100000' id='3' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='17' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='13' param='vert' type='layout-flow' w='100000' x='0' y='0'>
              <zone fixed-size='76' h='9500' id='12' is-fixed='true' type='layout-basic' w='100000' x='0' y='0'>
                <zone h='9500' id='14' type='title' w='73167' x='26833' y='0'>
                </zone>
                <zone h='9500' id='15' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='26833' x='0' y='0'>
                </zone>
              </zone>
              <zone h='90500' id='4' param='horz' type='layout-flow' w='100000' x='0' y='9500'>
                <zone h='90500' id='2' type='layout-basic' w='99667' x='0' y='9500'>
                  <zone h='90500' id='1' name='Comparison 1' show-title='true' w='85667' x='0' y='9500'>
                  </zone>
                  <zone fixed-size='160' h='90500' id='16' is-fixed='true' param='vert' type='layout-flow' w='14000' x='85667' y='9500'>
                    <zone h='9750' id='18' param='[Parameters].[Advertiser]' type='paramctrl' w='14000' x='85667' y='9500'>
                    </zone>
                    <zone h='9750' id='19' param='[Parameters].[Product Category]' type='paramctrl' w='14000' x='85667' y='19250'>
                    </zone>
                    <zone h='9750' id='20' param='[Parameters].[Week Start]' type='paramctrl' w='14000' x='85667' y='29000'>
                    </zone>
                    <zone h='9750' id='21' param='[Parameters].[Time Frame]' type='paramctrl' w='14000' x='85667' y='38750'>
                    </zone>
                    <zone h='9750' id='22' param='[Parameters].[Time Span]' type='paramctrl' w='14000' x='85667' y='48500'>
                    </zone>
                    <zone h='9750' id='23' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='14000' x='85667' y='58250'>
                    </zone>
                    <zone h='12000' id='24' name='Comparison 1' param='[advertiser_data (copy)].[none:Date:qk]' type='filter' w='14000' x='85667' y='68000'>
                    </zone>
                    <zone h='9750' id='25' param='[Parameters].[Graph Parameter 1]' type='paramctrl' w='14000' x='85667' y='80000'>
                      <formatted-text>
                        <run fontcolor='#0062c4'>Left Axis Metric (Blue)</run>
                      </formatted-text>
                    </zone>
                    <zone h='10250' id='26' param='[Parameters].[Graph Parameter 2]' type='paramctrl' w='14000' x='85667' y='89750'>
                      <formatted-text>
                        <run fontcolor='#ff8000'>Right Axis Metric (Orange)</run>
                      </formatted-text>
                    </zone>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Comparison by Group'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'>: </run>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Graph Parameter 1]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'> vs. </run>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Graph Parameter 2]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'> by </run>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Grouping Parameter]</run>
            <run fontalignment='0'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' />
      <zones>
        <zone h='100000' id='7' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='16' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone fixed-size='73' h='7300' id='15' is-fixed='true' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='7300' id='17' type='title' w='72750' x='27250' y='0'>
              </zone>
              <zone h='7300' id='18' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='27250' x='0' y='0'>
              </zone>
            </zone>
            <zone h='92700' id='4' param='horz' type='layout-flow' w='100000' x='0' y='7300'>
              <zone h='92700' id='2' type='layout-basic' w='86667' x='0' y='7300'>
                <zone h='46355' id='1' name='Comparison 2a' show-title='true' w='86667' x='0' y='7300'>
                </zone>
                <zone h='46345' id='11' name='Comparison 2b' show-title='true' w='86667' x='0' y='53655'>
                </zone>
              </zone>
              <zone fixed-size='160' h='92700' id='19' is-fixed='true' type='layout-basic' w='13333' x='86667' y='7300'>
                <zone h='26267' id='3' param='vert' type='layout-flow' w='13333' x='86667' y='7300'>
                  <zone h='6789' id='21' param='[Parameters].[Advertiser]' type='paramctrl' w='13333' x='86667' y='7300'>
                  </zone>
                  <zone h='6789' id='24' param='[Parameters].[Product Category]' type='paramctrl' w='13333' x='86667' y='14089'>
                  </zone>
                  <zone fixed-size='51' h='5900' id='8' is-fixed='true' param='[Parameters].[Week Start]' type='paramctrl' w='13333' x='86667' y='20878'>
                  </zone>
                  <zone h='6789' id='13' param='[Parameters].[Time Frame]' type='paramctrl' w='13333' x='86667' y='26778'>
                    <formatted-text>
                      <run>Aggregated by</run>
                    </formatted-text>
                  </zone>
                </zone>
                <zone h='46292' id='20' param='vert' type='layout-flow' w='13333' x='86667' y='53708'>
                  <zone h='10800' id='5' name='Comparison 2a' param='[advertiser_data (copy)].[none:Date:qk]' type='filter' w='13333' x='86667' y='53708'>
                  </zone>
                  <zone h='7800' id='9' param='[Parameters].[Grouping Parameter]' type='paramctrl' w='13333' x='86667' y='64508'>
                    <formatted-text>
                      <run>Color</run>
                    </formatted-text>
                  </zone>
                  <zone h='7800' id='10' param='[Parameters].[Graph Parameter 1]' type='paramctrl' w='13333' x='86667' y='72308'>
                    <formatted-text>
                      <run>Top Graph Parameter</run>
                    </formatted-text>
                  </zone>
                  <zone h='7800' id='12' param='[Parameters].[Graph Parameter 2]' type='paramctrl' w='13333' x='86667' y='80108'>
                    <formatted-text>
                      <run>Bottom Graph Parameter</run>
                    </formatted-text>
                  </zone>
                  <zone h='6900' id='6' name='Comparison 2a' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' w='13333' x='86667' y='87908'>
                  </zone>
                </zone>
                <zone h='10960' id='22' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13333' x='86667' y='42748'>
                </zone>
                <zone h='9181' id='23' param='[Parameters].[Time Span]' type='paramctrl' w='13333' x='86667' y='33567'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Data'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'>: Data Table</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1300' minheight='1200' minwidth='1300' />
      <zones>
        <zone h='100000' id='5' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='12' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone fixed-size='72' h='6000' id='11' is-fixed='true' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='6000' id='13' type='title' w='73000' x='27000' y='0'>
              </zone>
              <zone h='6000' id='14' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='27000' x='0' y='0'>
              </zone>
            </zone>
            <zone h='94000' id='4' param='horz' type='layout-flow' w='100000' x='0' y='6000'>
              <zone h='94000' id='2' type='layout-basic' w='87154' x='0' y='6000'>
                <zone h='94000' id='1' name='Data Table' show-title='true' w='87154' x='0' y='6000'>
                </zone>
              </zone>
              <zone fixed-size='167' h='94000' id='15' is-fixed='true' type='layout-basic' w='12846' x='87154' y='6000'>
                <zone h='94000' id='3' param='vert' type='layout-flow' w='12846' x='87154' y='6000'>
                  <zone h='6499' id='17' param='[Parameters].[Advertiser]' type='paramctrl' w='12846' x='87154' y='6000'>
                  </zone>
                  <zone h='6499' id='21' param='[Parameters].[Product Category]' type='paramctrl' w='12846' x='87154' y='12499'>
                  </zone>
                  <zone h='6499' id='7' param='[Parameters].[Week Start]' type='paramctrl' w='12846' x='87154' y='18998'>
                  </zone>
                  <zone h='6499' id='22' param='[Parameters].[Time Frame]' type='paramctrl' w='12846' x='87154' y='25497'>
                  </zone>
                  <zone h='6499' id='23' param='[Parameters].[Time Span]' type='paramctrl' w='12846' x='87154' y='31996'>
                  </zone>
                  <zone h='6499' id='19' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='12846' x='87154' y='38495'>
                  </zone>
                  <zone h='6499' id='24' param='[Parameters].[Grouping Parameter]' type='paramctrl' w='12846' x='87154' y='44994'>
                  </zone>
                  <zone h='8999' id='25' name='Data Table' param='[advertiser_data (copy)].[none:Date:qk]' type='filter' w='12846' x='87154' y='51493'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='ROI Summary'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'>: ROI Summary</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1200' maxwidth='1200' minheight='1200' minwidth='1200' />
      <zones>
        <zone h='100000' id='3' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='93667' id='26' param='horz' type='layout-flow' w='100000' x='0' y='6333'>
            <zone h='93667' id='24' type='layout-basic' w='86667' x='0' y='6333'>
              <zone h='93667' id='4' param='horz' type='layout-flow' w='86667' x='0' y='6333'>
                <zone h='93667' id='2' type='layout-basic' w='86667' x='0' y='6333'>
                  <zone h='31654' id='1' name='Revenue' show-title='true' w='43332' x='43335' y='35541'>
                  </zone>
                  <zone h='32805' id='9' name='ROI' show-title='true' w='43332' x='43335' y='67195'>
                  </zone>
                  <zone h='31654' id='10' name='CVR' show-title='true' w='43335' x='0' y='35541'>
                  </zone>
                  <zone h='32805' id='11' name='CPA' show-title='true' w='43335' x='0' y='67195'>
                  </zone>
                  <zone h='29208' id='22' name='CPC' show-title='true' w='43335' x='0' y='6333'>
                  </zone>
                  <zone h='29208' id='23' name='Cost' show-title='true' w='43332' x='43335' y='6333'>
                  </zone>
                </zone>
              </zone>
            </zone>
            <zone fixed-size='160' h='93667' id='25' is-fixed='true' param='vert' type='layout-flow' w='13333' x='86667' y='6333'>
              <zone h='6499' id='29' param='[Parameters].[Advertiser]' type='paramctrl' w='13333' x='86667' y='6333'>
              </zone>
              <zone h='6499' id='30' param='[Parameters].[Product Category]' type='paramctrl' w='13333' x='86667' y='12832'>
              </zone>
              <zone h='6499' id='31' param='[Parameters].[Week Start]' type='paramctrl' w='13333' x='86667' y='19331'>
              </zone>
              <zone h='6499' id='32' param='[Parameters].[Time Frame]' type='paramctrl' w='13333' x='86667' y='25830'>
              </zone>
              <zone h='6499' id='33' param='[Parameters].[Time Span]' type='paramctrl' w='13333' x='86667' y='32329'>
              </zone>
              <zone h='6499' id='34' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13333' x='86667' y='38828'>
              </zone>
              <zone h='6499' id='35' param='[Parameters].[Grouping Parameter]' type='paramctrl' w='13333' x='86667' y='45327'>
              </zone>
              <zone h='8999' id='36' name='CPC' param='[advertiser_data (copy)].[none:Date:qk]' type='filter' w='13333' x='86667' y='51826'>
              </zone>
              <zone h='2749' id='28' type='text' w='13333' x='86667' y='60825'>
                <formatted-text>
                  <run bold='true' fontalignment='0'>&lt;</run>
                  <run bold='true' fontalignment='0'>[Parameters].[Grouping Parameter]</run>
                  <run bold='true' fontalignment='0'>&gt;</run>
                </formatted-text>
              </zone>
              <zone h='3666' id='27' name='CPC' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' w='13333' x='86667' y='63574'>
              </zone>
            </zone>
          </zone>
          <zone h='6333' id='17' type='title' w='72917' x='27083' y='0'>
          </zone>
          <zone h='6333' id='18' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='27083' x='0' y='0'>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Topline'>
      <layout-options export-orientation='landscape'>
        <title>
          <formatted-text>
            <run fontalignment='0'>&lt;</run>
            <run fontalignment='0'>[Parameters].[Advertiser]</run>
            <run fontalignment='0'>&gt;</run>
            <run fontalignment='0'>: Topline</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
      </style>
      <size maxheight='1600' maxwidth='1200' minheight='1600' minwidth='1200' />
      <zones>
        <zone h='100000' id='6' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='19' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone fixed-size='73' h='4563' id='18' is-fixed='true' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='4563' id='20' type='title' w='73000' x='27000' y='0'>
              </zone>
              <zone h='4563' id='21' is-centered='0' param='\\psf\Home\Documents\data\Tableau\data\aft_logo.png' type='bitmap' w='27000' x='0' y='0'>
              </zone>
            </zone>
            <zone h='95437' id='4' param='horz' type='layout-flow' w='100000' x='0' y='4563'>
              <zone h='95437' id='2' type='layout-basic' w='86750' x='0' y='4563'>
                <zone h='23860' id='26' name='Impressions' show-title='true' w='43377' x='0' y='4563'>
                </zone>
                <zone h='23860' id='38' name='Impression Share' show-title='true' w='43373' x='43377' y='4563'>
                </zone>
                <zone h='23859' id='41' name='CPC' show-title='true' w='43377' x='43373' y='52282'>
                </zone>
                <zone h='23859' id='42' name='CTR' show-title='true' w='43373' x='0' y='52282'>
                </zone>
                <zone h='23859' id='43' name='Average Position' show-title='true' w='43377' x='0' y='28423'>
                </zone>
                <zone h='23859' id='46' name='Cost' show-title='true' w='43373' x='0' y='76141'>
                </zone>
                <zone h='23859' id='48' type='empty' w='43377' x='43373' y='76141'>
                </zone>
                <zone h='23859' id='49' name='Clicks for Topline' show-title='true' w='43373' x='43377' y='28423'>
                </zone>
              </zone>
              <zone fixed-size='159' h='95437' id='22' is-fixed='true' type='layout-basic' w='13250' x='86750' y='4563'>
                <zone h='95437' id='3' param='vert' type='layout-flow' w='13250' x='86750' y='4563'>
                  <zone fixed-size='50' h='3625' id='24' is-fixed='true' param='[Parameters].[Advertiser]' type='paramctrl' w='13250' x='86750' y='4563'>
                  </zone>
                  <zone h='4875' id='39' param='[Parameters].[Product Category]' type='paramctrl' w='13250' x='86750' y='8188'>
                  </zone>
                  <zone h='4875' id='8' param='[Parameters].[Week Start]' type='paramctrl' w='13250' x='86750' y='13063'>
                  </zone>
                  <zone h='4875' id='14' param='[Parameters].[Time Frame]' type='paramctrl' w='13250' x='86750' y='17938'>
                    <formatted-text>
                      <run>Aggregated by</run>
                    </formatted-text>
                  </zone>
                  <zone h='4875' id='37' param='[Parameters].[Time Span]' type='paramctrl' w='13250' x='86750' y='22813'>
                  </zone>
                  <zone h='4875' id='34' param='[Parameters].[Only Full Time Frames]' type='paramctrl' w='13250' x='86750' y='27688'>
                  </zone>
                  <zone h='4875' id='12' param='[Parameters].[Grouping Parameter]' type='paramctrl' w='13250' x='86750' y='32563'>
                    <formatted-text>
                      <run>Color</run>
                    </formatted-text>
                  </zone>
                  <zone h='6750' id='5' name='Impression Share' param='[advertiser_data (copy)].[none:Date:qk]' type='filter' w='13250' x='86750' y='37438'>
                  </zone>
                  <zone h='2063' id='40' type='text' w='13250' x='86750' y='44188'>
                    <formatted-text>
                      <run bold='true' fontalignment='0'>&lt;</run>
                      <run bold='true' fontalignment='0'>[Parameters].[Grouping Parameter]</run>
                      <run bold='true' fontalignment='0'>&gt;</run>
                    </formatted-text>
                  </zone>
                  <zone h='4313' id='47' name='Cost' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' w='13250' x='86750' y='46251'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Day'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Yesterday or Reference Day]' type='parameter' />
            <card mode='compact' param='[Parameters].[Product Category]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Advertiser Name:nk]</field>
          <field>[advertiser_data].[none:Product Category Filter:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Ref Day:ok]</field>
          <field>[advertiser_data].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - Week'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Advertiser Name:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Ref Day:ok]</field>
          <field>[advertiser_data].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Tornado - MTD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='66'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Advertiser Name:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Ref Day:ok]</field>
          <field>[advertiser_data].[yr:SDPW:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Tornados'>
      <zones>
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Advertiser Data'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card size='143' type='filters' />
            <card size='254' type='marks' />
            <card size='206' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Yesterday or Reference Day]' type='parameter' />
            <card mode='datetime' param='[Parameters].[Reference Day]' type='parameter' />
            <card param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[AfT Daily Dashboard (local copy)].[none:Advertiser Segment:nk]</field>
          <field>[advertiser_data (copy)].[Multiple Values]</field>
          <field>[advertiser_data].[none:Advertiser Filter:nk]</field>
          <field>[advertiser_data].[none:Advertiser Name:nk]</field>
          <field>[advertiser_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[advertiser_data].[none:Eligible Ad Calls for Time Frame:qk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40938.613126574077].[none:Advertiser Name:nk]</field>
          <field>[mysql.40938.613126574077].[none:Advertiser Segment:nk]</field>
          <field>[mysql.40938.613126574077].[none:Dataset:nk]</field>
          <field>[mysql.40938.613126574077].[yr:Ref Day:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Advertiser Data Table'>
      <active id='1' />
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Yesterday or Reference Day]' type='paramctrl' />
        <zone mode='datetime' name='' param='[Parameters].[Reference Day]' type='paramctrl' />
        <zone mode='list' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Cost'>
      <cards>
        <edge name='left'>
          <strip size='201'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Span]' type='parameter' />
            <card mode='compact' param='[Parameters].[Product Category]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Advertiser:vtsvr:nk]</field>
          <field>[AfT Advertiser Report Aggregations].[none:Date:vtsvr:ok]</field>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[AfT Advertiser Report Aggregations_1 (local copy)].[:Measure Names]</field>
          <field>[AfT Advertiser Report Aggregations_1 (local copy)].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Calculation1:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
          <field>[mysql.40876.472398553240].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Impressions'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
          <field>[mysql.40876.472398553240].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Impression Share'>
      <cards>
        <edge name='left'>
          <strip size='186'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Span]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Advertiser:vtsvr:nk]</field>
          <field>[AfT Advertiser Report Aggregations].[none:Date:vtsvr:ok]</field>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[AfT Advertiser Report Aggregations_1 (local copy)].[:Measure Names]</field>
          <field>[AfT Advertiser Report Aggregations_1 (local copy)].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Calculation1:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
          <field>[mysql.40876.472398553240].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average Position'>
      <cards>
        <edge name='left'>
          <strip size='159'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='list' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='36' type='pages' />
            <card size='168' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser Segment:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicks for Topline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='36' type='pages' />
            <card size='168' type='filters' />
            <card size='221' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser Segment:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CTR'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Topline'>
      <active id='21' />
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone name='Impressions'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Impression Share'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CTR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Average Position'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Cost'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Clicks for Topline'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Span]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Grouping Parameter]' type='paramctrl' />
        <zone name='Impression Share' param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='Cost' pane-specification-id='0' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CVR'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Revenue'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CPA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='ROI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations].[none:Grouping:vtsvr:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='ROI Summary'>
      <active id='18' />
      <zones>
        <zone name='Revenue'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='ROI'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CVR'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPA'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='CPC'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Cost'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Span]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Grouping Parameter]' type='paramctrl' />
        <zone name='CPC' param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone name='CPC' pane-specification-id='1' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' />
        <zone is-centered='0' name='' type='bitmap' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Data Table'>
      <cards>
        <edge name='left'>
          <strip size='245'>
            <card size='36' type='pages' />
            <card size='215' type='filters' />
            <card size='197' type='marks' />
            <card size='155' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
            <card mode='compact' param='[Parameters].[Product Category]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[AfT Advertiser Report Aggregations_1 (local copy)].[none:Calculation2:ok]</field>
          <field>[advertiser_data].[none:Grouping Parameter (copy):nk]</field>
          <field>[advertiser_data].[none:Product Category Filter:nk]</field>
          <field>[mysql.40876.472398553240].[:Measure Names]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Calculation2:qk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Data'>
      <active id='14' />
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Span]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Grouping Parameter]' type='paramctrl' />
        <zone name='Data Table' param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Comparison 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[advertiser_data (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card custom-title='true' mode='compact' param='[Parameters].[Graph Parameter 1]' type='parameter' />
            <card custom-title='true' mode='compact' param='[Parameters].[Graph Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Graph Parameter 1]</field>
          <field>[Parameters].[Graph Parameter 2]</field>
          <field>[mysql.40876.472398553240].[:Measure Names]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Comparison'>
      <active id='15' />
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone name='Comparison 1'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Time Span]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone name='Comparison 1' param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Graph Parameter 1]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Graph Parameter 2]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Comparison 2a'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Graph Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Graph Parameter 1]</field>
          <field>[mysql.40876.472398553240].[:Measure Names]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Comparison 2b'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Week Start]' type='parameter' />
            <card mode='compact' param='[Parameters].[Grouping Parameter]' type='parameter' />
            <card mode='compact' param='[Parameters].[Graph Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Graph Parameter 2]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[mysql.40876.472398553240].[none:Ad Group:nk]</field>
          <field>[mysql.40876.472398553240].[none:Advertiser:nk]</field>
          <field>[mysql.40876.472398553240].[none:Campaign:nk]</field>
          <field>[mysql.40876.472398553240].[none:Date of Week:qk]</field>
          <field>[mysql.40876.472398553240].[none:Date:qk]</field>
          <field>[mysql.40876.472398553240].[none:Grouping:nk]</field>
          <field>[mysql.40876.472398553240].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Comparison by Group'>
      <active id='18' />
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone name='Comparison 2a'>
          <viewpoint>
            <zoom type='entire-view' />
            <floating-toolbar-visibility value='2' />
          </viewpoint>
        </zone>
        <zone name='Comparison 2b'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone custom-title='true' mode='list' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone name='Comparison 2a' param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Grouping Parameter]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Graph Parameter 1]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Graph Parameter 2]' type='paramctrl' />
        <zone name='Comparison 2a' pane-specification-id='1' param='[advertiser_data (copy)].[none:Grouping Parameter:nk]' type='color' />
        <zone mode='list' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone mode='list' name='' param='[Parameters].[Time Span]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Average Budget'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[budget_data].[none:Advertiser ID:ok]</field>
          <field>[budget_data].[none:Color:nk]</field>
          <field>[budget_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[budget_data].[none:Time Span Filter:nk]</field>
          <field>[budget_data].[yr:Date Axis:ok]</field>
          <field>[budget_data].[yr:Date:ok]</field>
          <field>[mysql.41253.587507615739].[:Measure Names]</field>
          <field>[mysql.41253.587507615739].[none:Advertiser ID:ok]</field>
          <field>[mysql.41253.587507615739].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Clicks'>
      <cards>
        <edge name='left'>
          <strip size='211'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Advertiser Filter:nk]</field>
          <field>[advertiser_data].[none:Advertiser Name:nk]</field>
          <field>[advertiser_data].[none:Color:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Percent of Budget Used'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Time Frame]' type='parameter' />
            <card mode='compact' param='[Parameters].[Advertiser]' type='parameter' />
            <card mode='compact' param='[Parameters].[Advertiser Segment or Advertiser]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[budget_data].[none:Advertiser Filter:nk]</field>
          <field>[budget_data].[none:Advertiser Name:nk]</field>
          <field>[budget_data].[none:Color:nk]</field>
          <field>[budget_data].[none:Date Filter for Full Time Frames:nk]</field>
          <field>[budget_data].[none:Product Category Filter:nk]</field>
          <field>[budget_data].[none:Time Span Filter:nk]</field>
          <field>[budget_data].[yr:Date Axis:ok]</field>
          <field>[budget_data].[yr:Date:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Eligible Ad Calls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
            <card param='[advertiser_data (copy)].[none:Date:qk]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Color:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Impressions by Adv'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Only Full Time Frames]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[advertiser_data].[none:Color:nk]</field>
          <field>[advertiser_data].[none:Site:nk]</field>
          <field>[advertiser_data].[yr:Date Axis:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Budget and Impressions'>
      <zones>
        <zone is-centered='0' name='' type='bitmap' />
        <zone mode='compact' name='' param='[Parameters].[Advertiser]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Product Category]' type='paramctrl' />
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Advertiser Segment or Advertiser]' type='paramctrl' />
        <zone custom-title='true' mode='list' name='' param='[Parameters].[Time Frame]' type='paramctrl' />
        <zone mode='list' name='' param='[Parameters].[Time Span]' type='paramctrl' />
        <zone mode='list' name='' param='[Parameters].[Only Full Time Frames]' type='paramctrl' />
        <zone mode='compact' name='' param='[Parameters].[Week Start]' type='paramctrl' />
        <zone name='Clicks' pane-specification-id='0' param='[advertiser_data (copy)].[none:Color:nk]' type='color' />
        <zone name='Clicks'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[advertiser_data].[none:Color:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='Average Budget'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Percent of Budget Used'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Eligible Ad Calls'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Impressions by Adv'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Tornado - Day' width='192'>
      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
      AA4LAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Tornado - Week' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Advertiser Tornados' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJzsvVmMXXee3/c5+3b3vVYWi5u4tLamWi211Ivk
      no7HPRNPj2cmMOKH+NEJYCDIS4AAQRADsYG8OEheDHgexnkKYBtGEIw941m7tbVaEklRpLgW
      yVpY271113PP/s9DkRRFFclabq2qz1OR99xzzj3/8zvn//3/NkkI8d8kSfIWe5xms0kul9vQ
      dzzPwzTNbTqjvUOn08G2bRRF2e1TeSae5wFsakziOAYY+G9UkyR5S5blfzzQvT4VgRAgSdJa
      H4EEQohvfC6EePT/a373KcwsrHDpy3vIssyr5yaZGClv8fz3NrIs78hx1hqjjXy+mfNstLr8
      8uOrZNI2b58/ja6pG97HWgxmL4/RbiyxuNwgFAmZVAbTNBEIAt8n8Hp0fchnHCRJwnTSWHLE
      nZklTE3F9bu4QUSlVME2dBKxejGLpdKmzuXy9Wn+53/5/wDwv/73f3TgDWBQCJEwdeM6sSRQ
      NQvbcVBYfUZ5fZdOt4tpp7BMkyROKFfLzE3dAs0mCT3m6nVq5RKOk0ZCIEugWyl0dfMGulhv
      8y/+1X9guFrg/Llje9cA+t0W1699yUp7hWajiWk5eGGMKmKiOCJRLYhcbDPPiZdfpGKEfHrp
      On7HQ8/ZrNTnyZXH6C/NIPQMiqbwO3//9zd1ogJIhFj9Wwz0Zx5sRMLsnSlafpe5uUVQDYJe
      DyebpbW4hJHJEIcBkVAZHxvh1Vdf4sLFz/ACGa/boK9oXJFiHFVnqdkm55jUTrzM2+fPsf73
      9zdJHswEBsnADSBbqvHm2yWajQVaHR9TVwliAUkEQIxMkkSkrCzZUhY1iXmnNEJ9qUEql6Hb
      bZHKFAh6LZANfN/DNnUCN9jwuUiA/OBVvIGZ07ceSZI5++prSHLC9PQsqm4RRyGaptJ3XTTd
      IAgCZNWgXMxjOxZvvP1jOs02CQlCVhAIbFWl7XoYqoRkZrd8XvIGp8DrQYrj+F/vnAbYHEII
      Go0GhUJhQxfg+tTst0IDtFotbNtG07TdPpVn4rouALZtb/i7yyvt3dcAWxU/D7dZ3W51Prid
      T+bxoSLHjwztmDjcFwixut6wxoV/sA6xrnF+tCgBzx3Eh/vdCtmUxc9/8urAjfxrBiCSkBvX
      p5CEQLMsHMcGEgD6bp9ur4eTctA1nURIVCsl7t26AaZNEgbcX2owXC7jpFMgEiTASmXJpCwA
      VpYX+OQ3HxKrGYr5LIVyFVNKyBRKdNsrKLqJJkHX7aNrKp1Oi36icGpyYqA/+qDTWJpnudFB
      JJDKOJimAULg+x5ezyWQJNIPnsKpTA418bg3V0c1VHy3g+dJVGtFDF1FICOEoFwuo8gSIgm5
      9Nln3Ls/T7FYxXYcRkeG8PyYfNqg2XFxUg6B2yUSMoqUcHd2gePHT2Bqe+9B9IQBxNyZuo3f
      7TG3OI9q2PR6bbLZHItLS2RzOZLIxY0kjh6Z5LVXX+TCxQt0o5igGxFIEddFhKY7NNttHFPj
      xMvf59RoCd2ymbpzh8XlZSZPDHPliy945fU8vV6djtvnvb/9z8RGiryu4SsaSuCRK1Xo9HuU
      S6XBi5UDTLe1wrUvb9FeadBotrAckzAWiDgkjsBI6/jtJmq2yvmXv4sj2nxy+QYtL6SQsVmY
      XmB4YpilmVn0TAFNUfjtv/dfEIcxquRz6/YdzFyefnORmQWVWjnP7Fyd2f4Cv/r4IhMnzuC2
      l1CFQq5cZmWlSSRJvPTCyS2/CQbN1zSASGLqjRZyEjI9O4du2URhgKYquK6PYeqEgYdQDSrF
      AinbxvM9misrIOkgxcgIVNXA9fqoksDMFKkWMoDgzt27OKkUpWKJTqdDnIAIeyytdEniCE1T
      iWNBrljA77RRTAfTUMkXSvR73Q1rAM/z0HX9wE+BntQAbrdDECU0Fubp+AG6KhMLiSQKARlJ
      EURhiJXJU87nEFFIGAYs1NvksynazTa5Yp5eq4VsmPhen8ljx5GBbnOJ5Xaf4eEhRBjg+QG6
      YTA7M4MkQxQnSCgYjomlKPSDCNOycFI2jrk6E9iMBgjDEGDgU6ADLYK/rQawV9mKCN4uA9jh
      mcWqJ5iH4un5m29JPd27X+fSl/eQ5OfvRNdU3j5/mlzG2fwBvyU8XIsf9JLkQ1o377Dw/idf
      c97IGYfRn/5wfxpAEnpcn7pH6Lu0W21QLCaOjKDIEsg6svBptHtIQsY2ZNo9n3wuTWO+Tq5W
      oVrZ3PLlQ09wsg7nSTZt88f//J8cGsAzWJqfptHp02w06PZ6jB+ZJOVYxHFMPpvlztwcWpJg
      2Cm8XgvdTiMCnyAU1EaH1+0JXnj/E977b/8nRJI8+r/M2RPUfvAapAY7PjtjAHHI1O2btJoN
      lhcbSKrBwuIszVab2lCN8eEqN29P0222MZSERruHHwZYQiN2TH7vF1vzBK/HANazzbed1soS
      X96aZX5mhp7ns7i0jEhCQlnn9Vde5NbtKeJOmyBW8XordDs9JN1GjTzGX359/Z5gIRBJ8jUD
      EMn2jM+OGICsmbz2ve8TB33q9RZIkIgE3bBJp0wsy2FkZIJWY5me66EoMnEi0GUFNwwG4gl+
      7jkeuoqfS210ktLwJEvzCwRRhCJLhIkgncmSz6TIFyuoScjC4jKKqhIFAYpuIgIPLVNc/4Ek
      CekJ3baeaexmONAi+KEn+KBrgIMmgp+lAcz9OAV6FuvxHm8n+/nG30s8exw3tpqRPT5B9vjE
      1/5veaXNn75/eeBT1V0zgIfeyl6nQ6ZUwLEswiBAVlQcx8F323R7LkLRODI2vqljrEcEH4rf
      zfMwckCEPr6sUsxnkSSI4wTDtNBk6Lou7eYyw0dOYWwhl+VhOHSr4w7uB7CLBvDQW1lfmMFV
      dExDx9Z0otDFSJfwWrNIoYVImVSqw5s6xnpE8KH43TwPIwf6rSZ3V+qUi0VavYBSxqYX+lhJ
      QqKYtJamefUnGc4eHdrS8da7oLERds0ASrVR3i4N05if4dLNuxw/fpxsykHEPo1mF8s+jiHp
      CE1BlSXCTRxjPSL4UPxuHknWePW17yHHAcXrVwlli+8O1UiZGp1OC68fki8WCPrnSBcKWw6K
      kyVp4OO1B0SwIIxiNPXptridIvggaIC9IIKTOEZIEsozvO6DCIc+MG+Ar5CeefNvhcNw6J1D
      3uaE/B0Jh95ueu0Gs4vL9ENBOZuiWW+QKRTpNBroqQzDwzXcTgtZUfC8gDiJkCSFcvlgJrLs
      S4TgztQNvFhCU3XkJCASCroM7Z5PbbhG2tbp9jySOCQRgiCISGdzGNreq1qxowbg97vcuH6N
      +/U2JcemsbhAxwsxFJ2QhB+98xOW7t9DUVRmZ2fxUClmHL735o8wDqfqewTB/dk7zDc9uu0+
      UhjgBz3anQDTMMhVh3jlzCgz801ct8fi8jJpy6J27AXOnzm551JTd9QAnGyJN998m3a7Ra/T
      Qzt7Gi+IMDSdvtcnn8tg6xNomkaxVCGVzWJoClnHxHO7O3mqhzwNSeLU2Vd5QVZYnJ8nQUES
      EXHMqmdYQDafQTWzREHAyRdOk7ZMVNPeczc/7LABGKaNYdrkN1jgSgiBN9jl30M2jUShsFqm
      Jp/Lb+ibD0XwXmIPiODtYyPh0PsJCWnvJfkPIvH3GbS6/aeuAuUyzqYT5XfMAL7KU5VwHIV6
      u8dItUa/1yMSAsPQsVIZ0obCtVt3qFWLzEzNUxqpUNmkCN5IOPR+QpakXSn09XjOuG7b+P0m
      mp0nZek0l5s4uRQSCqVKieW5aULZIOy2iFGpDNUGUhhrLU/w6eOjmy6WtWMG8ChPtdnCNBNW
      +gEf9npEkoNjxXheTG5onJMjBa5eu4Wh6/TbfbzPBb+7xcJYB80AYHcKfT30/HrtDn0h8LwG
      sqRRb/cxUcmUHZaXu7z+xveoT9+h7gZYskprZYmRs+cHUhhrrbHcSrGsHTOAh57fVqNOt++i
      6Sp+P0TTDVQVJAGKlcLWJIbHJlip14kiCSGLHQmH3k+sFoja+eM+9PwqImJ+cQlZXV3WDPwQ
      TdOx0ybdTp9KucTY8Aih16PZ6qEpL6BvJBz6KTzNE7yVYMo94Al+PjsRDr2feFID7AVP8HrY
      Lk/wvtAAX0cgxNefYg+LLW3JaysECx98QuvGHQCMsRq/91tv7Pmy4fuVtUKgkyTZcBXv9SAB
      3z03yfjwYHXPDhmAYPbeXfxYIp2ymb93F8XJkkvbCCCVznL3+gUWOnD65FEM3cB3O9Q7XSql
      CqV1VocWQnD93/w7bvzJvwVg7A//HqM//P42/q5vF57b4d7swmrBtNBnbr5OdbiKpqokQsIx
      JN774GOOnjxNLm2jyhKNxhKakaJUrqApmzeKxUaH2YXGfjUAWL5/j4s37mHLBoHXoQ/023WU
      bJXzL7+K12oiKVl+9Vd/RrMvKDoq00sL6GaeP/jDP1r/iT7IJ3349yGDI/Q9Ll34GCKJOJHp
      9RpcuJDQCWKOHpnk7KmjuEFEff4uf/mnFylUhul3l6g3e7z0xju89crZPecM2yEDkBibPEmm
      Oo4UxbQ6bVRNIwgDrEyOcj6PmzNodD0q+ZfxvT5TU9P86Me/hW1YZB2LXmedIvjxfNK9drX3
      Oaad5vxrr6PJKq1Wi1gIkiQmUbTVQmmWycm+j6brvPXDH3J/+h6F8jlerxUpVEf25HDsSREc
      RyF+EGFZFpK0ARG8hgYY/dHB1wB7UwQL+m4fVTfQHqwWbUUE11fa9Pr+/p0CrRchBLKiYtub
      GExJovrmeapvngdWK8PtZr7xt5kkEZjW4OJ/MinrUZHlQbKrBhC4XaZnFjFMiWbXJZ/NcX/6
      Bh1f4ejEBJaps7SwwNixk7t5moc8E8H83Wl8JPx+G9V0IPK5PTVFqTZOtVQg6HfxhM7Y0OZa
      XW0nu2cAImZmeppfv/8hS60mmUKOfqePZkoM1Y7w2ccf0+u3MawspdGj7KWX+yFf0eu0ufHl
      FT794gpWxsGSZZa7PqOjVTz3Bre+6NELY44c/w6jQ6U9Vx16F98AEoqmcf6tt4jCCImYvh+T
      zaUZGR5h5u4UsSRjGRaOoRF4G/cEH7L9SBKUxo7ws/FxFE2l3+khFI2xI+MokcfM/QWcdAZN
      H/z0ZRDsngFIMkcmjz/142MnX3j0txCChtfbibM6ZIPYqSynzzyt/1eGbLHy6F+H4dADYq3K
      YWvxcBXokP1L7AfM/PkvCcNg/1aHfjaC2el7xELB77eQVJtcNoPf77Lc7JDPZalUal/7xlrV
      g9fi0BO8c3huh9n7yxi6xEqrS7FYQlUkmisNkDWy+SJp29jwfiO3z4X/7f8kDMP9Wx36WXQ7
      Ta5fvczFz2+QLaYRQUgI+P0+2eow5WyON99+YvVgjerBa3LoCd4RRBIxfe8uH33wa5rtHqm8
      Q+D6eEEf3U4zVC4zMnma08fGNiWCRSL2d3XoZyEJqI5N8rPRo+imjtftEcsKqrzaT9gPBaoi
      E3/tS9+sHrz2zvfamsMBRZJQNYPX33qbKIpRZIHb91FVFd3QaTWbFHKZze9elrYtonfXDcDJ
      5DmTeXZuqRAC/zH9VH3zu/zg//pn69IAh0aw/UiSwtFjJ5673WZEsGpbvPw//neEYYBqb7cj
      TIhn3jCPh7+up5csPD9x4zmHXJO1qgevxbfVE/ysa/p4e6PntzoSD/b1/N7P23WdFUPnyM/f
      fdQjbNA8MADB9NQt6p0+hXwOw7SwDZ1ut0NzeYXiyBhS0OTy9XucPHGMwO1w+eo1zrz4KhnH
      Ig59EmQkafVpkHZ0rn5xlVSxSs4xEUAUrcb2hGGIBERJTGelTihblPJpSBLMVIZCNg3A/ek7
      xHqa0erWM4m+LXi9Dtdv3sawU6RsEyeVRkQBrWaTfigzOTHEpQu/wUhXKRdS3LlxBU/N8J0T
      k4DADwIkRUESCalMjpX5e9xv9BgdGUJRFOIwQFI0VBkSsRr7H/h9llc6lEpFDF0jiRMq1Sqa
      qhD5fa7dusuJUyfRlb1Zne/RG2B+eorbiz3wm7iJSjmXYeH+fRorXc6//S5njmTxex0++egD
      ur02bhzR+uv/RL0TkNIlVryYkUqOdjfi3R+9gaRbrCzMcHVxkeZyFzOrIAsZRUT0YwWv20RI
      KqFkMFRIsbLY4fj5lzk9XkUzLK5cuoBnFCjm3kDfgxXF9iKh73Lp0iXKlTK3bl6nOjyORsKX
      12+Qzo9QLP02CMHU9StMSQnLy/eRzTTXP/sQycoQdBoomTKy1+TMd3+Ik/TI5fN88skntBot
      NENCQSBkjb7bxrHTTM/OkMpV0DUN+gFOKc/3Xn9tdTu/w8XPPsPM5Biv7aEKFo/xKBq02ajT
      77vMLyyBlBBECo4pI9AolEukTYWZ2QUMXcGPwLI0Aj8gCEIkCYJEolzI4LoB42PDTN+7i6To
      BL6HJsvcnbvH+NhRQt/DTqXpPgiJjhMJScSYukO6mCXnWAghaLU7RGGIkUqTdhy67dZhm9Sn
      8DAalCRmpdWmWV/G9QN63Q7FUgW355LK5BgaKlNfmCOIJaIowLRMkjim7/pohobn9jHTOZTE
      J1scQol7zC+30BSJKJbxekt4iU4hbYOioCkyXbePouhIJAihkMtnyOVzKJJE4Ln0/ZAESKUz
      qA+Gbi+1SV0zHDqOI4SQUNUBPXmFIIpj1E0WwT3sE/xs1g6HFgTBarL6oKbncbxaq1Xe5IrM
      XuwTvOadoSjq4G5+WF0me87Nv5XSFk+j3fMIo/j5Gx5IJHR9cDc/rN4Xz7r5H+Z1bwdxr0/c
      6w98v7uyDLq8vACqDYGLbqdpL89yZ3aZkSPjpDSFZtdFJaEfJORymU1Xh643e5iGgaEfxpIO
      GhEF3JxdZKySZ6XVJZu2uPrFFYRmM3n0CM3GErKi43bb2KkMuXxhS4WxolZn9Y8t+BPWYlcM
      oNNaoe03uPbJBxSOvETJ8lGkhL/6m78krWrUWy4ZRyFMdNxek//yH/zDw+rQewyRREzPzeE3
      Znjvwyu883feIkJm+vpFpu7do700jWrkkYRH4PtUJ8/wzhvfPQyHBsjnCzTvzXHi7MuUaqOk
      9IQbt+/y3e+8BAJ0w8KxVNqdHlGSkLYNgn60G6d6yFOQVJ2hrE0YJbzxg9cZGh5BRAHysdPo
      mo5ybAInlSUOXTqdHtlybc/d/LBHc4KfZLMieLHeJJt2DvwUaG/mBH+TrYhgr9kGwBzwFGjv
      LI880E4DEVFCsPD+b+hfvIy6Rx0wB4GnjdV2COHI95E2UfnteezYFGhxbgYrW6K5NI3rRbie
      T75YoJJLc3dmCVNTcf0ubhBRKVWwDZ1ErF7M4joLYz3kYYEsz/MOw6EHSOi5zC83qRTT3Loz
      Q9DrYucyVGujrNyfAc0mCT3m6nVq5RKOk0ZCIEugW6ktieDuzH3SR0YwnI2/PZ7FjhlAq7FE
      q+/z5aUL9HxBytaod3t4KzqfXrqG3/HQczYr9Xly5TH6SzMIPYOiKfzOZqpDC3EYDj1g4tBn
      bnaO7orEZ5e+xNR0VFNG0wwuXvwML5Dxug36isYVKcZRdZaabXKOSe3Ey1uuDr0d7JgB5Isl
      ZhcavPy9HxD7fUzbJkzA1hTeKQ1TX2qQymXodlukMgWCXgtkA9/3NlcdejUwaXt+zLcUzbRJ
      2xqyYfPOO+/geT66JmE5Gd54+8d0mm0SEoSsIBDYqkrb9TBUCcl8Wtrk7rJz5dGHxigNjT31
      86HhkSf+Z/TRX0IIGhuIpJUkiZP/6Bd4nndoBANE0QzOfOelp35erdae+hlsLSc4NTqEah2Y
      ukDr7Kez2bY7DwpkXZ+a5d//2a9XEyr2YluhQx7xMPfXr6+s+bmccRj96Q8HftxtNYB+Z4Vr
      9+aRvC5OvkzKMgiiCN/rYdkZ2vUF2rHOxFCOZsdFEjK2IdPu+eRzaRrzdXK1CtXK1lsk7VZb
      oX2PENy4fgVkjXa7T622WtvHCzxkWUESgpm5eY5OTrLSbqElCYadwuu10O00IvAJQkFtdPiZ
      Ivhh7m/9wpU1P8+cPbH/coL9wOPiZx/jNbtEUYxQZYrlCkncRjHy9JsNlOIYOTPiy5vTdJtt
      DCWh0e7hhwGW0Igdk9/7xWBaJB1q4s0xPz/N9Zuz+G5A4HXJlKvYaZs46CGh0OxGZEslbt++
      RdxpE8QqXm+FbqeHpNuokcf4y68/VwSv5v6unee9L3OC7VSOH3z/DaIgot/voxo6mWyWJPbp
      9Xx0TSOWNGqVPNWhCVqNZXquh6LIxIlAlxXcMBhIi6Tdaiu075EkXjj9EvniGDLg+x6pbA7D
      1PHcDmG8Or0sF0uUi0XUJGRhcRlFVYmCAEU3EYGHto4WSau5v2u/JbYrJ/hAe4Ifb5F0kDXA
      QfAEr1cDmPtpCvSQ7cwZfR4To2W++53je279eb+xrjHcQq/gh7m/T2N5pc2fvn+ZRIiBPswG
      bgBR0OfKl9dQJQnJSGFICc12h3K1SiGf5c7s3COhFPRbqEaKJPAJI6iNDpMacJ/gz67e5dVz
      x76VyfFbYe7uDXohLNfbjI9VWbg3S6ZaIZ3KICU+jXYPScg4lkKz41LIZajfr5MfqlKrVlia
      u7dtfYIHuaAxcANIIp8bX15kqeHSbHVIp/OowiVE4Y23fszs/WniTpswVvHDFborHUJhoksh
      pcmTHKtmuTLAPsHblaBx0Ok05/ng0+vML7cwDQ09BiNnIKkO33v1HDdvry5a2Bosd1p4vQBd
      qIiUwfdeO8/CnVvb2id4UMM6cANQdZvz3/sBPS9CRBGKZpCELl6YMDoyxOjo8COhpOraapCT
      okMUIFkpCmmToQH2CT588m+O4YkX+L6WJ5E1RBKjCokg8ZE1i+GhKiMjq4sWbt9HUSSiOEGT
      FPphQHWoxlC1tm19gge5oHHgRXC72z/wGuAgiODn8Xif4D2tAZ7HmsWYHrzaBtFf9vHVBGOs
      xis/euNA3/y7xVqiWIgEIaRNJ82vxcNK4HLa5u/u11WghyRRwJXLn9MLoVopkXIc4kRgKAnv
      f/Brjpw8TSFtIySVtGPS6/bodJsUKqPP3/kDHvcoHlaH3h4aC7NcvXmHQqlMNpNGlSUsJ83U
      lxdZ7glOHj+KhMCyU0giwu116fghY0PDG566PKwEnj59bP95gp8k8Fx6PiT9ef7yry6jiRhP
      GPzBH/59hsplFu/f4eqnC9xv+oxWMszMzGBnc/z0ZyUcbf0rCI88iocCeFtoLC+TSaf59KO/
      RjMy3J9d4Hvv/IxjtWH6s/N8duETZu/eI5MvIWKPRr3J0XMvMTY0vPGDPaoEvg89wU9i2GmG
      qzl6nsO7k98hCQOCRCZlmRyZPEYtiejVRjkdy5imytmz55BVjUImhd9ffyThI4/ioQDeFobH
      j3BnepY33n4XXdVptdpUR0ZIGRKThsPwyDBHRo5gpxxUVcZ1+2Tyhc0Nx4NK4Iee4HWK4Cc1
      wGGf4L3DZkTw4xpgz3mCvxJCqy7ADXt8N1Ma+jk87lF8PBx6p9A1lbfPnyaXGexAbRffWJTY
      xJg8/yubdxE/rAS+vNLmLz6+yg++O9hru2kDuD99m9vT85SrQ7Trs+RKwzTry+QKZYqlMpoU
      0nED3OYKsbTqCbQ0iUazTRInZAtFZqauESs2jmUgQg8fmWI2CwjCKMbttkgUg6Pj45s6x8fD
      oXeKbNrmj//5P9kXBhD6Lpc/v0wsG6RtFTdIsJQYL9Ep5nNUKyUa9TqyDPenlx545Uu0GnWi
      WCAkmZSl8OXtaTJOmnTKpL68QKk6hqZIBEGAJEsszs8wfuwsxhZexIv1Nv/Hn/xHjo7V9oAB
      CMHy8hLpdIqP/vY9YqmHIl+jHwoqpQqVoRHc+j0ufXGXkZERus0lsmOTDKV05mbn6AUK4yeP
      ErgrdDse9fv3CBKZQjHH8mKdbLmKJiJ8JAxNp1bbhHjim+HQO8FOHmur9LttQlmjM3+XSwtN
      NF3gdRuk8kfJpC2Ga0V+89FHqJqDKiT6FyNePHeW5fsL1JfrpEoVakNllpaX+GJhiU63je1o
      wKf0g4hSuUKv0wHRI9AKnD06tKXz3Q6v/uYMQJI4MjHJ9NwSb//obcKwix9JKLKg0+5RHR5C
      lFKUho4iSwqq/AKylSbvqGSLZZxUDtMxkURCHIV02qdAUpAV8L0AyzLp932cbAYFgSpLbKY9
      wuPh0DvFTh9vK6SyRUqZNjnnDMfPqLQ7bTRNwXMDUDWGa2XkNxRURSWJZRIppjY0RDGbJUHF
      STvohs7xyUnaKyuEUYRhqHheiCQrSCRIqoGpS1hOfiuxcsD2ePUPnAh+nMfDoXeK3dAAB1kE
      P2R5pc1HF67vHQ3wJGu13nnIem9a8SjQ6SsxvVWr13WVH752Zl/MyfcCT5tmbGQcnhzHQTy5
      UxK8+8pJzAGP40AMQCQR165cZqXTJ53N0mk10RR5NdhNqIyPjSHFASgK83P3cTIFRoareL02
      rh+SxAmlcpHb167S8SI6K0vodpFiPoVmmIxtQQT/7//6/+X4kaFDA1gHrcYCV67eRDFtbFXg
      BjGKqhB4HsVyjeFamU6nRxS4NLsBQ7UauYzF8nKD5EGLKzlyuXr9NpoqsbDcYrhUw8qY5Ipl
      Mra56XPb09Wh48Cj2fMxdJlrV74gThJkzYSwjx9LJJHHl5cu4ksmtgYrLZdXz79Kp77E/Nwy
      djHD2OgQfS/iyNgItiaTJCorS8u4sbRpA3gogg9ZH83GMqlMmrszM3idNkEi4RgqfhixuNJl
      cfomv7lwhUptGLfTxEwXOXl0mPuzcywvthk+NUHOkHGyZdKWjqyahCs96iv3UazslgxguxiI
      AaiGzfhwlY4X8/rrNQQykiwThhEyCZlMFscwQdFWu88kgsrQEEE5z8iRY+TyaSzLotdawUtg
      ZPwICIler4hlmwjxnIbYT2E3RPB+pjo8jntnmldefoXA95ElUGQZgYSsakiRRypfRVHk1amN
      olEr50ml0pwYiMHSAAAgAElEQVT9joOdtbFUhfvzCzjZPJl8gaDootomiqJtWQRvBwdeBH95
      e+7Aa4BvgwjerurQu9ooWyTJaqzHN8JqB5dDHAQRf/HB5wPZ12aYGKnw6rnJPffkGxSrbZFA
      lqUnnvDr6zG8XroCpueWeTmXGei13DUD8N02H77/a7RUnnI5i6YZZNMpuq0V5hdXyJcKpFMp
      hEgoFjdWHfohu+EJfpJf/Oz7vHL26AHNTBPcuXqZmzNLjI6PgipTzOaQRER9fgEXjUoxi66q
      GHYKTdn8NVist/nz9y/z0pnBXstdM4A48Fmpt2Glw/R0SDcQjGUNrl67g2ZaqIqO7kDXjfmD
      P/yjgRTG2g0Oek5yu7GC5/W5+OvP6CohY5UK0zduECcyvURirJZnZnaWM6+9zVuvnN1S6Nfe
      8QQPAN3O8Pa772Co0Oi0abc7pBybkYkTKIqCLGuoBvheTNax6HW2VhhrtziYT/6HSEycPsdJ
      26a5XKcTuJBITIyNISHjRQmFXIpWq0W+svFkmG8cbRuu5a4ZgKobFEsGAKlc7pnbCiHobeIY
      506O8b/80z/cUU/wk0yMVA60EWSLBQCssRGeFukzOrpaFXwr1aErxQw/ffPcwK/lgS6MNT5U
      5PiRoQPfKHsnWDOX+8lt2L5lzmzKIntybOD733YDWJi9w82pWWojY2hSTKfnkctlUVSVXD7H
      9NQtNNshjhLSjoMiS/i+h245aJLA9UNKG2yRdMhgCf0+X1z+nEgyqFXL9NpNVNPGtix0w0Qn
      ZGZpBU1VsE0bTZVBgiCMSadSeG4X3U5vqTDWdrHNBiBYWlpCUSQ+/OVfs1Cvk8sV6PdWyOQm
      +NlPX+fiZxcIZHBbIZYR03ZDRBySKVdI6xrLK01+vsnCWIcMBs9t40bQXrjNRx+8h6ypaCKm
      F8APf/JTlP48l67doeOFDOWz3JueJpvL0XJ7jI8dwW8vkh07+21skSQxfuQo12/c5syLL3JW
      klEkCOOYTLqIk0rx9o9/QrPdRJZMFCnA9SOSKCQIfDQrxTGRbLow1iGDwckUqOYbqNIoldEJ
      TNPA8/rIqsnEeI3QS1MaPsJSo0Mpn+XYyRNoqoIXhHTaHYZPn0Boqd3+GWuyZz3BUbQaU67I
      8qY9wZ7noev6gdcAe9UTLERCGMboD/o0b8UTHIarGSGD/o07cmcIIUjWaHywWkhJfGNbAFXV
      ULZ4484vt2h2Nr/ycMjXEck3x4s1x1Y8WPiQH938W8FvNJn5878l9gc/C9iBqbXg9hcX+Pzm
      DOdeeomUbeK2V9DtNNevXiRWUpw+dRzT0Ol328zMLzM+VCGIBYZpIARUKpVNHfnmvUVGqgUK
      2b35+t1P+G6bv/mLv8EsVDkxOYaqyCwu1HFsmU8vfcmps9+hmE0jiYSF+zNYmRJSEmFaJkgS
      qXR20yK4e2+Wy//yjymff2l/FsbqtXu4vS4f/vI/U2971MplTp89Q9ft0+22VqNA+x5yEpGu
      HqFoLfKbT28QaAnpdIq33vrJoQjeZeIgwHU9Gt3bXPzsI7K5HLlMhcmJIl7f5cvLnyOCgERW
      Cfoub7z1Jlc/v4QfhdR7Ht956SVefOHkpkXwdnnUd+C+kjjywhlGTp6iXl8mFjJxFFIbGmJo
      qEbU79FodtB0nTAMKVVrWHLMG06FWIoxTZ20bdLvdbf/VA95Krqd5u1336Xvtmh1XHRdJU5U
      hmpFhkZWq3n7UYKEwDBtatUyuvJdJEXCDSLy+eyeyweGHXoDZAur3sJiaa1qvkWG1ij9mSl8
      9bcQgv4mXMHHxytk0gc3DHon+cpzX2CtSq1rBSw6ztev/WY9wanxEc7903+Mag++T/AOLo+s
      iqX1vMgOegDZfmY1/Hl94zOocVQdG83ZngfZjk2tl2bv8t5Hn3H01FmqxQyyLNFo1MnkKxB7
      1BcaZEp5FAQLi0ukUjlyuTRCCIqb9AQfiuDBIpKQ9/76b+jFCmdOn8I0NPy+SydIKGVsOq02
      QQKOZRJGPssLTYaPjKArErqV2rQIjtw+N/7vf0/u9PH9KYIB+n0Xz+tz48vL3BYBkWwiR33c
      WKJRXyYlTMxiCkMX3J5Zxgj7mNkiiqbwO4ee4D2BSGK6XZdmt8unvRZ9t0suX2ZueZGo1yWW
      DFKKhpmWqPcj+vN1sDTyKZPaiZe35gnevyJ4lVJtjN/6WZWVlTq+HyIrCrphkMQJfhCgIaFa
      FroGx1e6GLJA0Ux83zv0BO8RJFnj/Bs/II761BtNFFVFklROnj6F3+ut9gQOY1IZg04/IPYC
      hCxhqBKSmd3iwfexCAawU2nsFBSKz+8VNfqEyhJC0NiEfjoUwYNFkhVK5dXxq661cvEcNiuC
      VdvixH/9e9signdtZvF4LunTP39+CO6zCMKIv3z/80f5APutcvN+IEmSZxS/EiTJFsZQCBY+
      +ITWjTvI2zRmu2MAQvDFhY+4OdPgxRfPkbIskiSGRBAmMblcjulbV5ld7iLiiPNv/GBTh3ky
      J3g/VW7eD7jtOn/xN78iXx3n2NgQqiITC4gCH0U3sXWJj379G3RdxykOc+b4+IY0gBCC6//m
      33HjT/4tmbMn9n+LpMdp93p0uy0ufvwJfa+PYZt0F5sY5RwvnH6JQirNEadAu90lbZu0g/6G
      j/FkTvBhkazBEgQ+rufRu32TxuwUnZ6PCCM0S8dK53jz+69RKFXJ2BpWrrQ5AXyQWiQ9QpJ4
      4czLnDwVU19aIpYURBJjnrMwUia2nUJJIvKaTrFURt1kSuOTOcG7nR980LDTed5996f0mit0
      +x6KLBELhWzaQVZUbNPk6NFJZCLsdI449Dd+kG1ukbRrb4BCYVVMlcrPD3TbrEPlyZxgXVMZ
      ruQ3ta9DvoluWJQMi1Kh8NRt7MdmLO4Ga9xLksTJf/QLqt9/FTnj7C8RvFUBOwgOc4K3zk6O
      48N+YDvZ3XNbDEDEIZ9+8mu8SKZcrVAplYgDnyh5sOojEmIhiMIISQLdMInCVd9ALpdlpd54
      oi3P1juCH7JxGouzXPziJumMydiRE1iaQrfnomkKiqrh9fsIBLIkkwjQVJlECEwrhco3W2Q9
      zxP8sCewWCN3ZF+JYIEAIZi9e4ObU7cYKpXodVosLreZOD5JZ2mWuZUe1VKGdj8mJccsNlao
      jE1wdnKcjz78qi2P97ngdw89wbuCSBJ8r8uN65+ytNIjdjssLCxiOylGxka4fOE3KKkSlp5g
      6xZzc7PoTooXX3wFtz7ztRZZI2fPP98T/EjwrpE8tZ9EsCQplCpVrEwByzJZmLvP0WMn6PU6
      WKZNMlThhFAoZG36ocCQErpun3QuT8bSEdJXbXmELA49wbuEaacYG59g8vgkIk5odYscOzZJ
      goRhWmTSaaxUFlVJMDSDdquFahiUSmU6jczXWmTpmec7QB8K3jU/2r99ggVBEKJp+qa92Yc5
      wc9mJ3KC4zhCCAlV3Xyrx+flBD9LA8gZZ+/1CV4fErquA88WVM/zDB+yuyjKV7fKUwudPfC5
      bLYt0sOewGvxMCl+0Ozg1Fpw4/Kn1PsSY8MVQEJTVz2HrUaDe9NTqFaBE5PjGLpGksTIsrql
      cOhDBo/bbvDxJxcZmTiKocpomkGSRIg4ZuruXRorLU6cPE02bSPLEkkiULcYDr2d7JwBCEEi
      YGnuDrdvfommW/QW51n0YibGhum5Lc6eHeIv/9P/R5BoaJJPIPTDcOg9hhCCKAy48PEHRJJM
      3I2pdxexjAKSJVEp16jP3eI/fnaZcmWY5soiKXsA4dDbxM7dV5JEvlDiuGphOw6qorKytEiI
      SrmUxwsDRodq2LqKollYhkwYcRgOvcfQDJOR0VGOTB7DsE2Ctkur38Oxs8hKTL5UJXab2Lky
      hXyJfr+DKg8gHHqb2LOFsR7nUAQ/m71aGOtJDmRhrLXCFL5ZO2kda7hiA9uuk3bPI4zige3v
      oLJWnu/a4ypgHVnd25HT3fcD+nutMFa3ucxvPvucieMnMVQFy7JYnJ5ieqXPKy99B0sOmZpZ
      oL20iFMqkXYc0qk0vu8BYDppLDnizswSpqbi+l3cIKJSqmAbOolgSyK43uxhGgbGAKqTHVhE
      wpcXPqEtDMaHKmiaDpHH1Wu3yA8Nc2pygtmpG3hBzHK7R6WQJp0tosmCMIEkTihXy8xN3QLN
      Jgk95up1auUSjpNGQiBLbFkEd3qrgXSZvbQMKhJBFPhc/OQT/G4XyXAIO3UaIVgpk4Ia8dnn
      14haEVJxDiUKGRoe5dqVS+h6jhMvv0jFCPn00nX8joees1mpz5Mrj9FfmkHomUMRvAMkwMLM
      FHN3pnDbLnZKZu5+m/LKMllb58LFC/Q9CS/wuKNFZMrjRM0F7i11GB8b4dVXX+LCxc/wAhmv
      26CvaFyRYhxVZ6nZJuccUBGsmxYjY+PouoHn+yRxhKadRCgapVIOOU54tzxCu9lDc3RCtweK
      RiGfw7ayZEtZ1CTmndII9aUGqVyGbrdFKlMg6LVANg5F8LYjkS+VOWFlIYmQJJkwCjlxSiVb
      TJOxU7zx9o9xOy6JLCET4QUJIq4xGcuUi3lsx+KNt39Mp9kmIUHICgKBraq0XW8wOcHbxIEW
      wYv1Jtm0c+CnQN8GEdzurlZG21NToKexF0KhAZrtHn/766tfiyM5zAteH3thDP1Gk5k/W60K
      /TAUYtAM3AAeegrtdJpqbYSUY7I0P4tmpbFMgyj0abU9quUcYZjQbXcwbZ0ogVIxT7fbQ1EU
      wjDAMC3iOB5on+DDvOD1sOq1n2/5ZLM5joyP4nWbLDa7lAt5kiSh73ax0zn8vo8uJXiJQCHG
      SudRpYQgiiFJSJDQVRnd2nif4O69WT78H/4Z/kpr/4RDr3oKfW5fn+POtdv0NQmTgJmZBVQ7
      Q63sIKQsKeskS8tNpm58CSSEaBiq4O7cEsV8EV0OaXoBQij8gwH2CT7MC14HD7z2KwtzTN24
      xd2pmzQ7HXzPxe26mNk8aVPhxVdex200iNwWN2bn0YnR7BTtZoOOG1GrVGm3Fun7AadefXNT
      fYIfhkfvm3DoVU/hOONHjxN6LqGkIouIs2deRtYN0o6O7yeUKgVc1+PVN97EkCXCRICAc4GP
      rltIIqDtheiqNtA+wYd5wevggdf+xGkHRRZ4QcgxWSKRFGQEhp1ClSKcTJHIVlnppPnRiZOI
      IERSJJIEPD8knUrRbNaRZIVCdXN9glfzgbcvJ/hAi+DrU7Nc+vLegdcAB1UEr6UB9mE49CrP
      LqDEoyazg+wpnMs4/M675w/8KtBO8dBj/Lxw50GNoVHIcey/+l0AvGYbtsGrvyMGEIc+H73/
      K9R0GcdQUIRANQzaXsgLE0PcPfQE7wuWZqf49aUbvHBykjgW+P0QSfapjR+nt3R/Wz3BUauz
      +kcuM6Bfs8qOGICiGQyP1Gj3Iy5dvIAUCPqxT2ZoDDvp8unnh57g/UC+WKJca7IwfYup6QZJ
      EOBLIT9yMlz5NnqCN0KpOoLtBVTKFXqtLn7oky4UsTWFd8qHnuD9gKJbHB0bQ4wMc+SYR6/r
      IRSZUqGwbz3BO2YAqXSOVPrBP2rf/HxoeOSJ//mq+vBmq0MXcw6GfvjuGBSyoj2zRE21usbA
      PsZmq0MDqNn08zfazH63Za+bYL0CayOs5QneChMjFV49N7nnXuN7iSRJQJIGvtzcFfDLj69u
      yI+znvHaMwYwO3WNi1enGJ6YoJzLYGgqsZAAMVBP8Fb4xc++zytnj+56iMdeJfRd3v/VL8HK
      MVKrkE6lSOIISZKwnPSGPcGPs1hv8y/+1X+gtYHG5+sZrz1jAMVShWqpxRcXPsHUdcJEEEQh
      2Wye177/A8zNlJfnm57grXDYvO/ZaIbNSK3GQnOFv/qzvyZVctCJcSOJsclTvHb21JYavWx0
      LNczXnvGAHTLYWJykmyhiGXqXL9yCVeyOTo2TD5t0+92NrzPtTzBW+Hwyf98qiNjpEtlyqUx
      hHC5dOkKL5w4SW14dMtdjuQNTq3WM1571hPs9V1kVUfX1IF6grfCXtUAe9UTnMQRfT/Atiwk
      SdpSOPTySnsfa4DnFUxa43PT2vhFepLD6tCDRYgEIaTntrWSJBlJAllRcezB3GLZlMXPf/Lq
      wI18Rwyg3VziV+99xJGTp8k7FpKqkbJN3F6PVqtBOlPg0oVPyRZqjAzX6PVaZAtVSAJkFDL5
      w5r+u41IYj7/9COWe4ITxyaQEDipNIiIXruFGwrw2tyYWeLYxCSOrdENEipZhzABTdMxTX3P
      vT13xADSmTxD5TILc1N8Pj3HopdwpJRhdmYG3XH4uz//fSrDNbqLy7x35x6a5BGgsbwwTyk/
      zG//4uc7cZqHPANJVqjVhunPzvPJpx8zOz1DvlRBSQLm5xc4+dLrvP7iMZbdkM8//pB0uczc
      8jJKv4cbK7z2/bc4fXJst3/GN9gRA5BkhSOTx6glEaPVEUJJxTI0zpw5C4pKPmNjqRMEpSqF
      ZhvLtkAI+p5Hys7gGBqtjbcIO2TAZAolJg2HoaEhjh6ZxEk56JpCp9MlV6zgpNMcP6pSzWaJ
      JYWTL7xA1O+RyDq12tCee/rDTmkASabwwIM4VB1acxPbNACoPekQ5nD5ca9g2ilMOwXA+Pja
      21TK1lO9xVvxBG8XO64OkyR57g19eMPvbYQQqx7ftT99bLudOZ+tsKN+gIeeQjNXY2yojEAi
      nUoR+C7t1gphIqOrCsutDpViEV3XSBJBpfL8RnqH7ByzU9e4eO0ep8+8gKEoGJaNpkr0ej1W
      6gukcxVaK8sIw6GcSZEkCU46+y2vDs1jnsJWmw8/uM7M/BIjIyO0FqfpegmOrdJqB9jFPKaq
      kwQBmUKWt9/+yd7x2B2y6rVfbvHFFxdZmp1DS+fRiZhfWMTUIEw0FF0lUg1Gsg4LzR4vv/Iy
      L75wcs/pgB2/r6ojY6TLIcO1IY67AY5lIktn6PsRSeQTJxKSpqOIGCFr5LIp0rZJv9fd6VM9
      5CnolsPE0UmqIyO0Ro9gOmkURcJze8hSQs+LMA2dCBkliTlnO+RzmT1388MuGEA6VyANUKmu
      +ztCCPq9bTulQzaIohmUHgjdsZHR52z9FXtRBG+jAQiSZH3hzYPMA36ce/frAw2F2C1yGYe3
      z59G13Z+Ivis1lUP0rh3hFa3v+FQiPWwbVe022rwy1/9itHJM5RyDgKFdMqi1+vR7rSRFJ1M
      ykHEEQv3F0gVKtQqBXQFrt+6Q61aZGZqfkt9ggcdDr1bnD4+yvlzx3beAJKYLy5+zHwz4OTJ
      YyiAZTtIJLi9LoutLrVCHlmRCbodZhs9Tp+cxLZtlu9PE8oGYbdFzPr6BD+LzYRDr4dtu6JO
      JsdwLU99cZZrl+eYv99jZLzAzPQ9VCuFYTpoJFTKFZbmF9GdKSq1YbKG4Mq1Wxi6Tr/d31Kf
      4EGHQ+8Wu7YsLCvUalXc8D4XLnzG/J27pPIlhPCo15sIK8VoIUMvlBjNGFyfb1NfnGN8fJTp
      m9epuwGWrNJaWWef4OewHWO5bQYgSTJjE6eoRtAdruGfAcPSOXvmLEJWiXwPSVZQFYVjRydZ
      Wp6nMjpO2pAZGptgpV4niqQt9QkedDj0brGbYdjpXJmjqsPQsM/K6BiOk0JRFVzXRVJVkjBE
      kmVsw6A81qXZ9RgbHaVYLBN6PZqtHpqyzj7Bz2Gj4dDrYc+EQ4dhgKJqa/7AvRIOvVs8TwPs
      lXDoJImJY4H2lPPc6XDo9bD9k8p19o7VNH3gr/rDcOjB8bxQaABZVpDl7Zmu7dtw6GeGQjeX
      UY0M6ZRNFITM35+hMDRGqZAj9vtEQsL3/EdLbofsDs8LhW52+xSLRRRZxm2usOz6nDw2+ShQ
      DpGgmc630xP8rFBoWYFUroQiC4q5KvP375GZmWXs+GnCxgyBpHPlyhf87u//Q4z9PYvZ1zwv
      FNp0HMrFPIFQySsScz2X5cVFThwd4+70LI2FGYzKUd5547t7zhm27QbwrFBoIUEYhCiajozM
      0aPj1OuLFHJZZFslFBLZbJ60bRD0o+0+1UOewbNCoVVVJYpiZEXBVDVG+h3a/ZhcvkAsJIaq
      ZYxMcc/d/LATGmAdodCPMxEe/YYYFkLQOHQF7yrrCYV+SJLExIlAU1WKpa+mr3vRE7zDkzLx
      3HBoTdMHttR12Cd4e3hWOLRgVQxr6mCfrXuyT/BGcdtNfvmr96gdOUmlkEYIiXTawe11aXc6
      hEJGI0LWTCzDoNtqkCoOMVTeXE7wYXXobUAkXPv8U+4t93jh5HEUCSzLRpYErttjvt6inEvT
      7PQo5HLIImKx0eXsuRe2dNg92Sd4o9jpDLWhMu3F+9y6+ilz95uMjFZWBbHpEHkudiqFqcTM
      328zOjHK2ZcdaqXcTp7mIc9CkqnUarT6s1z+7AKzs3dxMnkQMcuNOmg2ehJgZDL4zRaKrlIa
      Os6JUyd2+8zXZGeDSySZsSOThLWEkV6NU6djTNPk3NmzJJJC4LkgK4go4Ow5KJaKKIpBvE39
      oQ7ZHE6mwOSkwejwCKNHRnDsFIqqrnqHFZXAc1FVlcAPsR0Lw7CJwog9uAq60+HQEoXCQ1G0
      sXDozXBYHXp7MEybsrnqzR0Z25lw6LRjbPq7z2JH747HK0AjSdu+LOb2fVRVPdQAA0YkCeK5
      cTmDDZYOwphffnwVIeDVc5NMjAzGObqjBtBcmuW9jy5y4tQJogRy6TSqHNP5/9s7lx43sjIM
      P3Wvcrnsat/d13R3bj1hNBEaBhE0DAKBhACFBRr+AQs2SGxYIxbwA1jzR1giIYFE0hFJyGRy
      T1/tvrjtcrlcVxYdZ9LqkKTTdts97XdjWWXplMv1lc7xeb/n9WI0IaAZiJQyGs12B8vK7pOF
      EchM5N5rvAfPakyVc+Sy6T5/k7OrOAq48c9/0E50Jks5BFHGnsiytblOoVRhZeU51ek52o1N
      FD2DocqEcYKiaMcCY/Xs0C2nwx9/96vTWQCZiTzFYpn1x3e596zBRNpCkkJcz0dLGfvPjMin
      1dolwqKct3D3Qn76+fWTPM2x3iBRUqhMTrG6scny8r/ZrbfJF/N4voOi6viRz4OHT/HaGzSc
      hGKuSOC6XLr6CR9cOh4Yq2eH7qdl7EQLQJRUFhbPEQcl0vYarXbI3MIsmpywtd3AtDIIxIS+
      S9cXkCSBlG6NwVgjplyhjGZaVKtV7ty8y+SF85TzNs29XbrRPuNJYIlWs4OiKCSCxNTU9LEn
      RD07dD8d0UOzQ8dxRJIISNLb/xp4Xzv0k5VNMpb5tZ8CDdMOHQYhkiK/083dDzv06VwDHLBE
      AwiIojTwYSuFLKqqDnycs6LXWaJlReYkuoNPrR0aepbofzF38TJy3MVI22iyiNftEkYhRspC
      JMbK2HiugyhJeJ5PFIcIgkRxbIceul5aol2YnSwgCBIp0ySOIzy3haSamIa+DzszDdquRxwF
      xEmC74dYWRtNGfxD76g6MTr0ZLHI1sYzHj/4AimVJ/IdRBKcbkTO0pFUk/PnL7BT20CSZFZX
      V/GQyWdMPrn22dgOPWT1LNHBep0bt5ZpNXbRdINE0nB2VjAmpjHlCMPMcm6mykatgeu2qW1t
      YRkGlcXLfPzBxb7O3/uhE6NDzy4sEMQRuUya1W0XKclg56ukTQNDiri5fBtJ1pmbO4eiKOQL
      JdLZLJoikTV1PHcMxhq2MrkCc3qaQrnE/Xu30Uybjh/yzQ+XMCybnbVHPK+1sXMl9FSW0Pe5
      eHkJy9CR9dTI3fwwBDp0qVhiKUkgSZAkGUHYn1sWK7PohoH0mvbFJEnwRs9Je+bUs0QXKDA1
      OYUgiiRJgiztT22myyWuJAKG/vpd21G0Q5+4T0AQxQOD7u8OC5hmf11+8BUYa36mPJLZXqdZ
      8gG78z4ETVE11AFd5FfBWKoi8+nHS9iZ498zwzXKvAJemp2poGsmmbSB2/FQZKlvOcG/+PG3
      x/m+A1QPgja1sIRKSHlyGt91QFaIw/7nBGetFH/982++BgXwKnjp1jJiFCFI2n5vcK5MnER9
      yQke5w0MVi8haJsrbKw+R//iAc5ujUY3oVpI0+lzTnA/0ShDt0r2wEvl6jREIWGU0Fqcp77+
      nK6U7ktO8PjJP1i9hKAFCYsL8wRBTNBdpNl2ePr4Sd9zgvsJxxp6AWhGmqJxeKfWu3TpQE7w
      +zghvnFxhj/89nPmZ8rjIhioBHL5w/b2OAq5cuXDQznB76NSPsPvf3395RpgstSf5NATLoA3
      7Bi+ONSzS/cjJ7inJ6s1nqzW3umzwyQxnxa9jebdO36cnOCo67Pyt7/T3d4FQMyY/ORH30M/
      TS2RgeeyXt8l9hskSpbA3cPxEyrFAhIB207AucoET1fq6IqM23Vw/ZBSoURKU4mT/YuZLxxv
      EXyUOePQSMwjrNraCpEALaeNpurU63VyhSJW2mRna5NidY5mbRWUFHHgsba9TaVYwDQtBBJE
      AVQjfSQwVuh2WP7TX9hevgtA5soFKt/9FpymAoijgI31NfZqj9hwRSJnl1YnJIoiSqUS+eos
      orvFjf/cp9vyUO0Uu9sb2MUZOvUVEjWDpEj8/ATp0OMF82E5ezvsOG3u3f8SSUhoOF06joM5
      USCfTfGRmuLOrZt4vojn7NCRFO4KEaasUm80sU2dyoWrR6ZDJ3FC8oI+kQyoLXagBaAaaUr5
      LFbmKpfSJl3XoRtEIIioIkiGhZ1S+UFxiu36Dmk7g+Pskc7k8Nt7IGp0u96J0qHHa4XDKk1O
      4z5f49q1z5CEgLYXEvk+WsrE9zrkbJvvfPp9Wo0mMTGJKJGQkJJlmq6HJgsIevbI4wqigPBi
      Y3RQgOORoUO/SSdJhz6Na4BRoUO/TUexQ79uDTB92tYAw9aYDn16JWkqcz/74cv3QRAMZJzh
      FUASs7a6hqLK7LXaWJkshqbgtBwkWcLvBiiaRhLHYzr0CKvdbOB4Ae1mA0U3sKwMcdDF80NI
      YmIEZD7fAjAAAAD1SURBVFFAN62zSYf+vxJERCHkyeMVHn75XzqJQj6TZn19HUHQmLBVnEjE
      a+5x/ZdjOvSoStVUNh4+Yq/Z4M6d25QqsxD7PHu2QqFYxUhL1DZqzFz86GzSod+kQqGMIKfI
      Zi3anQ7dQGR+fh5JMbAtjabr4XndMR16hKVoBrMzM/hBhaydw2m1sPNF5hcvYNs5VFWgXtsi
      W6iM3M0PQy4AWTMolw3K5RJRFJIkArL8VdfQ5IvXMR16lCUw8YIAXa5W8f0ARVEP2B6mp/Zx
      0mfWDv0uOcCS1P9TeV1OsIDQ16bqs6S3/47CwR7sPrYK9+zQ/W6K/x/rXdv07TRH/wAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Advertiser Data Table' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Cost' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Impressions' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Average Position' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CPC' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Topline' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='CVR' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Revenue' width='192'>
      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
      N2EY+8P/B3F8HuB1C/bwAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='CPA' width='192'>
      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
      8QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='ROI' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='ROI Summary' width='192'>
      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
      hNIkAKG0/wD4Nant7i1KZwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Data Table' width='191'>
      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
      tfyX8ym2JuTE+3mqgfYRLQ5PIDGoxLqqSiLDiAgjlWWlGJGukIwIBVw9nqpTjqbdvEmzcTJj
      EmV6gpnhb+04w0MD/Paaih6VDVWxbsPWufMXyMSD3ZyKxkEQHuDe21iUmNPIa66yc/WWSSVX
      Ll0O9nVMK2pMuXcrJnY6fsJ+QLyWqg/Xb5mxcKGoq+6DLzbHzJp/99o5IhG6mVYxZVLAmAyi
      V2zZ/MMgrx5v4dtVkbb73O35Ub5b95yg6IdrOiWVDW3c5mpn3yAqEd73049MJjW1oL40646R
      EfNuduXkUP+JDAkJ587QaMQbyQVTwoOErRVpld1FybcMjclXUypay7IcAiN/498+BkV/8+7T
      KdzaPAufycY04tG9P5EYjLtphX2dDQQSfCO5uL25XtDSjMerhlFDG1Pm41kzw8zO157VNAB8
      LHGAxLRzD5g1LQwAEDV1WmV+etjU2KJa/swZUX72jLYRki1FY2XDZrOtRcOKV958g0bG8ThF
      2XUCCqoQjSrGFEIQFBg62dnJMSoqquLehdy6jt3bf5SodCiqK8gvKE69dDqp4Dl3oCS3YvUH
      a+Nmzd+0/l2gVXKaW3f8vPvW6b2nrt78fNPWlpqK9u7uDV9+l3zhWFZl0887frJz9/N0dQmL
      iKTphxs6hU/pgzz8groFo/9Ys4ztGjB3WjgAwCcgRDCiXvvqPABAQ3U1n9fZLRiiGpqxmfop
      C950cvOfG+k+KlMjz3RxHgdWzr4Lpk8GAFg5+SyMmwIAeO3tD5ysTR2cHB7JwHhqaJCnUKy3
      NKZHzlzs42ABAAbDOBjTVzRU8XkdPYJBFMMA0OJp1nPmL0SVIpyBRfycRZB2eEIkIOiNd993
      MGc5OLkBAKzcQ999dYGRhYVM2DN9/tLZUb7c/vFX7H3tbVFzly2aEd7OGwIAqImMefMWUiDp
      q2+tc7U1d3BydHdiU8wsquvaB5rLB0bVj3uPcqT3o/UbfYID22or7L38Hzmj3Di1J79FzDZl
      qDAYSHrXffRlYFgIw8y6Mi8lJavEwdZ8TI5maD05yEOtVuv149zswaHRqJjp9mYGTGMTG3NW
      XlEZggGZ+HnWRxc36+LiWq1KduToSYRInT13gZEhtb9f5B8UEhEWUFleIpYp5DIZ0EOR02eY
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Data' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Comparison' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAABHNCSVQICAgIfAhkiAAAAAlw
      SFlzAAAOvAAADrwBlbxySQAAIABJREFUeJztvXd8XNd55/290/ug995BEOxNbCCp3rtl2ZbX
      JbYcrx3HkWNvFGffd5M4fjf72onLujeVdVEkS4pMS5TELpJi7wAIEIXofWYwfeaW/eOSIEEA
      BMECgsT9fj78cHDnzr1n7pzfOc95znOeIyiK8mlZllejoTELMciyvFqn033mRhdEQ+NGYLj4
      QCgUAkAQBMxmM+FwGEmSUBQFAJ1OhyzLI6/NZjMAsWgMSZJAAKvVislkIhaLAaDX6wmHwwiC
      gCiKACPvWywWTEYj4UgEq9VKPB4feV9D43ozSgCyLPPySy/j9w8Ti8VYt349mzdvJhqJEAyG
      MBj0WKxWvB4vZrMZm81G1dwqkpOTOXTwIF1dXQDU1Kzj4Uce5tDBQ3R2dpKWnsaO7TtwOp2c
      Pn0am83G4iWL2bN7N6lpaay87TYOHjrEZz7zGbZu3YoYF3n0sUcxGMboU0PjmjKmhnm8Hmpr
      a/EP++no6MRkMvKRjzzFSy+/xMN3P8y+/ftob2+nqqoKWZb5j1f+g6KiIpavWE5iUhKnG0+z
      ctVKBEEgGAry6qv/gU6nw+l0kZqaOvJZs9lMZeUc/H4/r7/+OkaTmdOnT/PG669jMBhZsnQJ
      hYWFN+KZaMwidBcfUBQFvU7HvHnzSE1NwWg0kZ2djcViIb8gH6vFOtIyR6NRioqL6OrqxOl0
      kp6ejtvtJiUlBVB7lOzsHFJSUlEUBUVRMBgMxOMx4rEYQ0NDDPuHcTgcSKLI7l270ekNKIrM
      rg92jZhdGhrXi1E9gCAIlJeXU1hYiMvlorKykr1792Kz25hXXY3T6aSsvAxREtHr9disVhYt
      Wszg0CCpqalIooTVYkEQBABSU1N56qmPkJKaypbNW7A77DicDowGIw6nE0EnUFpayrx58zh8
      +DCyJPO1rz1HNBqls6PzhjwQjdmFIEnSLy/0AimKgqwotHd2EYvFKcjNxmQyocgK4WiUmCSD
      oqCgYNQJ2Kw2ztZ3wpEI7d19yLJMWnIiiW4XgiAgCMJIa37u/3PHLn7/nHiisRiRuAgIowqs
      Q0Gn0yHKF/QOsoTdahk1Zhjy+ujp6ycvOxO7zUYwHEFWFOwWM3q9HoBYXCQci6FHQUK46F4K
      FoOBuCSj1+uwmicflEuSRCAQwOFwABAMBgGw2+3o9XoURcHv92M2m0ecB4qiEAgEsNlsI+Ua
      D1EUicViI73ouc9PlWAweFWfH49oNIooitjt9mt2zXNEIhFCodDIMzvnpDn3TOHqvtOYMYAg
      CLS1tfPNF/6ELw7//fG1LFswFwWFFzZuZf8QqgBkCWs8wLqyDO5bvZSe/kF+svED6jxxJBnS
      rAKPLsznoQ1r0Ov1IxX73P+Xeg2w8+AxXj5wBp3FhiDoQZFRZJmE4TaysnOoC6qmEgrIYT/z
      k/R8+uG7SHC7EEWRF97dzdvHzvDsmgruWb2Mf/vD27QOx/jLdXNZsqAaURT5zds72d/aS5HO
      T72UgN7qgLNClMJ+Hi5P5lBfhMKcTD69YRG6i8p4McePH+P55/+eb/7DP5CclMS3/uVfQIG/
      //vnKS8vZ3BwkC9/6UvcfsedfPaznyEWi9Hb28O//Mu3+fznP8+CBQuIRCIYjUZCoRAGgwGD
      wUAoGGTnzp0cPXqM6nnV5OXlUVhYiMlkwmazEQwGkSQZm806Ijr1meqw2axEIhEcDgeKovC9
      732PuXPnsmHDBkRRxGg0Eo/HsdnsRCJhRFHEZrMhSRLRaBSr1UosFhupYH6/H5PJNOr16cZG
      Ojo7qampIR6P43A4CIfVa5nNZgwGA8FgELvdjtlsHrm2xWIhHA6jKArxeByn0zmqETvT2sr3
      f/ADkpOT8fmGqalZy2t//CNLlyzhwQcfxGazYTAY+P73v0919TzWr1+HXq8nEomM3GvKAlCA
      XUdqaYkY0JmsbDlcz6K5Feh0Oro9AZo6AlTbogh6HQ3eOCd7hwkGQ4iKwJ6uEAWKh7QEB6f6
      gzS1jhliXDYui4kcXZDhwDDHgmacgR7m56eTk5lMe1SmobWdefYYLpeLE0MB/tgDpVmHeeCO
      Gk6cOs3mhl5CJidvHWxg1YI5FKYnsqmllf0NZ1g0r4rGljb+dOwMWU4jSUmJNJ7wUGYfJCfB
      pj4HIY7dnEGbZxB7YnzS8sqyzJtvvkkoFOLNN9/kyccf59SpU6BAOBwGYPeuXXR1d/PO229z
      77338Otf/YrOzk7e+tOfaG9v55/+6Z955Q+/Jzk5hZ7eHhRFobCwgO3bdmA2m+jt7WNgYIBQ
      OITRaMTtdrOuZh2b3t2EJEnMrariz39+m+KSYgYGBkhISODhhx8mEPBz5113YzIaaW9vw+Fw
      8txzzyHLMsFgkJSUFHJz8zh58gQulwur1YokiviGh8nLzcPr8yIrCoX5BdSfqsfldlNWWsqB
      Awdwu92UlZVx4MAB3nrrLWw2G/kFBRzcv5+EhAQEnY6kxESGPB4KCwv54he/SFdnJz/92c/5
      yJNP8PNf/GKk96hZt46HH3poxCL44+uv43K5+OpXv0pdXR21J2upq6sjGAjQ2dHBwOAgKSkp
      1NXV0dzcwtEjRxDFOF6fb+Rek7nTx9TQvv5+3jvWjDkWxDx0hg+a+2lsPqNWCkXGpIh8/pHb
      +V9f/iR/c+cCjCi8fayV7v4BFEHAajHzwJqlPP94DZ985B70ej0er48339vGa+9s4bU/v0fj
      6Sb2HTnBr195k/d27MbvD7D/WC2vvrOFP76zmbbOLpYuqOYf//ITPPvQBkyKyNwMN//v557i
      c08/jslkxChGeHrdYp776H3cV52HrDMQkdWKuLehHa8/SMJAI03DIofrGllcmk+CXmJrXTtd
      3T0cPt2GJxzn9jl5JLhcKJLE0ooinr53PU/fu55PP3I3i+dXo8iy2tNMQk9PN9u2bmPJkiXs
      +mAXTU1No96PRCK88cYblJWVMTA4wIsvvsiuXbv57Of+gtKSYlKSk/nhD39IR0cnGzf+iXg8
      TldXFzt3fkBCUiK33347RUVFhMIhOjs78QwNEQqH+cUvfk57ewfxeIz3N2/GHwxw9913E41E
      CIfCGI0m7r//ASwXtIaSJOL3B7jrrrvo7xvgjjtup76+jiGPh0984hP09vawa/duKior2b17
      l1qWzk4OHjyIZ2iISDjCQP+A+joSoa2tjT/8/g8EQyEee+wx/vD733OqoYH77r8fr8eL1+vD
      6/EQCAaJxWKkpafjGRrkRz/6MW53ArIk4R/24/P6RpnKXZ1dZOfkYLVayc/Px+12IUkSR48e
      5cWXXuIjTz3F008/jcloYOPGjVRVz0Wv14+612SMEcChE6c47RNZVZTKQ0vKGYhI7DhSp05+
      nTV9dIKAxWJhybw5JOlFBkIixalu8vRhaoMG/vntI3x34z52HDiOLMt09vTx0xd/x7DPiyKJ
      fHj4GD95+RVCAT+/fuVNXt24idc2bWPvvv0cOHyU7/zsJULhMDqdDgEBZBkBdeJNENS/I4KR
      b//ubb7wr7/g7fperPEAyXYzre2dbDp+hiyTxNPrlmAQ4L0jDWSkJrO6MJmOoMx7u/axra6d
      BL3EwpI81fLX6Xj1aAdffWETX31hE//zdxsJhkKgyCBP7o3av28/uXl5PPXUUyxetJD3N29G
      EAR0OvURnzlzhoHBQT72sY/x5JNPsmfPHhBg8/ub8XqHWVtTw84d21m9Zg1VVVWqE6Kikvy8
      PIxGIyaTiUAgQDQaxWg0UlpWRkN9PTqdHrvdRlFhEVVVVRiNRgx6PQUFBYTDIXbs2EFLS4s6
      SQkjYy6Xy0VKSgpGo3HE9AiHwuzff4BYLI7b7cbpcFJcXDziECkqKqS0rIxT9XW0t7dRWlZG
      fX09rS0tZOdk4/V6OXLkCBnpGVgsFsxmCzq9DqfLSX5BAbt37cbj8WCz2VixYgXbtm1jzZrV
      ZGZm4k5ws2XLFurr6wif/e0ffPABdmzfwdatW/nWt77F1q3bEAQBi8VKTk4ORw4f4Ve/+hUe
      j5cVK5bz540bQRBG3WsyRplA4XCYLcdOg83N0YEoSm8IndnO5to27lvVd1YAMqqhBJ09vQyL
      kGDRsXzRPKorSmls6+RAQxu7u+GVvfWsWjQXUIjL0Hymg5z0FFo6e9iwfCEff+IRFs0/youv
      /icmmwOT3oiiNyKJwQtKpaBI0uhWWFHQ6Q0YXMkMClbiviD/dW0lq5Yu4j+376Nf1GNWzLzV
      6EEyWDjUFaD2dDMbFpTzfmM/v912iLA9hfsrMyjIzebQyVPIsQgrcxJZWJwDQHqSG7vdftk9
      QEFhIc8//zwVFRUkJCRQX3+KBx96CAHIy8sjHA7xjW/8N267bQXz5s2juLgYt8tFc0sL3/jG
      11m7di2ZmZksWbKEhx56kL1792K12sjMzCAYDJKXl4vd4cBsNmMymRgcHGTlqlUsXLCAw4cO
      EY5EqKioYMWKFVRVVeH1+QCYWzWXvr5ecvPyMBoMfOITz+B2u1m6dBlFRYX89Ve/QkVFBU88
      8Tg//enPsFjMPPfcc4TDYdLTM3jggftHypKXl8vx48dZuXLV+derVpGZkYHH4yEWi+Hz+fj2
      //dtzpw5Q0VFOZ/97GfR63ScaWvj3vvuIzMzE4D77r+ftPR0Vq1ahdFoxOPxUFlZic/rIxaL
      YbVaue222zAYjXR3d3PXXXdRUVHB+g3rAcjOzqalpZnq6rk88MADJCUn093ZicFopL+/f9S9
      LlsAR+saONDhJcdhoiTJAYKR9gEfp4dl9tc2gqIQl2W2HDjBkaYONh08xXBMpqbEzWvv7eRo
      p5eaqgIWlhey98wBArKOSDiMAiQ77TxwRw1JCW7e+2Av3f2DDHk8tHf1kJTgIiJBJDBMc3c/
      j9+xGqvFckF9l0cGp+rfCvqwl689uYaT7f28fKCVk+19LOvs5t3jrZgjPhZluTAaFdL0MkcG
      DGw/2siXnrqfJbm1bFcM6EI+lhRnq4MuRVF7Gb0ewWAEoM/rx97RiSLLtHb18tr7H6iDYFlm
      YXkhRfm5ox7k/PnzR16XlpZSWlp60aNOIjtbFVdycjL33HMPALetXDlyRnZ29sjrRx99dMyP
      lZOTO+YYwD333jvyurKycsznSzlflpUX3A8YqSRut5vu7h4ef/wJ7HbbqHMuvNacOXPGfX0x
      5eXlo65/20X3TUtL47777gPgzjvvHPcaRpNpTHkLCgpGXi9atGjUe/Oqqycsz0SMCEBRFPYc
      OUnQO8TTd67noTtqANh3+Bh/95uNvL/3KDaTgXA4zEu769HpBBItRu4uSORTj9zDtv1H2NbY
      y292N6A3GDAg8MSKSnJzsmlp66A8P4u55SVnXWUK//bzl/jbf/pfuF0unnnsAXYdOELVqsWg
      0/OndzfT399Peno6AiD7hzAmJ44UWohH0EUCJCUm8GR5Gcea2nnvSCPdTfWcDBh5eFExz33m
      oxgMBrzDfr7xk1fYfqSex9YuYmVJJjtqz1Dm1rFkXpX6EPQ6lLCfTccjbDrWqj6PeIT/eudC
      lLCfo519HKltUG8uxnj+iXVjBHCzY7PZeeaZZ8Z44251Rs0DHK+to6Wtg5rbluN2uwCIxeLs
      2rufaDRCanIyja1tAFjMZqrKS8nLycJsNiOKIq1t7dSebiEaF8nNSGVBVSUWi0V1e8Vi2KzW
      kRv7AwH6+wdITU3BYbefdf+ZEARGXGZ6vZ5AMMiOPfsoLSygtFgNjThRd4qe3j5WLV+C1Wql
      raOTA0eOk52RRmdPL8sXLyQ7MwNQjbUTtfW0tLVTs3I5ADs+PEBBThZzK8sRBIH+gUF27TtI
      JBodKZ9ep2P54gW0nGmnu69/1PFVyxaTdfb6Gjc3YybCNDRmE1fuqNfQuAXQBKAxq9EEoDGr
      GfECRaMx4qJ0I8uioTHtjAggLkpEo5NPHWtcOQHPAAPDMfLyMrm0s1Hg3GQjQHjYx3BYIj09
      afyzL4imPX8Mgr4hBv0xstOTOH54P8MxIwVZaUSjEqnZmbidNvo7OtA7EkhKcIxcy9PXQXPn
      IPPnVaPXXVBSReLksWNkFZUy3N1NJKaQX1aMXo5wsq6ROdXzMBmgvaWZ5Kx8bGbjqDJJYoxg
      IMCwL0JWXuaEwYXT6YrV1hxOIwMdrbyz+SCY4uhMRtJSsoh6hxDNdpyCSNxsY6C7jYLSStpO
      n6Jq/kJOHj1MUVEZsZjEkLcTd2oOoZ5uYgYzyQ4DXtHEow/dR9ORPew53ki6w0HvsJ/ysiIO
      799DWskyVs1J58ipDvIyUjm+v41Bb5TM/FS6+rowxRSG0VFakMHpli4eeeIJ9m9+gwNtEU4e
      O0BSei6Bnl6q16wn2ynz5puvs7DmHsKNDfT7RB7NycXXdoLX39iIYHXQUbuPw0frqVq6krQE
      C/19vQwFZFLNOjoGuhgcDlGWMwdJGSI5p5ThniawpiD6vNiTnPT0eXj0iY+QmuiYlt9EE8A0
      Mzw0iDXRiUycrqYGvL4IJqdAm19P9ZJSNm/bwhJZT7irCclqp7ejCV8wjllRiJvhTPteHKY0
      EtwhesJwqr2XdevX0NzaQkPtYYaceeQUpbJ7z4fo9QZ1JR4Kkiyj06sta9Dn48TxXmwpKYR9
      vRxr6SUzzcWp+uN09G4gLSuHnEgvg14/HZ17cVqyyM1K49Ted4lJcOzwAbIMZ6Nm5ThHDh5A
      EAR27dxO2D+MyWwlONDO9jo/ocFWuv0ylRmFLF87jwMHj+Ab8hKnj7qWdtqaT5GcVUhhWgnF
      5W6279hBe++GaRPAyDxAIBjWTKDrTMAzQHNLJxa7DcEoEB3qZ8e2w1SvXEq6201qVjInjh0h
      PbuAnvYWEtOz8fR24kxMw2Wz091zBmdSBnajBYNBJBgM0e8NsGzZUprqjzLoj5LkSCIxyU44
      HKK9vZ28kiqKclI5fng//riR/Mw0gsEIJrOOMx3tpKVkYjYZiMai9PT1MX/xcnRxL+GYQmvz
      6bP3s1FUlk9H62lcyZkM9bYTDsnodQZyi3Pp6mgnOzubtrY2gsMegjGB4oJs/BEZkxyg2xMk
      1ZlEalYy9bV1OB0pRCODxPVWDFIQvcWN0+LC7TZw9EQ98xcvJzXROS2/yYgAItEYYlyclptq
      qMhSHK83SEJyguaOu0GMmEBiPEb0glCA8TgXUnuppXsaU8PuMBOPhm90MWYtIwJwOByTruk8
      tx7TZrNd8jwNjZuFMVkhLsV463o1NG5mRmeGE+P09PZhNhmJxuMMDQ5itLtItJnRWxxYTZrp
      o3FrMUoAkhSnpfE0breb/iEPcTHI8ZZuMm1GSqpXUpCdcF1SX2ho3ChGCcBgspCXn4fV7sBk
      MdPZ3cWCqgqUmEhWehIWi0kzfzRuKSZeD6AoXDi5LgiCNgjWuOWYeCZYECaJV9HQuPnR5l80
      ZjWaADRmNZoANGY1mgA0ZjWaADRmNZoANGY1mgA0Zi2yoglAYxYTiomaADRmL52e8FgBSKJI
      JBwmHIkQDAaJxeNIkoQkTZ4iXENjpuELx/nz8W78kbGrHet6hkeHQsQiAQ7uO0BMUfAFQpgE
      GU9MID/JTkJGCTkZbm3zao2bhlBM4oXdrexuGkSvE7i76nxCY1FWqO/xj+4BDEYzFqMeUVYI
      R9W8/l7vIHUNLcRicSKRiLZ3r8ZNQVSU+f2+NhTga3eXs6NhAF/4/F5v3lAMXyg+ugfQ6Q1U
      zFtEMBhAFnSI8ThLzRYUWcbpdCHL2qJ5jZlPXJJ540gnff4oX1hXjMNkYPfpAXY1DXDvXDUp
      WetAkASr4eJoUAGr3Y51gkUvoZAmAI2ZjSQrvFfbS13XMF9cX0KCVc1Od/fcDF7Y3crKohTc
      NiMnu4apTJQ1L5DGrUVDr59tp/r57OpC0pznd8YsTnWQ5bbywel+onGJ5oEgFYZuTQAal0+X
      NzyuN+WykWLQV6f+fx2ISwpvn+jh9so0cpIuWLSlyBh0AnfPzWDX6UFO9fgRJYms4WOaADQu
      j+FInH/ddIofbGlkKHiFFdhzBjY+B0d/B+Klc1BdCQ29foaCMW4rTlYXcyky9NXCzu+Ar4Oi
      FDu5STZ+s7uVbEsce+CMJgCNy+PwGQ+pDjMZbgs/3d7EQGB0BQ7FJHY0DrCvZYgJ/YTeM8TS
      qon1nEI59CJKPMy1cirGJZl3TnRTU5aKy2JUBXbqz/DhjyDqhwO/RC+GuHtOOi0DQapMPQhW
      l5Yc92ZBkhV0uhuzTDUSl9jeOMD91ZnMzXbzx0Md/HhbE59fW0SS3cSJTh8bj/fgj8SRZIWK
      DCcuq/GiqyjE+xp5sT2NrsSlrGr5A4mtfexPeoinVlaQYLv4/AnwtKrb2iYVjjpc3+PHG4qz
      oigJQoNw+CUI9MGqvwZXJuz6Ppx4jYJ5H+Ob91VQ2vwCZC/WeoCbgUBE5PtbGnn9UCdd3jDS
      Zexcfy2p7R5GUWBOlguzQcfji3OozHTxvfcb+e57DfzxcCfry1P55v1zyEywcrBtnB3aJZFw
      fyvllfP5+PpFVDz2TcpcEqZDv6KurffyCjLUxPBbf8fw9h8SjkRGDsckmU0nelhXnopT8sH2
      /wkGC9R8A5JLwGiHxZ+GrkPoO/eyJFOPO9QGmQu1HuBmoC8Qpbk/iNWo5/ubT5OdYGFtWSpV
      WW4M+uvbJ8Qlha31/awpTcFqVBOjmfQ6Hl6QRYLNSFySWVWSisuiVqUN5Wm8dbSLFUXJI+cD
      +P1e4uFhlq2dgznRATgg8Ss8GvoffNiwE7H0KQz6S7THvg68m/+dF/orWDvcyO63d3PP6mUU
      pTio7/YzHImzvDAZWt4GWzIs+QzoTec/78yARf8FDvwKimrA7ABXptYD3Az0+iIUpdj53Joi
      vnZ3ORWZLv7P3jZ2NPZfMxt6IloHgwwGoyzOTxx13KjXcUdlOvfOzRyp/ACVmU4EAWq7hkeO
      yQocrm1A0ZkwOy/Y5cbiJmHpRykY2I7P5524EIFe5F0/YKOvEOfSp5kzfykVUgM/3d7ExuNd
      /OlYF+vL03AYJGjbA8UbRlf+c2TOh6J1sOdHkL0I9CZNADcDnd4wWQlW9DqBFIeJO+ek8xdr
      CnnnRA9tntB1u6+sKGyt72NpQdI4Nv34WIx6aspS2VLfR/xsAGXvcISDR49gT8kBvXn0BzLn
      k5eRgnRmz/gXDA3Bnv9Nk66A4+4a7l+Qj7loNRscZ/jC6lwOt3kJxSSWFiaBpwXECKRVjn8t
      QQcV98Oqv4L8VYC2HmDGoyiqAHISraOOl6Q5WVuWyu/3tRGKTb65YVySCccvfZ4kK6N6lB5f
      hKb+ACvPuRUvk4V5ifjCcZr7g8gKbKnrJV3swpJeom5ediEGM6a5D2NteQ854h/9XiwA+35K
      xJbBG9JKNszJIc1lhpQyBDFKkWGQ5+4q57m7ynCY9ND6AWQtBNMl0ncaLDDnEXCkq39e/L6i
      SLS1tiIiEAoEMGnJcW8oMUlmKBgjw20ZdVwnwO2VadT3DPNubQ8Pzc+acNO5cFzi9/vaaB0M
      8YWaYjIvupaiwKleP28e6cRtMZKdZCUnwcrBM14qM12kOi3jXncinBYDK4qS2VLfh8Ni4Fj7
      IH+VFkG4yHNzDiGjmrBgw962G8ruVg+KUTj0IugM7Eu4n5g3xOrSFFWIJgdkzIX2vdgWlmAz
      6SHig54TsOrLMAW5jukBFEmkpamBLTt20tnZxp/efY/3391EU0s3gUBAiwadZoJRkZgok2gb
      a9NajXo+ujSPPU3q7OZ4hOMSv9vXRr8/Slm6kx9vO03b4HmzSVYU9rcO8asPWqjOdlOW4cQT
      jLOptpfWwSAbKtLQXcE4e0VREq2DQX67t405SQKZVhGcmeOeqzdZ8Bfeg/foRogOgyzCyddh
      uJuhOZ/knYZhHl6QpVZ0UHuRvBXQfQTiZzcX6T0OFje486ZUzjE9gE5vIDUlFaMjgVgoqCXH
      vcEMBWOYDTrs5vEddtmJVu6vzuR3+9r4Qk0x6S7LyNam5yr/YDDG59cW47AYeL+ul5/saOIz
      qwrJT7ax7VQ/m+t6eea2fOZmuUcsFElWEGUF06U8M5cg2W6mOtvNW0e7+c4GC7rTZrAkTHi+
      I38BtXtfY2XLTnQ6A3Tsx7/0K/z+hJ+SVAeVma7RH0gsVG36wSZImwMtO6FgFegvcz7hLGOf
      qqBnzvzFYw9fkBxXY/ro8UVIspsmrIgCcFtxMu2eMP/+fiOZbgsL8xIoSnXwfm0vg8EYn1tT
      NDLRdGdlOlajnp/vbCYn0Uq/P8qzNcUUpNhHGQ56nTB6j+ApIghw79xM5mS6yIruB0fG+J6Z
      syS7HWzPvIO+bT8nIz2Dzuov8uLBEG6LgccX54wti9EKWYtUr481EYa7YenCKZdz3GZFa+Vn
      Dh3eMNkJ1jFjxwsx6nV8dGkud81J51SPn0PtHt462k1WgmVU5Qe1Yp/z6R84M8SXNpSOipq8
      liQ7TCQ7jLC3GZKLxg6AL8Cg05FTsYR3O45SlbGSV4/BiiIX98xNx2yYYOyZuwx2f18VVnKx
      6v+fItpE2AxGVtQIzJXFk/+wep1AqtNMqtPMypJk/BERk0E3ajLqHDpBYGlhEksKEiccOF8z
      ZBF8HarNPgkV2cm86LyHQ216PrEih4W5iZfuhdw5YDDD8f+Au/5ZNYmmiCaAGUxMlPCGYqS7
      puaF0QkC7kn89gLT1NNHA2ow2gQD4AtJsJn4wroSUhxmshOtk/ty9CbIXw1hH6SUXVHxNAHM
      YAJRkbikjOsBumkI9Kmt9CUGwOfQCbAgd/LzRlG8AXKWXNr3fwk0AcxgBoMxLEbdefffzYj3
      jBqHc4kB8FVhsl9x5QdtJnhG0+OLkOIwY7xCV+SNR4GhZki69AD4RnKzPtlZQYdncg/QjEYS
      wdeu+uxnKJoAZiiyAt2+MNkXxQDdVMQC6iD4MgbANwpNADOUqCjhC8VJm2IczoxiuOvsANh9
      o0syIZoAZihcI+RPAAAVzElEQVT+iIgoK5e/VHCmoUjQvFWNzjTMXC/WuAKIRSNEolEtOe4N
      ZCAQxWbSYzPdpI46bxv0N6huyhm84e7YcGhZZP+unXhiIgZFxBPVkuPeCLp9EVKdZgxXEY9z
      w1AkOPW2GqpgT7vRpbkkY8OhZQkRhWAohIKiJce9QXR6Qups6E1Y//G2qwmwSu6Yse7Pc4wN
      hzaYmL9gMVWyQiwWZanZqiXHnWYkWaHbF2Fu9swdPE6IIkPDO5CzdGTV1UxmHHtGICFp/OAr
      LTnu9BAVZYbD8esWpXld8XVA70lY9/yMb/1B8wLNSIbDcRTAbZ253pNxOdf6Zy8G58xv/UET
      wIxkKBTDZtLPsDXYCkS8EPaoyW0vHAsqMsSC0HMcuo9B6V1XFJp8I9BcOjOQAX+UJJsJ/Uwx
      IRQZOg/BwV8DgppUyp6mBrnJcXXQGxoCOQYlt6vHbxI0AcxA+vxRUp3mmWFCixGo3wjN22DB
      x9XAtvAQDHeCr1ON8izeAK5ssCWpkZk3SesPmgBmHIqiCqAqyzX5ydcSOQ4Dp9XKa3aoFTke
      hiO/g4gH1v4tJOQCgtrCp82Z3vJdJzQBzDAkRWEoGCXVMYkHSJGvbUvbeQg+/LHqupRi6vXj
      YXWxybK/APM0C3Ka0AQww4jGJcIxeYIYIAUiw9BxANp2Q9VjkF519TeNBeHkG2pC2bzlIMZU
      00eKgyMVdDdpPNJloAngKpFkhdP9AfKSbOMuQJ8qwZiEgoLTcmGlU8DfCy3boe1DNQ2IKwv2
      /xJqvn71g84zu9Sozdxlau5OvRnMzqu75k3CzTNamaEMBWP8859q+d3eNqLi1QcM+kIxzAY9
      FuMFP01oCLZ+C/w9sPxZWPd3sPhTaqTl/l+ocfeTEeyHoRbGpJMOe9S4napH1byZswxNAFdJ
      nz9KVoKVbl+EVw92ELtKEQwEYritRgy6C36aoWZ1UfmKv4TUCjX7mc4A1Y+r/x/9gzqIHQ9F
      Uf3zW/4JNv8PaNkBsnT+vdPvqx6ca2FK3YSMGwzX0ljH4WPHOXHsGKeaW+nr6WbQO37uydlO
      uydEebqTZ2uKaB0I8uaRzpG04FdCnz9C2sUu0N5aSKsYu7DcaIOln4X+eji9WR24Xogch8b3
      YN9P1fHC6q/CyT9C3VuqfR/oUQVR9agqpFnImG8tCDpkMUZ/Xz9IEY63dJNpM1JSvZKC7ATs
      E2yiPRtRgPbBEIUpdlIcZj63togfb2vCaOjmgXlZUw5lVlB7lMKUC56xFIfBRpj7+PgfsqfC
      ss/Bzu+qeTKTitTxgcWliqL/FNz2ZUgtAwRY8zfqxnGhAdXLk1E9Zr+t2cRYE0gQsDoTqSgr
      wWi0sqCqgrTs/LPJcS3TljbRG4qz6WQvJ7t803K/K0GUFHqGIyPrdtOcZj6/togPm4aovYJy
      y7LCQCBG6oVBcGGPmlgq4RJZj5NLYe3X1LW3g6fVTGk7/039bM3XIbWckUUpCfmw5mvqcsWO
      /VD54E01cXWtGbffy8pRH3Zubv7IselKjuuPiOxpHmT7qT6Meh2hmMRzd5VNOTvadBCMioTj
      0qgKm+m2cOecNDbX9TEnc2p7eMVEmVBUHJ0Iy9Oien0uta5WENTN4JJLAEW18cXIWY/OOC5M
      eyqseU4ViOPmCVu4HlxS+oIgjPy73oRiEtsb+vnXTfWc6PTxiRX5/N19lSzOT+T3+9qJxGfe
      kszBYBSTXneRyxIW5yfR74/SNjS1BiMUlxBlRd3n9hy9tWoLftk2uqCea3JcOlW4ya7m1pwR
      8RY3jhve98UkmUNtHr7z7il2Nw3y5OJcvryhhMpMdUvO++dlEoqJbKnvZZp3B52ULq+auOri
      1OVum5GF+Ylsb+ibUpl94bia0PZcFKgUU+3/ifa80rhqrtvQX1HUaf2JBoKKAs0DAf7zSBee
      UJx75mawKC8By0WTSQ6zgY8tz+dHW09TnOqgPEOdoImKMi0DQTo9YQqSbaS6zNhNhqvKaT9V
      2oZC5CaNXbYoAKuKU/je5gYGAtHLXtgyFIzhtBjOZ4ILDamztJey/zWuiusmgMFglDcOd/Hw
      wqwxcS0KcKzTy8sftrG+PJU1pak4LRMXJS/Jxr3Vmfx2XxvPrMjndF+A/a1DROIyLquBHY39
      xEWZRLuJgmQ7Ral2shKsJNiMWAz669LLS7JCpyfEHXPGX/iR4TZTnOpgT9MgDy/Iuqxr9g2r
      PcpIeT2taoTlLRqHMxO4bgJwW404LQZ+vqOZL9QUk2Q/P7A73Rfgt3vb+OjSXBblJU5aQQUB
      VpUk09QX4PtbGqnMcPHg/CxK09SN+2KijCcUp8MTork/yOa6XrzhOHqdQE6ijScW55Bsv7ar
      qyJxCV9EnHBwrhME1pWn8sLuVjZUpF1S4HDeBZruNJ9PItJ7Up34mqU++unguj1Zo17HIwuz
      eWV/O7/4oIVn1xbhthrp8IT49a4W7qvOZGFewmW3zka9jo+vyOOxeDZuq3HUxg4Wo55Mt55M
      t4WlBUlIskIoJjEQiPJebS8v7mnl2bXFV5RlOSrKROPSmH1yveE4ApBwiTz8hSl23DYTh9s9
      rC1NveR9FEVdCDOyEF6KqS7NBU9Pucwal891HQSbDTqeXKK2vr/a1UJLf5BfftDCqpIUVpek
      THl3EotRT6LNNOnn9DoBp8VAYYqdT6zIBwXeONyJOMVRdL8/yg+2NPLv7zcSuWiP3R5fBLfV
      OGbMciFGvY715ansaOifNE4oLsn4o+L5nio0CPEQuHOnVGaNqXHdvUAWo56nl+VhNer5x421
      VGS4uGtO+rQNVm0mPc/clk99zzA7GvrHxIKNh6JAXfcw39vcSLLdTCgu0dQ/OuCsfUjN2zPZ
      96jKchOXlAm3MT1HOCYRE+XzPc1QC9hTNPv/OjMtblCbSc8zK/L5yu2lPLIwe9rz3ac4zHzy
      tgLeOdEz6cxyXJLZXN/Lr3e1cs/cDJ65LZ81JSnsaBhAPtuDKAq0e8LkJdkmvbfNpGdNSQrv
      1/USlyZW33AkjkEvYDvXo4zY/zNpYfytx7TVRLvZwILcBMyGGzP1UJzq4LFF2fx2bxt9/uiE
      52071c+2U/08W1PEqpIUDDp1Q7nWweDI52KSzEAgSpb78lKXLytMYjAQpXlg4rBlTyiG3WTA
      ZNCBFIWhJs3/Pw2MWxsVRbng33QX6fogCLC0IImSdAeb63rH/V7+iMj2hn4+tjyP4lTHiDcm
      xWGiJM3B3pYhQG2t46JMsuPyPEsuq5HbipN5v7YXaYJxSP9wlGSHCZ1OOGv/h8GVcyVfVWMK
      jA2HluIcOfAhe/ftY/vWzWzbs5dTtcc509l/I8p3TdHrBO6oTOdou4+BwNhe4Ei7B5fFQGma
      Y9RxnSCwpiSFA61DBKMi/f6pZ26+rTiFdk94wvCIXr86YSaAGqhmcauL0zWuK2MEIMUjdHZ1
      0trRTjQe4dCxo3zwwYf09nnw+Xw3fXLc7AQrBSk2djcNcOE3iYoy2xv6WV+RNu4YpSjVgcWo
      p7Z7mE5PmHS3ZUqBbkl2E0vyE9lS34d80TNUFOj3R0g7N6fg7VBDmjX7/7ozpgnTm23MX7CI
      cFwmGgqRX1SOLEpkZWVjMt78gVN6ncDtlen8elcLNeVpI378+p5hREmhKmv8qEuTQceqkmR2
      NAzgsOgpSLZPKeu9AKwpTeW7752i2xsZtfWRKMv4wiIpdhOggK/tbGTnzf+8ZzrjLIjRk5tf
      NO7J0xEOPR0UJttJc1rY3zLEnXPSESWFrfV9rC5NueRk2YLcRDYe78HXG2d1yaUntsYjzWmm
      OtvN1lN9fHx5/sgkYCSuTra5bSZ1Z3V/DxStu7IvpzElbng06I3AoBe4ozKNnY0DBKMiZ4ZC
      9PmjLClIuuTn3FYj1dkues9uXjFVBAHWladxvNNHz3BkZCDuj8QRdGA36SEWUgPg7FMXmMbU
      mbVBJmXpTmwmPQfbPDT2Blicl4j7EmENoFbg9eVpxERl0nMnIivBwpxMF999r4H8JBtpLjNR
      Ucak12E26sHnUW3/Gbyx3K3ErBWAyaDj9so0Xv7wDHqdwNfvrrgsizsnycanVhVc8dZFOkHg
      ySW5rDjb6/QMR/CGYiNzDgR61AwQhptwb4CbkFkrAIC52W7MBj0laQ7SXJdX4QS46n27bCY9
      5RnOkbUNisL58a63XU1TImgeoOng5haALIIYVZf3XQFWo56/ubMMi1E/5cC8a8nIrRVFFUBG
      9Q0ry2xjZg+CFQWYYN5BkdT8Nu/+gzpzeoVkuC1XtxevIqupwqPDY7OuTRU5DsE+cGdf3XU0
      LpuZ2wPEQnDiVTVHZcUDFy3wVtQEsac3gyMNDv8fWPGFsYmjpoPQIGx6Xo3aTJ8DOcvUNCUW
      J1P248eCagiELeW6FFVjLDOzBwh7YM8P1aROLdvh2B9UU+ccQy1w+GVY8ilY+WXwd6m7kt+I
      WeqhFjVmZ+WX1Ip74jV495sw1Dr1a4WG1EzMsyQx7UzgOgpAGZuq7+L3Y0E1f82FFXe4E3Z8
      R60E6/8Oav6bmvrv0Itq6xgagn0/V/ehylqk5sxZ/CmofUuNoJxu+mohfS6klEP1k3DH/wNZ
      86Fp89QF6e9W1wBrHqBp4/qZQKFBOPk6VDw4Nn23okDvMTW9t96sZjRLLlLNiLq3IG8FzHlE
      rQgmh5rT8sMfqf/EKCTmQ9nd5zOapZSpfx/8jZoJbboWkYykLXzy/DG9GYpvhw/+Td1Uzpp4
      +dfztqn2/yzO1DbdjPOkFTwDffQPDNDV1cWg10coGCQciU3tymaXmrx15/+vZjc+N5hVZOjY
      B3t/rlbypX+hej38PdC0VbX35z4+uhW0JcPKv1Iznslxda+qC+19Qaf2CJYEOP6a6h2aDsJD
      EA2c3TroAtw56kxu1+HLv5Yig69dS4EyzYzpARRZ5MThQwTQI4hhmvuGyXdbySxeQEF2Imbz
      ZXbPehPM+4g6o/nBv6tZjNOroGUnnHxN3Y0ka6HqA0wtB+4AWQadjnEHjxY3rPqKWlGM4yxE
      MZhh0TOw7dvQUan2ItcbT+v4aQt1BiiqUQfpBWsunaHtHFJc7TVdl5dCRePaMO5O8UlpKfh7
      BhHQkeiy44+IlFivwC7VGaH8PrVl3vczSC5WB4crvnh2tdOFFV2YPPx3MtvYka72DodfVs0k
      Z+bUyzwVLpW2MGMenPgjeM+cjeychFhAHQ9pHqBpZWw0qM5ASXkVxeU6JEnEYDSComAwGIlG
      I1O/g6CD/FVqK1n/Z1j912oK7+tF1iLoq4NDL8Gqv7p+u56cS1sy78nx37e4IHMBtO6EpOLJ
      c3CGBtSymrRFMNPJuKMts8WKxWLGbrdjNpkwm83or2YhuyCodn7N317fyg9qL1L1qJpSvPG9
      STxRV0HYo7baE6YtEaBgNXQfhchlpEof7lLHOpdjLmlcM6bX3TBd3g2zU3WNNmyCgcapfVaM
      qoPR3hPq7iknXlM3kbtYSBPZ/xeSkKee03N08vt621UxaR6gaeXWfdpJRVD5ABz8tdpaXw6K
      rG4useVbcOS30LZH9U4dfEGd8LqQy0lbrjdCYc3Zfbkm2MPr3H19HZoH6AZw6wpAEKB4g+qS
      PPgbdRJtMrxnoP1DWPcNuPMfYe3X1Y3pyu+B46+odj+ct/8vJ21J5gIIDoCnbeJzxKg6wXe9
      B+0aY7h1BQCqK3bRJ9VAtROvXnp+QBbVzaLzV0NCgdqyC4JqkpTcqdrx7XvVc0fs/8tosS1u
      yF0OtW+cF9DFRP1qD2G79Io0jWvPrS0AUCfklj0LXUfH30nxHH21ag9QetdYj43ZqU7OnXxD
      rfyeVrAmqZ6eyRAEqLgPAr3qJtfjEegFo+WKw7o1rpxbXwCghmIsfxbq34KuQ4wJsRYjcOJ1
      KLt34lY4c4FqTtX/GXpOTG3bIksCzH9aHVAH+ka/F/GpISPp1ZoH6AYwOwQAkFICC5+B/b+G
      1g/USn+OjgPq3wWrJ/683gjVT8CZD6B529TTFmbMU13Bx185PyCO+mHvT1QzqepRtDQo08/s
      EQAC5CyFxf9FbcW3fEs1SYL9UPefMOfhyU0QV44a6CZGpp62XKdXN6seaoGOg2oM0b6fqb3I
      0s9q5s8NYuYuiLkeCDrIXQYZc9U9cmtfB3+fGomavfAyPn/Wns+oBmvC1O9vS1Ljow6/rC7k
      MZhh+V9qs783kAkFcD4FonDr7aRptKn++ewl6oSXO1cNY77cz6aWX/m9sxers8OhQVj+BW3x
      yw1GkCTplzqd7jMXHuztOkNrZx9hvw/F4iQrwYbFnUFqotpN22yT58XXuATn3KE3YgmnxijG
      hkNLcY4e2k/TYJTiDDfHG5pp1glUL63BpBNxubQdS64areLPGMaNBl22ch1F3mHCgQB5t1hy
      XA2NCxk7BhAEEpJSSEgaG5d+qyTH1dA4xyxyg2pojEUTgMasRhOAxqxGE4DGrEYTgMasRhOA
      xqxGE4DGrEYTgMasRhOAxqxGE4DGrGaccGgFz+AAMnqi0Qhmmx2r0YCgLdfTuAUZKwBFobez
      jeOn23BY9bRcaXJcDY2bgDEmkKIoCHo9NpvlguS4MvYrSY6roTHDGSccWk9BcTn5JZVI4jVI
      jquhMYMZd0mk2XI2/75m7mjc4mheII1ZjSYAjVmNJgCNWY0mAI1ZjSYAjVmNJgCNWY0mAI1Z
      jSYAjVmNJgCNWY0mAI1ZzdjcoIpMe2szobiMGIlgdLhItJnRWxxYTZPs5K6hcZMxbiyQoMg0
      NzWi1ymcaOkm02akpHolBdkJ2O3aRg4atw5jewBZoqurE3diCrFQgAVVFSgxkaz0JCwWE8It
      t1mAxmxmjAB0eiPLVtVw8X5VgiBoyXE1bjnGN4EEbWysMTvQarrGrEYTgMasRhOAxqxGE4DG
      rEYTgMasRhOAxqxGE4DGrEYTgMasRhOAxqxm3JlgWZaRJYloLIbRZEKv03FxaISGxq3AuNmh
      m2tPMBgI4/X0MRQVyE+yk5BRQk6GG4NhXM1oaNyUjGMCCdjtDqRYHAXwegepa2ghFosTiURQ
      FGXaC6mhcb0YtzlPyc7BmZLCsD/AErMFRZZxOl3Isjjd5dPQuK6MKwCjyYTRZMLhdI06Hgpp
      AtC4tdC8QBqzGk0AGrMaTQAasxpNABqzGk0AGrMaTQAasxpNABqzGk0AGrOaCQN7ZEkiHIlo
      wXAatzQTCqC/p40jx06MBMMlZpWRn5U4nWXT0LjuTGgCifHRwXCKrAXBadx6jPQA4XCYWCw2
      8obZ5iK/oITSinPBcBaCwSCiKBKPx6/6xrIsA6DTXd0wRJIkdDrdVecsVRQFWZbR668uA/a1
      +l4Aoihek/Dza/GMrlVZZtrvPvKNTCbT6C9os+FOTB51sqIo+P1+rFbrVd84Go0CYL7K3eiD
      wSBms/mqfxxRFIlGo9hstqu6zrX6XtfyWV/tM7qVf/f/CzXWfsjaxaOJAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Comparison 2b' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Comparison by Group' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Impressions by Adv' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO2dZ3xbx5W3z9yKDhAASbD3Tqr3YjUXWXGNu9M2
      cbx2sk7ZvEnsZDfrNO8mu4nt7Cb2JraTOMm6xSVSZFuWXNQlUiRFkWLvHSTR+8Ut836gTFIk
      wQoSkIznpw8icO9gAPwxc+bMOWcQxhhixFgoRKQ7EOPKhlrAPb29vXK5POxdiXElshAByeVy
      o9EY9q7EuBKJTWExFkVMQDEWRUxAMRZFTEAxFkVMQDEWRUxAMRbFdMt43v/me0c1BD9ktnKU
      /K7br/37m3938YSCIa+79Y4kbcQ8QBhjm5uf5DiPU9Ekgaa9nuMljLGMIZehb59YphMQLU80
      aPwOe9Dvlxt1breTZmUrVq3rqTl2+PD7N+3ewnHcsvcTAEDCMOwMThRQUJAaej16FZ1mlGkU
      FEIIACQJW1zBHkvA7RcMamZFpjoivZ0ejEEIAOcGzg0BB6hMoE1ZkhfyWuDtb4HPCiQLAIAQ
      YAxyHaz+HGRuB3LK944xBD3AuSDou9Q3vwP8dvBZwWcDnxWCHpCEiTeAEIQtX0PT7oXxPM8H
      A4ikAwFOpVT4vB6VRiPyAi9ipUJmsViix5EoStjqCvZaAgFeMulYTpCs7mCckk6Ll5EEau7z
      rs3VRrqPAACAMRz+VxioAYoFVgWsGhgVDJyH634MaRsBTT+ILvCFuk7C0f+Ard+ArO0Aoy1j
      wBgcvXD+zzB0EdZ+EfJvAFoOQS+Ya6HjKPRVApZArgdGCawaZFqQ60CuB4Ue5HpQGIBVAUF+
      3BoCAPAOQ8Vz0wtoZqJKQGNwvDRo52Q0Ea9lRic1XpAq25ybC+Mi3TUAABiogZNPwp1/AGLC
      lOoegv1fhdI7YOV9s2uo8vfQcRTK7obsHcCGGFYFDk4+BcONcOPPQJ00/TV+O1T8DjqPA6MC
      IQCJpZC9A1LXg0y3AB1fPQKaCsb4ZKN9W1EcCuPve4FdkeCle+CGfwdj3uSneD+8+ygoDLDr
      +0DSIVuwd8Pfvw7XPwEt70LXSdAkQ/GtkLwGSPrSeIAQuAbgyOOQvRM2PDhTU2OvG3CCMv4y
      Qc+fq1lAAHCywbalMI4IYWUvH01vQ9dJ2Psf0z8riXDm1zBQAzc/DbLpJlwswesPwKavQNoG
      AABJgJFmaNgP5rqJFwEiYPu3IXl1OCfE2VjIZuoVBEIo8uFOQgBO/xru/UvICwgStnwdmt+B
      Vz8Ld/0RFIbJFzQdBFUCpK7/+HoKEksgsWSpOjwfrnI/EEEgUYqohDCGyj9A8S3TyGIiCEHh
      p2D7t+GNB8DvuOwpvwPOPgs7HlvOcWXuXOUCYikUFKRI9sBnhcYDsO5Lc7o4ewds/Aq8+SBw
      7kuPYAzH/hM2/CMoomMpMIWrXEAMTXB85ASEMZx4EjY/AhQ711vyb4DVn4O3HoKgDwBgoBpc
      fVB0y9L1cZFc5QJiKSIYQQFZWsHaBgU3zu+u4lug+DbY/1UIuOCDH8O1P1zkQmlJucqNaJYm
      OCFCNpAkwkc/hV3fBzT/X+mKu0EIwO9vgJX3QlzWEnQubFzlAmJowukVZr8u7GAM1X8CXQYk
      r1pgC6s/B9o0yNgSnbbzGFe5gFiKiIwRba6FxgNw38sLbwEhyNkVvg4tFVe5DURPuwqTRHAN
      QN1f4eA/w3BT+F814IBD34ObngJKFv7Go4yregSytDHlL/Bxd4D5NMh1INeBJEF/JZjrgNVA
      xhYo/BS8/S2443nQJIftRSUR3n0MNv8TxGWGrc0o5uoVEMbwwQ/p1Z/j3XqszEUBOzh6QRKg
      YB/s/B4wykuXsRr421fgrhdBrgvPi1a/CMp4KNgXhtauBEIK6MT773FBcdAd+PTNuw/tP8jR
      KiWJN+7ea4pcQNn8aD0MKhPKux412nHBjSH3U9M2wMavwP6vwh0vAL3otzZ4ARoPwn0vRbnl
      G0ZCCghLYkN9c37ZCq/HrtTHa5QJg03nzpw+c82GlZEKKJsHQgBOPQ13/QkQQghh/HEcy7QU
      7AXvCLz9bbj56dk3sQEAS+C3Q285tH0AnAdYFTBKYFRAK6BhP9zx/CfB9Bkj5G78yGAfq9IO
      DA6nJiea+/vSs7P9Pr8vICQlGq6A3fjTvwaSho0PAcCZJvu6XC1NzbhcwBhOPgkBJ1z7w5Bu
      m1H7qfUI9FcBQUDaJsjYAsp4EIMQ9ELQA5wH9JlgWhH+txPFXI3hHO4heP2L8Lm3RjcQqtqc
      halKpWw2aw9L8N6/gN8Gmx+BxJLLZIQl6K+Gk0+C3AAlt0HquumDLj6RRLcR3XEUGvZD6jpI
      Wg36bKDY2W0LjOGjJ+Cab49tPzE0wfFYOeusggi44QnorYBT/w2cE9Z8AXKvA5KG4UY48Qsg
      SNjzOMQXhOFNXV1EsYAwhorfwZovgHsQKn4Htg5ACNI2wZZ/AlYT8q6B8xBwQvbOsQdYmuDm
      6EtEBKRvgvRN4OyFqhfh9K9BlQBYhO3fhqSVnxy7eF5EsYDcZhAFyL8BAGAtAAAEfdB4AP5y
      J2x8CEpun8ZYwRJ8+BPY94uJTy1kP1WbBrv/FYI+cHRDfGFMOjMQxZ7o+jeh9PbLHmEUsPJe
      +OwbMHgB/u9uGG6AUQMOS8C5oecsHHkcklaBPvuym+Y+Ak2CUUBCUUw9MxOtI5AkQst7cM+f
      p3mKVcO1PwJLMxz+AahNIPJg7wZaBoklkLQKCvdN+spZirBEMKLjaidaBTTSDJrkkIsdhCC+
      EO5/DXrLQZkA+swZQiYYCvGRDUq8qolKAWEMta9C2d2zXIYQpG+atTGaIngx8pH1VytRaQOJ
      PPSWQ9b2sDRGU4gXpFgx2iUiKgXUcxrS1s9pV2EOEAhhiILknquU6BMQxlD72uzz13wgEMQG
      oCUi+gTEucDRA4mlYWySQCBFNjvs6mWJjegLr8CFl0GXDvGFEF8IxlzQpM6SY9B8CApuDK/3
      ZdSOpqNywXCls8Qf6oq7ofg2cHTDSBP0V8KFl8HZB5oUyLoGMreBPnuyUDCGhr/Bp34R3l6w
      FMHxkoKN3uSYK5eQAmqtrxEIpsds3XPNpjMffaiOT5IxtDE1y6ieT7ALIoCWQXwBxBcA3AoA
      IAng6IXO43D0Z+DqA2M+ZO+CjK2gigcAcPUDIFCHL8AUACKeXnhVE1JA3V3dHZ1DK1eusFl7
      sTqurqUvYO1auQWhlPhFBZQRFOizQJ8Faz4PEg8jzdD+EdS+ArwfUteDzwqlt4d994ClI5Sb
      8QkgpICSU1IMicm9VncOqQqOXLz22h3DHQl+PmgwGCwWSxheGSEgGTCVgakMtnwNgh7oq4Te
      csjfG4bGL4elkCcghr3ZGHB1BpRNweoODtq50vRoKpZ4tRB9y/glgKEIPlIJzgsFY3ygpt/D
      RSKtdj58IgREk5Eu8jJPMMbPneh8qaL3Rwfqo9yDFV0Cahx0+YPhN1ZG/UAeTvju67URrjc1
      N/58trt92PPnBzYYVMyfznZH80ZeFAnI6ee/+UrN116utnnDnDZEEghj/GZV35EGc6/NF97G
      w85rlb3V3faf3FZKk8S3ris42Tpyrsse6U6FJIoE9OLprod2ZP/Dlsyv/KW6bdgT3sZFCR+4
      MPD/ri/4sGk4vC2HlwM1/Uebhn92xwqGIgCAoYh/v73sF4ebzc5ApLs2PdEioBE3d6bdevPK
      5G158U/cXvavf6s70ToSxvZrB+w7C+L3lphOtVmidkZ4r9584MLAL+5eKaPHneYJGtmjewu/
      /1Ydx0ejJyIqBIQxfv5Exxe2ZNIkAQC5CapnPrP2z2e6/y9M078gScfahu9cm2ZQsRjA6g0u
      vs2w4/Tzvz3W/tQ9qxTMZOfc2oy43YUJvzjcIkWf9KNCQP0Of+Og67rixLFH9Ermf+5b3Trs
      eeTl81Xd9kV+cMeaRwxymYwiEYJtucZTbeFwhIab8z32a/Lj1bLpo6Du35ju8AWjsOeRFxDG
      +LfHOh68JnvSoTssTT5+c/Eju3JfO9f74IuVR5uHBXEhS3EJ4z+d6b5vQ/rodtjOgviPmkei
      cBYr77BtzApZCphA6J71acdbYgKaQofFO+j0b82dxrWNECpK0vzsjrLHbyk52Wr5hz+ce6m8
      p8ns8s7HvXau05YaJ880KkYFlGlUDrsCviVwFiyS2j7HyrSZMqYLTOrmIXe0ST/CMTIY42eP
      tj+8I4cIvYGKEErXK/7lU8VWL/d+w9CfTnf32n00SWQZlavSdFtzjXEKOlT1Fozx7091feeG
      ApYifJwIAARCq9N11T327XnxS/Wu5o8nwBMEktMzBZyMzm4eTgg1zUWECAuoYdDlD4prM2av
      oo0QGFXsvRvS790AGGOnn++weKu67d945bxBydy0InlLrmGq+dkw6JLRRE680ubm7R5+9ME9
      hYl/vzAQVQI63+tYlaab9VCYgkR1s9m9LlO/PL2aC5EUkITxs0fbv7orZ76n6SCEdApmTTqz
      Jj3ugW1Z7cOeg7WDL5zszE1QbczW5yeoTVqZSkYRCL1wovOBbVkIIZoigh9vh5WmaP/rvWZe
      lEYXfdFAeYdtU86MZyEAAMDaDF11j/3KEFD9+YogYr2B4OYNa6rPnolLSGQYmdqQEKecc9H1
      2eix+kQJFyeFrpQwBwiE8hLV/3ydWhCl2n5nTa/jVJvV7ApwvKhXMpwglaZoYTS552MbnKGI
      TKOiZchdkhwtVVpqeh1f2Zkz62VlKbq3awcxjqJ865ACMuhUlRd7dRq1zdrjxURdeb3kHli3
      80YpXhOuCmWH6s2fWpEUrsO8KJJYkx63Jv3SbBgUpBF3QMaQo9YVQxK8gMc++j2FiR80DkeJ
      gHxBAQMo5nC2a5JOZvEEeVFiZq6XtYyE7IebQ1vXFQ06nRhkPnP/nuuuKS4utltHDAYDy4Zh
      EBIlfKrNsnSGCEMRKXEKw8fjJUEgCWOAS7PYhix9ZZctSja6a3odq1K1c/khEQiZtLIBp38Z
      ejVHQo5AeYVFAHDXLekAsO+OuwAgI2FnGF+4y+rVKxmtfJkWFAgBgZCEgUQAABo5rZJRA05/
      apxieTowA+Udto3ZsxtAo6xO153vcWQalLNfuixEbCQ8dNF8Y6lpOV8RIZjo0d6Rn3CsJZzb
      bQumuse+On2uRYbXpMed74mizfnICEiU8Jl267TOw6WDIpEwocrC9jzjidbIb6wGeFGUsIqd
      63I4J0HVMeKNnk2xyAiofcSToGGX2SE2qVRZklbm4wRXIMIxoxd6HSvmZgCNIqdJliKcPn5J
      ezV3IiOgdy8O3lga4lDqJWNSsUSEUKZR2W+PsEFa3jnTFti0FCdr6gdd832hAYf//cah+d41
      KxEQkCBJFZ22LXPwm4UXhpqcXpiklZtdERZQVbd9Lo74iazNiKvunrcZ9EHj0E8ONviCYR5x
      l1ZAGOOpRkbrkCdZJ1fOedYPFyxNBPnLOmPSyiIb6RcUJE4Q1bPWsL6ckmRt/YBrvtZbbZ9z
      W67xjer+ed01K0sroNer+t6rH5r0Vt+tG9y37PMXTFfv16SJsIBq+xxlKfMwgEYxqhhPgA/M
      J89EEKX6oUE2/r3fn7lQbb7oCXpESQzLAmJph4Eby5K++cp5EeN9pabRj0kQpapu+8NzcNuH
      HWZKvd8EDTvsjuS5HwswgAAAIZSmV/RYfQWmOaVKYoyrB9oF5NyVuRE80g8PvZeS2hYQAsWG
      4m+t/Ra5uANZl3YEUrHUr+5d/bfz/QdrB0f13mR2pxsUU7fNlwGaRJOKJerktCOiy5nKLtu6
      zIWc5702I656bt4gjHGFueJb7/3qzrJ121O3f3v3Vo2w7Zk9z/z+ht/rWN2TVU9KeFEZc0tu
      RCtZ6lf3rjpYO7C/ZgBj/E6E5i+4fD91FK2cdgb4SLmCeFHyBsWF+eJXpelqeh2zXoYxPtF/
      4oW6Fzbp71+boQcABUPdtCKprt+JEHqg7AGaoJ+98OxiPoHlWIUpGOrpe1Yfqje/Vtlb0+tY
      lxWZaASSQKKEJ7rgKJKgCLTAMuSL5mK/szRZs7C95AyDstfmmzlJEmN8pPvIK02v/HLnL0cc
      VH6iavTx60tM/3u0HWNMIOJra77m5JwvNry4AA25/Pxb1X3LtIyXM+TT96z6oGk4y6icOe5u
      6UAI0eTkJHk5TS5FLuxc+KBp+Jr8Be4lMxShkdNWz/QGHMa4x9Xz7IVn3+l85xc7fiGJMgLB
      mNs2TkHLGHJ0ACMR+d31322zt73e8vq8OtAx4rn7t2fsPn75bBEZTf7m/jWRzVHXKCiXT4jX
      MmOPxCkZuy8Yp2RmuGuJONNu/fru3AXfXpikeKb84KZclUlpMilNRrmRRGSzvfnDng/LB8sT
      FYm703d/uezLDMlU9NnyE8fNbYTQwztyfnm45X8/uwYhRBHU45sff+zEYzRJ35pz6xxHxP88
      1PzLu1aWpGiX1ZilSSKyQYA6JeXw8hMFNLqSz45XLXNPOi3eFJ18YZ+Gj/f9of4PR0e6DHhb
      fqqtwdpg9pktfktACOTF5e1J3/Ol0i+xJDsmhapu26QgxrwElUZGVfc4Rn2YNEk/se2Jp6qe
      eqPljSJD0c60nesS1zFkyB9VeYdVxuCOwPHnP/owpIBe/eMzmI13B4J333HdgTcO2HyigmVv
      uuuepCvlzNTp0CioQdtlw75JKzO7IuAKOlxvvr4kcdqfO8bYJ/jcQbfFb0lTp2mYcTsJY/x+
      z/t/qv/Tnfl3/vHWL3/9pZp7CzeMRsxhjDFgBGhqm3X9zttWp0x8BCH01V25j71R+8IX1qtk
      FADIKNljGx6TsNRgbTjae/S52ueMcuOd+XduMG2Y1KAk4SfevSDGv1Dq2/XdDd8NKSClLsE+
      bKdkGrfLRSBy8+7ruiuPHDz47qf37rgCzkwNgYIl/UEJYzz2oZi0ssaBee8rLRKM8dGWkec+
      t27ig/2e/kePP0oTNADIKbmaUdME7eAcXt7LkmyqOjVVnXrOfC5Tk/nrPb/WslqMQclSZmcg
      WScHGBXONHIM8KLDxydqJle2zDQovrQt6/tv1T11z6rRjDyEEInIsviysvgyCUs9rp6Xml56
      ru65+wvv35G2g0QkANgCtn9//32Tgf3pTU/Fy+MRQpd2G6Yi8LwgCBzHiaLIcZwkSYIg8LyA
      MR4ZGQl1V/RzutHG8eLYnw0Dzh/8rW6Z+zDk9H/pjxWSJI09wov8Px7+x4uWi6IkTnxckiRB
      ErxBb7O1+VDnoVZb68Rn/3Km69VzPTO/VovZ9Z2/1kz7lCRJv/mw9ZeHmyc0OfmCYe/wU1VP
      feHdL+xv2/9a02t37b9/03++4QnwY9eMz8GD3W37X32t23Zpc5GkKJIkGYYhCIJhGIQQSZIU
      Nb8FVLj85WFEJafc/vENxTgFY1/2VPn3G4euK7ps/nqu9rntKduL9cUEIiY+PjoqKGhFvj7/
      hswbcuNyJz67Lc94onWWXNXqHsdYnPgkEEIP7cgZcPgP1g6EuiBeEf+N1d/41a5fDXmHrAHr
      Rvn3vrFj3cR9zHEBjQwPeSTQzHNjb2b2t+//ydmfePgw12pZDDol5fSOC0iroB3+ZfUlYozf
      bxzeUzReCKBqqKrJ1nRf4X3z9Qml6xU2b3DmMnjne+yrQwgIAEgC/eiWklfP9db2hXRLIoS0
      rPbBFQ/ekf3F8nb3netSJz47LiCVjKw4dXTAEU6L8rbc2zaYNnz9g683WhvD2Oxi0Cpop2/8
      E5dRhChhYRmj690BgRPEePWlaH8n53y66ukfbP7BAvakEEKr0rQzuKRFCffafJmGmeK+lSz1
      8ztX/ORgw9CMiwmM8a8+aHlkdy5FXLZynPAHo7x259ZwJdlcah0Re7P2/mjrj/77/H+/3PSy
      iCOfka6UkV5ufGJFCCkYcjlT5Y+2jOwsSBj9P8b4ifInHlr5kEG+wOioXQUJH4UumTXi5jRy
      mp3Nc5uik3/vxqJvvVpjCz2bn+91mJ3c9rzJUcjjAuIDflqXZNKE36WWpk57etfTFr/leye+
      N+AZiKxVNJonNnHIUcloz3IFtmKMj9Sbr/+4kM1bbW8lKBK2Jm+ddgE1F0pTtE2DrlB1Sy72
      O0fzKmdldbruq7tyv/KXqi6Ld2qf36s3/9eh5h/fWjJ1fBm3eBqbWpvb2krWbtYvQcYIS7KP
      rHrk7ODZn1X8LCAGSg2lm5I2lRhLlHQE0lNUMtIbEHXKSz8ek4Y1uwIpccvh3+IEyewKpOsV
      AFBvqT/YcfDZa59dzKgvo0mTVt5l9eUmTOMLrey27yqY024JQmhLjtGoYr7zeu339hWO2d2S
      hH97vKN+wPm7z6+dNoZ9XEA0IxbmFdq8fNrSfJQIoc3JmzclbfLy3ovWi6cHTj9f9zxDMjm6
      nIK4gty43BRVyvLoSaukHV5Bp7z0cYyFlVn9Vr/gT1YlE6FPYB1DwtKwb1jLauXUPD6uM+3W
      LTlGADjSfeTlppd/uvWnLLnYLM2dBfFHm4enCghj3Gx2P7wje9q7poIQFJg0/3Pf6m//9cJn
      NqXfWJrkD4qPH6hPULNP37OKCuE0H69U7/N6EEHJZOysP4hwVaqXsOTgHJ3OzhZ7S6u9dcAz
      IGJxvWn9vqx9KaqUUN2QsNTr7q0cqjw3eG7AO0ARFAEEQRAkIgkgSIKUU3INq9EyWg2rWZOw
      psRYMmmCcHj47hH/yqxLOfnvXhw80VVPxR0f9A7qWJ0tYEtUJK5KWLUyfmWyKlmURE7kRv95
      gp5ud3ebo63H1ePlvQzJcAL38MqH15vWT+2t2Rn4xivnv7Alc2+JiSAuOYu//9bF+zaknrG+
      1uHs+LfN/xaWH8yIm/vem3XPfX7tpD64AvzXXjr/xy9O07eZ8QSEx96sLTSpz3XZb12VfPvq
      kN8FTBRQ84VznSPuDZu36WfbWVyiow4wxl7ee2bwzDsd74hY3Je1b3vqdgWl8At+q9/a5+nr
      cnU125p73D2JisS1iWs3mDYkq5IRQhKWRv+JkihgISAEXJzLGXQ6Oeerza9+sfSLm5M3T9QQ
      L0rnWp2bC3QOzvFO5zsH6mtF98of3ryiSF9EEmRQDA56B2uGay6MXDB7zQzJMCTDkixLskpa
      ma5Oz43LTVenqxk1SZBmr/k3538DAI+sfsSkHM+T9HLCw3+p+vK2rBOtlh6b79s3FOQnqgVR
      uuWZj8pWHsnSZj5Y9uAiQwEnfm4PvFj5X3euMKguG8yqu+1v1w3+4KbiBbQZFKRnjrZtyzXO
      WglkXEADLTX/+/LfH/r6d1LiZjnQaanPysAYD3oH3+l85/TAaQSIIiij3JiqSs3QZuTqcjM0
      GXMf9h0Bx6MnHv188ee3JG+Z+DM61WgPKutebPj9LTm3FKq3PHfM/NQ9qxbc2wpzxXO1z12T
      es1NOTcFhIDN73jmiItjq4ozAga5od+K9leItxVvKk5hfvzhaz+7fd11GdeFd7X722PtaXrF
      vrLxSD2M4ckjzUVJmokPLgXjAupqrmtobsnfdGNuwizp4st22Aov8aIkTtxYXgBOzvno8Uc/
      U/SZbSnbRtvhRO5QXWu978hX1vxDnCzOFeC/+UrN7/9h/WK6ygncX1v+emrglIbRnrqo3ZG2
      dVuplyEZBMgVdDk599BQ8sEq6Ue3FuzKT1/MC01L06DrD6e7fn7HitE/McZ/vzDwdt3gk3ev
      Wursl/HWR2z2IfNAthh5V80YNEGPbi4uBi2r/fk1P/9l5S8tfsstubdUmave7Xw3S7b5M3kP
      x8nkAKBiqQAvCpI0yUU2L1iK/WzxZ+8v+swfTnXpsgLfvaFwUs1QKIGvbRNZekmiWXITVAMO
      v5cTlCzFC9IfT3f1O/zLoB6Y6AfSq5ghi5Mgr8JzIbWs9vHNj3c4O7783pcPtB/45tpv3lqw
      a6ziHYGQnCFHKyguBozxX85299l9j+6doh4AAJB/XKwo7IzWRjrXZeN48V/+VocQ/NvNxcuT
      eTf+GgLBpifFix+7pJw2CyZpnz+QlJgwPDSoUCgJiqZodla3ZnRCEuQ313yzzlJXFl9GIlKg
      JG9AxB/HdahYysMJmoXWmnEH+PIO27v1Zo4Xn7x71RKpZGZ2FcS/XNH7t5qBtelxn92UHl4b
      awbGBcSQlMDhsVH86JGDBGMIYrRr1+ozZ8r7ht0scNfeeqdJKxejaZqbOyRBrkq4ZCmPejVE
      CVMkAoBEjWzIdSmwZu74gsKJFsvhBrPZxa3PjPvytqz8RPW0Y88yUJSsqey2P7Qj+661qcum
      HpgoIJfT5iHZhI83+XLzS9tbO9w8CviDAbdrx/U3dFcfP3Om/LYbdkRbhMbCULCkl5O0CgI+
      9iW6fMKQk5MkECUsSViUsIIlc5MUoeIGf3KwMU5BP7QjJydeFSndjMFS5Jtf3aKRUcupHpgo
      IINeT4mNroAQp6ABoGT1upLVl0Lm7v18FgCUZd0z+qfPF+0nJs0FnZJyenmtggIAk1ZW3+9W
      k2xGgoKhEEEgEiGCgIZejymOVcunMSY6LF6rh3vi9tKITFjTsmzl3iYybkQLkmRK0Le0ti9/
      JyKCVkE7vAIAYIxJIAYd/vV5ujSjLFHHxmsYvZrWKemCFGXLgHfqiIsxfu54x4Pbs6NHPZFi
      XECSIDgDYllBBLLWI4JKTnoDgiTh+h6PJAIm8NQ1tl5FiyJ2+Sbv1bePeG2+4MKykq8yxj8y
      v89js9n56ChcugzQJBIkXNHqlDHElny9yz9NkjxCKC9Z2TLgmzgIYYyfO9Hx4PbsZbY2opPx
      2Z1HzIqSouUv2xMpEEJGDaNVUElxLMbg5URJwsQUW1inpADA4RXiVJcsjPYRr8MXXDfPqlBX
      K+NyWbVucwT7ERGKUi+FQCAELE34eXHq7wchlJ+saO73rs/TIoTGrJ/Y8DNKtBQ8jzgKhvKG
      KP+mUVAkiWweHkaHH39wvkXprmJiArqEUcVYPdNHBCOE8pOVrQM+jPHvYsPP5cQEdImZ6yWq
      ZCRLE2fb7Bcp8+AAABJpSURBVC4/Hxt+JhIT0CVmrZdo1NL/8W7jF7dmRtFROVHAJ2XNNSsm
      ray8wzbtU+4A/6cz3cdbRu7fmM75UV2XOytRrpKRsYkMYgIaY3Q/ddKD/qD46rmet+sG716X
      9pcvb6RJAmM84go29HowhswEeYKO+YQ7o2MCuoROTjsu9yW2j3i++3rtzSuS//zARtnHQSwI
      oQQtm6BlvQGhZcBn8/BFqcpP8lAUE9Al1DLa7efHIoTsvuD336z72afL8hKnL6WrlFErs9QV
      LU67h9erI1DgLEqIGdGXYCiC+LjgZlCQHnuj9qs7c0OpZxQCoRWZ6os9noUdaH91EHIEsg40
      nTvXb+M9t9+06/D+twWlXkXwK7fuMV3JFcpmZjRJnqWInx9q2pxt3DGHnE4FS2Ylyht6vWUZ
      qk/mRBZyBKqsrKitrE81Gr0emzYpVSbX9vf1n6+uslqtV26FspnRyRmHL/hyRS8vSp/fkjHH
      u1INMk6QRlzLXWQoSkChwwsFx4ijrW8gNyuju72loLTM6/a4fHxWetKypfUsM08daZEwbhhw
      PfPZNex8SmlxvFTe4thUoIues3CXjRkEFJKrVUD/V979/InO1x/ePCnFcy4M2rlBW2B1tnaG
      eUwQJZKYpgjmFU1MQOMMuwMcL6XpF3IML8a4ptOdqGOS9dPn9WKMTzc5cpMUibownHkdPXzi
      htwZSFDLFqYeAEAIlaSp2gd9oU4zdftFjpf6rZExH3kpWO04U+k4hSHMAYMxAYUNmkIGDWO2
      TyMRjHG72bciU+0OCMt8WL2EpWZ33TtDr8tJpYt3dPvawtt+TEBhAyGUlSjvHPJPtQqCAvYE
      BIOaNqqZZVuvYYx7/Z1vD/3VI3puTLyjSL1iq35PrbPKxc9+zM/ciXmiw4mMJpQy0uK67DQF
      AOge9mcmyBFCKQa2w+yf1gySsNTkqXULLp/g8Us+CYs+0bs34dMaeq5Hyk8EY3zK9oGEpd3G
      fQryko+KJWVb9LtO2T7Ym/DpcNnyMQGFE4RQjklR3+OZKCBRwoN2bltxHABoFZTbL0wbfN3k
      rrXxllxloYJUyUkFgchef2eTp25D3PYF9KTRc4FAxFb9nklCMTAJWYr8Tl9rtjJ/Ac1OJTaF
      hRmVjCRJ5PCO78sO2rhEHTN2nEC8ZppZzCu4W72Nm+J2mmSpGlpHEwyJyHR51mCgj5fmfabi
      UGCgy9e2Qbd96jCDEMpVFta7q538vM99npbYCBRmEEK5JkX7oG9trhYAMMbdI/61OZqxC1IM
      bPvlsxgGfNZ+bH3cNoq47OsgEJmhyO7yteap5lFlzCd6y+3Hdsd/igpRGYci6C363Set79+Q
      cBsG8Agup2C381YXbw9KQRELGLCEJb/kK1GvKlStmHmyiwko/OiUVFDE3oCglFF2ryBnCBkz
      7tfWTJnFenwdNKKT2NSpTeUrS49a381VFqI51P0EABGLJ6xH1uq2qijNDJfp6fhcZeF+88sy
      Qq6i1Fpar6eNWYpchpCRiERAEIAkkCrsJ07bPtyk30GikDqJCSj8IIRyTPJ2s78sQ9Vh9uUm
      KSY9G69lRlzB0UGIl4LnnWdDWbUKSiknFNbgiJFNnPrsJDDG1Y7TSWxqsixt1h7mq0pzVEUk
      zBRXuVW/p9Fz4fDw/h3GvQpy+nqgMRtoSTBqGJdPcHiFoCCN1m+YSLKe7bcGRlf7VY7TJerV
      MjJkjEORemWj58JcNgw6fS0ewV2qWTOXFRZCiEKzlPJACBWpVq7SbjgyvH+EM489jrHEiQGf
      6IXYCLREEAhlJsrLWxwrMtVTvyStgnL7RYzBGhxy8PaNcTtmaCqRTa50nOSkQCiRYYxHgkP1
      7uqgFNxp2DuXItdzByGUJEvbHX/TMcshlpCJWBSxIIFII8YrutfptsX2wpYKScI1ne5V2epp
      g6Ybej1xKrKKO7DdcL2WniVPqNFdK2C+TLN20uMiFvv8XY3uCywpK1GvjmdMS7dTK0i8X/LR
      iKUQRSISIcSJgePWwyEFdLHqrNsX7Hd4b75hx4fvvEtq45Ukzl25IVErjwlo8Ti9/ImuZlOy
      c61uy6zfelDi3ht+61OJdxHokjE+6mW+4KpIYJKK1CvVlDYim/wSlkJOYaakpJOvv7Ni1SqX
      c0iRkGx1BHt6GzlKSRVkXa0BZcuJRkEhQVWgypjLF88QrIFJGAj0pcozACAg+iscJyQs7jHe
      pKCW+7jgiRCICCkgp8t14637uvuHKEorE3uu3bnOOZLhDmKDwWCxzHJKXoxZ8YteN9Xl9SSp
      55bmWqhaUe08kyJL7/F3XHBWlGnWZSpyoyG0KGYDRYZaZ6XEM57htC1FurlklmGM3xt+iyYY
      ClEb4q6RkwsMOwk7sVVYBMAYd/lab0y8ozPId5h9Oabp63hOBCG0WrspIPnT5dFV2iHmB4oA
      dt6iprQUonNNCrM96J1bjfNEWXKGIieq1AMxAUWEVk9DnqoYIUQQqDRDVdflvnIrJ8cEtNxI
      WBrk+pJll45c0SlprZLuHpkmDO2KICag5WYw0GtiUyb6iwtSlD0jgUDwikxvjQloWcEYt3ob
      JoVnkAQqSVfVdV+RE1lMQMuKgHkX79DTk5OmDWpGxpD9Vu6Kk1BMQMtKl689I4QDsChN2THk
      mxjKeEUQE9DygTFu9zbmKgunfZYmiXW52rpu99TC+NFMTEDLh1/0YsBKKmTJGAVLrsnW1HS6
      vIEr5kCtmICWCYxxo6c2J8TwM4ZKTq3MUle1O/3BK0NDMQGFxCd6Kx2nWjz1Q4EBv+gTsbjg
      VVJQ4k7a3ncLzmzF7Mk0WgVdmq6qbHNy/BWwsI+uzVQJSwiion6Fg7cdtxwuUJeKWHTydpdg
      D0pBAohMRW6uqogh2IkH0c8AxniIGyi3HyvVrM1W5M/9rQ07udYB36YCXcSPspuZkALqammg
      1fr+fvO6tStqqyoNCQk0K5er47QKZikEhDG2BkdOWA9TBKUgVSpKo6F0GkobzyYxxAIrEI6e
      Oxgqu2WGngxzA2ftx68xXB/HGCY+xUmBNk9Tu7fRyJqK1Su1VNzMghCxUO04a+NHtumvncH0
      CUXroJdAKMcULRvv0xJSQA7r0IE3DmbmFxSXpNY19bZ1DiPf0MY9NyXrlYFAICUlJYydkLB0
      0VXdG+jcpr9WTWm9oscjuNyCw87bzIH+bYY9BiZhXg2KWOz0tTS4L2As7U34NEtOX3JlKhjj
      Ll9bvfv8LuM+ZYhYLQlLA4GeBvcFAFymWWtipzmjdHTgqXCcyFEUFKtXLWxMFSV8qtEe5XWr
      QgrovQOvaw1JXcP2XVtXVxw9Ubz92t6L1UFGdf2OLWEcgTBgr+A5aT0Sz5pWaTeSaHJdMBfv
      OG59L09Vkq8smcvXIGKh1dPY7KlLkWeUqteMBM0XXdXXxd8yl3EIY1zvPj8Y6N1h3MsQs1fx
      cfL2Gmd5QPKv0W42Momj3cMYuwVXpeMkAKzXbVPT2lnbmYGeEb+XEwtToreScCRtIIylDl/L
      RVf1pridibLkUJcJknDWflTE4hb9bjq0DjDGbd7Gevf5TEVesXrlmAJaPQ09/o5dxhuJKeqc
      iISlc/YTPOY363dN1fEM2IOWKucZAFir3ayk1BecFUPcwDrdNpMsDIO0hPGpRvv6XO3E1MSo
      IgICwhi7BEebt7HP35XAJq3VbZn1544xbvc11btqrjFcr6P1U3+OvMSftn1AImpj3DX0FJup
      1lnpEhxTKw2MIUj8cethPWNcqdmwgN86xtgSHKpynPGK7hWadbnKojAOGGY7N+zkyjKmSQ+K
      BpZcQGPtBzHnFdxmrr/D28ISbK6yOF2RNUPO7FQcvO209UMlpV6t3TgxD8HB245ZDpVq1mQr
      CkId0V3hOEEhao1289QLAqLvQ8s7ecriRX7xo+807F8zxvhMs2NFhlo13eHREWdpBdTubWp0
      10pYxAAMwShJtZFNzFbkz5CIOTMYYzPXd95ZriBVa7SbNLSuzdtY7zq/w7hXR+tnvvG49bCW
      1hWqylhSPrYId/L2o5ZD6+O2jgXoRCFWd7BzyL82RxOFg9DSCkiQBISAgPGDJub7WtOCMR7i
      +s87ywOSX0/Hb9XvnouNLGKxzlVpDgxwkl9GyA1MgpJSN3su7jBcr2MMc/TrRASMcWWbMzdJ
      OXZua/QQXY7EeYEx9oguFTm/3+Xo+w1Ifmtw2MZbchSFoZbrUYXLJzT0ejbmRyaBcAauYAF9
      osAYX+h0a5XUaKm8SHdnnJiArhgEETf1ezx+sSxDpZTNYlBzvNQ55BMlUMlIpYxUsKSMIZbi
      aLOYgK4kMMYOr3Cxx52sl2UlyqcVhNsvtJt9Hr+YZpTJWcLHSd6A6OPEQFCkKaI0XRXe1VxM
      QFceooTbBn0WVzAvWUmRCAAAYwAICrh7xA8A2SaFUU1PmulGxdfQ6zFqmPzk2VMZ50hMQFck
      GGO3X+yx+DEeXz2SBEoxyNTymYqOSRLuGvYPO4OlGSrVbPPgXIgJ6BPH6FBU3+uJ1zC5SYpF
      hotE7zZvjCUCIRSnorcU6GgSnW6yDzu4xaQTxUagTzT+oNjY65EwFKepFOxC9mtDjkAi7w9w
      XFtHF8a4q6PNZh1xutw+7kpKGIgxK3KGXJ2tyYiXV7U7282+BYwmIc2o5vJ3O3yJiPfGacmG
      5paufjstund+6g6TVsbzV1juUowZGC07rFfHNfd7q9pdK7PUNDlXw6bXEgh5aWpmbrxebXV7
      grzks1p2Xn9tmimh9sIFhmFIMkpjU2IsGJJARalKUxxb3uycS1IRxrhr2DdgC8RsoBjjYIyd
      XqG2212cpjJqpg9FF0U86OB6RvwKhizLVMcEFGMygaB4vsNlimOT9TICAUEghAAB+INS94jf
      4grGa5iMeLmMIRBCMQHFmAZRwk19Ho9flDCWMEgYYww0RWTEyxJ17ETXUTQGucWIOCSBStIv
      y0MKFW8ZE1CMORFqeyTmiY6xKGICirEoYgKKsShiAoqxKGICirEoYgKKsShiAoqxKGICirEo
      ZhKQGPCcrqgSJamq/HRnR3tf/4DDGztqLsZlzOSJ7mhslnwBm7XbzeOa07XYM7h+1z5dQeZy
      9S3GFcBMI1CiyTjgdGJgveb+3dddU1hQaBkeWraexbgimPduvNVq5XmeokIOXcFgECFE04st
      A+D1epXK6Q+7X4bbRwkGgwDAMAss0hjGnoSlnbD0ZFIj895MNRgMM18QCAQQQiw7e4m4mWEY
      RqPRROr2UTiOwxjLZHMtsbh0PQlLO2HpyaRGwrkK83qcAV6UyWSj6nFabQuold1cX1NZ0wAA
      wUAQADCWbDbb3G+3WCwi7x+xOkffJMZ4XreP4XM7vQGeZdlR9bjt1vkWbR4ZsYhBn8XuGvu4
      3VZbcAFd4f1WdwAARtvxu5x+fv6pDZJgc7g1GrXFMsIHBY9vIR2xjljwx90AAEnk7A4P+cMf
      /nABbU0FY6mjvfHYsRMV5eU19c3ZBUWn3j6cVlY035ns6ImjCUbt88/8tqG11yeKKQbVsdPV
      +XnZc7z97b+93G0ZOnukoryucaCvJScj44NjpwsL8ub7dmrOne7u6z179mzFhbqU9Kya4+8b
      corl84kFP/zWS6395srys2er6nirmYzPrDt0WF9WNN/SWpKr/7d/PcnC0OH9RxQpuf3VZyV9
      sk4xv1lV4j1vvPyyi6d6utsVrNzskRLi5lc9GGPxg7+/1tHmNPPOlupyuzfIIsfFi56wjUBi
      wFnb2MWwcq1SWVSUJ0lQUFy4gOD7vOKVRXnZK9duyM9NZWiaVely0kPW35xK/qr1gjegUVKJ
      8YbU9AxGrsrPnn/pMYn38xBw2a0un9qQmKBT5RUW0fP8qPJWrAOBVzGkKSmpz+FJ1tC5xfP+
      OQHARyfP5iUpzRZ3UVERYCkjL19Bz/tzPXv6dFJGel/fgN5g0Orj1fJ5d8Rn6ZcnFYBg6eoc
      wFhwON3GpPQEvXIhIa2fELAQdAYEnWqxdb4xloZHLIkJ8yt1HbVgjJsuXsgoKFMwJCwsMzVG
      tCMGjhw5lpCRU5qfZTYPJCWlIIR4v7NvxJeVnmSx2fS6OIn3nD5ZEWSUOpLTJGUKHOe1DvKS
      WLJhj24+a4aYgK5GeOep6j7B2Xz8WCWbmEg5HetuvIdytJ7vc6cppDa3ZOsd/s43PtPZ5xED
      Vk4geI8fsXRBlvHE8Q/X3/Rwxnxqo8dioq9GCNbv6DOYcrbtVNMqNSVxpmQjnaQuLBH77F6l
      zSllZCDAtedOJOaU6GlfYlExKwV6+3pU8nl7vP4/Q0d6Ddv5xwMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Budget and Impressions' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
